   1               		.file	"pc_comm.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.section	.text.pc_comm_putchar,"ax",@progbits
  14               	pc_comm_putchar:
  15               	.LFB66:
  16               		.file 1 "../src/pc_comm.c"
   1:../src/pc_comm.c **** #include "pc_comm.h"
   2:../src/pc_comm.c **** 
   3:../src/pc_comm.c **** static char serial_in_buffer[SRL_BUFFER_SIZE];
   4:../src/pc_comm.c **** static uint8_t escaped;
   5:../src/pc_comm.c **** static uint8_t escaped_arrow;
   6:../src/pc_comm.c **** static uint16_t serial_in_index; //Points to where the next character we get will be added to the b
   7:../src/pc_comm.c **** 
   8:../src/pc_comm.c **** static void handle_serial_input(void);
   9:../src/pc_comm.c **** static int pc_comm_putchar(char c, FILE *stream);
  10:../src/pc_comm.c **** static void handle_up_arrow(void);
  11:../src/pc_comm.c **** static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);
  12:../src/pc_comm.c **** 
  13:../src/pc_comm.c **** void pc_comm_init(){
  14:../src/pc_comm.c **** 	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
  15:../src/pc_comm.c **** 	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
  16:../src/pc_comm.c **** 
  17:../src/pc_comm.c **** 	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
  18:../src/pc_comm.c **** 
  19:../src/pc_comm.c **** 	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
  20:../src/pc_comm.c **** 	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
  21:../src/pc_comm.c **** 
  22:../src/pc_comm.c **** 	PC_USART.CTRLB |= USART_RXEN_bm;
  23:../src/pc_comm.c **** 	PC_USART.CTRLB |= USART_TXEN_bm;
  24:../src/pc_comm.c **** 
  25:../src/pc_comm.c **** 	stdout = &mystdout;
  26:../src/pc_comm.c **** 	serial_in_index = 0;
  27:../src/pc_comm.c **** 	
  28:../src/pc_comm.c **** 	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
  29:../src/pc_comm.c **** 	printf("\n");
  30:../src/pc_comm.c **** }
  31:../src/pc_comm.c **** 
  32:../src/pc_comm.c **** ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
  33:../src/pc_comm.c **** 
  34:../src/pc_comm.c **** static void handle_serial_input(void){
  35:../src/pc_comm.c **** 	char data = PC_USART.DATA;
  36:../src/pc_comm.c **** 	if(escaped_arrow==1){
  37:../src/pc_comm.c **** 		if(data == 65){
  38:../src/pc_comm.c **** 			handle_up_arrow();
  39:../src/pc_comm.c **** 		}
  40:../src/pc_comm.c **** 		escaped_arrow=0;
  41:../src/pc_comm.c **** 	}else if(escaped){
  42:../src/pc_comm.c **** 		if(data == 91){
  43:../src/pc_comm.c **** 			escaped_arrow=1;	
  44:../src/pc_comm.c **** 		}
  45:../src/pc_comm.c **** 		escaped=0;
  46:../src/pc_comm.c **** 	}else if(data == '\r' || data == '\n'){ //We got the newline character.
  47:../src/pc_comm.c **** 		printf("\r\n");
  48:../src/pc_comm.c **** 		serial_in_buffer[serial_in_index]='\0';
  49:../src/pc_comm.c **** 		handle_serial_command(serial_in_buffer,serial_in_index);
  50:../src/pc_comm.c **** 		serial_in_index = 0;
  51:../src/pc_comm.c **** 	}else if(data == '\b'){ //We got the backspace character.
  52:../src/pc_comm.c **** 		if(serial_in_index > 0) serial_in_index--;
  53:../src/pc_comm.c **** 		printf("\b \b");
  54:../src/pc_comm.c **** 	}else if(data == 27){ //escape pressed.
  55:../src/pc_comm.c **** 		escaped = 1;
  56:../src/pc_comm.c **** 	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
  57:../src/pc_comm.c **** 		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFE
  58:../src/pc_comm.c **** 		serial_in_index = 0;
  59:../src/pc_comm.c **** 	}else{ //Everything is fine. Add the character to the buffer.
  60:../src/pc_comm.c **** 		serial_in_buffer[serial_in_index] = data;
  61:../src/pc_comm.c **** 		//printf("Got char '%c'\r\n",data);
  62:../src/pc_comm.c **** 		serial_in_index++;
  63:../src/pc_comm.c **** 		putchar(data);
  64:../src/pc_comm.c **** 	}
  65:../src/pc_comm.c **** }
  66:../src/pc_comm.c **** 
  67:../src/pc_comm.c **** static void handle_up_arrow(void){
  68:../src/pc_comm.c **** 	uint8_t temp_index = serial_in_index;
  69:../src/pc_comm.c **** 			
  70:../src/pc_comm.c **** 	while(serial_in_buffer[temp_index] != '\0'){
  71:../src/pc_comm.c **** 		putchar(serial_in_buffer[temp_index]);
  72:../src/pc_comm.c **** 		temp_index++;
  73:../src/pc_comm.c **** 	}
  74:../src/pc_comm.c **** 				
  75:../src/pc_comm.c **** 	serial_in_index = temp_index;
  76:../src/pc_comm.c **** }
  77:../src/pc_comm.c **** 
  78:../src/pc_comm.c **** static int pc_comm_putchar(char c, FILE *stream __attribute__ ((unused))){
  17               		.loc 1 78 0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	.LVL0:
  24               	.L2:
  79:../src/pc_comm.c **** 	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
  25               		.loc 1 79 0 discriminator 1
  26 0000 9091 B109 		lds r25,2481
  27 0004 95FF      		sbrs r25,5
  28 0006 00C0      		rjmp .L2
  80:../src/pc_comm.c **** 	PC_USART.DATA = c;
  29               		.loc 1 80 0
  30 0008 8093 B009 		sts 2480,r24
  81:../src/pc_comm.c **** 	return 1;
  82:../src/pc_comm.c **** }
  31               		.loc 1 82 0
  32 000c 81E0      		ldi r24,lo8(1)
  33 000e 90E0      		ldi r25,0
  34               	.LVL1:
  35 0010 0895      		ret
  36               		.cfi_endproc
  37               	.LFE66:
  39               		.section	.text.pc_comm_init,"ax",@progbits
  40               	.global	pc_comm_init
  42               	pc_comm_init:
  43               	.LFB62:
  13:../src/pc_comm.c **** 	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
  44               		.loc 1 13 0
  45               		.cfi_startproc
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 0 */
  49               	.L__stack_usage = 0
  14:../src/pc_comm.c **** 	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
  50               		.loc 1 14 0
  51 0000 E0E6      		ldi r30,lo8(96)
  52 0002 F6E0      		ldi r31,lo8(6)
  53 0004 80E8      		ldi r24,lo8(-128)
  54 0006 8183      		std Z+1,r24
  15:../src/pc_comm.c **** 
  55               		.loc 1 15 0
  56 0008 80E4      		ldi r24,lo8(64)
  57 000a 8283      		std Z+2,r24
  17:../src/pc_comm.c **** 
  58               		.loc 1 17 0
  59 000c E0EB      		ldi r30,lo8(-80)
  60 000e F9E0      		ldi r31,lo8(9)
  61 0010 83E0      		ldi r24,lo8(3)
  62 0012 8583      		std Z+5,r24
  19:../src/pc_comm.c **** 	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
  63               		.loc 1 19 0
  64 0014 87E1      		ldi r24,lo8(23)
  65 0016 8683      		std Z+6,r24
  20:../src/pc_comm.c **** 
  66               		.loc 1 20 0
  67 0018 84EA      		ldi r24,lo8(-92)
  68 001a 8783      		std Z+7,r24
  22:../src/pc_comm.c **** 	PC_USART.CTRLB |= USART_TXEN_bm;
  69               		.loc 1 22 0
  70 001c 8481      		ldd r24,Z+4
  71 001e 8061      		ori r24,lo8(16)
  72 0020 8483      		std Z+4,r24
  23:../src/pc_comm.c **** 
  73               		.loc 1 23 0
  74 0022 8481      		ldd r24,Z+4
  75 0024 8860      		ori r24,lo8(8)
  76 0026 8483      		std Z+4,r24
  25:../src/pc_comm.c **** 	serial_in_index = 0;
  77               		.loc 1 25 0
  78 0028 80E0      		ldi r24,lo8(mystdout)
  79 002a 90E0      		ldi r25,hi8(mystdout)
  80 002c 8093 0000 		sts __iob+2,r24
  81 0030 9093 0000 		sts __iob+2+1,r25
  26:../src/pc_comm.c **** 	
  82               		.loc 1 26 0
  83 0034 1092 0000 		sts serial_in_index,__zero_reg__
  84 0038 1092 0000 		sts serial_in_index+1,__zero_reg__
  28:../src/pc_comm.c **** 	printf("\n");
  85               		.loc 1 28 0
  86 003c 80E2      		ldi r24,lo8(32)
  87 003e 8383      		std Z+3,r24
  29:../src/pc_comm.c **** }
  88               		.loc 1 29 0
  89 0040 8AE0      		ldi r24,lo8(10)
  90 0042 90E0      		ldi r25,0
  91 0044 0C94 0000 		jmp putchar
  92               	.LVL2:
  93               		.cfi_endproc
  94               	.LFE62:
  96               		.section	.rodata.str1.1,"aMS",@progbits,1
  97               	.LC0:
  98 0000 0D00      		.string	"\r"
  99               	.LC1:
 100 0002 0820 0800 		.string	"\b \b"
 101               		.section	.text.__vector_91,"ax",@progbits
 102               	.global	__vector_91
 104               	__vector_91:
 105               	.LFB63:
  32:../src/pc_comm.c **** 
 106               		.loc 1 32 0
 107               		.cfi_startproc
 108 0000 1F92      		push r1
 109               	.LCFI0:
 110               		.cfi_def_cfa_offset 4
 111               		.cfi_offset 1, -3
 112 0002 0F92      		push r0
 113               	.LCFI1:
 114               		.cfi_def_cfa_offset 5
 115               		.cfi_offset 0, -4
 116 0004 0FB6      		in r0,__SREG__
 117 0006 0F92      		push r0
 118 0008 1124      		clr __zero_reg__
 119 000a 0BB6      		in r0,__RAMPZ__
 120 000c 0F92      		push r0
 121 000e 2F93      		push r18
 122               	.LCFI2:
 123               		.cfi_def_cfa_offset 6
 124               		.cfi_offset 18, -5
 125 0010 3F93      		push r19
 126               	.LCFI3:
 127               		.cfi_def_cfa_offset 7
 128               		.cfi_offset 19, -6
 129 0012 4F93      		push r20
 130               	.LCFI4:
 131               		.cfi_def_cfa_offset 8
 132               		.cfi_offset 20, -7
 133 0014 5F93      		push r21
 134               	.LCFI5:
 135               		.cfi_def_cfa_offset 9
 136               		.cfi_offset 21, -8
 137 0016 6F93      		push r22
 138               	.LCFI6:
 139               		.cfi_def_cfa_offset 10
 140               		.cfi_offset 22, -9
 141 0018 7F93      		push r23
 142               	.LCFI7:
 143               		.cfi_def_cfa_offset 11
 144               		.cfi_offset 23, -10
 145 001a 8F93      		push r24
 146               	.LCFI8:
 147               		.cfi_def_cfa_offset 12
 148               		.cfi_offset 24, -11
 149 001c 9F93      		push r25
 150               	.LCFI9:
 151               		.cfi_def_cfa_offset 13
 152               		.cfi_offset 25, -12
 153 001e AF93      		push r26
 154               	.LCFI10:
 155               		.cfi_def_cfa_offset 14
 156               		.cfi_offset 26, -13
 157 0020 BF93      		push r27
 158               	.LCFI11:
 159               		.cfi_def_cfa_offset 15
 160               		.cfi_offset 27, -14
 161 0022 CF93      		push r28
 162               	.LCFI12:
 163               		.cfi_def_cfa_offset 16
 164               		.cfi_offset 28, -15
 165 0024 EF93      		push r30
 166               	.LCFI13:
 167               		.cfi_def_cfa_offset 17
 168               		.cfi_offset 30, -16
 169 0026 FF93      		push r31
 170               	.LCFI14:
 171               		.cfi_def_cfa_offset 18
 172               		.cfi_offset 31, -17
 173               	/* prologue: Signal */
 174               	/* frame size = 0 */
 175               	/* stack size = 17 */
 176               	.L__stack_usage = 17
 177               	.LBB7:
 178               	.LBB8:
  35:../src/pc_comm.c **** 	if(escaped_arrow==1){
 179               		.loc 1 35 0
 180 0028 8091 B009 		lds r24,2480
 181               	.LVL3:
  36:../src/pc_comm.c **** 		if(data == 65){
 182               		.loc 1 36 0
 183 002c 9091 0000 		lds r25,escaped_arrow
 184 0030 9130      		cpi r25,lo8(1)
 185 0032 01F4      		brne .+2
 186 0034 00C0      		rjmp .L30
  41:../src/pc_comm.c **** 		if(data == 91){
 187               		.loc 1 41 0
 188 0036 9091 0000 		lds r25,escaped
 189 003a 9111      		cpse r25,__zero_reg__
 190 003c 00C0      		rjmp .L31
  46:../src/pc_comm.c **** 		printf("\r\n");
 191               		.loc 1 46 0
 192 003e 8D30      		cpi r24,lo8(13)
 193 0040 01F4      		brne .+2
 194 0042 00C0      		rjmp .L15
 195 0044 8A30      		cpi r24,lo8(10)
 196 0046 01F4      		brne .+2
 197 0048 00C0      		rjmp .L15
  51:../src/pc_comm.c **** 		if(serial_in_index > 0) serial_in_index--;
 198               		.loc 1 51 0
 199 004a 8830      		cpi r24,lo8(8)
 200 004c 01F4      		brne .+2
 201 004e 00C0      		rjmp .L32
  54:../src/pc_comm.c **** 		escaped = 1;
 202               		.loc 1 54 0
 203 0050 8B31      		cpi r24,lo8(27)
 204 0052 01F4      		brne .+2
 205 0054 00C0      		rjmp .L33
  56:../src/pc_comm.c **** 		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFE
 206               		.loc 1 56 0
 207 0056 2091 0000 		lds r18,serial_in_index
 208 005a 3091 0000 		lds r19,serial_in_index+1
 209 005e 2034      		cpi r18,64
 210 0060 3105      		cpc r19,__zero_reg__
 211 0062 01F4      		brne .+2
 212 0064 00C0      		rjmp .L34
  60:../src/pc_comm.c **** 		//printf("Got char '%c'\r\n",data);
 213               		.loc 1 60 0
 214 0066 F901      		movw r30,r18
 215 0068 E050      		subi r30,lo8(-(serial_in_buffer))
 216 006a F040      		sbci r31,hi8(-(serial_in_buffer))
 217 006c 8083      		st Z,r24
  62:../src/pc_comm.c **** 		putchar(data);
 218               		.loc 1 62 0
 219 006e 2F5F      		subi r18,-1
 220 0070 3F4F      		sbci r19,-1
 221 0072 2093 0000 		sts serial_in_index,r18
 222 0076 3093 0000 		sts serial_in_index+1,r19
  63:../src/pc_comm.c **** 	}
 223               		.loc 1 63 0
 224 007a 6091 0000 		lds r22,__iob+2
 225 007e 7091 0000 		lds r23,__iob+2+1
 226 0082 082E      		mov __tmp_reg__,r24
 227 0084 000C      		lsl r0
 228 0086 990B      		sbc r25,r25
 229               	.LVL4:
 230 0088 0E94 0000 		call fputc
 231               	.LVL5:
 232               	.LBE8:
 233               	.LBE7:
  32:../src/pc_comm.c **** 
 234               		.loc 1 32 0
 235 008c 00C0      		rjmp .L7
 236               	.LVL6:
 237               	.L31:
 238               	.LBB13:
 239               	.LBB11:
  42:../src/pc_comm.c **** 			escaped_arrow=1;	
 240               		.loc 1 42 0
 241 008e 8B35      		cpi r24,lo8(91)
 242 0090 01F4      		brne .L14
  43:../src/pc_comm.c **** 		}
 243               		.loc 1 43 0
 244 0092 81E0      		ldi r24,lo8(1)
 245               	.LVL7:
 246 0094 8093 0000 		sts escaped_arrow,r24
 247               	.L14:
  45:../src/pc_comm.c **** 	}else if(data == '\r' || data == '\n'){ //We got the newline character.
 248               		.loc 1 45 0
 249 0098 1092 0000 		sts escaped,__zero_reg__
 250               	.L7:
 251               	/* epilogue start */
 252               	.LBE11:
 253               	.LBE13:
  32:../src/pc_comm.c **** 
 254               		.loc 1 32 0
 255 009c FF91      		pop r31
 256 009e EF91      		pop r30
 257 00a0 CF91      		pop r28
 258 00a2 BF91      		pop r27
 259 00a4 AF91      		pop r26
 260 00a6 9F91      		pop r25
 261 00a8 8F91      		pop r24
 262 00aa 7F91      		pop r23
 263 00ac 6F91      		pop r22
 264 00ae 5F91      		pop r21
 265 00b0 4F91      		pop r20
 266 00b2 3F91      		pop r19
 267 00b4 2F91      		pop r18
 268 00b6 0F90      		pop r0
 269 00b8 0BBE      		out __RAMPZ__,r0
 270 00ba 0F90      		pop r0
 271 00bc 0FBE      		out __SREG__,r0
 272 00be 0F90      		pop r0
 273 00c0 1F90      		pop r1
 274 00c2 1895      		reti
 275               	.LVL8:
 276               	.L30:
 277               	.LBB14:
 278               	.LBB12:
  37:../src/pc_comm.c **** 			handle_up_arrow();
 279               		.loc 1 37 0
 280 00c4 8134      		cpi r24,lo8(65)
 281 00c6 01F0      		breq .L35
 282               	.LVL9:
 283               	.L9:
  40:../src/pc_comm.c **** 	}else if(escaped){
 284               		.loc 1 40 0
 285 00c8 1092 0000 		sts escaped_arrow,__zero_reg__
 286 00cc 00C0      		rjmp .L7
 287               	.LVL10:
 288               	.L32:
  52:../src/pc_comm.c **** 		printf("\b \b");
 289               		.loc 1 52 0
 290 00ce 8091 0000 		lds r24,serial_in_index
 291 00d2 9091 0000 		lds r25,serial_in_index+1
 292               	.LVL11:
 293 00d6 0097      		sbiw r24,0
 294 00d8 01F0      		breq .L18
 295 00da 0197      		sbiw r24,1
 296 00dc 8093 0000 		sts serial_in_index,r24
 297 00e0 9093 0000 		sts serial_in_index+1,r25
 298               	.L18:
  53:../src/pc_comm.c **** 	}else if(data == 27){ //escape pressed.
 299               		.loc 1 53 0
 300 00e4 80E0      		ldi r24,lo8(.LC1)
 301 00e6 90E0      		ldi r25,hi8(.LC1)
 302 00e8 9F93      		push r25
 303               	.LCFI15:
 304               		.cfi_def_cfa_offset 19
 305 00ea 8F93      		push r24
 306               	.LCFI16:
 307               		.cfi_def_cfa_offset 20
 308 00ec 0E94 0000 		call printf
 309               	.LVL12:
 310 00f0 0F90      		pop __tmp_reg__
 311 00f2 0F90      		pop __tmp_reg__
 312               	.LCFI17:
 313               		.cfi_def_cfa_offset 18
 314 00f4 00C0      		rjmp .L7
 315               	.LVL13:
 316               	.L15:
  47:../src/pc_comm.c **** 		serial_in_buffer[serial_in_index]='\0';
 317               		.loc 1 47 0
 318 00f6 80E0      		ldi r24,lo8(.LC0)
 319 00f8 90E0      		ldi r25,hi8(.LC0)
 320               	.LVL14:
 321 00fa 0E94 0000 		call puts
 322               	.LVL15:
  48:../src/pc_comm.c **** 		handle_serial_command(serial_in_buffer,serial_in_index);
 323               		.loc 1 48 0
 324 00fe 6091 0000 		lds r22,serial_in_index
 325 0102 7091 0000 		lds r23,serial_in_index+1
 326 0106 FB01      		movw r30,r22
 327 0108 E050      		subi r30,lo8(-(serial_in_buffer))
 328 010a F040      		sbci r31,hi8(-(serial_in_buffer))
 329 010c 1082      		st Z,__zero_reg__
  49:../src/pc_comm.c **** 		serial_in_index = 0;
 330               		.loc 1 49 0
 331 010e 80E0      		ldi r24,lo8(serial_in_buffer)
 332 0110 90E0      		ldi r25,hi8(serial_in_buffer)
 333 0112 0E94 0000 		call handle_serial_command
 334               	.LVL16:
  50:../src/pc_comm.c **** 	}else if(data == '\b'){ //We got the backspace character.
 335               		.loc 1 50 0
 336 0116 1092 0000 		sts serial_in_index,__zero_reg__
 337 011a 1092 0000 		sts serial_in_index+1,__zero_reg__
 338 011e 00C0      		rjmp .L7
 339               	.LVL17:
 340               	.L35:
 341               	.LBB9:
 342               	.LBB10:
  68:../src/pc_comm.c **** 			
 343               		.loc 1 68 0
 344 0120 8091 0000 		lds r24,serial_in_index
 345 0124 9091 0000 		lds r25,serial_in_index+1
 346               	.LVL18:
 347 0128 C82F      		mov r28,r24
 348               	.LVL19:
  70:../src/pc_comm.c **** 		putchar(serial_in_buffer[temp_index]);
 349               		.loc 1 70 0
 350 012a 9927      		clr r25
 351               	.LVL20:
 352 012c FC01      		movw r30,r24
 353 012e E050      		subi r30,lo8(-(serial_in_buffer))
 354 0130 F040      		sbci r31,hi8(-(serial_in_buffer))
 355 0132 8081      		ld r24,Z
 356 0134 8823      		tst r24
 357 0136 01F0      		breq .L36
 358               	.LVL21:
 359               	.L11:
  71:../src/pc_comm.c **** 		temp_index++;
 360               		.loc 1 71 0
 361 0138 6091 0000 		lds r22,__iob+2
 362 013c 7091 0000 		lds r23,__iob+2+1
 363 0140 082E      		mov __tmp_reg__,r24
 364 0142 000C      		lsl r0
 365 0144 990B      		sbc r25,r25
 366 0146 0E94 0000 		call fputc
 367               	.LVL22:
  72:../src/pc_comm.c **** 	}
 368               		.loc 1 72 0
 369 014a CF5F      		subi r28,lo8(-(1))
 370               	.LVL23:
  70:../src/pc_comm.c **** 		putchar(serial_in_buffer[temp_index]);
 371               		.loc 1 70 0
 372 014c 2C2F      		mov r18,r28
 373 014e 30E0      		ldi r19,0
 374 0150 F901      		movw r30,r18
 375 0152 E050      		subi r30,lo8(-(serial_in_buffer))
 376 0154 F040      		sbci r31,hi8(-(serial_in_buffer))
 377 0156 8081      		ld r24,Z
 378 0158 8111      		cpse r24,__zero_reg__
 379 015a 00C0      		rjmp .L11
 380               	.LVL24:
 381               	.L10:
  75:../src/pc_comm.c **** }
 382               		.loc 1 75 0
 383 015c 2093 0000 		sts serial_in_index,r18
 384 0160 3093 0000 		sts serial_in_index+1,r19
 385 0164 00C0      		rjmp .L9
 386               	.LVL25:
 387               	.L33:
 388               	.LBE10:
 389               	.LBE9:
  55:../src/pc_comm.c **** 	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
 390               		.loc 1 55 0
 391 0166 81E0      		ldi r24,lo8(1)
 392               	.LVL26:
 393 0168 8093 0000 		sts escaped,r24
 394 016c 00C0      		rjmp .L7
 395               	.LVL27:
 396               	.L34:
  57:../src/pc_comm.c **** 		serial_in_index = 0;
 397               		.loc 1 57 0
 398 016e 1F92      		push __zero_reg__
 399               	.LCFI18:
 400               		.cfi_def_cfa_offset 19
 401 0170 80E4      		ldi r24,lo8(64)
 402               	.LVL28:
 403 0172 8F93      		push r24
 404               	.LCFI19:
 405               		.cfi_def_cfa_offset 20
 406 0174 80E0      		ldi r24,lo8(__c.5261)
 407 0176 90E0      		ldi r25,hi8(__c.5261)
 408 0178 9F93      		push r25
 409               	.LCFI20:
 410               		.cfi_def_cfa_offset 21
 411 017a 8F93      		push r24
 412               	.LCFI21:
 413               		.cfi_def_cfa_offset 22
 414 017c 0E94 0000 		call printf_P
 415               	.LVL29:
  58:../src/pc_comm.c **** 	}else{ //Everything is fine. Add the character to the buffer.
 416               		.loc 1 58 0
 417 0180 1092 0000 		sts serial_in_index,__zero_reg__
 418 0184 1092 0000 		sts serial_in_index+1,__zero_reg__
 419 0188 0F90      		pop __tmp_reg__
 420 018a 0F90      		pop __tmp_reg__
 421 018c 0F90      		pop __tmp_reg__
 422 018e 0F90      		pop __tmp_reg__
 423               	.LCFI22:
 424               		.cfi_def_cfa_offset 18
 425 0190 00C0      		rjmp .L7
 426               	.LVL30:
 427               	.L36:
 428 0192 2C2F      		mov r18,r28
 429 0194 30E0      		ldi r19,0
 430 0196 00C0      		rjmp .L10
 431               	.LBE12:
 432               	.LBE14:
 433               		.cfi_endproc
 434               	.LFE63:
 436               		.section	.progmem.data.__c.5261,"a",@progbits
 439               	__c.5261:
 440 0000 0D0A 4552 		.string	"\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"
 440      524F 523A 
 440      2053 6572 
 440      6961 6C20 
 440      696E 7075 
 441               		.section	.data.mystdout,"aw",@progbits
 444               	mystdout:
 445 0000 0000 00   		.zero	3
 446 0003 02        		.byte	2
 447 0004 0000 0000 		.zero	4
 448 0008 0000      		.word	gs(pc_comm_putchar)
 449 000a 0000      		.word	0
 450 000c 0000      		.word	0
 451               		.section	.bss.serial_in_index,"aw",@nobits
 454               	serial_in_index:
 455 0000 0000      		.zero	2
 456               		.section	.bss.escaped_arrow,"aw",@nobits
 459               	escaped_arrow:
 460 0000 00        		.zero	1
 461               		.section	.bss.escaped,"aw",@nobits
 464               	escaped:
 465 0000 00        		.zero	1
 466               		.section	.bss.serial_in_buffer,"aw",@nobits
 469               	serial_in_buffer:
 470 0000 0000 0000 		.zero	64
 470      0000 0000 
 470      0000 0000 
 470      0000 0000 
 470      0000 0000 
 471               		.comm	mm_per_kilostep,16,1
 472               		.comm	motor_adjusts,48,1
 473               		.comm	rnbProcessingFlag,1,1
 474               		.comm	rnbCmdSentTime,4,1
 475               		.comm	rnbCmdID,2,1
 476               		.comm	rnb_updated,1,1
 477               		.comm	last_good_rnb,8,1
 478               		.comm	cmd_sender_dir,1,1
 479               		.comm	cmd_arrival_dir,1,1
 480               		.comm	cmd_sender_id,2,1
 481               		.comm	cmd_arrival_time,4,1
 482               		.comm	user_facing_messages_ovf,1,1
 483               		.comm	num_waiting_msgs,1,1
 484               		.comm	hp_ir_block_bm,1,1
 485               		.comm	msg_node,294,1
 486               		.comm	ir_rxtx,342,1
 487               		.comm	obsStart,2,1
 488               		.comm	curr_ir_power,2,1
 489               		.comm	twi,2,1
 490               		.comm	twiMaster,25,1
 491               		.section	.bss.task_storage_arr,"aw",@nobits
 494               	task_storage_arr:
 495 0000 0000 0000 		.zero	140
 495      0000 0000 
 495      0000 0000 
 495      0000 0000 
 495      0000 0000 
 496               		.comm	task_executing,1,1
 497               		.comm	num_tasks,1,1
 498               		.comm	task_list,2,1
 499               		.comm	rtc_epoch,2,1
 500               		.comm	droplet_ID,2,1
 501               		.text
 502               	.Letext0:
 503               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 504               		.file 3 "C:/Program Files (x86)/Atmel/Studio/7.0/Packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 505               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 506               		.file 5 "../include/droplet_base.h"
 507               		.file 6 "../include/scheduler.h"
 508               		.file 7 "../include/i2c.h"
 509               		.file 8 "../include/firefly_sync.h"
 510               		.file 9 "../include/ir_comm.h"
 511               		.file 10 "../include/range_algs.h"
 512               		.file 11 "../include/ir_led.h"
 513               		.file 12 "../include/motor.h"
 514               		.file 13 "<built-in>"
 515               		.file 14 "../include/serial_handler.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pc_comm.c
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:2      *ABS*:0000003e __SP_H__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:3      *ABS*:0000003d __SP_L__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:4      *ABS*:0000003f __SREG__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:6      *ABS*:00000034 __CCP__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:8      *ABS*:00000001 __zero_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:14     .text.pc_comm_putchar:00000000 pc_comm_putchar
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:42     .text.pc_comm_init:00000000 pc_comm_init
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:444    .data.mystdout:00000000 mystdout
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:454    .bss.serial_in_index:00000000 serial_in_index
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:104    .text.__vector_91:00000000 __vector_91
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:459    .bss.escaped_arrow:00000000 escaped_arrow
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:464    .bss.escaped:00000000 escaped
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:469    .bss.serial_in_buffer:00000000 serial_in_buffer
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:439    .progmem.data.__c.5261:00000000 __c.5261
                            *COM*:00000010 mm_per_kilostep
                            *COM*:00000030 motor_adjusts
                            *COM*:00000001 rnbProcessingFlag
                            *COM*:00000004 rnbCmdSentTime
                            *COM*:00000002 rnbCmdID
                            *COM*:00000001 rnb_updated
                            *COM*:00000008 last_good_rnb
                            *COM*:00000001 cmd_sender_dir
                            *COM*:00000001 cmd_arrival_dir
                            *COM*:00000002 cmd_sender_id
                            *COM*:00000004 cmd_arrival_time
                            *COM*:00000001 user_facing_messages_ovf
                            *COM*:00000001 num_waiting_msgs
                            *COM*:00000001 hp_ir_block_bm
                            *COM*:00000126 msg_node
                            *COM*:00000156 ir_rxtx
                            *COM*:00000002 obsStart
                            *COM*:00000002 curr_ir_power
                            *COM*:00000002 twi
                            *COM*:00000019 twiMaster
C:\Users\JOHNK~1\AppData\Local\Temp\ccGfXrn2.s:494    .bss.task_storage_arr:00000000 task_storage_arr
                            *COM*:00000001 task_executing
                            *COM*:00000001 num_tasks
                            *COM*:00000002 task_list
                            *COM*:00000002 rtc_epoch
                            *COM*:00000002 droplet_ID

UNDEFINED SYMBOLS
__iob
putchar
fputc
printf
puts
handle_serial_command
printf_P
__do_copy_data
__do_clear_bss
