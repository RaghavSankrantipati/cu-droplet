   1               		.file	"range_algs.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	__lesf2
  13               	.global	__addsf3
  14               	.global	__mulsf3
  15               	.global	__divsf3
  16               	.global	__subsf3
  17               		.section	.text.magicRangeFunc,"ax",@progbits
  19               	magicRangeFunc:
  20               	.LFB75:
  21               		.file 1 "../src/range_algs.c"
   1:../src/range_algs.c **** /*
   2:../src/range_algs.c **** *	README:
   3:../src/range_algs.c **** *	For consistencies sake, any time you loop through the brightness matrix, it should look like this
   4:../src/range_algs.c **** *		for(emitter){
   5:../src/range_algs.c **** *			for(sensor){
   6:../src/range_algs.c **** *				brightness_matrix[emitter][sensor] ...
   7:../src/range_algs.c **** *			}
   8:../src/range_algs.c **** *		}
   9:../src/range_algs.c **** *	There were previous inconsistencies in this code.
  10:../src/range_algs.c **** */
  11:../src/range_algs.c **** #include "range_algs.h"
  12:../src/range_algs.c **** 
  13:../src/range_algs.c **** //This is based on the time that elapses between when a RXing Droplet gets the end
  14:../src/range_algs.c **** // of a message sent from dir N, and when the TXing droplet finishes on its last channel.
  15:../src/range_algs.c **** static const uint8_t txDirOffset[6] = {7, 6, 3, 5, 4, 2};
  16:../src/range_algs.c **** 
  17:../src/range_algs.c **** static const float bearingBasis[6][2]=	{
  18:../src/range_algs.c **** 	{SQRT3_OVER2 , -0.5},
  19:../src/range_algs.c **** 	{0           , -1  },
  20:../src/range_algs.c **** 	{-SQRT3_OVER2, -0.5},
  21:../src/range_algs.c **** 	{-SQRT3_OVER2,  0.5},
  22:../src/range_algs.c **** 	{0           ,  1  },
  23:../src/range_algs.c **** 	{SQRT3_OVER2 ,  0.5}
  24:../src/range_algs.c **** };
  25:../src/range_algs.c **** 
  26:../src/range_algs.c **** static const float hats[6][2]={
  27:../src/range_algs.c **** 	{11, ELEVEN_SQRT3},
  28:../src/range_algs.c **** 	{22, 0},
  29:../src/range_algs.c **** 	{11, -ELEVEN_SQRT3},
  30:../src/range_algs.c **** 	{-11, -ELEVEN_SQRT3},
  31:../src/range_algs.c **** 	{-22, 0},
  32:../src/range_algs.c **** 	{-11, ELEVEN_SQRT3}
  33:../src/range_algs.c **** };
  34:../src/range_algs.c **** 
  35:../src/range_algs.c **** static const float headingBasis[6][2]={
  36:../src/range_algs.c **** 	{-1          ,  0  },
  37:../src/range_algs.c **** 	{-0.5,  SQRT3_OVER2},
  38:../src/range_algs.c **** 	{ 0.5,  SQRT3_OVER2},
  39:../src/range_algs.c **** 	{ 1          ,  0  },
  40:../src/range_algs.c **** 	{ 0.5, -SQRT3_OVER2},
  41:../src/range_algs.c **** 	{-0.5, -SQRT3_OVER2}
  42:../src/range_algs.c **** };
  43:../src/range_algs.c **** 
  44:../src/range_algs.c **** static const float basis_angle[6] = {-(M_PI/6.0), -M_PI_2, -((5.0*M_PI)/6.0), ((5.0*M_PI)/6.0), M_P
  45:../src/range_algs.c **** static uint32_t sensorHealthHistory;
  46:../src/range_algs.c **** static int16_t brightMeas[6][6];
  47:../src/range_algs.c **** 
  48:../src/range_algs.c **** static inline float getCosBearingBasis(uint8_t i __attribute__ ((unused)), uint8_t j){
  49:../src/range_algs.c **** 	return bearingBasis[j][0];
  50:../src/range_algs.c **** }
  51:../src/range_algs.c **** 
  52:../src/range_algs.c **** static inline float getSinBearingBasis(uint8_t i __attribute__ ((unused)), uint8_t j){
  53:../src/range_algs.c **** 	return bearingBasis[j][1];
  54:../src/range_algs.c **** }
  55:../src/range_algs.c **** 
  56:../src/range_algs.c **** static inline float getCosHeadingBasis(uint8_t i, uint8_t j){
  57:../src/range_algs.c **** 	return headingBasis[(j+(6-i))%6][0];
  58:../src/range_algs.c **** }
  59:../src/range_algs.c **** 
  60:../src/range_algs.c **** static inline float getSinHeadingBasis(uint8_t i, uint8_t j){
  61:../src/range_algs.c **** 	return headingBasis[(j+(6-i))%6][1];
  62:../src/range_algs.c **** }
  63:../src/range_algs.c **** 
  64:../src/range_algs.c **** void calculate_bearing_and_heading(float* bearing, float* heading);
  65:../src/range_algs.c **** float calculate_range(float iRange, float bearing, float heading);
  66:../src/range_algs.c **** float calculate_error(float r, float b, float h);
  67:../src/range_algs.c **** 
  68:../src/range_algs.c **** static int16_t processBrightMeas(void);
  69:../src/range_algs.c **** 
  70:../src/range_algs.c **** static float magicRangeFunc(float a);
  71:../src/range_algs.c **** //static float invMagicRangeFunc(float r);
  72:../src/range_algs.c **** 
  73:../src/range_algs.c **** //static void print_brightMeas(void);
  74:../src/range_algs.c **** 												
  75:../src/range_algs.c **** void range_algs_init(){
  76:../src/range_algs.c **** 	sensorHealthHistory = 0;
  77:../src/range_algs.c **** 	for(uint8_t i=0 ; i<6 ;i++){
  78:../src/range_algs.c **** 		for(uint8_t j=0 ; j<6 ; j++){
  79:../src/range_algs.c **** 			brightMeas[i][j] = 0;
  80:../src/range_algs.c **** 		}
  81:../src/range_algs.c **** 	}
  82:../src/range_algs.c **** 	rnbCmdID=0;
  83:../src/range_algs.c **** 	rnbProcessingFlag=0;
  84:../src/range_algs.c **** }
  85:../src/range_algs.c **** 
  86:../src/range_algs.c **** //TODO: handle variable power.
  87:../src/range_algs.c **** void broadcast_rnb_data(){
  88:../src/range_algs.c **** 	uint8_t power = 255;
  89:../src/range_algs.c **** 	uint8_t goAhead =0;
  90:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  91:../src/range_algs.c **** 		if(!rnbProcessingFlag){
  92:../src/range_algs.c **** 			rnbProcessingFlag = 1;
  93:../src/range_algs.c **** 			goAhead = 1;
  94:../src/range_algs.c **** 		}
  95:../src/range_algs.c **** 	}
  96:../src/range_algs.c **** 	if(goAhead){
  97:../src/range_algs.c **** 		rnbCmdSentTime = get_time();
  98:../src/range_algs.c **** 		char c = 'r';
  99:../src/range_algs.c **** 		uint8_t result = hp_ir_targeted_cmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
 100:../src/range_algs.c **** 		if(result){
 101:../src/range_algs.c **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 102:../src/range_algs.c **** 				hp_ir_block_bm = 0xFF;
 103:../src/range_algs.c **** 			}		
 104:../src/range_algs.c **** 			ir_range_blast(power);
 105:../src/range_algs.c **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 106:../src/range_algs.c **** 				hp_ir_block_bm = 0;
 107:../src/range_algs.c **** 			}
 108:../src/range_algs.c **** 			//printf("rnb_b\r\n");
 109:../src/range_algs.c **** 		}
 110:../src/range_algs.c **** 	}
 111:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 112:../src/range_algs.c **** 		rnbProcessingFlag = 0;
 113:../src/range_algs.c **** 	}
 114:../src/range_algs.c **** }
 115:../src/range_algs.c **** 
 116:../src/range_algs.c **** void use_rnb_data(){
 117:../src/range_algs.c **** 	//uint32_t start = get_time();
 118:../src/range_algs.c **** 	int16_t matrixSum = processBrightMeas();
 119:../src/range_algs.c **** 	//if(rand_byte()%2) broadcastBrightMeas();
 120:../src/range_algs.c **** 	float bearing, heading;
 121:../src/range_algs.c **** 	float error;
 122:../src/range_algs.c **** 	calculate_bearing_and_heading(&bearing, &heading);
 123:../src/range_algs.c **** 	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
 124:../src/range_algs.c **** 	if(initialRange!=0&&!isnanf(initialRange)){	
 125:../src/range_algs.c **** 		float range = calculate_range(initialRange, bearing, heading);
 126:../src/range_algs.c **** 		if(!isnanf(range)){
 127:../src/range_algs.c **** 			if(range<2*DROPLET_RADIUS) range=46;
 128:../src/range_algs.c **** 			error = calculate_error(range, bearing, heading);
 129:../src/range_algs.c **** 			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearin
 130:../src/range_algs.c **** 			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
 131:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 132:../src/range_algs.c **** 					rnbProcessingFlag=0;
 133:../src/range_algs.c **** 				}
 134:../src/range_algs.c **** 				//printf(" <!>\r\n");
 135:../src/range_algs.c **** 				return;
 136:../src/range_algs.c **** 			}else{
 137:../src/range_algs.c **** 				//printf("\r\n");
 138:../src/range_algs.c **** 			}
 139:../src/range_algs.c **** 			
 140:../src/range_algs.c **** 			last_good_rnb.id = rnbCmdID;
 141:../src/range_algs.c **** 			last_good_rnb.range		= (uint16_t)(range);
 142:../src/range_algs.c **** 			last_good_rnb.bearing	= (int16_t)rad_to_deg(bearing);
 143:../src/range_algs.c **** 			last_good_rnb.heading	= (int16_t)rad_to_deg(heading);
 144:../src/range_algs.c **** 			//print_brightMeas();
 145:../src/range_algs.c **** 			rnb_updated=1;
 146:../src/range_algs.c **** 		}
 147:../src/range_algs.c **** 	}
 148:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 149:../src/range_algs.c **** 		rnbProcessingFlag=0;
 150:../src/range_algs.c **** 	}
 151:../src/range_algs.c **** }
 152:../src/range_algs.c **** 
 153:../src/range_algs.c **** float calculate_range(float iRange, float bearing, float heading){
 154:../src/range_algs.c **** 	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
 155:../src/range_algs.c **** 	float txHats[6][2];
 156:../src/range_algs.c **** 	for(uint8_t i=0;i<6;i++){
 157:../src/range_algs.c **** 		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
 158:../src/range_algs.c **** 		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
 159:../src/range_algs.c **** 	}
 160:../src/range_algs.c **** 	float rij[2];
 161:../src/range_algs.c **** 	float rijMagSq;
 162:../src/range_algs.c **** 	float alphaDotP, betaDotP;
 163:../src/range_algs.c **** 	float cosAcosB;
 164:../src/range_algs.c **** 	float total = 0;
 165:../src/range_algs.c **** 	int16_t* fast_bm = (int16_t*)brightMeas;
 166:../src/range_algs.c **** 	for(uint8_t i=0;i<36;i++){
 167:../src/range_algs.c **** 		uint8_t rx = i%6;
 168:../src/range_algs.c **** 		uint8_t tx = i/6;
 169:../src/range_algs.c **** 		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
 170:../src/range_algs.c **** 		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
 171:../src/range_algs.c **** 		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
 172:../src/range_algs.c **** 		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
 173:../src/range_algs.c **** 		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
 174:../src/range_algs.c **** 		betaDotP = betaDotP < 0 ? 0 : betaDotP;
 175:../src/range_algs.c **** 		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
 176:../src/range_algs.c **** 		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
 177:../src/range_algs.c **** 
 178:../src/range_algs.c **** 		total += fast_bm[i]*cosAcosB;
 179:../src/range_algs.c **** 	}
 180:../src/range_algs.c **** 
 181:../src/range_algs.c **** 	return magicRangeFunc(total);
 182:../src/range_algs.c **** }
 183:../src/range_algs.c **** 
 184:../src/range_algs.c **** float calculate_error(float r, float b, float h){
 185:../src/range_algs.c **** 	r = r<46 ? 46 : r;
 186:../src/range_algs.c **** 	float bigR[2] = {-r*sin(b), r*cos(b)};
 187:../src/range_algs.c **** 	float txHats[6][2];
 188:../src/range_algs.c **** 	for(uint8_t i=0;i<6;i++){
 189:../src/range_algs.c **** 		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
 190:../src/range_algs.c **** 		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
 191:../src/range_algs.c **** 	}
 192:../src/range_algs.c **** 	float rij[2];
 193:../src/range_algs.c **** 	float rijMagSq;
 194:../src/range_algs.c **** 	float alphaDotP, betaDotP;
 195:../src/range_algs.c **** 	float measTotal = 0;
 196:../src/range_algs.c **** 	float cosAcosBTotal = 0;
 197:../src/range_algs.c **** 	float cosAcosBmat[6][6];
 198:../src/range_algs.c **** 	float* cosAcosB = (float*)cosAcosBmat;
 199:../src/range_algs.c **** 	int16_t* fast_bm = (int16_t*)brightMeas;
 200:../src/range_algs.c **** 	for(uint8_t i=0;i<36;i++){
 201:../src/range_algs.c **** 		uint8_t rx = i%6;
 202:../src/range_algs.c **** 		uint8_t tx = i/6;
 203:../src/range_algs.c **** 		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
 204:../src/range_algs.c **** 		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
 205:../src/range_algs.c **** 		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
 206:../src/range_algs.c **** 
 207:../src/range_algs.c **** 		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
 208:../src/range_algs.c **** 		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
 209:../src/range_algs.c **** 		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
 210:../src/range_algs.c **** 		betaDotP = betaDotP < 0 ? 0 : betaDotP;
 211:../src/range_algs.c **** 
 212:../src/range_algs.c **** 		measTotal += fast_bm[i];
 213:../src/range_algs.c **** 		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
 214:../src/range_algs.c **** 		cosAcosBTotal += cosAcosB[i];
 215:../src/range_algs.c **** 	}
 216:../src/range_algs.c **** 	float conf = 0;
 217:../src/range_algs.c **** 	for(uint8_t i=0;i<36;i++){
 218:../src/range_algs.c **** 		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
 219:../src/range_algs.c **** 	}
 220:../src/range_algs.c **** 	//printf("{\"%04X\", %f, {", rnbCmdID, conf);
 221:../src/range_algs.c **** 	//for(uint8_t e=0 ; e<6 ; e++){
 222:../src/range_algs.c **** 		//printf("{");
 223:../src/range_algs.c **** 			//for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++){
 224:../src/range_algs.c **** 				//printf("%d",brightMeas[e][sensor_num]);
 225:../src/range_algs.c **** 				//if(sensor_num<5) printf(",");
 226:../src/range_algs.c **** 			//}
 227:../src/range_algs.c **** 		//printf("}");
 228:../src/range_algs.c **** 		//if(e<5) printf(",");
 229:../src/range_algs.c **** 	//}
 230:../src/range_algs.c **** 	//printf("}, {");
 231:../src/range_algs.c **** 	//for(uint8_t e=0 ; e<6 ; e++){
 232:../src/range_algs.c **** 		//printf("{");
 233:../src/range_algs.c **** 			//for(uint8_t s=0 ; s<6 ; s++){
 234:../src/range_algs.c **** 				//printf("{%f, %f, %f}", cosAcosBmat[e][s], alphaMat[e][s], betaMat[e][s]);
 235:../src/range_algs.c **** 				//if(s<5) printf(", ");
 236:../src/range_algs.c **** 			//}
 237:../src/range_algs.c **** 		//printf("}");
 238:../src/range_algs.c **** 		//if(e<5) printf(",");
 239:../src/range_algs.c **** 	//}
 240:../src/range_algs.c **** 	//printf("}},\r\n");
 241:../src/range_algs.c **** 	return conf;
 242:../src/range_algs.c **** }
 243:../src/range_algs.c **** 
 244:../src/range_algs.c **** void calculate_bearing_and_heading(float* bearing, float* heading){
 245:../src/range_algs.c **** 	int16_t* fast_bm = (int16_t*)brightMeas;
 246:../src/range_algs.c **** 	
 247:../src/range_algs.c **** 	float bearingX = 0;
 248:../src/range_algs.c **** 	float bearingY = 0;
 249:../src/range_algs.c **** 	float headingX = 0;
 250:../src/range_algs.c **** 	float headingY = 0;
 251:../src/range_algs.c **** 
 252:../src/range_algs.c **** 	for(uint8_t i=0;i<36;i++){
 253:../src/range_algs.c **** 		
 254:../src/range_algs.c **** 		bearingX+=fast_bm[i]*getCosBearingBasis(i/6,i%6);
 255:../src/range_algs.c **** 		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
 256:../src/range_algs.c **** 		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
 257:../src/range_algs.c **** 		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
 258:../src/range_algs.c **** 	}
 259:../src/range_algs.c **** 	
 260:../src/range_algs.c **** 	*bearing = atan2f(bearingY, bearingX);	
 261:../src/range_algs.c **** 	*heading = atan2f(headingY, headingX);
 262:../src/range_algs.c **** }
 263:../src/range_algs.c **** 
 264:../src/range_algs.c **** static int16_t processBrightMeas(void){
 265:../src/range_algs.c **** 	int16_t val;
 266:../src/range_algs.c **** 	int16_t valSum=0;
 267:../src/range_algs.c **** 	uint8_t allColZeroCheck = 0b00111111;
 268:../src/range_algs.c **** 
 269:../src/range_algs.c **** 	for(uint8_t e = 0; e < 6; e++){
 270:../src/range_algs.c **** 		for(uint8_t s = 0; s < 6; s++){
 271:../src/range_algs.c **** 			val = brightMeas[e][s];
 272:../src/range_algs.c **** 			allColZeroCheck &= ~((!!val)<<s);	
 273:../src/range_algs.c **** 			//val=val*(val>0);
 274:../src/range_algs.c **** 			brightMeas[e][s] = val;
 275:../src/range_algs.c **** 			valSum+=val;	
 276:../src/range_algs.c **** 		}
 277:../src/range_algs.c **** 	}
 278:../src/range_algs.c **** 
 279:../src/range_algs.c **** 	uint8_t problem = 0;
 280:../src/range_algs.c **** 	for(uint8_t i = 0; i<6; i++){
 281:../src/range_algs.c **** 		if(allColZeroCheck&(1<<i)){
 282:../src/range_algs.c **** 			sensorHealthHistory+=(1<<(4*i));
 283:../src/range_algs.c **** 		}else{
 284:../src/range_algs.c **** 			sensorHealthHistory&=~(0xF<<(4*i));
 285:../src/range_algs.c **** 		}
 286:../src/range_algs.c **** 		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
 287:../src/range_algs.c **** 			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
 288:../src/range_algs.c **** 			sensorHealthHistory&=~(0xF<<(4*i));
 289:../src/range_algs.c **** 			problem = 1;
 290:../src/range_algs.c **** 		}		
 291:../src/range_algs.c **** 	}
 292:../src/range_algs.c **** 	if(problem){
 293:../src/range_algs.c **** 		warning_light_sequence();
 294:../src/range_algs.c **** 	}	
 295:../src/range_algs.c **** 	return valSum;
 296:../src/range_algs.c **** }
 297:../src/range_algs.c **** 
 298:../src/range_algs.c **** void ir_range_meas(){
 299:../src/range_algs.c **** 	//int32_t times[16] = {0};
 300:../src/range_algs.c **** 	cmd_arrival_dir;
 301:../src/range_algs.c **** 	cmd_sender_dir;
 302:../src/range_algs.c **** 	//times[0] = get_time();
 303:../src/range_algs.c **** 	while((get_time()-rnbCmdSentTime+8)<POST_BROADCAST_DELAY);
 304:../src/range_algs.c **** 	//times[1] = get_time();
 305:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
 306:../src/range_algs.c **** 		uint32_t pre_sync_op = get_time();
 307:../src/range_algs.c **** 		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
 308:../src/range_algs.c **** 		//times[2] = get_time();
 309:../src/range_algs.c **** 		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
 310:../src/range_algs.c **** 			pre_sync_op = get_time();
 311:../src/range_algs.c **** 			//times[2*emitter_dir+3] = pre_sync_op;
 312:../src/range_algs.c **** 			while((get_time() - pre_sync_op) < (TIME_FOR_GET_IR_VALS-TIME_FOR_IR_MEAS)/2) delay_us(500);
 313:../src/range_algs.c **** 			get_ir_sensors(brightMeas[emitter_dir] , 9); //11
 314:../src/range_algs.c **** 			//times[2*emitter_dir+4] = get_time();			
 315:../src/range_algs.c **** 			while((get_time() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
 316:../src/range_algs.c **** 			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
 317:../src/range_algs.c **** 		}
 318:../src/range_algs.c **** 	}
 319:../src/range_algs.c **** }
 320:../src/range_algs.c **** 
 321:../src/range_algs.c **** void ir_range_blast(uint8_t power __attribute__ ((unused))){
 322:../src/range_algs.c **** 	//int32_t times[16] = {0};
 323:../src/range_algs.c **** 	//times[0] = get_time();
 324:../src/range_algs.c **** 	while((get_time() - rnbCmdSentTime) < POST_BROADCAST_DELAY) delay_us(500);
 325:../src/range_algs.c **** 	//times[1] = get_time();
 326:../src/range_algs.c **** 	uint32_t pre_sync_op = get_time();
 327:../src/range_algs.c **** 	uint16_t prevPower = curr_ir_power;
 328:../src/range_algs.c **** 	set_all_ir_powers(256);	
 329:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
 330:../src/range_algs.c **** 		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
 331:../src/range_algs.c **** 		//times[2] = get_time();
 332:../src/range_algs.c **** 		for(uint8_t dir = 0; dir < 6; dir++){
 333:../src/range_algs.c **** 			pre_sync_op = get_time();
 334:../src/range_algs.c **** 			//set_red_led(255);
 335:../src/range_algs.c **** 			//times[2*dir+3] = pre_sync_op;			
 336:../src/range_algs.c **** 			ir_led_on(dir);
 337:../src/range_algs.c **** 			while((get_time() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
 338:../src/range_algs.c **** 			ir_led_off(dir);
 339:../src/range_algs.c **** 			//times[2*dir+4] = get_time();				
 340:../src/range_algs.c **** 			//set_red_led(0);					
 341:../src/range_algs.c **** 			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
 342:../src/range_algs.c **** 		}
 343:../src/range_algs.c **** 	}
 344:../src/range_algs.c **** 	set_all_ir_powers(prevPower);
 345:../src/range_algs.c **** }
 346:../src/range_algs.c **** 
 347:../src/range_algs.c **** 
 348:../src/range_algs.c **** static float magicRangeFunc(float a){
  22               		.loc 1 348 0
  23               		.cfi_startproc
  24               	.LVL0:
  25 0000 CF92      		push r12
  26               	.LCFI0:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 12, -3
  29 0002 DF92      		push r13
  30               	.LCFI1:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 13, -4
  33 0004 EF92      		push r14
  34               	.LCFI2:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 14, -5
  37 0006 FF92      		push r15
  38               	.LCFI3:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 15, -6
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 4 */
  44               	.L__stack_usage = 4
  45 0008 6B01      		movw r12,r22
  46 000a 7C01      		movw r14,r24
 349:../src/range_algs.c **** 	if(a<=0){
  47               		.loc 1 349 0
  48 000c 20E0      		ldi r18,0
  49 000e 30E0      		ldi r19,0
  50 0010 A901      		movw r20,r18
  51 0012 0E94 0000 		call __lesf2
  52               	.LVL1:
  53 0016 1816      		cp __zero_reg__,r24
  54 0018 04F4      		brge .L3
  55               	.LBB109:
 350:../src/range_algs.c **** 		return NAN;
 351:../src/range_algs.c **** 		}else{
 352:../src/range_algs.c **** 		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
  56               		.loc 1 352 0
  57 001a 20E0      		ldi r18,0
  58 001c 30E0      		ldi r19,0
  59 001e 40E0      		ldi r20,0
  60 0020 5FEB      		ldi r21,lo8(-65)
  61 0022 C701      		movw r24,r14
  62 0024 B601      		movw r22,r12
  63 0026 0E94 0000 		call pow
  64               	.LVL2:
 353:../src/range_algs.c **** 		result = 1 + exp(result);
  65               		.loc 1 353 0
  66 002a 28E9      		ldi r18,lo8(-104)
  67 002c 37EF      		ldi r19,lo8(-9)
  68 002e 44ED      		ldi r20,lo8(-44)
  69 0030 5CE3      		ldi r21,lo8(60)
  70 0032 0E94 0000 		call __addsf3
  71               	.LVL3:
  72 0036 2EEC      		ldi r18,lo8(-50)
  73 0038 30EF      		ldi r19,lo8(-16)
  74 003a 42EC      		ldi r20,lo8(-62)
  75 003c 51EC      		ldi r21,lo8(-63)
  76 003e 0E94 0000 		call __mulsf3
  77               	.LVL4:
  78 0042 0E94 0000 		call exp
  79               	.LVL5:
 354:../src/range_algs.c **** 		result = (778.0270114700/result) - 528.0270114700;
  80               		.loc 1 354 0
  81 0046 20E0      		ldi r18,0
  82 0048 30E0      		ldi r19,0
  83 004a 40E8      		ldi r20,lo8(-128)
  84 004c 5FE3      		ldi r21,lo8(63)
  85 004e 0E94 0000 		call __addsf3
  86               	.LVL6:
  87 0052 9B01      		movw r18,r22
  88 0054 AC01      		movw r20,r24
  89 0056 6BEB      		ldi r22,lo8(-69)
  90 0058 71E8      		ldi r23,lo8(-127)
  91 005a 82E4      		ldi r24,lo8(66)
  92 005c 94E4      		ldi r25,lo8(68)
  93 005e 0E94 0000 		call __divsf3
  94               	.LVL7:
  95 0062 2BEB      		ldi r18,lo8(-69)
  96 0064 31E0      		ldi r19,lo8(1)
  97 0066 44E0      		ldi r20,lo8(4)
  98 0068 54E4      		ldi r21,lo8(68)
  99 006a 0E94 0000 		call __subsf3
 100               	.LVL8:
 101               	/* epilogue start */
 102               	.LBE109:
 355:../src/range_algs.c **** 		return result;
 356:../src/range_algs.c **** 	}
 357:../src/range_algs.c **** }
 103               		.loc 1 357 0
 104 006e FF90      		pop r15
 105 0070 EF90      		pop r14
 106 0072 DF90      		pop r13
 107 0074 CF90      		pop r12
 108               	.LVL9:
 109 0076 0895      		ret
 110               	.LVL10:
 111               	.L3:
 350:../src/range_algs.c **** 		}else{
 112               		.loc 1 350 0
 113 0078 60E0      		ldi r22,0
 114 007a 70E0      		ldi r23,0
 115 007c 80EC      		ldi r24,lo8(-64)
 116 007e 9FE7      		ldi r25,lo8(127)
 117               	/* epilogue start */
 118               		.loc 1 357 0
 119 0080 FF90      		pop r15
 120 0082 EF90      		pop r14
 121 0084 DF90      		pop r13
 122 0086 CF90      		pop r12
 123               	.LVL11:
 124 0088 0895      		ret
 125               		.cfi_endproc
 126               	.LFE75:
 128               		.section	.text.range_algs_init,"ax",@progbits
 129               	.global	range_algs_init
 131               	range_algs_init:
 132               	.LFB66:
  75:../src/range_algs.c **** 	sensorHealthHistory = 0;
 133               		.loc 1 75 0
 134               		.cfi_startproc
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
  76:../src/range_algs.c **** 	for(uint8_t i=0 ; i<6 ;i++){
 139               		.loc 1 76 0
 140 0000 1092 0000 		sts sensorHealthHistory,__zero_reg__
 141 0004 1092 0000 		sts sensorHealthHistory+1,__zero_reg__
 142 0008 1092 0000 		sts sensorHealthHistory+2,__zero_reg__
 143 000c 1092 0000 		sts sensorHealthHistory+3,__zero_reg__
 144               	.LVL12:
 145 0010 E0E0      		ldi r30,lo8(brightMeas)
 146 0012 F0E0      		ldi r31,hi8(brightMeas)
 147 0014 80E0      		ldi r24,lo8(brightMeas+72)
 148 0016 90E0      		ldi r25,hi8(brightMeas+72)
 149               	.LVL13:
 150               	.L6:
 151               	.LBB110:
 152               	.LBB111:
  79:../src/range_algs.c **** 		}
 153               		.loc 1 79 0
 154 0018 1082      		st Z,__zero_reg__
 155 001a 1182      		std Z+1,__zero_reg__
 156               	.LVL14:
 157 001c 1282      		std Z+2,__zero_reg__
 158 001e 1382      		std Z+3,__zero_reg__
 159               	.LVL15:
 160 0020 1482      		std Z+4,__zero_reg__
 161 0022 1582      		std Z+5,__zero_reg__
 162               	.LVL16:
 163 0024 1682      		std Z+6,__zero_reg__
 164 0026 1782      		std Z+7,__zero_reg__
 165               	.LVL17:
 166 0028 1086      		std Z+8,__zero_reg__
 167 002a 1186      		std Z+9,__zero_reg__
 168               	.LVL18:
 169 002c 1286      		std Z+10,__zero_reg__
 170 002e 1386      		std Z+11,__zero_reg__
 171               	.LVL19:
 172 0030 3C96      		adiw r30,12
 173               	.LBE111:
  77:../src/range_algs.c **** 		for(uint8_t j=0 ; j<6 ; j++){
 174               		.loc 1 77 0
 175 0032 8E17      		cp r24,r30
 176 0034 9F07      		cpc r25,r31
 177 0036 01F4      		brne .L6
 178               	.LBE110:
  82:../src/range_algs.c **** 	rnbProcessingFlag=0;
 179               		.loc 1 82 0
 180 0038 1092 0000 		sts rnbCmdID,__zero_reg__
 181 003c 1092 0000 		sts rnbCmdID+1,__zero_reg__
  83:../src/range_algs.c **** }
 182               		.loc 1 83 0
 183 0040 1092 0000 		sts rnbProcessingFlag,__zero_reg__
 184 0044 0895      		ret
 185               		.cfi_endproc
 186               	.LFE66:
 188               	.global	__ltsf2
 189               	.global	__floatsisf
 190               		.section	.text.calculate_range,"ax",@progbits
 191               	.global	calculate_range
 193               	calculate_range:
 194               	.LFB69:
 153:../src/range_algs.c **** 	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
 195               		.loc 1 153 0
 196               		.cfi_startproc
 197               	.LVL20:
 198 0000 2F92      		push r2
 199               	.LCFI4:
 200               		.cfi_def_cfa_offset 4
 201               		.cfi_offset 2, -3
 202 0002 3F92      		push r3
 203               	.LCFI5:
 204               		.cfi_def_cfa_offset 5
 205               		.cfi_offset 3, -4
 206 0004 4F92      		push r4
 207               	.LCFI6:
 208               		.cfi_def_cfa_offset 6
 209               		.cfi_offset 4, -5
 210 0006 5F92      		push r5
 211               	.LCFI7:
 212               		.cfi_def_cfa_offset 7
 213               		.cfi_offset 5, -6
 214 0008 6F92      		push r6
 215               	.LCFI8:
 216               		.cfi_def_cfa_offset 8
 217               		.cfi_offset 6, -7
 218 000a 7F92      		push r7
 219               	.LCFI9:
 220               		.cfi_def_cfa_offset 9
 221               		.cfi_offset 7, -8
 222 000c 8F92      		push r8
 223               	.LCFI10:
 224               		.cfi_def_cfa_offset 10
 225               		.cfi_offset 8, -9
 226 000e 9F92      		push r9
 227               	.LCFI11:
 228               		.cfi_def_cfa_offset 11
 229               		.cfi_offset 9, -10
 230 0010 AF92      		push r10
 231               	.LCFI12:
 232               		.cfi_def_cfa_offset 12
 233               		.cfi_offset 10, -11
 234 0012 BF92      		push r11
 235               	.LCFI13:
 236               		.cfi_def_cfa_offset 13
 237               		.cfi_offset 11, -12
 238 0014 CF92      		push r12
 239               	.LCFI14:
 240               		.cfi_def_cfa_offset 14
 241               		.cfi_offset 12, -13
 242 0016 DF92      		push r13
 243               	.LCFI15:
 244               		.cfi_def_cfa_offset 15
 245               		.cfi_offset 13, -14
 246 0018 EF92      		push r14
 247               	.LCFI16:
 248               		.cfi_def_cfa_offset 16
 249               		.cfi_offset 14, -15
 250 001a FF92      		push r15
 251               	.LCFI17:
 252               		.cfi_def_cfa_offset 17
 253               		.cfi_offset 15, -16
 254 001c 0F93      		push r16
 255               	.LCFI18:
 256               		.cfi_def_cfa_offset 18
 257               		.cfi_offset 16, -17
 258 001e 1F93      		push r17
 259               	.LCFI19:
 260               		.cfi_def_cfa_offset 19
 261               		.cfi_offset 17, -18
 262 0020 CF93      		push r28
 263               	.LCFI20:
 264               		.cfi_def_cfa_offset 20
 265               		.cfi_offset 28, -19
 266 0022 DF93      		push r29
 267               	.LCFI21:
 268               		.cfi_def_cfa_offset 21
 269               		.cfi_offset 29, -20
 270 0024 CDB7      		in r28,__SP_L__
 271 0026 DEB7      		in r29,__SP_H__
 272               	.LCFI22:
 273               		.cfi_def_cfa_register 28
 274 0028 CC54      		subi r28,76
 275 002a D109      		sbc r29,__zero_reg__
 276               	.LCFI23:
 277               		.cfi_def_cfa_offset 97
 278 002c CDBF      		out __SP_L__,r28
 279 002e DEBF      		out __SP_H__,r29
 280               	/* prologue: function */
 281               	/* frame size = 76 */
 282               	/* stack size = 94 */
 283               	.L__stack_usage = 94
 284 0030 4B01      		movw r8,r22
 285 0032 5C01      		movw r10,r24
 286 0034 2901      		movw r4,r18
 287 0036 3A01      		movw r6,r20
 288 0038 6701      		movw r12,r14
 289 003a 7801      		movw r14,r16
 154:../src/range_algs.c **** 	float txHats[6][2];
 290               		.loc 1 154 0
 291 003c CA01      		movw r24,r20
 292 003e B901      		movw r22,r18
 293               	.LVL21:
 294 0040 0E94 0000 		call sin
 295               	.LVL22:
 296 0044 9B01      		movw r18,r22
 297 0046 AC01      		movw r20,r24
 298 0048 C501      		movw r24,r10
 299 004a B401      		movw r22,r8
 300 004c 9058      		subi r25,0x80
 301 004e 0E94 0000 		call __mulsf3
 302               	.LVL23:
 303 0052 2996      		adiw r28,69-60
 304 0054 6CAF      		std Y+60,r22
 305 0056 7DAF      		std Y+61,r23
 306 0058 8EAF      		std Y+62,r24
 307 005a 9FAF      		std Y+63,r25
 308 005c 2997      		sbiw r28,69-60
 309               	.LVL24:
 310 005e C301      		movw r24,r6
 311 0060 B201      		movw r22,r4
 312               	.LVL25:
 313 0062 0E94 0000 		call cos
 314               	.LVL26:
 315 0066 9B01      		movw r18,r22
 316 0068 AC01      		movw r20,r24
 317 006a C501      		movw r24,r10
 318 006c B401      		movw r22,r8
 319 006e 0E94 0000 		call __mulsf3
 320               	.LVL27:
 321 0072 2D96      		adiw r28,73-60
 322 0074 6CAF      		std Y+60,r22
 323 0076 7DAF      		std Y+61,r23
 324 0078 8EAF      		std Y+62,r24
 325 007a 9FAF      		std Y+63,r25
 326 007c 2D97      		sbiw r28,73-60
 327               	.LVL28:
 328 007e C701      		movw r24,r14
 329 0080 B601      		movw r22,r12
 330               	.LVL29:
 331 0082 0E94 0000 		call cos
 332               	.LVL30:
 333 0086 4B01      		movw r8,r22
 334 0088 5C01      		movw r10,r24
 335               	.LVL31:
 336 008a C701      		movw r24,r14
 337 008c B601      		movw r22,r12
 338 008e 0E94 0000 		call sin
 339               	.LVL32:
 340 0092 6BAB      		std Y+51,r22
 341 0094 7CAB      		std Y+52,r23
 342 0096 8DAB      		std Y+53,r24
 343 0098 9EAB      		std Y+54,r25
 344 009a 8E01      		movw r16,r28
 345 009c 0F5F      		subi r16,-1
 346 009e 1F4F      		sbci r17,-1
 347 00a0 30E0      		ldi r19,lo8(hats)
 348 00a2 232E      		mov r2,r19
 349 00a4 30E0      		ldi r19,hi8(hats)
 350 00a6 332E      		mov r3,r19
 351 00a8 CE01      		movw r24,r28
 352 00aa C196      		adiw r24,49
 353 00ac 89AB      		std Y+49,r24
 354 00ae 9AAB      		std Y+50,r25
 355 00b0 44EA      		ldi r20,lo8(-92)
 356 00b2 442E      		mov r4,r20
 357 00b4 4BE6      		ldi r20,lo8(107)
 358 00b6 542E      		mov r5,r20
 359 00b8 48E9      		ldi r20,lo8(-104)
 360 00ba 642E      		mov r6,r20
 361 00bc 41E4      		ldi r20,lo8(65)
 362 00be 742E      		mov r7,r20
 363               	.LVL33:
 364 00c0 C12C      		mov r12,__zero_reg__
 365 00c2 D12C      		mov r13,__zero_reg__
 366 00c4 50E3      		ldi r21,lo8(48)
 367 00c6 E52E      		mov r14,r21
 368 00c8 51E4      		ldi r21,lo8(65)
 369 00ca F52E      		mov r15,r21
 370 00cc 00C0      		rjmp .L11
 371               	.LVL34:
 372               	.L9:
 373 00ce D101      		movw r26,r2
 374 00d0 CD90      		ld r12,X+
 375 00d2 DD90      		ld r13,X+
 376 00d4 ED90      		ld r14,X+
 377 00d6 FC90      		ld r15,X
 378 00d8 1397      		sbiw r26,3
 379 00da 1496      		adiw r26,4
 380 00dc 4D90      		ld r4,X+
 381 00de 5D90      		ld r5,X+
 382 00e0 6D90      		ld r6,X+
 383 00e2 7C90      		ld r7,X
 384 00e4 1797      		sbiw r26,4+3
 385               	.L11:
 386               	.LBB112:
 157:../src/range_algs.c **** 		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
 387               		.loc 1 157 0 discriminator 3
 388 00e6 A501      		movw r20,r10
 389 00e8 9401      		movw r18,r8
 390 00ea C701      		movw r24,r14
 391 00ec B601      		movw r22,r12
 392 00ee 0E94 0000 		call __mulsf3
 393               	.LVL35:
 394 00f2 6FAB      		std Y+55,r22
 395 00f4 78AF      		std Y+56,r23
 396 00f6 89AF      		std Y+57,r24
 397 00f8 9AAF      		std Y+58,r25
 398 00fa 2BA9      		ldd r18,Y+51
 399 00fc 3CA9      		ldd r19,Y+52
 400 00fe 4DA9      		ldd r20,Y+53
 401 0100 5EA9      		ldd r21,Y+54
 402 0102 C301      		movw r24,r6
 403 0104 B201      		movw r22,r4
 404 0106 0E94 0000 		call __mulsf3
 405               	.LVL36:
 406 010a 9B01      		movw r18,r22
 407 010c AC01      		movw r20,r24
 408 010e 6FA9      		ldd r22,Y+55
 409 0110 78AD      		ldd r23,Y+56
 410 0112 89AD      		ldd r24,Y+57
 411 0114 9AAD      		ldd r25,Y+58
 412 0116 0E94 0000 		call __subsf3
 413               	.LVL37:
 414 011a D801      		movw r26,r16
 415 011c 6D93      		st X+,r22
 416 011e 7D93      		st X+,r23
 417 0120 8D93      		st X+,r24
 418 0122 9C93      		st X,r25
 419 0124 1397      		sbiw r26,3
 158:../src/range_algs.c **** 	}
 420               		.loc 1 158 0 discriminator 3
 421 0126 2BA9      		ldd r18,Y+51
 422 0128 3CA9      		ldd r19,Y+52
 423 012a 4DA9      		ldd r20,Y+53
 424 012c 5EA9      		ldd r21,Y+54
 425 012e C701      		movw r24,r14
 426 0130 B601      		movw r22,r12
 427 0132 0E94 0000 		call __mulsf3
 428               	.LVL38:
 429 0136 6B01      		movw r12,r22
 430 0138 7C01      		movw r14,r24
 431 013a A301      		movw r20,r6
 432 013c 9201      		movw r18,r4
 433 013e C501      		movw r24,r10
 434 0140 B401      		movw r22,r8
 435 0142 0E94 0000 		call __mulsf3
 436               	.LVL39:
 437 0146 9B01      		movw r18,r22
 438 0148 AC01      		movw r20,r24
 439 014a C701      		movw r24,r14
 440 014c B601      		movw r22,r12
 441 014e 0E94 0000 		call __addsf3
 442               	.LVL40:
 443 0152 F801      		movw r30,r16
 444 0154 6483      		std Z+4,r22
 445 0156 7583      		std Z+5,r23
 446 0158 8683      		std Z+6,r24
 447 015a 9783      		std Z+7,r25
 448 015c 085F      		subi r16,-8
 449 015e 1F4F      		sbci r17,-1
 450 0160 F8E0      		ldi r31,8
 451 0162 2F0E      		add r2,r31
 452 0164 311C      		adc r3,__zero_reg__
 156:../src/range_algs.c **** 		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
 453               		.loc 1 156 0 discriminator 3
 454 0166 89A9      		ldd r24,Y+49
 455 0168 9AA9      		ldd r25,Y+50
 456 016a 0817      		cp r16,r24
 457 016c 1907      		cpc r17,r25
 458 016e 01F0      		breq .+2
 459 0170 00C0      		rjmp .L9
 460 0172 A0E0      		ldi r26,lo8(brightMeas)
 461 0174 B0E0      		ldi r27,hi8(brightMeas)
 462 0176 2596      		adiw r28,67-62
 463 0178 AEAF      		std Y+62,r26
 464 017a BFAF      		std Y+63,r27
 465 017c 2597      		sbiw r28,67-62
 156:../src/range_algs.c **** 		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
 466               		.loc 1 156 0 is_stmt 0
 467 017e 84EA      		ldi r24,lo8(-92)
 468 0180 9BE6      		ldi r25,lo8(107)
 469 0182 A8E9      		ldi r26,lo8(-104)
 470 0184 B1E4      		ldi r27,lo8(65)
 471 0186 8BAF      		std Y+59,r24
 472 0188 9CAF      		std Y+60,r25
 473 018a ADAF      		std Y+61,r26
 474 018c BEAF      		std Y+62,r27
 475 018e 412C      		mov r4,__zero_reg__
 476 0190 512C      		mov r5,__zero_reg__
 477 0192 90E3      		ldi r25,lo8(48)
 478 0194 692E      		mov r6,r25
 479 0196 91E4      		ldi r25,lo8(65)
 480 0198 792E      		mov r7,r25
 481 019a 312C      		mov r3,__zero_reg__
 482 019c 2396      		adiw r28,63-60
 483 019e 1CAE      		std Y+60,__zero_reg__
 484 01a0 1DAE      		std Y+61,__zero_reg__
 485 01a2 1EAE      		std Y+62,__zero_reg__
 486 01a4 1FAE      		std Y+63,__zero_reg__
 487 01a6 2397      		sbiw r28,63-60
 488               	.LBE112:
 489               	.LBB113:
 490               	.LBB114:
 169:../src/range_algs.c **** 		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
 491               		.loc 1 169 0 is_stmt 1
 492 01a8 2BEA      		ldi r18,lo8(-85)
 493 01aa 222E      		mov r2,r18
 494 01ac 00C0      		rjmp .L10
 495               	.LVL41:
 496               	.L12:
 178:../src/range_algs.c **** 	}
 497               		.loc 1 178 0 discriminator 4
 498 01ae 2596      		adiw r28,67-62
 499 01b0 EEAD      		ldd r30,Y+62
 500 01b2 FFAD      		ldd r31,Y+63
 501 01b4 2597      		sbiw r28,67-62
 502 01b6 0191      		ld r16,Z+
 503 01b8 1191      		ld r17,Z+
 504 01ba 2596      		adiw r28,67-62
 505 01bc EEAF      		std Y+62,r30
 506 01be FFAF      		std Y+63,r31
 507 01c0 2597      		sbiw r28,67-62
 508 01c2 A301      		movw r20,r6
 509 01c4 9201      		movw r18,r4
 510 01c6 C501      		movw r24,r10
 511 01c8 B401      		movw r22,r8
 512 01ca 0E94 0000 		call __mulsf3
 513               	.LVL42:
 514 01ce 4B01      		movw r8,r22
 515 01d0 5C01      		movw r10,r24
 516               	.LVL43:
 517 01d2 2BA9      		ldd r18,Y+51
 518 01d4 3CA9      		ldd r19,Y+52
 519 01d6 4DA9      		ldd r20,Y+53
 520 01d8 5EA9      		ldd r21,Y+54
 521 01da CA01      		movw r24,r20
 522 01dc B901      		movw r22,r18
 523 01de 0E94 0000 		call __mulsf3
 524               	.LVL44:
 525 01e2 2B01      		movw r4,r22
 526 01e4 3C01      		movw r6,r24
 527               	.LVL45:
 528 01e6 A701      		movw r20,r14
 529 01e8 9601      		movw r18,r12
 530 01ea C701      		movw r24,r14
 531 01ec B601      		movw r22,r12
 532 01ee 0E94 0000 		call __mulsf3
 533               	.LVL46:
 534 01f2 9B01      		movw r18,r22
 535 01f4 AC01      		movw r20,r24
 536 01f6 C301      		movw r24,r6
 537 01f8 B201      		movw r22,r4
 538 01fa 0E94 0000 		call __addsf3
 539               	.LVL47:
 540 01fe 20E0      		ldi r18,0
 541 0200 30E0      		ldi r19,0
 542 0202 42EF      		ldi r20,lo8(-14)
 543 0204 53E4      		ldi r21,lo8(67)
 544 0206 0E94 0000 		call __mulsf3
 545               	.LVL48:
 546 020a 9B01      		movw r18,r22
 547 020c AC01      		movw r20,r24
 548 020e C501      		movw r24,r10
 549 0210 B401      		movw r22,r8
 550 0212 0E94 0000 		call __divsf3
 551               	.LVL49:
 552 0216 6B01      		movw r12,r22
 553 0218 7C01      		movw r14,r24
 554               	.LVL50:
 555 021a B801      		movw r22,r16
 556 021c 110F      		lsl r17
 557 021e 880B      		sbc r24,r24
 558 0220 990B      		sbc r25,r25
 559 0222 0E94 0000 		call __floatsisf
 560               	.LVL51:
 561 0226 9B01      		movw r18,r22
 562 0228 AC01      		movw r20,r24
 563 022a C701      		movw r24,r14
 564 022c B601      		movw r22,r12
 565 022e 0E94 0000 		call __mulsf3
 566               	.LVL52:
 567 0232 9B01      		movw r18,r22
 568 0234 AC01      		movw r20,r24
 569 0236 2396      		adiw r28,63-60
 570 0238 6CAD      		ldd r22,Y+60
 571 023a 7DAD      		ldd r23,Y+61
 572 023c 8EAD      		ldd r24,Y+62
 573 023e 9FAD      		ldd r25,Y+63
 574 0240 2397      		sbiw r28,63-60
 575 0242 0E94 0000 		call __addsf3
 576               	.LVL53:
 577 0246 2396      		adiw r28,63-60
 578 0248 6CAF      		std Y+60,r22
 579 024a 7DAF      		std Y+61,r23
 580 024c 8EAF      		std Y+62,r24
 581 024e 9FAF      		std Y+63,r25
 582 0250 2397      		sbiw r28,63-60
 583               	.LVL54:
 584               	.LBE114:
 166:../src/range_algs.c **** 		uint8_t rx = i%6;
 585               		.loc 1 166 0 discriminator 4
 586 0252 3394      		inc r3
 587               	.LVL55:
 588 0254 F4E2      		ldi r31,lo8(36)
 589 0256 3F16      		cp r3,r31
 590 0258 01F4      		brne .+2
 591 025a 00C0      		rjmp .L14
 592 025c 329C      		mul r3,r2
 593 025e 812D      		mov r24,r1
 594 0260 1124      		clr __zero_reg__
 595 0262 8695      		lsr r24
 596 0264 8695      		lsr r24
 597 0266 982F      		mov r25,r24
 598 0268 990F      		lsl r25
 599 026a 890F      		add r24,r25
 600 026c 880F      		lsl r24
 601 026e E32D      		mov r30,r3
 602 0270 E81B      		sub r30,r24
 603 0272 F0E0      		ldi r31,0
 604 0274 EE0F      		lsl r30
 605 0276 FF1F      		rol r31
 606 0278 EE0F      		lsl r30
 607 027a FF1F      		rol r31
 608 027c EE0F      		lsl r30
 609 027e FF1F      		rol r31
 610 0280 E050      		subi r30,lo8(-(hats))
 611 0282 F040      		sbci r31,hi8(-(hats))
 612 0284 4080      		ld r4,Z
 613 0286 5180      		ldd r5,Z+1
 614 0288 6280      		ldd r6,Z+2
 615 028a 7380      		ldd r7,Z+3
 616 028c 8481      		ldd r24,Z+4
 617 028e 9581      		ldd r25,Z+5
 618 0290 A681      		ldd r26,Z+6
 619 0292 B781      		ldd r27,Z+7
 620 0294 8BAF      		std Y+59,r24
 621 0296 9CAF      		std Y+60,r25
 622 0298 ADAF      		std Y+61,r26
 623 029a BEAF      		std Y+62,r27
 624               	.LVL56:
 625               	.L10:
 626               	.LBB115:
 169:../src/range_algs.c **** 		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
 627               		.loc 1 169 0
 628 029c 329C      		mul r3,r2
 629 029e 812D      		mov r24,r1
 630 02a0 1124      		clr __zero_reg__
 631 02a2 8695      		lsr r24
 632 02a4 8695      		lsr r24
 633 02a6 01E0      		ldi r16,lo8(1)
 634 02a8 10E0      		ldi r17,0
 635 02aa 0C0F      		add r16,r28
 636 02ac 1D1F      		adc r17,r29
 637 02ae B8E0      		ldi r27,lo8(8)
 638 02b0 8B9F      		mul r24,r27
 639 02b2 000D      		add r16,r0
 640 02b4 111D      		adc r17,r1
 641 02b6 1124      		clr __zero_reg__
 642 02b8 F801      		movw r30,r16
 643 02ba 8080      		ld r8,Z
 644 02bc 9180      		ldd r9,Z+1
 645 02be A280      		ldd r10,Z+2
 646 02c0 B380      		ldd r11,Z+3
 647 02c2 A501      		movw r20,r10
 648 02c4 9401      		movw r18,r8
 649 02c6 2996      		adiw r28,69-60
 650 02c8 6CAD      		ldd r22,Y+60
 651 02ca 7DAD      		ldd r23,Y+61
 652 02cc 8EAD      		ldd r24,Y+62
 653 02ce 9FAD      		ldd r25,Y+63
 654 02d0 2997      		sbiw r28,69-60
 655 02d2 0E94 0000 		call __addsf3
 656               	.LVL57:
 657 02d6 A301      		movw r20,r6
 658 02d8 9201      		movw r18,r4
 659 02da 0E94 0000 		call __subsf3
 660               	.LVL58:
 661 02de 6BAB      		std Y+51,r22
 662 02e0 7CAB      		std Y+52,r23
 663 02e2 8DAB      		std Y+53,r24
 664 02e4 9EAB      		std Y+54,r25
 665               	.LVL59:
 170:../src/range_algs.c **** 		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
 666               		.loc 1 170 0
 667 02e6 D801      		movw r26,r16
 668 02e8 1496      		adiw r26,4
 669 02ea 8D91      		ld r24,X+
 670 02ec 9D91      		ld r25,X+
 671 02ee 0D90      		ld __tmp_reg__,X+
 672 02f0 BC91      		ld r27,X
 673 02f2 A02D      		mov r26,__tmp_reg__
 674 02f4 8FAB      		std Y+55,r24
 675 02f6 98AF      		std Y+56,r25
 676 02f8 A9AF      		std Y+57,r26
 677 02fa BAAF      		std Y+58,r27
 678 02fc 9C01      		movw r18,r24
 679 02fe AD01      		movw r20,r26
 680 0300 2D96      		adiw r28,73-60
 681 0302 6CAD      		ldd r22,Y+60
 682 0304 7DAD      		ldd r23,Y+61
 683 0306 8EAD      		ldd r24,Y+62
 684 0308 9FAD      		ldd r25,Y+63
 685 030a 2D97      		sbiw r28,73-60
 686               	.LVL60:
 687 030c 0E94 0000 		call __addsf3
 688               	.LVL61:
 689 0310 2BAD      		ldd r18,Y+59
 690 0312 3CAD      		ldd r19,Y+60
 691 0314 4DAD      		ldd r20,Y+61
 692 0316 5EAD      		ldd r21,Y+62
 693 0318 0E94 0000 		call __subsf3
 694               	.LVL62:
 695 031c 6B01      		movw r12,r22
 696 031e 7C01      		movw r14,r24
 697               	.LVL63:
 172:../src/range_algs.c **** 		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
 698               		.loc 1 172 0
 699 0320 A301      		movw r20,r6
 700 0322 9201      		movw r18,r4
 701 0324 6BA9      		ldd r22,Y+51
 702 0326 7CA9      		ldd r23,Y+52
 703 0328 8DA9      		ldd r24,Y+53
 704 032a 9EA9      		ldd r25,Y+54
 705 032c 0E94 0000 		call __mulsf3
 706               	.LVL64:
 707 0330 2B01      		movw r4,r22
 708 0332 3C01      		movw r6,r24
 709               	.LVL65:
 710 0334 2BAD      		ldd r18,Y+59
 711 0336 3CAD      		ldd r19,Y+60
 712 0338 4DAD      		ldd r20,Y+61
 713 033a 5EAD      		ldd r21,Y+62
 714 033c C701      		movw r24,r14
 715 033e B601      		movw r22,r12
 716 0340 0E94 0000 		call __mulsf3
 717               	.LVL66:
 718 0344 9B01      		movw r18,r22
 719 0346 AC01      		movw r20,r24
 720 0348 C301      		movw r24,r6
 721 034a B201      		movw r22,r4
 722 034c 0E94 0000 		call __addsf3
 723               	.LVL67:
 724 0350 2B01      		movw r4,r22
 725 0352 3C01      		movw r6,r24
 726               	.LVL68:
 173:../src/range_algs.c **** 		betaDotP = betaDotP < 0 ? 0 : betaDotP;
 727               		.loc 1 173 0
 728 0354 6BA9      		ldd r22,Y+51
 729 0356 7CA9      		ldd r23,Y+52
 730 0358 8DA9      		ldd r24,Y+53
 731 035a 9EA9      		ldd r25,Y+54
 732 035c 9058      		subi r25,0x80
 733 035e A501      		movw r20,r10
 734 0360 9401      		movw r18,r8
 735 0362 0E94 0000 		call __mulsf3
 736               	.LVL69:
 737 0366 4B01      		movw r8,r22
 738 0368 5C01      		movw r10,r24
 739 036a C701      		movw r24,r14
 740 036c B601      		movw r22,r12
 741 036e 9058      		subi r25,0x80
 742 0370 2FA9      		ldd r18,Y+55
 743 0372 38AD      		ldd r19,Y+56
 744 0374 49AD      		ldd r20,Y+57
 745 0376 5AAD      		ldd r21,Y+58
 746 0378 0E94 0000 		call __mulsf3
 747               	.LVL70:
 748 037c 9B01      		movw r18,r22
 749 037e AC01      		movw r20,r24
 750 0380 C501      		movw r24,r10
 751 0382 B401      		movw r22,r8
 752 0384 0E94 0000 		call __addsf3
 753               	.LVL71:
 754 0388 4B01      		movw r8,r22
 755 038a 5C01      		movw r10,r24
 756               	.LVL72:
 174:../src/range_algs.c **** 		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
 757               		.loc 1 174 0
 758 038c 20E0      		ldi r18,0
 759 038e 30E0      		ldi r19,0
 760 0390 A901      		movw r20,r18
 761 0392 0E94 0000 		call __ltsf2
 762               	.LVL73:
 763 0396 87FF      		sbrs r24,7
 764 0398 00C0      		rjmp .L12
 765 039a 812C      		mov r8,__zero_reg__
 766 039c 912C      		mov r9,__zero_reg__
 767 039e 5401      		movw r10,r8
 768               	.LVL74:
 769 03a0 00C0      		rjmp .L12
 770               	.LVL75:
 771               	.L14:
 772               	.LBE115:
 773               	.LBE113:
 181:../src/range_algs.c **** }
 774               		.loc 1 181 0
 775 03a2 2396      		adiw r28,63-60
 776 03a4 6CAD      		ldd r22,Y+60
 777 03a6 7DAD      		ldd r23,Y+61
 778 03a8 8EAD      		ldd r24,Y+62
 779 03aa 9FAD      		ldd r25,Y+63
 780 03ac 2397      		sbiw r28,63-60
 781               	.LVL76:
 782               	/* epilogue start */
 182:../src/range_algs.c **** 
 783               		.loc 1 182 0
 784 03ae C45B      		subi r28,-76
 785 03b0 DF4F      		sbci r29,-1
 786 03b2 CDBF      		out __SP_L__,r28
 787 03b4 DEBF      		out __SP_H__,r29
 788 03b6 DF91      		pop r29
 789 03b8 CF91      		pop r28
 790 03ba 1F91      		pop r17
 791 03bc 0F91      		pop r16
 792 03be FF90      		pop r15
 793 03c0 EF90      		pop r14
 794               	.LVL77:
 795 03c2 DF90      		pop r13
 796 03c4 CF90      		pop r12
 797 03c6 BF90      		pop r11
 798 03c8 AF90      		pop r10
 799 03ca 9F90      		pop r9
 800 03cc 8F90      		pop r8
 801 03ce 7F90      		pop r7
 802 03d0 6F90      		pop r6
 803 03d2 5F90      		pop r5
 804 03d4 4F90      		pop r4
 805 03d6 3F90      		pop r3
 806               	.LVL78:
 807 03d8 2F90      		pop r2
 181:../src/range_algs.c **** }
 808               		.loc 1 181 0
 809 03da 0C94 0000 		jmp magicRangeFunc
 810               	.LVL79:
 811               		.cfi_endproc
 812               	.LFE69:
 814               		.section	.text.calculate_error,"ax",@progbits
 815               	.global	calculate_error
 817               	calculate_error:
 818               	.LFB70:
 184:../src/range_algs.c **** 	r = r<46 ? 46 : r;
 819               		.loc 1 184 0
 820               		.cfi_startproc
 821               	.LVL80:
 822 0000 2F92      		push r2
 823               	.LCFI24:
 824               		.cfi_def_cfa_offset 4
 825               		.cfi_offset 2, -3
 826 0002 3F92      		push r3
 827               	.LCFI25:
 828               		.cfi_def_cfa_offset 5
 829               		.cfi_offset 3, -4
 830 0004 4F92      		push r4
 831               	.LCFI26:
 832               		.cfi_def_cfa_offset 6
 833               		.cfi_offset 4, -5
 834 0006 5F92      		push r5
 835               	.LCFI27:
 836               		.cfi_def_cfa_offset 7
 837               		.cfi_offset 5, -6
 838 0008 6F92      		push r6
 839               	.LCFI28:
 840               		.cfi_def_cfa_offset 8
 841               		.cfi_offset 6, -7
 842 000a 7F92      		push r7
 843               	.LCFI29:
 844               		.cfi_def_cfa_offset 9
 845               		.cfi_offset 7, -8
 846 000c 8F92      		push r8
 847               	.LCFI30:
 848               		.cfi_def_cfa_offset 10
 849               		.cfi_offset 8, -9
 850 000e 9F92      		push r9
 851               	.LCFI31:
 852               		.cfi_def_cfa_offset 11
 853               		.cfi_offset 9, -10
 854 0010 AF92      		push r10
 855               	.LCFI32:
 856               		.cfi_def_cfa_offset 12
 857               		.cfi_offset 10, -11
 858 0012 BF92      		push r11
 859               	.LCFI33:
 860               		.cfi_def_cfa_offset 13
 861               		.cfi_offset 11, -12
 862 0014 CF92      		push r12
 863               	.LCFI34:
 864               		.cfi_def_cfa_offset 14
 865               		.cfi_offset 12, -13
 866 0016 DF92      		push r13
 867               	.LCFI35:
 868               		.cfi_def_cfa_offset 15
 869               		.cfi_offset 13, -14
 870 0018 EF92      		push r14
 871               	.LCFI36:
 872               		.cfi_def_cfa_offset 16
 873               		.cfi_offset 14, -15
 874 001a FF92      		push r15
 875               	.LCFI37:
 876               		.cfi_def_cfa_offset 17
 877               		.cfi_offset 15, -16
 878 001c 0F93      		push r16
 879               	.LCFI38:
 880               		.cfi_def_cfa_offset 18
 881               		.cfi_offset 16, -17
 882 001e 1F93      		push r17
 883               	.LCFI39:
 884               		.cfi_def_cfa_offset 19
 885               		.cfi_offset 17, -18
 886 0020 CF93      		push r28
 887               	.LCFI40:
 888               		.cfi_def_cfa_offset 20
 889               		.cfi_offset 28, -19
 890 0022 DF93      		push r29
 891               	.LCFI41:
 892               		.cfi_def_cfa_offset 21
 893               		.cfi_offset 29, -20
 894 0024 CDB7      		in r28,__SP_L__
 895 0026 DEB7      		in r29,__SP_H__
 896               	.LCFI42:
 897               		.cfi_def_cfa_register 28
 898 0028 CC5E      		subi r28,-20
 899 002a D109      		sbc r29,__zero_reg__
 900               	.LCFI43:
 901               		.cfi_def_cfa_offset 257
 902 002c CDBF      		out __SP_L__,r28
 903 002e DEBF      		out __SP_H__,r29
 904               	/* prologue: function */
 905               	/* frame size = 236 */
 906               	/* stack size = 254 */
 907               	.L__stack_usage = 254
 908 0030 4B01      		movw r8,r22
 909 0032 5C01      		movw r10,r24
 910 0034 2901      		movw r4,r18
 911 0036 3A01      		movw r6,r20
 912 0038 6701      		movw r12,r14
 913 003a 7801      		movw r14,r16
 185:../src/range_algs.c **** 	float bigR[2] = {-r*sin(b), r*cos(b)};
 914               		.loc 1 185 0
 915 003c 20E0      		ldi r18,0
 916 003e 30E0      		ldi r19,0
 917 0040 48E3      		ldi r20,lo8(56)
 918 0042 52E4      		ldi r21,lo8(66)
 919               	.LVL81:
 920 0044 0E94 0000 		call __ltsf2
 921               	.LVL82:
 922 0048 87FD      		sbrc r24,7
 923 004a 00C0      		rjmp .L27
 924 004c D501      		movw r26,r10
 925 004e C401      		movw r24,r8
 926 0050 B058      		subi r27,0x80
 927 0052 CD53      		subi r28,lo8(-195)
 928 0054 DF4F      		sbci r29,hi8(-195)
 929 0056 8883      		st Y,r24
 930 0058 9983      		std Y+1,r25
 931 005a AA83      		std Y+2,r26
 932 005c BB83      		std Y+3,r27
 933 005e C35C      		subi r28,lo8(195)
 934 0060 D040      		sbci r29,hi8(195)
 935               	.LVL83:
 936               	.L17:
 186:../src/range_algs.c **** 	float txHats[6][2];
 937               		.loc 1 186 0 discriminator 4
 938 0062 C301      		movw r24,r6
 939 0064 B201      		movw r22,r4
 940 0066 0E94 0000 		call sin
 941               	.LVL84:
 942 006a CD53      		subi r28,lo8(-195)
 943 006c DF4F      		sbci r29,hi8(-195)
 944 006e 2881      		ld r18,Y
 945 0070 3981      		ldd r19,Y+1
 946 0072 4A81      		ldd r20,Y+2
 947 0074 5B81      		ldd r21,Y+3
 948 0076 C35C      		subi r28,lo8(195)
 949 0078 D040      		sbci r29,hi8(195)
 950 007a 0E94 0000 		call __mulsf3
 951               	.LVL85:
 952 007e CD51      		subi r28,lo8(-227)
 953 0080 DF4F      		sbci r29,hi8(-227)
 954 0082 6883      		st Y,r22
 955 0084 7983      		std Y+1,r23
 956 0086 8A83      		std Y+2,r24
 957 0088 9B83      		std Y+3,r25
 958 008a C35E      		subi r28,lo8(227)
 959 008c D040      		sbci r29,hi8(227)
 960               	.LVL86:
 961 008e C301      		movw r24,r6
 962 0090 B201      		movw r22,r4
 963               	.LVL87:
 964 0092 0E94 0000 		call cos
 965               	.LVL88:
 966 0096 9B01      		movw r18,r22
 967 0098 AC01      		movw r20,r24
 968 009a C501      		movw r24,r10
 969 009c B401      		movw r22,r8
 970 009e 0E94 0000 		call __mulsf3
 971               	.LVL89:
 972 00a2 C951      		subi r28,lo8(-231)
 973 00a4 DF4F      		sbci r29,hi8(-231)
 974 00a6 6883      		st Y,r22
 975 00a8 7983      		std Y+1,r23
 976 00aa 8A83      		std Y+2,r24
 977 00ac 9B83      		std Y+3,r25
 978 00ae C75E      		subi r28,lo8(231)
 979 00b0 D040      		sbci r29,hi8(231)
 980               	.LVL90:
 981 00b2 C701      		movw r24,r14
 982 00b4 B601      		movw r22,r12
 983               	.LVL91:
 984 00b6 0E94 0000 		call cos
 985               	.LVL92:
 986 00ba CD53      		subi r28,lo8(-195)
 987 00bc DF4F      		sbci r29,hi8(-195)
 988 00be 6883      		st Y,r22
 989 00c0 7983      		std Y+1,r23
 990 00c2 8A83      		std Y+2,r24
 991 00c4 9B83      		std Y+3,r25
 992 00c6 C35C      		subi r28,lo8(195)
 993 00c8 D040      		sbci r29,hi8(195)
 994 00ca C701      		movw r24,r14
 995 00cc B601      		movw r22,r12
 996 00ce 0E94 0000 		call sin
 997               	.LVL93:
 998 00d2 2B01      		movw r4,r22
 999 00d4 3C01      		movw r6,r24
 1000               	.LVL94:
 1001 00d6 DE01      		movw r26,r28
 1002 00d8 AF56      		subi r26,111
 1003 00da BF4F      		sbci r27,-1
 1004 00dc CF53      		subi r28,lo8(-193)
 1005 00de DF4F      		sbci r29,hi8(-193)
 1006 00e0 A883      		st Y,r26
 1007 00e2 B983      		std Y+1,r27
 1008 00e4 C15C      		subi r28,lo8(193)
 1009 00e6 D040      		sbci r29,hi8(193)
 1010 00e8 8D01      		movw r16,r26
 1011 00ea 30E0      		ldi r19,lo8(hats)
 1012 00ec 232E      		mov r2,r19
 1013 00ee 30E0      		ldi r19,hi8(hats)
 1014 00f0 332E      		mov r3,r19
 1015 00f2 FD01      		movw r30,r26
 1016 00f4 F096      		adiw r30,48
 1017 00f6 C553      		subi r28,lo8(-203)
 1018 00f8 DF4F      		sbci r29,hi8(-203)
 1019 00fa E883      		st Y,r30
 1020 00fc F983      		std Y+1,r31
 1021 00fe CB5C      		subi r28,lo8(203)
 1022 0100 D040      		sbci r29,hi8(203)
 1023 0102 44EA      		ldi r20,lo8(-92)
 1024 0104 842E      		mov r8,r20
 1025 0106 4BE6      		ldi r20,lo8(107)
 1026 0108 942E      		mov r9,r20
 1027 010a 48E9      		ldi r20,lo8(-104)
 1028 010c A42E      		mov r10,r20
 1029 010e 41E4      		ldi r20,lo8(65)
 1030 0110 B42E      		mov r11,r20
 1031               	.LVL95:
 1032 0112 C12C      		mov r12,__zero_reg__
 1033 0114 D12C      		mov r13,__zero_reg__
 1034 0116 50E3      		ldi r21,lo8(48)
 1035 0118 E52E      		mov r14,r21
 1036 011a 51E4      		ldi r21,lo8(65)
 1037 011c F52E      		mov r15,r21
 1038 011e 00C0      		rjmp .L20
 1039               	.LVL96:
 1040               	.L18:
 1041 0120 D101      		movw r26,r2
 1042 0122 CD90      		ld r12,X+
 1043 0124 DD90      		ld r13,X+
 1044 0126 ED90      		ld r14,X+
 1045 0128 FC90      		ld r15,X
 1046 012a 1397      		sbiw r26,3
 1047 012c 1496      		adiw r26,4
 1048 012e 8D90      		ld r8,X+
 1049 0130 9D90      		ld r9,X+
 1050 0132 AD90      		ld r10,X+
 1051 0134 BC90      		ld r11,X
 1052 0136 1797      		sbiw r26,4+3
 1053               	.L20:
 1054               	.LBB116:
 189:../src/range_algs.c **** 		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
 1055               		.loc 1 189 0 discriminator 3
 1056 0138 CD53      		subi r28,lo8(-195)
 1057 013a DF4F      		sbci r29,hi8(-195)
 1058 013c 2881      		ld r18,Y
 1059 013e 3981      		ldd r19,Y+1
 1060 0140 4A81      		ldd r20,Y+2
 1061 0142 5B81      		ldd r21,Y+3
 1062 0144 C35C      		subi r28,lo8(195)
 1063 0146 D040      		sbci r29,hi8(195)
 1064 0148 C701      		movw r24,r14
 1065 014a B601      		movw r22,r12
 1066 014c 0E94 0000 		call __mulsf3
 1067               	.LVL97:
 1068 0150 C953      		subi r28,lo8(-199)
 1069 0152 DF4F      		sbci r29,hi8(-199)
 1070 0154 6883      		st Y,r22
 1071 0156 7983      		std Y+1,r23
 1072 0158 8A83      		std Y+2,r24
 1073 015a 9B83      		std Y+3,r25
 1074 015c C75C      		subi r28,lo8(199)
 1075 015e D040      		sbci r29,hi8(199)
 1076 0160 A301      		movw r20,r6
 1077 0162 9201      		movw r18,r4
 1078 0164 C501      		movw r24,r10
 1079 0166 B401      		movw r22,r8
 1080 0168 0E94 0000 		call __mulsf3
 1081               	.LVL98:
 1082 016c 9B01      		movw r18,r22
 1083 016e AC01      		movw r20,r24
 1084 0170 C953      		subi r28,lo8(-199)
 1085 0172 DF4F      		sbci r29,hi8(-199)
 1086 0174 6881      		ld r22,Y
 1087 0176 7981      		ldd r23,Y+1
 1088 0178 8A81      		ldd r24,Y+2
 1089 017a 9B81      		ldd r25,Y+3
 1090 017c C75C      		subi r28,lo8(199)
 1091 017e D040      		sbci r29,hi8(199)
 1092 0180 0E94 0000 		call __subsf3
 1093               	.LVL99:
 1094 0184 D801      		movw r26,r16
 1095 0186 6D93      		st X+,r22
 1096 0188 7D93      		st X+,r23
 1097 018a 8D93      		st X+,r24
 1098 018c 9C93      		st X,r25
 1099 018e 1397      		sbiw r26,3
 190:../src/range_algs.c **** 	}
 1100               		.loc 1 190 0 discriminator 3
 1101 0190 A301      		movw r20,r6
 1102 0192 9201      		movw r18,r4
 1103 0194 C701      		movw r24,r14
 1104 0196 B601      		movw r22,r12
 1105 0198 0E94 0000 		call __mulsf3
 1106               	.LVL100:
 1107 019c 6B01      		movw r12,r22
 1108 019e 7C01      		movw r14,r24
 1109 01a0 A501      		movw r20,r10
 1110 01a2 9401      		movw r18,r8
 1111 01a4 CD53      		subi r28,lo8(-195)
 1112 01a6 DF4F      		sbci r29,hi8(-195)
 1113 01a8 6881      		ld r22,Y
 1114 01aa 7981      		ldd r23,Y+1
 1115 01ac 8A81      		ldd r24,Y+2
 1116 01ae 9B81      		ldd r25,Y+3
 1117 01b0 C35C      		subi r28,lo8(195)
 1118 01b2 D040      		sbci r29,hi8(195)
 1119 01b4 0E94 0000 		call __mulsf3
 1120               	.LVL101:
 1121 01b8 9B01      		movw r18,r22
 1122 01ba AC01      		movw r20,r24
 1123 01bc C701      		movw r24,r14
 1124 01be B601      		movw r22,r12
 1125 01c0 0E94 0000 		call __addsf3
 1126               	.LVL102:
 1127 01c4 F801      		movw r30,r16
 1128 01c6 6483      		std Z+4,r22
 1129 01c8 7583      		std Z+5,r23
 1130 01ca 8683      		std Z+6,r24
 1131 01cc 9783      		std Z+7,r25
 1132 01ce 085F      		subi r16,-8
 1133 01d0 1F4F      		sbci r17,-1
 1134 01d2 F8E0      		ldi r31,8
 1135 01d4 2F0E      		add r2,r31
 1136 01d6 311C      		adc r3,__zero_reg__
 188:../src/range_algs.c **** 		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
 1137               		.loc 1 188 0 discriminator 3
 1138 01d8 C553      		subi r28,lo8(-203)
 1139 01da DF4F      		sbci r29,hi8(-203)
 1140 01dc 8881      		ld r24,Y
 1141 01de 9981      		ldd r25,Y+1
 1142 01e0 CB5C      		subi r28,lo8(203)
 1143 01e2 D040      		sbci r29,hi8(203)
 1144 01e4 0817      		cp r16,r24
 1145 01e6 1907      		cpc r17,r25
 1146 01e8 01F0      		breq .+2
 1147 01ea 00C0      		rjmp .L18
 1148 01ec A0E0      		ldi r26,lo8(brightMeas)
 1149 01ee B0E0      		ldi r27,hi8(brightMeas)
 1150 01f0 C551      		subi r28,lo8(-235)
 1151 01f2 DF4F      		sbci r29,hi8(-235)
 1152 01f4 A883      		st Y,r26
 1153 01f6 B983      		std Y+1,r27
 1154 01f8 CB5E      		subi r28,lo8(235)
 1155 01fa D040      		sbci r29,hi8(235)
 1156 01fc FE01      		movw r30,r28
 1157 01fe 3196      		adiw r30,1
 1158 0200 1F01      		movw r2,r30
 188:../src/range_algs.c **** 		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
 1159               		.loc 1 188 0 is_stmt 0
 1160 0202 C352      		subi r28,lo8(-221)
 1161 0204 DF4F      		sbci r29,hi8(-221)
 1162 0206 E883      		st Y,r30
 1163 0208 F983      		std Y+1,r31
 1164 020a CD5D      		subi r28,lo8(221)
 1165 020c D040      		sbci r29,hi8(221)
 1166 020e C552      		subi r28,lo8(-219)
 1167 0210 DF4F      		sbci r29,hi8(-219)
 1168 0212 A883      		st Y,r26
 1169 0214 B983      		std Y+1,r27
 1170 0216 CB5D      		subi r28,lo8(219)
 1171 0218 D040      		sbci r29,hi8(219)
 1172 021a 84EA      		ldi r24,lo8(-92)
 1173 021c 9BE6      		ldi r25,lo8(107)
 1174 021e A8E9      		ldi r26,lo8(-104)
 1175 0220 B1E4      		ldi r27,lo8(65)
 1176 0222 C952      		subi r28,lo8(-215)
 1177 0224 DF4F      		sbci r29,hi8(-215)
 1178 0226 8883      		st Y,r24
 1179 0228 9983      		std Y+1,r25
 1180 022a AA83      		std Y+2,r26
 1181 022c BB83      		std Y+3,r27
 1182 022e C75D      		subi r28,lo8(215)
 1183 0230 D040      		sbci r29,hi8(215)
 1184 0232 412C      		mov r4,__zero_reg__
 1185 0234 512C      		mov r5,__zero_reg__
 1186 0236 20E3      		ldi r18,lo8(48)
 1187 0238 622E      		mov r6,r18
 1188 023a 21E4      		ldi r18,lo8(65)
 1189 023c 722E      		mov r7,r18
 1190 023e 10E0      		ldi r17,0
 1191 0240 C553      		subi r28,lo8(-203)
 1192 0242 DF4F      		sbci r29,hi8(-203)
 1193 0244 1882      		st Y,__zero_reg__
 1194 0246 1982      		std Y+1,__zero_reg__
 1195 0248 1A82      		std Y+2,__zero_reg__
 1196 024a 1B82      		std Y+3,__zero_reg__
 1197 024c CB5C      		subi r28,lo8(203)
 1198 024e D040      		sbci r29,hi8(203)
 1199 0250 C953      		subi r28,lo8(-199)
 1200 0252 DF4F      		sbci r29,hi8(-199)
 1201 0254 1882      		st Y,__zero_reg__
 1202 0256 1982      		std Y+1,__zero_reg__
 1203 0258 1A82      		std Y+2,__zero_reg__
 1204 025a 1B82      		std Y+3,__zero_reg__
 1205 025c C75C      		subi r28,lo8(199)
 1206 025e D040      		sbci r29,hi8(199)
 1207               	.LBE116:
 1208               	.LBB117:
 1209               	.LBB118:
 203:../src/range_algs.c **** 		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
 1210               		.loc 1 203 0 is_stmt 1
 1211 0260 0BEA      		ldi r16,lo8(-85)
 1212 0262 00C0      		rjmp .L19
 1213               	.LVL103:
 1214               	.L21:
 209:../src/range_algs.c **** 		betaDotP = betaDotP < 0 ? 0 : betaDotP;
 1215               		.loc 1 209 0 discriminator 4
 1216 0264 CD53      		subi r28,lo8(-195)
 1217 0266 DF4F      		sbci r29,hi8(-195)
 1218 0268 6881      		ld r22,Y
 1219 026a 7981      		ldd r23,Y+1
 1220 026c 8A81      		ldd r24,Y+2
 1221 026e 9B81      		ldd r25,Y+3
 1222 0270 C35C      		subi r28,lo8(195)
 1223 0272 D040      		sbci r29,hi8(195)
 1224 0274 9058      		subi r25,0x80
 1225 0276 C153      		subi r28,lo8(-207)
 1226 0278 DF4F      		sbci r29,hi8(-207)
 1227 027a 2881      		ld r18,Y
 1228 027c 3981      		ldd r19,Y+1
 1229 027e 4A81      		ldd r20,Y+2
 1230 0280 5B81      		ldd r21,Y+3
 1231 0282 CF5C      		subi r28,lo8(207)
 1232 0284 D040      		sbci r29,hi8(207)
 1233 0286 0E94 0000 		call __mulsf3
 1234               	.LVL104:
 1235 028a 2B01      		movw r4,r22
 1236 028c 3C01      		movw r6,r24
 1237 028e C701      		movw r24,r14
 1238 0290 B601      		movw r22,r12
 1239 0292 9058      		subi r25,0x80
 1240 0294 CD52      		subi r28,lo8(-211)
 1241 0296 DF4F      		sbci r29,hi8(-211)
 1242 0298 2881      		ld r18,Y
 1243 029a 3981      		ldd r19,Y+1
 1244 029c 4A81      		ldd r20,Y+2
 1245 029e 5B81      		ldd r21,Y+3
 1246 02a0 C35D      		subi r28,lo8(211)
 1247 02a2 D040      		sbci r29,hi8(211)
 1248 02a4 0E94 0000 		call __mulsf3
 1249               	.LVL105:
 1250 02a8 9B01      		movw r18,r22
 1251 02aa AC01      		movw r20,r24
 1252 02ac C301      		movw r24,r6
 1253 02ae B201      		movw r22,r4
 1254 02b0 0E94 0000 		call __addsf3
 1255               	.LVL106:
 1256 02b4 6B01      		movw r12,r22
 1257 02b6 7C01      		movw r14,r24
 1258               	.LVL107:
 210:../src/range_algs.c **** 
 1259               		.loc 1 210 0 discriminator 4
 1260 02b8 20E0      		ldi r18,0
 1261 02ba 30E0      		ldi r19,0
 1262 02bc A901      		movw r20,r18
 1263 02be 0E94 0000 		call __ltsf2
 1264               	.LVL108:
 1265 02c2 87FD      		sbrc r24,7
 1266 02c4 00C0      		rjmp .L31
 1267               	.LVL109:
 1268               	.L23:
 212:../src/range_algs.c **** 		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
 1269               		.loc 1 212 0 discriminator 4
 1270 02c6 C552      		subi r28,lo8(-219)
 1271 02c8 DF4F      		sbci r29,hi8(-219)
 1272 02ca E881      		ld r30,Y
 1273 02cc F981      		ldd r31,Y+1
 1274 02ce CB5D      		subi r28,lo8(219)
 1275 02d0 D040      		sbci r29,hi8(219)
 1276 02d2 6191      		ld r22,Z+
 1277 02d4 7191      		ld r23,Z+
 1278 02d6 C552      		subi r28,lo8(-219)
 1279 02d8 DF4F      		sbci r29,hi8(-219)
 1280 02da E883      		st Y,r30
 1281 02dc F983      		std Y+1,r31
 1282 02de CB5D      		subi r28,lo8(219)
 1283 02e0 D040      		sbci r29,hi8(219)
 1284 02e2 072E      		mov __tmp_reg__,r23
 1285 02e4 000C      		lsl r0
 1286 02e6 880B      		sbc r24,r24
 1287 02e8 990B      		sbc r25,r25
 1288 02ea 0E94 0000 		call __floatsisf
 1289               	.LVL110:
 1290 02ee 9B01      		movw r18,r22
 1291 02f0 AC01      		movw r20,r24
 1292 02f2 C953      		subi r28,lo8(-199)
 1293 02f4 DF4F      		sbci r29,hi8(-199)
 1294 02f6 6881      		ld r22,Y
 1295 02f8 7981      		ldd r23,Y+1
 1296 02fa 8A81      		ldd r24,Y+2
 1297 02fc 9B81      		ldd r25,Y+3
 1298 02fe C75C      		subi r28,lo8(199)
 1299 0300 D040      		sbci r29,hi8(199)
 1300 0302 0E94 0000 		call __addsf3
 1301               	.LVL111:
 1302 0306 C953      		subi r28,lo8(-199)
 1303 0308 DF4F      		sbci r29,hi8(-199)
 1304 030a 6883      		st Y,r22
 1305 030c 7983      		std Y+1,r23
 1306 030e 8A83      		std Y+2,r24
 1307 0310 9B83      		std Y+3,r25
 1308 0312 C75C      		subi r28,lo8(199)
 1309 0314 D040      		sbci r29,hi8(199)
 1310               	.LVL112:
 213:../src/range_algs.c **** 		cosAcosBTotal += cosAcosB[i];
 1311               		.loc 1 213 0 discriminator 4
 1312 0316 A701      		movw r20,r14
 1313 0318 9601      		movw r18,r12
 1314 031a C501      		movw r24,r10
 1315 031c B401      		movw r22,r8
 1316               	.LVL113:
 1317 031e 0E94 0000 		call __mulsf3
 1318               	.LVL114:
 1319 0322 6B01      		movw r12,r22
 1320 0324 7C01      		movw r14,r24
 1321               	.LVL115:
 1322 0326 20E0      		ldi r18,0
 1323 0328 30E0      		ldi r19,0
 1324 032a 42EF      		ldi r20,lo8(-14)
 1325 032c 53E4      		ldi r21,lo8(67)
 1326 032e C152      		subi r28,lo8(-223)
 1327 0330 DF4F      		sbci r29,hi8(-223)
 1328 0332 6881      		ld r22,Y
 1329 0334 7981      		ldd r23,Y+1
 1330 0336 8A81      		ldd r24,Y+2
 1331 0338 9B81      		ldd r25,Y+3
 1332 033a CF5D      		subi r28,lo8(223)
 1333 033c D040      		sbci r29,hi8(223)
 1334 033e 0E94 0000 		call __mulsf3
 1335               	.LVL116:
 1336 0342 9B01      		movw r18,r22
 1337 0344 AC01      		movw r20,r24
 1338 0346 C701      		movw r24,r14
 1339 0348 B601      		movw r22,r12
 1340 034a 0E94 0000 		call __divsf3
 1341               	.LVL117:
 1342 034e 9B01      		movw r18,r22
 1343 0350 AC01      		movw r20,r24
 1344 0352 C352      		subi r28,lo8(-221)
 1345 0354 DF4F      		sbci r29,hi8(-221)
 1346 0356 A881      		ld r26,Y
 1347 0358 B981      		ldd r27,Y+1
 1348 035a CD5D      		subi r28,lo8(221)
 1349 035c D040      		sbci r29,hi8(221)
 1350 035e 6D93      		st X+,r22
 1351 0360 7D93      		st X+,r23
 1352 0362 8D93      		st X+,r24
 1353 0364 9D93      		st X+,r25
 1354 0366 C352      		subi r28,lo8(-221)
 1355 0368 DF4F      		sbci r29,hi8(-221)
 1356 036a A883      		st Y,r26
 1357 036c B983      		std Y+1,r27
 1358 036e CD5D      		subi r28,lo8(221)
 1359 0370 D040      		sbci r29,hi8(221)
 214:../src/range_algs.c **** 	}
 1360               		.loc 1 214 0 discriminator 4
 1361 0372 C553      		subi r28,lo8(-203)
 1362 0374 DF4F      		sbci r29,hi8(-203)
 1363 0376 6881      		ld r22,Y
 1364 0378 7981      		ldd r23,Y+1
 1365 037a 8A81      		ldd r24,Y+2
 1366 037c 9B81      		ldd r25,Y+3
 1367 037e CB5C      		subi r28,lo8(203)
 1368 0380 D040      		sbci r29,hi8(203)
 1369 0382 0E94 0000 		call __addsf3
 1370               	.LVL118:
 1371 0386 C553      		subi r28,lo8(-203)
 1372 0388 DF4F      		sbci r29,hi8(-203)
 1373 038a 6883      		st Y,r22
 1374 038c 7983      		std Y+1,r23
 1375 038e 8A83      		std Y+2,r24
 1376 0390 9B83      		std Y+3,r25
 1377 0392 CB5C      		subi r28,lo8(203)
 1378 0394 D040      		sbci r29,hi8(203)
 1379               	.LVL119:
 1380               	.LBE118:
 200:../src/range_algs.c **** 		uint8_t rx = i%6;
 1381               		.loc 1 200 0 discriminator 4
 1382 0396 1F5F      		subi r17,lo8(-(1))
 1383               	.LVL120:
 1384 0398 1432      		cpi r17,lo8(36)
 1385 039a 01F4      		brne .+2
 1386 039c 00C0      		rjmp .L25
 1387 039e 109F      		mul r17,r16
 1388 03a0 812D      		mov r24,r1
 1389 03a2 1124      		clr __zero_reg__
 1390 03a4 8695      		lsr r24
 1391 03a6 8695      		lsr r24
 1392 03a8 982F      		mov r25,r24
 1393 03aa 990F      		lsl r25
 1394 03ac 890F      		add r24,r25
 1395 03ae 880F      		lsl r24
 1396 03b0 E12F      		mov r30,r17
 1397 03b2 E81B      		sub r30,r24
 1398 03b4 F0E0      		ldi r31,0
 1399 03b6 EE0F      		lsl r30
 1400 03b8 FF1F      		rol r31
 1401 03ba EE0F      		lsl r30
 1402 03bc FF1F      		rol r31
 1403 03be EE0F      		lsl r30
 1404 03c0 FF1F      		rol r31
 1405 03c2 E050      		subi r30,lo8(-(hats))
 1406 03c4 F040      		sbci r31,hi8(-(hats))
 1407 03c6 4080      		ld r4,Z
 1408 03c8 5180      		ldd r5,Z+1
 1409 03ca 6280      		ldd r6,Z+2
 1410 03cc 7380      		ldd r7,Z+3
 1411 03ce 8481      		ldd r24,Z+4
 1412 03d0 9581      		ldd r25,Z+5
 1413 03d2 A681      		ldd r26,Z+6
 1414 03d4 B781      		ldd r27,Z+7
 1415 03d6 C952      		subi r28,lo8(-215)
 1416 03d8 DF4F      		sbci r29,hi8(-215)
 1417 03da 8883      		st Y,r24
 1418 03dc 9983      		std Y+1,r25
 1419 03de AA83      		std Y+2,r26
 1420 03e0 BB83      		std Y+3,r27
 1421 03e2 C75D      		subi r28,lo8(215)
 1422 03e4 D040      		sbci r29,hi8(215)
 1423               	.LVL121:
 1424               	.L19:
 1425               	.LBB119:
 203:../src/range_algs.c **** 		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
 1426               		.loc 1 203 0
 1427 03e6 109F      		mul r17,r16
 1428 03e8 812D      		mov r24,r1
 1429 03ea 1124      		clr __zero_reg__
 1430 03ec 8695      		lsr r24
 1431 03ee 8695      		lsr r24
 1432 03f0 91E9      		ldi r25,lo8(-111)
 1433 03f2 E92E      		mov r14,r25
 1434 03f4 F12C      		mov r15,__zero_reg__
 1435 03f6 EC0E      		add r14,r28
 1436 03f8 FD1E      		adc r15,r29
 1437 03fa B8E0      		ldi r27,lo8(8)
 1438 03fc 8B9F      		mul r24,r27
 1439 03fe E00C      		add r14,r0
 1440 0400 F11C      		adc r15,r1
 1441 0402 1124      		clr __zero_reg__
 1442 0404 D701      		movw r26,r14
 1443 0406 8D91      		ld r24,X+
 1444 0408 9D91      		ld r25,X+
 1445 040a 0D90      		ld __tmp_reg__,X+
 1446 040c BC91      		ld r27,X
 1447 040e A02D      		mov r26,__tmp_reg__
 1448 0410 C153      		subi r28,lo8(-207)
 1449 0412 DF4F      		sbci r29,hi8(-207)
 1450 0414 8883      		st Y,r24
 1451 0416 9983      		std Y+1,r25
 1452 0418 AA83      		std Y+2,r26
 1453 041a BB83      		std Y+3,r27
 1454 041c CF5C      		subi r28,lo8(207)
 1455 041e D040      		sbci r29,hi8(207)
 1456 0420 9C01      		movw r18,r24
 1457 0422 AD01      		movw r20,r26
 1458 0424 CD51      		subi r28,lo8(-227)
 1459 0426 DF4F      		sbci r29,hi8(-227)
 1460 0428 6881      		ld r22,Y
 1461 042a 7981      		ldd r23,Y+1
 1462 042c 8A81      		ldd r24,Y+2
 1463 042e 9B81      		ldd r25,Y+3
 1464 0430 C35E      		subi r28,lo8(227)
 1465 0432 D040      		sbci r29,hi8(227)
 1466 0434 0E94 0000 		call __addsf3
 1467               	.LVL122:
 1468 0438 A301      		movw r20,r6
 1469 043a 9201      		movw r18,r4
 1470 043c 0E94 0000 		call __subsf3
 1471               	.LVL123:
 1472 0440 CD53      		subi r28,lo8(-195)
 1473 0442 DF4F      		sbci r29,hi8(-195)
 1474 0444 6883      		st Y,r22
 1475 0446 7983      		std Y+1,r23
 1476 0448 8A83      		std Y+2,r24
 1477 044a 9B83      		std Y+3,r25
 1478 044c C35C      		subi r28,lo8(195)
 1479 044e D040      		sbci r29,hi8(195)
 1480               	.LVL124:
 204:../src/range_algs.c **** 		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
 1481               		.loc 1 204 0
 1482 0450 D701      		movw r26,r14
 1483 0452 1496      		adiw r26,4
 1484 0454 8D91      		ld r24,X+
 1485 0456 9D91      		ld r25,X+
 1486 0458 0D90      		ld __tmp_reg__,X+
 1487 045a BC91      		ld r27,X
 1488 045c A02D      		mov r26,__tmp_reg__
 1489 045e CD52      		subi r28,lo8(-211)
 1490 0460 DF4F      		sbci r29,hi8(-211)
 1491 0462 8883      		st Y,r24
 1492 0464 9983      		std Y+1,r25
 1493 0466 AA83      		std Y+2,r26
 1494 0468 BB83      		std Y+3,r27
 1495 046a C35D      		subi r28,lo8(211)
 1496 046c D040      		sbci r29,hi8(211)
 1497 046e 9C01      		movw r18,r24
 1498 0470 AD01      		movw r20,r26
 1499 0472 C951      		subi r28,lo8(-231)
 1500 0474 DF4F      		sbci r29,hi8(-231)
 1501 0476 6881      		ld r22,Y
 1502 0478 7981      		ldd r23,Y+1
 1503 047a 8A81      		ldd r24,Y+2
 1504 047c 9B81      		ldd r25,Y+3
 1505 047e C75E      		subi r28,lo8(231)
 1506 0480 D040      		sbci r29,hi8(231)
 1507               	.LVL125:
 1508 0482 0E94 0000 		call __addsf3
 1509               	.LVL126:
 1510 0486 C952      		subi r28,lo8(-215)
 1511 0488 DF4F      		sbci r29,hi8(-215)
 1512 048a 2881      		ld r18,Y
 1513 048c 3981      		ldd r19,Y+1
 1514 048e 4A81      		ldd r20,Y+2
 1515 0490 5B81      		ldd r21,Y+3
 1516 0492 C75D      		subi r28,lo8(215)
 1517 0494 D040      		sbci r29,hi8(215)
 1518 0496 0E94 0000 		call __subsf3
 1519               	.LVL127:
 1520 049a 6B01      		movw r12,r22
 1521 049c 7C01      		movw r14,r24
 1522               	.LVL128:
 205:../src/range_algs.c **** 
 1523               		.loc 1 205 0
 1524 049e CD53      		subi r28,lo8(-195)
 1525 04a0 DF4F      		sbci r29,hi8(-195)
 1526 04a2 2881      		ld r18,Y
 1527 04a4 3981      		ldd r19,Y+1
 1528 04a6 4A81      		ldd r20,Y+2
 1529 04a8 5B81      		ldd r21,Y+3
 1530 04aa C35C      		subi r28,lo8(195)
 1531 04ac D040      		sbci r29,hi8(195)
 1532 04ae CA01      		movw r24,r20
 1533 04b0 B901      		movw r22,r18
 1534 04b2 0E94 0000 		call __mulsf3
 1535               	.LVL129:
 1536 04b6 4B01      		movw r8,r22
 1537 04b8 5C01      		movw r10,r24
 1538 04ba A701      		movw r20,r14
 1539 04bc 9601      		movw r18,r12
 1540 04be C701      		movw r24,r14
 1541 04c0 B601      		movw r22,r12
 1542 04c2 0E94 0000 		call __mulsf3
 1543               	.LVL130:
 1544 04c6 9B01      		movw r18,r22
 1545 04c8 AC01      		movw r20,r24
 1546 04ca C501      		movw r24,r10
 1547 04cc B401      		movw r22,r8
 1548 04ce 0E94 0000 		call __addsf3
 1549               	.LVL131:
 1550 04d2 C152      		subi r28,lo8(-223)
 1551 04d4 DF4F      		sbci r29,hi8(-223)
 1552 04d6 6883      		st Y,r22
 1553 04d8 7983      		std Y+1,r23
 1554 04da 8A83      		std Y+2,r24
 1555 04dc 9B83      		std Y+3,r25
 1556 04de CF5D      		subi r28,lo8(223)
 1557 04e0 D040      		sbci r29,hi8(223)
 1558               	.LVL132:
 207:../src/range_algs.c **** 		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
 1559               		.loc 1 207 0
 1560 04e2 A301      		movw r20,r6
 1561 04e4 9201      		movw r18,r4
 1562 04e6 CD53      		subi r28,lo8(-195)
 1563 04e8 DF4F      		sbci r29,hi8(-195)
 1564 04ea 6881      		ld r22,Y
 1565 04ec 7981      		ldd r23,Y+1
 1566 04ee 8A81      		ldd r24,Y+2
 1567 04f0 9B81      		ldd r25,Y+3
 1568 04f2 C35C      		subi r28,lo8(195)
 1569 04f4 D040      		sbci r29,hi8(195)
 1570               	.LVL133:
 1571 04f6 0E94 0000 		call __mulsf3
 1572               	.LVL134:
 1573 04fa 4B01      		movw r8,r22
 1574 04fc 5C01      		movw r10,r24
 1575 04fe C952      		subi r28,lo8(-215)
 1576 0500 DF4F      		sbci r29,hi8(-215)
 1577 0502 2881      		ld r18,Y
 1578 0504 3981      		ldd r19,Y+1
 1579 0506 4A81      		ldd r20,Y+2
 1580 0508 5B81      		ldd r21,Y+3
 1581 050a C75D      		subi r28,lo8(215)
 1582 050c D040      		sbci r29,hi8(215)
 1583 050e C701      		movw r24,r14
 1584 0510 B601      		movw r22,r12
 1585 0512 0E94 0000 		call __mulsf3
 1586               	.LVL135:
 1587 0516 9B01      		movw r18,r22
 1588 0518 AC01      		movw r20,r24
 1589 051a C501      		movw r24,r10
 1590 051c B401      		movw r22,r8
 1591 051e 0E94 0000 		call __addsf3
 1592               	.LVL136:
 1593 0522 4B01      		movw r8,r22
 1594 0524 5C01      		movw r10,r24
 1595               	.LVL137:
 208:../src/range_algs.c **** 		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
 1596               		.loc 1 208 0
 1597 0526 20E0      		ldi r18,0
 1598 0528 30E0      		ldi r19,0
 1599 052a A901      		movw r20,r18
 1600 052c 0E94 0000 		call __ltsf2
 1601               	.LVL138:
 1602 0530 87FF      		sbrs r24,7
 1603 0532 00C0      		rjmp .L21
 1604 0534 812C      		mov r8,__zero_reg__
 1605 0536 912C      		mov r9,__zero_reg__
 1606 0538 5401      		movw r10,r8
 1607               	.LVL139:
 1608 053a 00C0      		rjmp .L21
 1609               	.LVL140:
 1610               	.L31:
 210:../src/range_algs.c **** 
 1611               		.loc 1 210 0
 1612 053c C12C      		mov r12,__zero_reg__
 1613 053e D12C      		mov r13,__zero_reg__
 1614 0540 7601      		movw r14,r12
 1615               	.LVL141:
 1616 0542 00C0      		rjmp .L23
 1617               	.LVL142:
 1618               	.L25:
 1619               	.LBE119:
 200:../src/range_algs.c **** 		uint8_t rx = i%6;
 1620               		.loc 1 200 0
 1621 0544 C12C      		mov r12,__zero_reg__
 1622 0546 D12C      		mov r13,__zero_reg__
 1623 0548 7601      		movw r14,r12
 1624 054a C551      		subi r28,lo8(-235)
 1625 054c DF4F      		sbci r29,hi8(-235)
 1626 054e 0881      		ld r16,Y
 1627 0550 1981      		ldd r17,Y+1
 1628 0552 CB5E      		subi r28,lo8(235)
 1629 0554 D040      		sbci r29,hi8(235)
 1630               	.LVL143:
 1631               	.L26:
 1632               	.LBE117:
 1633               	.LBB120:
 218:../src/range_algs.c **** 	}
 1634               		.loc 1 218 0 discriminator 3
 1635 0556 D801      		movw r26,r16
 1636 0558 6D91      		ld r22,X+
 1637 055a 7D91      		ld r23,X+
 1638 055c 8D01      		movw r16,r26
 1639 055e F101      		movw r30,r2
 1640 0560 4190      		ld r4,Z+
 1641 0562 5190      		ld r5,Z+
 1642 0564 6190      		ld r6,Z+
 1643 0566 7190      		ld r7,Z+
 1644 0568 1F01      		movw r2,r30
 1645 056a 072E      		mov __tmp_reg__,r23
 1646 056c 000C      		lsl r0
 1647 056e 880B      		sbc r24,r24
 1648 0570 990B      		sbc r25,r25
 1649 0572 0E94 0000 		call __floatsisf
 1650               	.LVL144:
 1651 0576 C953      		subi r28,lo8(-199)
 1652 0578 DF4F      		sbci r29,hi8(-199)
 1653 057a 2881      		ld r18,Y
 1654 057c 3981      		ldd r19,Y+1
 1655 057e 4A81      		ldd r20,Y+2
 1656 0580 5B81      		ldd r21,Y+3
 1657 0582 C75C      		subi r28,lo8(199)
 1658 0584 D040      		sbci r29,hi8(199)
 1659 0586 0E94 0000 		call __divsf3
 1660               	.LVL145:
 1661 058a 4B01      		movw r8,r22
 1662 058c 5C01      		movw r10,r24
 1663 058e C553      		subi r28,lo8(-203)
 1664 0590 DF4F      		sbci r29,hi8(-203)
 1665 0592 2881      		ld r18,Y
 1666 0594 3981      		ldd r19,Y+1
 1667 0596 4A81      		ldd r20,Y+2
 1668 0598 5B81      		ldd r21,Y+3
 1669 059a CB5C      		subi r28,lo8(203)
 1670 059c D040      		sbci r29,hi8(203)
 1671 059e C301      		movw r24,r6
 1672 05a0 B201      		movw r22,r4
 1673 05a2 0E94 0000 		call __divsf3
 1674               	.LVL146:
 1675 05a6 9B01      		movw r18,r22
 1676 05a8 AC01      		movw r20,r24
 1677 05aa C501      		movw r24,r10
 1678 05ac B401      		movw r22,r8
 1679 05ae 0E94 0000 		call __subsf3
 1680               	.LVL147:
 1681 05b2 9B01      		movw r18,r22
 1682 05b4 AC01      		movw r20,r24
 1683 05b6 5F77      		andi r21,0x7f
 1684 05b8 C701      		movw r24,r14
 1685 05ba B601      		movw r22,r12
 1686 05bc 0E94 0000 		call __addsf3
 1687               	.LVL148:
 1688 05c0 6B01      		movw r12,r22
 1689 05c2 7C01      		movw r14,r24
 1690               	.LVL149:
 217:../src/range_algs.c **** 		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
 1691               		.loc 1 217 0 discriminator 3
 1692 05c4 CF53      		subi r28,lo8(-193)
 1693 05c6 DF4F      		sbci r29,hi8(-193)
 1694 05c8 8881      		ld r24,Y
 1695 05ca 9981      		ldd r25,Y+1
 1696 05cc C15C      		subi r28,lo8(193)
 1697 05ce D040      		sbci r29,hi8(193)
 1698 05d0 8215      		cp r24,r2
 1699 05d2 9305      		cpc r25,r3
 1700 05d4 01F0      		breq .+2
 1701 05d6 00C0      		rjmp .L26
 1702               	.LBE120:
 242:../src/range_algs.c **** 
 1703               		.loc 1 242 0
 1704 05d8 C701      		movw r24,r14
 1705 05da B601      		movw r22,r12
 1706               	/* epilogue start */
 1707 05dc C451      		subi r28,20
 1708 05de DF4F      		sbci r29,-1
 1709 05e0 CDBF      		out __SP_L__,r28
 1710 05e2 DEBF      		out __SP_H__,r29
 1711 05e4 DF91      		pop r29
 1712 05e6 CF91      		pop r28
 1713 05e8 1F91      		pop r17
 1714               	.LVL150:
 1715 05ea 0F91      		pop r16
 1716 05ec FF90      		pop r15
 1717 05ee EF90      		pop r14
 1718 05f0 DF90      		pop r13
 1719 05f2 CF90      		pop r12
 1720               	.LVL151:
 1721 05f4 BF90      		pop r11
 1722 05f6 AF90      		pop r10
 1723 05f8 9F90      		pop r9
 1724 05fa 8F90      		pop r8
 1725 05fc 7F90      		pop r7
 1726 05fe 6F90      		pop r6
 1727 0600 5F90      		pop r5
 1728 0602 4F90      		pop r4
 1729 0604 3F90      		pop r3
 1730 0606 2F90      		pop r2
 1731 0608 0895      		ret
 1732               	.LVL152:
 1733               	.L27:
 1734 060a 80E0      		ldi r24,0
 1735 060c 90E0      		ldi r25,0
 1736 060e A8E3      		ldi r26,lo8(56)
 1737 0610 B2EC      		ldi r27,lo8(-62)
 1738 0612 CD53      		subi r28,lo8(-195)
 1739 0614 DF4F      		sbci r29,hi8(-195)
 1740 0616 8883      		st Y,r24
 1741 0618 9983      		std Y+1,r25
 1742 061a AA83      		std Y+2,r26
 1743 061c BB83      		std Y+3,r27
 1744 061e C35C      		subi r28,lo8(195)
 1745 0620 D040      		sbci r29,hi8(195)
 185:../src/range_algs.c **** 	float bigR[2] = {-r*sin(b), r*cos(b)};
 1746               		.loc 1 185 0
 1747 0622 812C      		mov r8,__zero_reg__
 1748 0624 912C      		mov r9,__zero_reg__
 1749 0626 68E3      		ldi r22,lo8(56)
 1750 0628 A62E      		mov r10,r22
 1751 062a 62E4      		ldi r22,lo8(66)
 1752 062c B62E      		mov r11,r22
 1753               	.LVL153:
 1754 062e 00C0      		rjmp .L17
 1755               		.cfi_endproc
 1756               	.LFE70:
 1758               		.section	.text.calculate_bearing_and_heading,"ax",@progbits
 1759               	.global	calculate_bearing_and_heading
 1761               	calculate_bearing_and_heading:
 1762               	.LFB71:
 244:../src/range_algs.c **** 	int16_t* fast_bm = (int16_t*)brightMeas;
 1763               		.loc 1 244 0
 1764               		.cfi_startproc
 1765               	.LVL154:
 1766 0000 2F92      		push r2
 1767               	.LCFI44:
 1768               		.cfi_def_cfa_offset 4
 1769               		.cfi_offset 2, -3
 1770 0002 3F92      		push r3
 1771               	.LCFI45:
 1772               		.cfi_def_cfa_offset 5
 1773               		.cfi_offset 3, -4
 1774 0004 4F92      		push r4
 1775               	.LCFI46:
 1776               		.cfi_def_cfa_offset 6
 1777               		.cfi_offset 4, -5
 1778 0006 5F92      		push r5
 1779               	.LCFI47:
 1780               		.cfi_def_cfa_offset 7
 1781               		.cfi_offset 5, -6
 1782 0008 6F92      		push r6
 1783               	.LCFI48:
 1784               		.cfi_def_cfa_offset 8
 1785               		.cfi_offset 6, -7
 1786 000a 7F92      		push r7
 1787               	.LCFI49:
 1788               		.cfi_def_cfa_offset 9
 1789               		.cfi_offset 7, -8
 1790 000c 8F92      		push r8
 1791               	.LCFI50:
 1792               		.cfi_def_cfa_offset 10
 1793               		.cfi_offset 8, -9
 1794 000e 9F92      		push r9
 1795               	.LCFI51:
 1796               		.cfi_def_cfa_offset 11
 1797               		.cfi_offset 9, -10
 1798 0010 AF92      		push r10
 1799               	.LCFI52:
 1800               		.cfi_def_cfa_offset 12
 1801               		.cfi_offset 10, -11
 1802 0012 BF92      		push r11
 1803               	.LCFI53:
 1804               		.cfi_def_cfa_offset 13
 1805               		.cfi_offset 11, -12
 1806 0014 CF92      		push r12
 1807               	.LCFI54:
 1808               		.cfi_def_cfa_offset 14
 1809               		.cfi_offset 12, -13
 1810 0016 DF92      		push r13
 1811               	.LCFI55:
 1812               		.cfi_def_cfa_offset 15
 1813               		.cfi_offset 13, -14
 1814 0018 EF92      		push r14
 1815               	.LCFI56:
 1816               		.cfi_def_cfa_offset 16
 1817               		.cfi_offset 14, -15
 1818 001a FF92      		push r15
 1819               	.LCFI57:
 1820               		.cfi_def_cfa_offset 17
 1821               		.cfi_offset 15, -16
 1822 001c 0F93      		push r16
 1823               	.LCFI58:
 1824               		.cfi_def_cfa_offset 18
 1825               		.cfi_offset 16, -17
 1826 001e 1F93      		push r17
 1827               	.LCFI59:
 1828               		.cfi_def_cfa_offset 19
 1829               		.cfi_offset 17, -18
 1830 0020 CF93      		push r28
 1831               	.LCFI60:
 1832               		.cfi_def_cfa_offset 20
 1833               		.cfi_offset 28, -19
 1834 0022 DF93      		push r29
 1835               	.LCFI61:
 1836               		.cfi_def_cfa_offset 21
 1837               		.cfi_offset 29, -20
 1838 0024 CDB7      		in r28,__SP_L__
 1839 0026 DEB7      		in r29,__SP_H__
 1840               	.LCFI62:
 1841               		.cfi_def_cfa_register 28
 1842 0028 6C97      		sbiw r28,28
 1843               	.LCFI63:
 1844               		.cfi_def_cfa_offset 49
 1845 002a CDBF      		out __SP_L__,r28
 1846 002c DEBF      		out __SP_H__,r29
 1847               	/* prologue: function */
 1848               	/* frame size = 28 */
 1849               	/* stack size = 46 */
 1850               	.L__stack_usage = 46
 1851 002e 898F      		std Y+25,r24
 1852 0030 9A8F      		std Y+26,r25
 1853 0032 6B8F      		std Y+27,r22
 1854 0034 7C8F      		std Y+28,r23
 1855               	.LVL155:
 1856 0036 20E0      		ldi r18,lo8(brightMeas)
 1857 0038 222E      		mov r2,r18
 1858 003a 20E0      		ldi r18,hi8(brightMeas)
 1859 003c 322E      		mov r3,r18
 244:../src/range_algs.c **** 	int16_t* fast_bm = (int16_t*)brightMeas;
 1860               		.loc 1 244 0
 1861 003e 87ED      		ldi r24,lo8(-41)
 1862 0040 93EB      		ldi r25,lo8(-77)
 1863 0042 ADE5      		ldi r26,lo8(93)
 1864 0044 BFE3      		ldi r27,lo8(63)
 1865               	.LVL156:
 1866 0046 8D8B      		std Y+21,r24
 1867 0048 9E8B      		std Y+22,r25
 1868 004a AF8B      		std Y+23,r26
 1869 004c B88F      		std Y+24,r27
 1870 004e 80E0      		ldi r24,0
 1871 0050 90E0      		ldi r25,0
 1872 0052 A0E0      		ldi r26,0
 1873 0054 BFEB      		ldi r27,lo8(-65)
 1874 0056 898B      		std Y+17,r24
 1875 0058 9A8B      		std Y+18,r25
 1876 005a AB8B      		std Y+19,r26
 1877 005c BC8B      		std Y+20,r27
 1878 005e 80E0      		ldi r24,0
 1879 0060 90E0      		ldi r25,0
 1880 0062 A0E8      		ldi r26,lo8(-128)
 1881 0064 BFEB      		ldi r27,lo8(-65)
 1882 0066 8D87      		std Y+13,r24
 1883 0068 9E87      		std Y+14,r25
 1884 006a AF87      		std Y+15,r26
 1885 006c B88B      		std Y+16,r27
 1886 006e 1986      		std Y+9,__zero_reg__
 1887 0070 1A86      		std Y+10,__zero_reg__
 1888 0072 1B86      		std Y+11,__zero_reg__
 1889 0074 1C86      		std Y+12,__zero_reg__
 1890               	.LBB121:
 252:../src/range_algs.c **** 		
 1891               		.loc 1 252 0
 1892 0076 10E0      		ldi r17,0
 1893               	.LBE121:
 250:../src/range_algs.c **** 
 1894               		.loc 1 250 0
 1895 0078 412C      		mov r4,__zero_reg__
 1896 007a 512C      		mov r5,__zero_reg__
 1897 007c 3201      		movw r6,r4
 249:../src/range_algs.c **** 	float headingY = 0;
 1898               		.loc 1 249 0
 1899 007e 5301      		movw r10,r6
 1900 0080 4201      		movw r8,r4
 248:../src/range_algs.c **** 	float headingX = 0;
 1901               		.loc 1 248 0
 1902 0082 4D82      		std Y+5,r4
 1903 0084 5E82      		std Y+6,r5
 1904 0086 6F82      		std Y+7,r6
 1905 0088 7886      		std Y+8,r7
 247:../src/range_algs.c **** 	float bearingY = 0;
 1906               		.loc 1 247 0
 1907 008a 4982      		std Y+1,r4
 1908 008c 5A82      		std Y+2,r5
 1909 008e 6B82      		std Y+3,r6
 1910 0090 7C82      		std Y+4,r7
 1911 0092 0BEA      		ldi r16,lo8(-85)
 1912 0094 00C0      		rjmp .L34
 1913               	.LVL157:
 1914               	.L35:
 1915 0096 109F      		mul r17,r16
 1916 0098 812D      		mov r24,r1
 1917 009a 1124      		clr __zero_reg__
 1918 009c 8695      		lsr r24
 1919 009e 8695      		lsr r24
 1920 00a0 982F      		mov r25,r24
 1921 00a2 990F      		lsl r25
 1922 00a4 980F      		add r25,r24
 1923 00a6 990F      		lsl r25
 1924 00a8 212F      		mov r18,r17
 1925 00aa 291B      		sub r18,r25
 1926 00ac 30E0      		ldi r19,0
 1927 00ae E6E0      		ldi r30,lo8(6)
 1928 00b0 F0E0      		ldi r31,0
 1929 00b2 E81B      		sub r30,r24
 1930 00b4 F109      		sbc r31,__zero_reg__
 1931 00b6 CF01      		movw r24,r30
 1932 00b8 820F      		add r24,r18
 1933 00ba 931F      		adc r25,r19
 1934 00bc 66E0      		ldi r22,lo8(6)
 1935 00be 70E0      		ldi r23,0
 1936 00c0 0E94 0000 		call __divmodhi4
 1937 00c4 FC01      		movw r30,r24
 1938 00c6 EE0F      		lsl r30
 1939 00c8 FF1F      		rol r31
 1940 00ca EE0F      		lsl r30
 1941 00cc FF1F      		rol r31
 1942 00ce EE0F      		lsl r30
 1943 00d0 FF1F      		rol r31
 1944 00d2 E050      		subi r30,lo8(-(headingBasis))
 1945 00d4 F040      		sbci r31,hi8(-(headingBasis))
 1946 00d6 8481      		ldd r24,Z+4
 1947 00d8 9581      		ldd r25,Z+5
 1948 00da A681      		ldd r26,Z+6
 1949 00dc B781      		ldd r27,Z+7
 1950 00de 8987      		std Y+9,r24
 1951 00e0 9A87      		std Y+10,r25
 1952 00e2 AB87      		std Y+11,r26
 1953 00e4 BC87      		std Y+12,r27
 1954 00e6 8081      		ld r24,Z
 1955 00e8 9181      		ldd r25,Z+1
 1956 00ea A281      		ldd r26,Z+2
 1957 00ec B381      		ldd r27,Z+3
 1958 00ee 8D87      		std Y+13,r24
 1959 00f0 9E87      		std Y+14,r25
 1960 00f2 AF87      		std Y+15,r26
 1961 00f4 B88B      		std Y+16,r27
 1962 00f6 220F      		lsl r18
 1963 00f8 331F      		rol r19
 1964 00fa 220F      		lsl r18
 1965 00fc 331F      		rol r19
 1966 00fe 220F      		lsl r18
 1967 0100 331F      		rol r19
 1968 0102 F901      		movw r30,r18
 1969 0104 E050      		subi r30,lo8(-(bearingBasis))
 1970 0106 F040      		sbci r31,hi8(-(bearingBasis))
 1971 0108 8481      		ldd r24,Z+4
 1972 010a 9581      		ldd r25,Z+5
 1973 010c A681      		ldd r26,Z+6
 1974 010e B781      		ldd r27,Z+7
 1975 0110 898B      		std Y+17,r24
 1976 0112 9A8B      		std Y+18,r25
 1977 0114 AB8B      		std Y+19,r26
 1978 0116 BC8B      		std Y+20,r27
 1979 0118 8081      		ld r24,Z
 1980 011a 9181      		ldd r25,Z+1
 1981 011c A281      		ldd r26,Z+2
 1982 011e B381      		ldd r27,Z+3
 1983 0120 8D8B      		std Y+21,r24
 1984 0122 9E8B      		std Y+22,r25
 1985 0124 AF8B      		std Y+23,r26
 1986 0126 B88F      		std Y+24,r27
 1987               	.LVL158:
 1988               	.L34:
 1989               	.LBB122:
 254:../src/range_algs.c **** 		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
 1990               		.loc 1 254 0 discriminator 3
 1991 0128 D101      		movw r26,r2
 1992 012a 6D91      		ld r22,X+
 1993 012c 7D91      		ld r23,X+
 1994 012e 1D01      		movw r2,r26
 1995 0130 072E      		mov __tmp_reg__,r23
 1996 0132 000C      		lsl r0
 1997 0134 880B      		sbc r24,r24
 1998 0136 990B      		sbc r25,r25
 1999 0138 0E94 0000 		call __floatsisf
 2000               	.LVL159:
 2001 013c 6B01      		movw r12,r22
 2002 013e 7C01      		movw r14,r24
 2003               	.LVL160:
 2004 0140 2D89      		ldd r18,Y+21
 2005 0142 3E89      		ldd r19,Y+22
 2006 0144 4F89      		ldd r20,Y+23
 2007 0146 588D      		ldd r21,Y+24
 2008 0148 0E94 0000 		call __mulsf3
 2009               	.LVL161:
 2010 014c 9B01      		movw r18,r22
 2011 014e AC01      		movw r20,r24
 2012 0150 6981      		ldd r22,Y+1
 2013 0152 7A81      		ldd r23,Y+2
 2014 0154 8B81      		ldd r24,Y+3
 2015 0156 9C81      		ldd r25,Y+4
 2016 0158 0E94 0000 		call __addsf3
 2017               	.LVL162:
 2018 015c 6983      		std Y+1,r22
 2019 015e 7A83      		std Y+2,r23
 2020 0160 8B83      		std Y+3,r24
 2021 0162 9C83      		std Y+4,r25
 2022               	.LVL163:
 255:../src/range_algs.c **** 		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
 2023               		.loc 1 255 0 discriminator 3
 2024 0164 2989      		ldd r18,Y+17
 2025 0166 3A89      		ldd r19,Y+18
 2026 0168 4B89      		ldd r20,Y+19
 2027 016a 5C89      		ldd r21,Y+20
 2028 016c C701      		movw r24,r14
 2029 016e B601      		movw r22,r12
 2030               	.LVL164:
 2031 0170 0E94 0000 		call __mulsf3
 2032               	.LVL165:
 2033 0174 9B01      		movw r18,r22
 2034 0176 AC01      		movw r20,r24
 2035 0178 6D81      		ldd r22,Y+5
 2036 017a 7E81      		ldd r23,Y+6
 2037 017c 8F81      		ldd r24,Y+7
 2038 017e 9885      		ldd r25,Y+8
 2039 0180 0E94 0000 		call __addsf3
 2040               	.LVL166:
 2041 0184 6D83      		std Y+5,r22
 2042 0186 7E83      		std Y+6,r23
 2043 0188 8F83      		std Y+7,r24
 2044 018a 9887      		std Y+8,r25
 2045               	.LVL167:
 256:../src/range_algs.c **** 		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
 2046               		.loc 1 256 0 discriminator 3
 2047 018c 2D85      		ldd r18,Y+13
 2048 018e 3E85      		ldd r19,Y+14
 2049 0190 4F85      		ldd r20,Y+15
 2050 0192 5889      		ldd r21,Y+16
 2051 0194 C701      		movw r24,r14
 2052 0196 B601      		movw r22,r12
 2053               	.LVL168:
 2054 0198 0E94 0000 		call __mulsf3
 2055               	.LVL169:
 2056 019c 9B01      		movw r18,r22
 2057 019e AC01      		movw r20,r24
 2058 01a0 C501      		movw r24,r10
 2059 01a2 B401      		movw r22,r8
 2060 01a4 0E94 0000 		call __addsf3
 2061               	.LVL170:
 2062 01a8 4B01      		movw r8,r22
 2063 01aa 5C01      		movw r10,r24
 2064               	.LVL171:
 257:../src/range_algs.c **** 	}
 2065               		.loc 1 257 0 discriminator 3
 2066 01ac 2985      		ldd r18,Y+9
 2067 01ae 3A85      		ldd r19,Y+10
 2068 01b0 4B85      		ldd r20,Y+11
 2069 01b2 5C85      		ldd r21,Y+12
 2070 01b4 C701      		movw r24,r14
 2071 01b6 B601      		movw r22,r12
 2072 01b8 0E94 0000 		call __mulsf3
 2073               	.LVL172:
 2074 01bc 9B01      		movw r18,r22
 2075 01be AC01      		movw r20,r24
 2076 01c0 C301      		movw r24,r6
 2077 01c2 B201      		movw r22,r4
 2078 01c4 0E94 0000 		call __addsf3
 2079               	.LVL173:
 2080 01c8 2B01      		movw r4,r22
 2081 01ca 3C01      		movw r6,r24
 2082               	.LVL174:
 252:../src/range_algs.c **** 		
 2083               		.loc 1 252 0 discriminator 3
 2084 01cc 1F5F      		subi r17,lo8(-(1))
 2085               	.LVL175:
 2086 01ce 1432      		cpi r17,lo8(36)
 2087 01d0 01F0      		breq .+2
 2088 01d2 00C0      		rjmp .L35
 2089               	.LBE122:
 260:../src/range_algs.c **** 	*heading = atan2f(headingY, headingX);
 2090               		.loc 1 260 0
 2091 01d4 2981      		ldd r18,Y+1
 2092 01d6 3A81      		ldd r19,Y+2
 2093 01d8 4B81      		ldd r20,Y+3
 2094 01da 5C81      		ldd r21,Y+4
 2095 01dc 6D81      		ldd r22,Y+5
 2096 01de 7E81      		ldd r23,Y+6
 2097 01e0 8F81      		ldd r24,Y+7
 2098 01e2 9885      		ldd r25,Y+8
 2099 01e4 0E94 0000 		call atan2
 2100               	.LVL176:
 2101 01e8 A98D      		ldd r26,Y+25
 2102 01ea BA8D      		ldd r27,Y+26
 2103 01ec 6D93      		st X+,r22
 2104 01ee 7D93      		st X+,r23
 2105 01f0 8D93      		st X+,r24
 2106 01f2 9C93      		st X,r25
 2107 01f4 1397      		sbiw r26,3
 261:../src/range_algs.c **** }
 2108               		.loc 1 261 0
 2109 01f6 A501      		movw r20,r10
 2110 01f8 9401      		movw r18,r8
 2111 01fa C301      		movw r24,r6
 2112 01fc B201      		movw r22,r4
 2113 01fe 0E94 0000 		call atan2
 2114               	.LVL177:
 2115 0202 EB8D      		ldd r30,Y+27
 2116 0204 FC8D      		ldd r31,Y+28
 2117 0206 6083      		st Z,r22
 2118 0208 7183      		std Z+1,r23
 2119 020a 8283      		std Z+2,r24
 2120 020c 9383      		std Z+3,r25
 2121               	/* epilogue start */
 262:../src/range_algs.c **** 
 2122               		.loc 1 262 0
 2123 020e 6C96      		adiw r28,28
 2124 0210 CDBF      		out __SP_L__,r28
 2125 0212 DEBF      		out __SP_H__,r29
 2126 0214 DF91      		pop r29
 2127 0216 CF91      		pop r28
 2128 0218 1F91      		pop r17
 2129               	.LVL178:
 2130 021a 0F91      		pop r16
 2131 021c FF90      		pop r15
 2132 021e EF90      		pop r14
 2133 0220 DF90      		pop r13
 2134 0222 CF90      		pop r12
 2135 0224 BF90      		pop r11
 2136 0226 AF90      		pop r10
 2137 0228 9F90      		pop r9
 2138 022a 8F90      		pop r8
 2139               	.LVL179:
 2140 022c 7F90      		pop r7
 2141 022e 6F90      		pop r6
 2142 0230 5F90      		pop r5
 2143 0232 4F90      		pop r4
 2144               	.LVL180:
 2145 0234 3F90      		pop r3
 2146 0236 2F90      		pop r2
 2147 0238 0895      		ret
 2148               		.cfi_endproc
 2149               	.LFE71:
 2151               	.global	__nesf2
 2152               	.global	__unordsf2
 2153               	.global	__gtsf2
 2154               	.global	__fixunssfsi
 2155               	.global	__gesf2
 2156               	.global	__fixsfsi
 2157               		.section	.text.use_rnb_data,"ax",@progbits
 2158               	.global	use_rnb_data
 2160               	use_rnb_data:
 2161               	.LFB68:
 116:../src/range_algs.c **** 	//uint32_t start = get_time();
 2162               		.loc 1 116 0
 2163               		.cfi_startproc
 2164 0000 2F92      		push r2
 2165               	.LCFI64:
 2166               		.cfi_def_cfa_offset 4
 2167               		.cfi_offset 2, -3
 2168 0002 3F92      		push r3
 2169               	.LCFI65:
 2170               		.cfi_def_cfa_offset 5
 2171               		.cfi_offset 3, -4
 2172 0004 4F92      		push r4
 2173               	.LCFI66:
 2174               		.cfi_def_cfa_offset 6
 2175               		.cfi_offset 4, -5
 2176 0006 5F92      		push r5
 2177               	.LCFI67:
 2178               		.cfi_def_cfa_offset 7
 2179               		.cfi_offset 5, -6
 2180 0008 6F92      		push r6
 2181               	.LCFI68:
 2182               		.cfi_def_cfa_offset 8
 2183               		.cfi_offset 6, -7
 2184 000a 7F92      		push r7
 2185               	.LCFI69:
 2186               		.cfi_def_cfa_offset 9
 2187               		.cfi_offset 7, -8
 2188 000c 8F92      		push r8
 2189               	.LCFI70:
 2190               		.cfi_def_cfa_offset 10
 2191               		.cfi_offset 8, -9
 2192 000e 9F92      		push r9
 2193               	.LCFI71:
 2194               		.cfi_def_cfa_offset 11
 2195               		.cfi_offset 9, -10
 2196 0010 AF92      		push r10
 2197               	.LCFI72:
 2198               		.cfi_def_cfa_offset 12
 2199               		.cfi_offset 10, -11
 2200 0012 BF92      		push r11
 2201               	.LCFI73:
 2202               		.cfi_def_cfa_offset 13
 2203               		.cfi_offset 11, -12
 2204 0014 CF92      		push r12
 2205               	.LCFI74:
 2206               		.cfi_def_cfa_offset 14
 2207               		.cfi_offset 12, -13
 2208 0016 DF92      		push r13
 2209               	.LCFI75:
 2210               		.cfi_def_cfa_offset 15
 2211               		.cfi_offset 13, -14
 2212 0018 EF92      		push r14
 2213               	.LCFI76:
 2214               		.cfi_def_cfa_offset 16
 2215               		.cfi_offset 14, -15
 2216 001a FF92      		push r15
 2217               	.LCFI77:
 2218               		.cfi_def_cfa_offset 17
 2219               		.cfi_offset 15, -16
 2220 001c 0F93      		push r16
 2221               	.LCFI78:
 2222               		.cfi_def_cfa_offset 18
 2223               		.cfi_offset 16, -17
 2224 001e 1F93      		push r17
 2225               	.LCFI79:
 2226               		.cfi_def_cfa_offset 19
 2227               		.cfi_offset 17, -18
 2228 0020 CF93      		push r28
 2229               	.LCFI80:
 2230               		.cfi_def_cfa_offset 20
 2231               		.cfi_offset 28, -19
 2232 0022 DF93      		push r29
 2233               	.LCFI81:
 2234               		.cfi_def_cfa_offset 21
 2235               		.cfi_offset 29, -20
 2236 0024 CDB7      		in r28,__SP_L__
 2237 0026 DEB7      		in r29,__SP_H__
 2238               	.LCFI82:
 2239               		.cfi_def_cfa_register 28
 2240 0028 2C97      		sbiw r28,12
 2241               	.LCFI83:
 2242               		.cfi_def_cfa_offset 33
 2243 002a CDBF      		out __SP_L__,r28
 2244 002c DEBF      		out __SP_H__,r29
 2245               	/* prologue: function */
 2246               	/* frame size = 12 */
 2247               	/* stack size = 30 */
 2248               	.L__stack_usage = 30
 2249               	.LVL181:
 2250 002e A0E0      		ldi r26,lo8(brightMeas)
 2251 0030 B0E0      		ldi r27,hi8(brightMeas)
 2252 0032 00E0      		ldi r16,lo8(brightMeas+72)
 2253 0034 10E0      		ldi r17,hi8(brightMeas+72)
 2254               	.LBB150:
 2255               	.LBB151:
 266:../src/range_algs.c **** 	uint8_t allColZeroCheck = 0b00111111;
 2256               		.loc 1 266 0
 2257 0036 C12C      		mov r12,__zero_reg__
 2258 0038 D12C      		mov r13,__zero_reg__
 267:../src/range_algs.c **** 
 2259               		.loc 1 267 0
 2260 003a 6FE3      		ldi r22,lo8(63)
 2261               	.LVL182:
 2262               	.L37:
 2263               	.LBE151:
 2264               	.LBE150:
 116:../src/range_algs.c **** 	//uint32_t start = get_time();
 2265               		.loc 1 116 0
 2266 003c FD01      		movw r30,r26
 2267 003e 20E0      		ldi r18,0
 2268 0040 30E0      		ldi r19,0
 2269               	.LVL183:
 2270               	.L39:
 2271               	.LBB160:
 2272               	.LBB158:
 2273               	.LBB152:
 2274               	.LBB153:
 271:../src/range_algs.c **** 			allColZeroCheck &= ~((!!val)<<s);	
 2275               		.loc 1 271 0
 2276 0042 4191      		ld r20,Z+
 2277 0044 5191      		ld r21,Z+
 2278               	.LVL184:
 272:../src/range_algs.c **** 			//val=val*(val>0);
 2279               		.loc 1 272 0
 2280 0046 81E0      		ldi r24,lo8(1)
 2281 0048 90E0      		ldi r25,0
 2282 004a 4115      		cp r20,__zero_reg__
 2283 004c 5105      		cpc r21,__zero_reg__
 2284 004e 01F4      		brne .L38
 2285 0050 80E0      		ldi r24,0
 2286 0052 90E0      		ldi r25,0
 2287               	.L38:
 2288 0054 022E      		mov r0,r18
 2289 0056 00C0      		rjmp 2f
 2290               		1:
 2291 0058 880F      		lsl r24
 2292               		2:
 2293 005a 0A94      		dec r0
 2294 005c 02F4      		brpl 1b
 2295 005e 8095      		com r24
 2296 0060 6823      		and r22,r24
 2297               	.LVL185:
 275:../src/range_algs.c **** 		}
 2298               		.loc 1 275 0
 2299 0062 C40E      		add r12,r20
 2300 0064 D51E      		adc r13,r21
 2301               	.LVL186:
 2302 0066 2F5F      		subi r18,-1
 2303 0068 3F4F      		sbci r19,-1
 2304               	.LVL187:
 270:../src/range_algs.c **** 			val = brightMeas[e][s];
 2305               		.loc 1 270 0
 2306 006a 2630      		cpi r18,6
 2307 006c 3105      		cpc r19,__zero_reg__
 2308 006e 01F4      		brne .L39
 2309 0070 1C96      		adiw r26,12
 2310               	.LBE153:
 269:../src/range_algs.c **** 		for(uint8_t s = 0; s < 6; s++){
 2311               		.loc 1 269 0
 2312 0072 0A17      		cp r16,r26
 2313 0074 1B07      		cpc r17,r27
 2314 0076 01F4      		brne .L37
 2315 0078 E62E      		mov r14,r22
 2316 007a F12C      		mov r15,__zero_reg__
 2317 007c 812C      		mov r8,__zero_reg__
 2318 007e 912C      		mov r9,__zero_reg__
 2319 0080 A12C      		mov r10,__zero_reg__
 2320 0082 B12C      		mov r11,__zero_reg__
 2321 0084 E0E0      		ldi r30,0
 2322 0086 4091 0000 		lds r20,sensorHealthHistory
 2323 008a 5091 0000 		lds r21,sensorHealthHistory+1
 2324 008e 6091 0000 		lds r22,sensorHealthHistory+2
 2325 0092 7091 0000 		lds r23,sensorHealthHistory+3
 2326               	.LVL188:
 2327               	.LBE152:
 2328               	.LBB154:
 284:../src/range_algs.c **** 		}
 2329               		.loc 1 284 0
 2330 0096 0FE0      		ldi r16,lo8(15)
 2331 0098 10E0      		ldi r17,0
 282:../src/range_algs.c **** 		}else{
 2332               		.loc 1 282 0
 2333 009a 6624      		clr r6
 2334 009c 6394      		inc r6
 2335 009e 712C      		mov r7,__zero_reg__
 287:../src/range_algs.c **** 			sensorHealthHistory&=~(0xF<<(4*i));
 2336               		.loc 1 287 0
 2337 00a0 20E0      		ldi r18,lo8(__c.5414)
 2338 00a2 222E      		mov r2,r18
 2339 00a4 20E0      		ldi r18,hi8(__c.5414)
 2340 00a6 322E      		mov r3,r18
 2341               	.LVL189:
 2342 00a8 00C0      		rjmp .L44
 2343               	.LVL190:
 2344               	.L78:
 282:../src/range_algs.c **** 		}else{
 2345               		.loc 1 282 0
 2346 00aa C301      		movw r24,r6
 2347 00ac 082C      		mov r0,r8
 2348 00ae 00C0      		rjmp 2f
 2349               		1:
 2350 00b0 880F      		lsl r24
 2351 00b2 991F      		rol r25
 2352               		2:
 2353 00b4 0A94      		dec r0
 2354 00b6 02F4      		brpl 1b
 2355 00b8 092E      		mov __tmp_reg__,r25
 2356 00ba 000C      		lsl r0
 2357 00bc AA0B      		sbc r26,r26
 2358 00be BB0B      		sbc r27,r27
 2359 00c0 840F      		add r24,r20
 2360 00c2 951F      		adc r25,r21
 2361 00c4 A61F      		adc r26,r22
 2362 00c6 B71F      		adc r27,r23
 2363 00c8 AC01      		movw r20,r24
 2364 00ca BD01      		movw r22,r26
 2365 00cc 8093 0000 		sts sensorHealthHistory,r24
 2366 00d0 9093 0000 		sts sensorHealthHistory+1,r25
 2367 00d4 A093 0000 		sts sensorHealthHistory+2,r26
 2368 00d8 B093 0000 		sts sensorHealthHistory+3,r27
 2369               	.L42:
 286:../src/range_algs.c **** 			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
 2370               		.loc 1 286 0
 2371 00dc 052C      		mov r0,r5
 2372 00de 00C0      		rjmp 2f
 2373               		1:
 2374 00e0 B695      		lsr r27
 2375 00e2 A795      		ror r26
 2376 00e4 9795      		ror r25
 2377 00e6 8795      		ror r24
 2378               		2:
 2379 00e8 0A94      		dec r0
 2380 00ea 02F4      		brpl 1b
 2381 00ec 8F70      		andi r24,15
 2382 00ee 9927      		clr r25
 2383 00f0 AA27      		clr r26
 2384 00f2 BB27      		clr r27
 2385 00f4 0F97      		sbiw r24,15
 2386 00f6 A105      		cpc r26,__zero_reg__
 2387 00f8 B105      		cpc r27,__zero_reg__
 2388 00fa 01F4      		brne .+2
 2389 00fc 00C0      		rjmp .L76
 2390               	.LVL191:
 2391               	.L43:
 2392 00fe 8FEF      		ldi r24,-1
 2393 0100 A81A      		sub r10,r24
 2394 0102 B80A      		sbc r11,r24
 2395               	.LVL192:
 2396 0104 94E0      		ldi r25,4
 2397 0106 890E      		add r8,r25
 2398 0108 911C      		adc r9,__zero_reg__
 280:../src/range_algs.c **** 		if(allColZeroCheck&(1<<i)){
 2399               		.loc 1 280 0
 2400 010a A6E0      		ldi r26,6
 2401 010c AA16      		cp r10,r26
 2402 010e B104      		cpc r11,__zero_reg__
 2403 0110 01F0      		breq .L77
 2404               	.LVL193:
 2405               	.L44:
 281:../src/range_algs.c **** 			sensorHealthHistory+=(1<<(4*i));
 2406               		.loc 1 281 0
 2407 0112 9501      		movw r18,r10
 2408 0114 C701      		movw r24,r14
 2409 0116 0A2C      		mov r0,r10
 2410 0118 00C0      		rjmp 2f
 2411               		1:
 2412 011a 9595      		asr r25
 2413 011c 8795      		ror r24
 2414               		2:
 2415 011e 0A94      		dec r0
 2416 0120 02F4      		brpl 1b
 282:../src/range_algs.c **** 		}else{
 2417               		.loc 1 282 0
 2418 0122 582C      		mov r5,r8
 281:../src/range_algs.c **** 			sensorHealthHistory+=(1<<(4*i));
 2419               		.loc 1 281 0
 2420 0124 80FD      		sbrc r24,0
 2421 0126 00C0      		rjmp .L78
 284:../src/range_algs.c **** 		}
 2422               		.loc 1 284 0
 2423 0128 C801      		movw r24,r16
 2424 012a 082C      		mov r0,r8
 2425 012c 00C0      		rjmp 2f
 2426               		1:
 2427 012e 880F      		lsl r24
 2428 0130 991F      		rol r25
 2429               		2:
 2430 0132 0A94      		dec r0
 2431 0134 02F4      		brpl 1b
 2432 0136 8095      		com r24
 2433 0138 9095      		com r25
 2434 013a 092E      		mov __tmp_reg__,r25
 2435 013c 000C      		lsl r0
 2436 013e AA0B      		sbc r26,r26
 2437 0140 BB0B      		sbc r27,r27
 2438 0142 8423      		and r24,r20
 2439 0144 9523      		and r25,r21
 2440 0146 A623      		and r26,r22
 2441 0148 B723      		and r27,r23
 2442 014a AC01      		movw r20,r24
 2443 014c BD01      		movw r22,r26
 2444 014e 8093 0000 		sts sensorHealthHistory,r24
 2445 0152 9093 0000 		sts sensorHealthHistory+1,r25
 2446 0156 A093 0000 		sts sensorHealthHistory+2,r26
 2447 015a B093 0000 		sts sensorHealthHistory+3,r27
 2448 015e 00C0      		rjmp .L42
 2449               	.L77:
 2450               	.LBE154:
 292:../src/range_algs.c **** 		warning_light_sequence();
 2451               		.loc 1 292 0
 2452 0160 EE23      		tst r30
 2453 0162 01F4      		brne .+2
 2454 0164 00C0      		rjmp .L45
 2455               	.LBB155:
 2456               	.LBB156:
 2457               		.file 2 "../include/rgb_led.h"
   1:../include/rgb_led.h **** #pragma once
   2:../include/rgb_led.h **** #include "droplet_base.h"
   3:../include/rgb_led.h **** #include <math.h>
   4:../include/rgb_led.h **** 
   5:../include/rgb_led.h **** #define LED_R_PIN_bm			PIN5_bm
   6:../include/rgb_led.h **** #define LED_G_PIN_bm			PIN4_bm
   7:../include/rgb_led.h **** #define LED_B_PIN_bm			PIN4_bm
   8:../include/rgb_led.h **** 
   9:../include/rgb_led.h **** void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM
  10:../include/rgb_led.h **** 
  11:../include/rgb_led.h **** // Get and set intensity for red LED
  12:../include/rgb_led.h **** inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
  13:../include/rgb_led.h **** inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
  14:../include/rgb_led.h **** 
  15:../include/rgb_led.h **** // Get and set intensity for green LED
  16:../include/rgb_led.h **** inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
  17:../include/rgb_led.h **** inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
  18:../include/rgb_led.h **** 	
  19:../include/rgb_led.h **** // Get and set intensity for blue LED
  20:../include/rgb_led.h **** inline uint8_t get_blue_led(void){ return TCD1.CCABUF; }
  21:../include/rgb_led.h **** inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
  22:../include/rgb_led.h **** 
  23:../include/rgb_led.h **** 
  24:../include/rgb_led.h **** void led_off(void);
  25:../include/rgb_led.h **** void set_rgb(uint8_t r, uint8_t g, uint8_t b);
  26:../include/rgb_led.h **** void set_hsv(uint16_t h, uint8_t s, uint8_t v);
  27:../include/rgb_led.h **** void hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t* r, uint8_t* g, uint8_t* b);
  28:../include/rgb_led.h **** 
  29:../include/rgb_led.h **** inline void warning_light_sequence(void){
  30:../include/rgb_led.h **** 	set_rgb(0,100,100); delay_ms(300); set_rgb(100,0,100); delay_ms(300); set_rgb(100,100,0); delay_ms
 2458               		.loc 2 30 0
 2459 0166 44E6      		ldi r20,lo8(100)
 2460 0168 64E6      		ldi r22,lo8(100)
 2461 016a 80E0      		ldi r24,0
 2462 016c 0E94 0000 		call set_rgb
 2463               	.LVL194:
 2464 0170 8CE2      		ldi r24,lo8(44)
 2465 0172 91E0      		ldi r25,lo8(1)
 2466 0174 0E94 0000 		call delay_ms
 2467               	.LVL195:
 2468 0178 44E6      		ldi r20,lo8(100)
 2469 017a 60E0      		ldi r22,0
 2470 017c 84E6      		ldi r24,lo8(100)
 2471 017e 0E94 0000 		call set_rgb
 2472               	.LVL196:
 2473 0182 8CE2      		ldi r24,lo8(44)
 2474 0184 91E0      		ldi r25,lo8(1)
 2475 0186 0E94 0000 		call delay_ms
 2476               	.LVL197:
 2477 018a 40E0      		ldi r20,0
 2478 018c 64E6      		ldi r22,lo8(100)
 2479 018e 84E6      		ldi r24,lo8(100)
 2480 0190 0E94 0000 		call set_rgb
 2481               	.LVL198:
 2482 0194 8CE2      		ldi r24,lo8(44)
 2483 0196 91E0      		ldi r25,lo8(1)
 2484 0198 0E94 0000 		call delay_ms
 2485               	.LVL199:
 2486 019c 0E94 0000 		call led_off
 2487               	.LVL200:
  31:../include/rgb_led.h **** 	set_rgb(0,100,100); delay_ms(300); set_rgb(100,0,100); delay_ms(300); set_rgb(100,100,0); delay_ms
 2488               		.loc 2 31 0
 2489 01a0 44E6      		ldi r20,lo8(100)
 2490 01a2 64E6      		ldi r22,lo8(100)
 2491 01a4 80E0      		ldi r24,0
 2492 01a6 0E94 0000 		call set_rgb
 2493               	.LVL201:
 2494 01aa 8CE2      		ldi r24,lo8(44)
 2495 01ac 91E0      		ldi r25,lo8(1)
 2496 01ae 0E94 0000 		call delay_ms
 2497               	.LVL202:
 2498 01b2 44E6      		ldi r20,lo8(100)
 2499 01b4 60E0      		ldi r22,0
 2500 01b6 84E6      		ldi r24,lo8(100)
 2501 01b8 0E94 0000 		call set_rgb
 2502               	.LVL203:
 2503 01bc 8CE2      		ldi r24,lo8(44)
 2504 01be 91E0      		ldi r25,lo8(1)
 2505 01c0 0E94 0000 		call delay_ms
 2506               	.LVL204:
 2507 01c4 40E0      		ldi r20,0
 2508 01c6 64E6      		ldi r22,lo8(100)
 2509 01c8 84E6      		ldi r24,lo8(100)
 2510 01ca 0E94 0000 		call set_rgb
 2511               	.LVL205:
 2512 01ce 8CE2      		ldi r24,lo8(44)
 2513 01d0 91E0      		ldi r25,lo8(1)
 2514 01d2 0E94 0000 		call delay_ms
 2515               	.LVL206:
 2516 01d6 0E94 0000 		call led_off
 2517               	.LVL207:
  32:../include/rgb_led.h **** 	set_rgb(0,100,100); delay_ms(300); set_rgb(100,0,100); delay_ms(300); set_rgb(100,100,0); delay_ms
 2518               		.loc 2 32 0
 2519 01da 44E6      		ldi r20,lo8(100)
 2520 01dc 64E6      		ldi r22,lo8(100)
 2521 01de 80E0      		ldi r24,0
 2522 01e0 0E94 0000 		call set_rgb
 2523               	.LVL208:
 2524 01e4 8CE2      		ldi r24,lo8(44)
 2525 01e6 91E0      		ldi r25,lo8(1)
 2526 01e8 0E94 0000 		call delay_ms
 2527               	.LVL209:
 2528 01ec 44E6      		ldi r20,lo8(100)
 2529 01ee 60E0      		ldi r22,0
 2530 01f0 84E6      		ldi r24,lo8(100)
 2531 01f2 0E94 0000 		call set_rgb
 2532               	.LVL210:
 2533 01f6 8CE2      		ldi r24,lo8(44)
 2534 01f8 91E0      		ldi r25,lo8(1)
 2535 01fa 0E94 0000 		call delay_ms
 2536               	.LVL211:
 2537 01fe 40E0      		ldi r20,0
 2538 0200 64E6      		ldi r22,lo8(100)
 2539 0202 84E6      		ldi r24,lo8(100)
 2540 0204 0E94 0000 		call set_rgb
 2541               	.LVL212:
 2542 0208 8CE2      		ldi r24,lo8(44)
 2543 020a 91E0      		ldi r25,lo8(1)
 2544 020c 0E94 0000 		call delay_ms
 2545               	.LVL213:
 2546 0210 0E94 0000 		call led_off
 2547               	.LVL214:
 2548               	.L45:
 2549               	.LBE156:
 2550               	.LBE155:
 2551               	.LBE158:
 2552               	.LBE160:
 122:../src/range_algs.c **** 	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
 2553               		.loc 1 122 0
 2554 0214 BE01      		movw r22,r28
 2555 0216 6F5F      		subi r22,-1
 2556 0218 7F4F      		sbci r23,-1
 2557 021a CE01      		movw r24,r28
 2558 021c 0596      		adiw r24,5
 2559 021e 0E94 0000 		call calculate_bearing_and_heading
 2560               	.LVL215:
 123:../src/range_algs.c **** 	if(initialRange!=0&&!isnanf(initialRange)){	
 2561               		.loc 1 123 0
 2562 0222 B601      		movw r22,r12
 2563 0224 DD0C      		lsl r13
 2564 0226 880B      		sbc r24,r24
 2565 0228 990B      		sbc r25,r25
 2566 022a 0E94 0000 		call __floatsisf
 2567               	.LVL216:
 2568 022e 20E2      		ldi r18,lo8(32)
 2569 0230 3BEB      		ldi r19,lo8(-69)
 2570 0232 44E0      		ldi r20,lo8(4)
 2571 0234 50E4      		ldi r21,lo8(64)
 2572 0236 0E94 0000 		call __divsf3
 2573               	.LVL217:
 2574 023a 0E94 0000 		call magicRangeFunc
 2575               	.LVL218:
 2576 023e 4B01      		movw r8,r22
 2577 0240 5C01      		movw r10,r24
 2578               	.LVL219:
 124:../src/range_algs.c **** 		float range = calculate_range(initialRange, bearing, heading);
 2579               		.loc 1 124 0
 2580 0242 20E0      		ldi r18,0
 2581 0244 30E0      		ldi r19,0
 2582 0246 A901      		movw r20,r18
 2583 0248 0E94 0000 		call __nesf2
 2584               	.LVL220:
 2585 024c 8823      		tst r24
 2586 024e 01F4      		brne .+2
 2587 0250 00C0      		rjmp .L46
 124:../src/range_algs.c **** 		float range = calculate_range(initialRange, bearing, heading);
 2588               		.loc 1 124 0 is_stmt 0 discriminator 1
 2589 0252 A501      		movw r20,r10
 2590 0254 9401      		movw r18,r8
 2591 0256 C501      		movw r24,r10
 2592 0258 B401      		movw r22,r8
 2593 025a 0E94 0000 		call __unordsf2
 2594               	.LVL221:
 2595 025e 8111      		cpse r24,__zero_reg__
 2596 0260 00C0      		rjmp .L46
 2597               	.LBB161:
 125:../src/range_algs.c **** 		if(!isnanf(range)){
 2598               		.loc 1 125 0 is_stmt 1
 2599 0262 8981      		ldd r24,Y+1
 2600 0264 9A81      		ldd r25,Y+2
 2601 0266 AB81      		ldd r26,Y+3
 2602 0268 BC81      		ldd r27,Y+4
 2603 026a 8987      		std Y+9,r24
 2604 026c 9A87      		std Y+10,r25
 2605 026e AB87      		std Y+11,r26
 2606 0270 BC87      		std Y+12,r27
 2607 0272 4D80      		ldd r4,Y+5
 2608 0274 5E80      		ldd r5,Y+6
 2609 0276 6F80      		ldd r6,Y+7
 2610 0278 7884      		ldd r7,Y+8
 2611 027a 7C01      		movw r14,r24
 2612 027c 8D01      		movw r16,r26
 2613 027e A301      		movw r20,r6
 2614 0280 9201      		movw r18,r4
 2615 0282 C501      		movw r24,r10
 2616 0284 B401      		movw r22,r8
 2617 0286 0E94 0000 		call calculate_range
 2618               	.LVL222:
 2619 028a 4B01      		movw r8,r22
 2620 028c 5C01      		movw r10,r24
 2621               	.LVL223:
 126:../src/range_algs.c **** 			if(range<2*DROPLET_RADIUS) range=46;
 2622               		.loc 1 126 0
 2623 028e 9B01      		movw r18,r22
 2624 0290 AC01      		movw r20,r24
 2625 0292 0E94 0000 		call __unordsf2
 2626               	.LVL224:
 2627 0296 8111      		cpse r24,__zero_reg__
 2628 0298 00C0      		rjmp .L46
 127:../src/range_algs.c **** 			error = calculate_error(range, bearing, heading);
 2629               		.loc 1 127 0
 2630 029a 20E0      		ldi r18,0
 2631 029c 30E0      		ldi r19,0
 2632 029e 40E3      		ldi r20,lo8(48)
 2633 02a0 52E4      		ldi r21,lo8(66)
 2634 02a2 C501      		movw r24,r10
 2635 02a4 B401      		movw r22,r8
 2636 02a6 0E94 0000 		call __ltsf2
 2637               	.LVL225:
 2638 02aa 87FD      		sbrc r24,7
 2639 02ac 00C0      		rjmp .L48
 128:../src/range_algs.c **** 			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearin
 2640               		.loc 1 128 0
 2641 02ae A301      		movw r20,r6
 2642 02b0 9201      		movw r18,r4
 2643 02b2 C501      		movw r24,r10
 2644 02b4 B401      		movw r22,r8
 2645 02b6 0E94 0000 		call calculate_error
 2646               	.LVL226:
 2647 02ba 6B01      		movw r12,r22
 2648 02bc 7C01      		movw r14,r24
 2649               	.LVL227:
 130:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2650               		.loc 1 130 0
 2651 02be 20E0      		ldi r18,0
 2652 02c0 30E0      		ldi r19,0
 2653 02c2 4CED      		ldi r20,lo8(-36)
 2654 02c4 52E4      		ldi r21,lo8(66)
 2655 02c6 C501      		movw r24,r10
 2656 02c8 B401      		movw r22,r8
 2657 02ca 0E94 0000 		call __ltsf2
 2658               	.LVL228:
 2659 02ce 87FD      		sbrc r24,7
 2660 02d0 00C0      		rjmp .L79
 2661               	.L49:
 130:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2662               		.loc 1 130 0 is_stmt 0 discriminator 3
 2663 02d2 20E0      		ldi r18,0
 2664 02d4 30E0      		ldi r19,0
 2665 02d6 48E4      		ldi r20,lo8(72)
 2666 02d8 53E4      		ldi r21,lo8(67)
 2667 02da C501      		movw r24,r10
 2668 02dc B401      		movw r22,r8
 2669 02de 0E94 0000 		call __ltsf2
 2670               	.LVL229:
 2671 02e2 87FD      		sbrc r24,7
 2672 02e4 00C0      		rjmp .L63
 2673               	.LVL230:
 2674               	.L52:
 130:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2675               		.loc 1 130 0 discriminator 6
 2676 02e6 20E0      		ldi r18,0
 2677 02e8 30E0      		ldi r19,0
 2678 02ea 48E4      		ldi r20,lo8(72)
 2679 02ec 53E4      		ldi r21,lo8(67)
 2680 02ee C501      		movw r24,r10
 2681 02f0 B401      		movw r22,r8
 2682 02f2 0E94 0000 		call __gtsf2
 2683               	.LVL231:
 2684 02f6 1816      		cp __zero_reg__,r24
 2685 02f8 04F4      		brge .+2
 2686 02fa 00C0      		rjmp .L46
 140:../src/range_algs.c **** 			last_good_rnb.range		= (uint16_t)(range);
 2687               		.loc 1 140 0 is_stmt 1
 2688 02fc 8091 0000 		lds r24,rnbCmdID
 2689 0300 9091 0000 		lds r25,rnbCmdID+1
 2690 0304 8093 0000 		sts last_good_rnb+6,r24
 2691 0308 9093 0000 		sts last_good_rnb+6+1,r25
 141:../src/range_algs.c **** 			last_good_rnb.bearing	= (int16_t)rad_to_deg(bearing);
 2692               		.loc 1 141 0
 2693 030c C501      		movw r24,r10
 2694 030e B401      		movw r22,r8
 2695 0310 0E94 0000 		call __fixunssfsi
 2696               	.LVL232:
 2697 0314 6093 0000 		sts last_good_rnb,r22
 2698 0318 7093 0000 		sts last_good_rnb+1,r23
 2699               	.LVL233:
 2700               	.LBB162:
 2701               	.LBB163:
 2702               	.LBB164:
 2703               	.LBB165:
 2704               		.file 3 "../include/range_algs.h"
   1:../include/range_algs.h **** #pragma once
   2:../include/range_algs.h **** 
   3:../include/range_algs.h **** #include <avr/io.h>
   4:../include/range_algs.h **** #include <math.h>
   5:../include/range_algs.h **** #include <avr/pgmspace.h>
   6:../include/range_algs.h **** 
   7:../include/range_algs.h **** //#include "droplet_init.h"
   8:../include/range_algs.h **** #include "scheduler.h"
   9:../include/range_algs.h **** #include "ir_sensor.h"
  10:../include/range_algs.h **** #include "rgb_led.h"
  11:../include/range_algs.h **** #include "ir_comm.h"
  12:../include/range_algs.h **** #include "i2c.h"
  13:../include/range_algs.h **** #include "delay_x.h"
  14:../include/range_algs.h **** 
  15:../include/range_algs.h **** #define DROPLET_RADIUS 22U  //mm
  16:../include/range_algs.h **** #define DROPLET_RADIUS_SQ 484U //mm
  17:../include/range_algs.h **** #define DROPLET_DIAMETER 44 //mm
  18:../include/range_algs.h **** 
  19:../include/range_algs.h **** //Synchronization Timing Constants:
  20:../include/range_algs.h **** #define POST_BROADCAST_DELAY			30U
  21:../include/range_algs.h **** #define TIME_FOR_SET_IR_POWERS			2U
  22:../include/range_algs.h **** #define TIME_FOR_IR_MEAS				12U
  23:../include/range_algs.h **** #define TIME_FOR_GET_IR_VALS			16U
  24:../include/range_algs.h **** #define DELAY_BETWEEN_RB_TRANSMISSIONS	10U
  25:../include/range_algs.h **** 
  26:../include/range_algs.h **** //Constants for rnb processing:
  27:../include/range_algs.h **** #define MIN_MATRIX_SUM_THRESH	115
  28:../include/range_algs.h **** #define ELEVEN_SQRT3		   19.0525588833f
  29:../include/range_algs.h **** #define SQRT3_OVER2				0.8660254038f
  30:../include/range_algs.h **** #define RNB_DUR					220
  31:../include/range_algs.h **** 
  32:../include/range_algs.h **** typedef struct list_el {
  33:../include/range_algs.h **** 	float Rx;
  34:../include/range_algs.h **** 	float Ry;
  35:../include/range_algs.h **** 	float rijMag;
  36:../include/range_algs.h **** 	uint8_t e;
  37:../include/range_algs.h **** 	uint8_t s;
  38:../include/range_algs.h **** 	struct list_el *next;
  39:../include/range_algs.h **** } rVectorNode;
  40:../include/range_algs.h **** 
  41:../include/range_algs.h **** typedef struct rnb_data {
  42:../include/range_algs.h **** 	uint16_t range;
  43:../include/range_algs.h **** 	int16_t bearing;
  44:../include/range_algs.h **** 	int16_t heading;
  45:../include/range_algs.h **** 	id_t id;
  46:../include/range_algs.h **** } rnb;
  47:../include/range_algs.h **** 
  48:../include/range_algs.h **** 
  49:../include/range_algs.h **** rnb last_good_rnb;
  50:../include/range_algs.h **** volatile uint8_t rnb_updated;
  51:../include/range_algs.h **** volatile id_t rnbCmdID;
  52:../include/range_algs.h **** volatile uint32_t rnbCmdSentTime;
  53:../include/range_algs.h **** volatile uint8_t rnbProcessingFlag;
  54:../include/range_algs.h **** 
  55:../include/range_algs.h **** void range_algs_init(void);
  56:../include/range_algs.h **** 
  57:../include/range_algs.h **** void broadcast_rnb_data(void); //takes about 142ms.
  58:../include/range_algs.h **** //void receive_rnb_data(void);
  59:../include/range_algs.h **** void use_rnb_data(void);
  60:../include/range_algs.h **** 
  61:../include/range_algs.h **** 
  62:../include/range_algs.h **** void ir_range_meas(void);
  63:../include/range_algs.h **** void ir_range_blast(uint8_t power);
  64:../include/range_algs.h **** 
  65:../include/range_algs.h **** inline int8_t sgn(float x){
  66:../include/range_algs.h **** 	return (0<x)-(x<0);
  67:../include/range_algs.h **** }
  68:../include/range_algs.h **** 
  69:../include/range_algs.h **** inline int16_t pretty_angle_deg(int16_t angle){
  70:../include/range_algs.h **** 	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
  71:../include/range_algs.h **** }
  72:../include/range_algs.h **** 
  73:../include/range_algs.h **** inline float pretty_angle(float angle){
  74:../include/range_algs.h **** 	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) +
 2705               		.loc 3 74 0
 2706 031c 20E0      		ldi r18,0
 2707 031e 30E0      		ldi r19,0
 2708 0320 A901      		movw r20,r18
 2709 0322 C301      		movw r24,r6
 2710 0324 B201      		movw r22,r4
 2711 0326 0E94 0000 		call __gesf2
 2712               	.LVL234:
 2713 032a 2BED      		ldi r18,lo8(-37)
 2714 032c 3FE0      		ldi r19,lo8(15)
 2715 032e 49E4      		ldi r20,lo8(73)
 2716 0330 50E4      		ldi r21,lo8(64)
 2717 0332 87FD      		sbrc r24,7
 2718 0334 00C0      		rjmp .L74
 2719 0336 C301      		movw r24,r6
 2720 0338 B201      		movw r22,r4
 2721 033a 0E94 0000 		call __addsf3
 2722               	.LVL235:
 2723 033e 2BED      		ldi r18,lo8(-37)
 2724 0340 3FE0      		ldi r19,lo8(15)
 2725 0342 49EC      		ldi r20,lo8(-55)
 2726 0344 50E4      		ldi r21,lo8(64)
 2727 0346 0E94 0000 		call fmod
 2728               	.LVL236:
 2729 034a 2BED      		ldi r18,lo8(-37)
 2730 034c 3FE0      		ldi r19,lo8(15)
 2731 034e 49E4      		ldi r20,lo8(73)
 2732 0350 50E4      		ldi r21,lo8(64)
 2733 0352 0E94 0000 		call __subsf3
 2734               	.LVL237:
 2735               	.L59:
 2736               	.LBE165:
 2737               	.LBE164:
 2738               	.LBE163:
 2739               	.LBE162:
 142:../src/range_algs.c **** 			last_good_rnb.heading	= (int16_t)rad_to_deg(heading);
 2740               		.loc 1 142 0
 2741 0356 2BED      		ldi r18,lo8(-37)
 2742 0358 3FE0      		ldi r19,lo8(15)
 2743 035a 49E4      		ldi r20,lo8(73)
 2744 035c 50E4      		ldi r21,lo8(64)
 2745 035e 0E94 0000 		call __divsf3
 2746               	.LVL238:
 2747 0362 20E0      		ldi r18,0
 2748 0364 30E0      		ldi r19,0
 2749 0366 44E3      		ldi r20,lo8(52)
 2750 0368 53E4      		ldi r21,lo8(67)
 2751 036a 0E94 0000 		call __mulsf3
 2752               	.LVL239:
 2753 036e 0E94 0000 		call __fixsfsi
 2754               	.LVL240:
 2755 0372 6093 0000 		sts last_good_rnb+2,r22
 2756 0376 7093 0000 		sts last_good_rnb+2+1,r23
 2757               	.LVL241:
 2758               	.LBB169:
 2759               	.LBB170:
 2760               	.LBB171:
 2761               	.LBB172:
 2762               		.loc 3 74 0
 2763 037a 20E0      		ldi r18,0
 2764 037c 30E0      		ldi r19,0
 2765 037e A901      		movw r20,r18
 2766 0380 6985      		ldd r22,Y+9
 2767 0382 7A85      		ldd r23,Y+10
 2768 0384 8B85      		ldd r24,Y+11
 2769 0386 9C85      		ldd r25,Y+12
 2770 0388 0E94 0000 		call __gesf2
 2771               	.LVL242:
 2772 038c 2BED      		ldi r18,lo8(-37)
 2773 038e 3FE0      		ldi r19,lo8(15)
 2774 0390 49E4      		ldi r20,lo8(73)
 2775 0392 50E4      		ldi r21,lo8(64)
 2776 0394 87FD      		sbrc r24,7
 2777 0396 00C0      		rjmp .L75
 2778 0398 6985      		ldd r22,Y+9
 2779 039a 7A85      		ldd r23,Y+10
 2780 039c 8B85      		ldd r24,Y+11
 2781 039e 9C85      		ldd r25,Y+12
 2782 03a0 0E94 0000 		call __addsf3
 2783               	.LVL243:
 2784 03a4 2BED      		ldi r18,lo8(-37)
 2785 03a6 3FE0      		ldi r19,lo8(15)
 2786 03a8 49EC      		ldi r20,lo8(-55)
 2787 03aa 50E4      		ldi r21,lo8(64)
 2788 03ac 0E94 0000 		call fmod
 2789               	.LVL244:
 2790 03b0 2BED      		ldi r18,lo8(-37)
 2791 03b2 3FE0      		ldi r19,lo8(15)
 2792 03b4 49E4      		ldi r20,lo8(73)
 2793 03b6 50E4      		ldi r21,lo8(64)
 2794 03b8 0E94 0000 		call __subsf3
 2795               	.LVL245:
 2796               	.L62:
 2797               	.LBE172:
 2798               	.LBE171:
 2799               	.LBE170:
 2800               	.LBE169:
 143:../src/range_algs.c **** 			//print_brightMeas();
 2801               		.loc 1 143 0
 2802 03bc 2BED      		ldi r18,lo8(-37)
 2803 03be 3FE0      		ldi r19,lo8(15)
 2804 03c0 49E4      		ldi r20,lo8(73)
 2805 03c2 50E4      		ldi r21,lo8(64)
 2806 03c4 0E94 0000 		call __divsf3
 2807               	.LVL246:
 2808 03c8 20E0      		ldi r18,0
 2809 03ca 30E0      		ldi r19,0
 2810 03cc 44E3      		ldi r20,lo8(52)
 2811 03ce 53E4      		ldi r21,lo8(67)
 2812 03d0 0E94 0000 		call __mulsf3
 2813               	.LVL247:
 2814 03d4 0E94 0000 		call __fixsfsi
 2815               	.LVL248:
 2816 03d8 6093 0000 		sts last_good_rnb+4,r22
 2817 03dc 7093 0000 		sts last_good_rnb+4+1,r23
 145:../src/range_algs.c **** 		}
 2818               		.loc 1 145 0
 2819 03e0 81E0      		ldi r24,lo8(1)
 2820 03e2 8093 0000 		sts rnb_updated,r24
 2821               	.LVL249:
 2822               	.L46:
 2823               	.LBE161:
 2824               	.LBB178:
 148:../src/range_algs.c **** 		rnbProcessingFlag=0;
 2825               		.loc 1 148 0
 2826 03e6 8FB7      		in r24,__SREG__
 2827               	.LVL250:
 2828               	.LBB179:
 2829               	.LBB180:
 2830               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    All rights reserved.
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions of source code must retain the above copyright
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      the documentation and/or other materials provided with the
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      distribution.
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      contributors may be used to endorse or promote products derived
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      from this software without specific prior written permission.
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** */
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* $Id$ */
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/io.h>
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/interrupt.h>
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #if !defined(__DOXYGEN__)
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Internal helper functions. */
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
 2831               		.loc 4 50 0
 2832               	/* #APP */
 2833               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2834 03e8 F894      		cli
 2835               	 ;  0 "" 2
 2836               	.LVL251:
 2837               	/* #NOAPP */
 2838               	.LBE180:
 2839               	.LBE179:
 149:../src/range_algs.c **** 	}
 2840               		.loc 1 149 0
 2841 03ea 1092 0000 		sts rnbProcessingFlag,__zero_reg__
 2842               	.LVL252:
 2843               	.LBB181:
 2844               	.LBB182:
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     SREG = *__s;
 2845               		.loc 4 70 0
 2846 03ee 8FBF      		out __SREG__,r24
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2847               		.loc 4 71 0
 2848               	.LVL253:
 2849               	/* epilogue start */
 2850               	.LBE182:
 2851               	.LBE181:
 2852               	.LBE178:
 151:../src/range_algs.c **** 
 2853               		.loc 1 151 0
 2854 03f0 2C96      		adiw r28,12
 2855 03f2 CDBF      		out __SP_L__,r28
 2856 03f4 DEBF      		out __SP_H__,r29
 2857 03f6 DF91      		pop r29
 2858 03f8 CF91      		pop r28
 2859 03fa 1F91      		pop r17
 2860 03fc 0F91      		pop r16
 2861 03fe FF90      		pop r15
 2862 0400 EF90      		pop r14
 2863 0402 DF90      		pop r13
 2864 0404 CF90      		pop r12
 2865 0406 BF90      		pop r11
 2866 0408 AF90      		pop r10
 2867 040a 9F90      		pop r9
 2868 040c 8F90      		pop r8
 2869 040e 7F90      		pop r7
 2870 0410 6F90      		pop r6
 2871 0412 5F90      		pop r5
 2872 0414 4F90      		pop r4
 2873 0416 3F90      		pop r3
 2874 0418 2F90      		pop r2
 2875 041a 0895      		ret
 2876               	.LVL254:
 2877               	.L76:
 2878               	.LBB183:
 2879               	.LBB159:
 2880               	.LBB157:
 287:../src/range_algs.c **** 			sensorHealthHistory&=~(0xF<<(4*i));
 2881               		.loc 1 287 0
 2882 041c 3F93      		push r19
 2883 041e 2F93      		push r18
 2884 0420 3F92      		push r3
 2885 0422 2F92      		push r2
 2886 0424 0E94 0000 		call printf_P
 2887               	.LVL255:
 288:../src/range_algs.c **** 			problem = 1;
 2888               		.loc 1 288 0
 2889 0428 C801      		movw r24,r16
 2890 042a 00C0      		rjmp 2f
 2891               		1:
 2892 042c 880F      		lsl r24
 2893 042e 991F      		rol r25
 2894               		2:
 2895 0430 5A94      		dec r5
 2896 0432 02F4      		brpl 1b
 2897 0434 8095      		com r24
 2898 0436 9095      		com r25
 2899 0438 092E      		mov __tmp_reg__,r25
 2900 043a 000C      		lsl r0
 2901 043c AA0B      		sbc r26,r26
 2902 043e BB0B      		sbc r27,r27
 2903 0440 4091 0000 		lds r20,sensorHealthHistory
 2904 0444 5091 0000 		lds r21,sensorHealthHistory+1
 2905 0448 6091 0000 		lds r22,sensorHealthHistory+2
 2906 044c 7091 0000 		lds r23,sensorHealthHistory+3
 2907 0450 4823      		and r20,r24
 2908 0452 5923      		and r21,r25
 2909 0454 6A23      		and r22,r26
 2910 0456 7B23      		and r23,r27
 2911 0458 4093 0000 		sts sensorHealthHistory,r20
 2912 045c 5093 0000 		sts sensorHealthHistory+1,r21
 2913 0460 6093 0000 		sts sensorHealthHistory+2,r22
 2914 0464 7093 0000 		sts sensorHealthHistory+3,r23
 2915               	.LVL256:
 2916 0468 0F90      		pop __tmp_reg__
 2917 046a 0F90      		pop __tmp_reg__
 2918 046c 0F90      		pop __tmp_reg__
 2919 046e 0F90      		pop __tmp_reg__
 289:../src/range_algs.c **** 		}		
 2920               		.loc 1 289 0
 2921 0470 E1E0      		ldi r30,lo8(1)
 2922 0472 00C0      		rjmp .L43
 2923               	.LVL257:
 2924               	.L48:
 2925               	.LBE157:
 2926               	.LBE159:
 2927               	.LBE183:
 2928               	.LBB184:
 128:../src/range_algs.c **** 			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearin
 2929               		.loc 1 128 0
 2930 0474 E984      		ldd r14,Y+9
 2931 0476 FA84      		ldd r15,Y+10
 2932 0478 0B85      		ldd r16,Y+11
 2933 047a 1C85      		ldd r17,Y+12
 2934 047c A301      		movw r20,r6
 2935 047e 9201      		movw r18,r4
 2936 0480 60E0      		ldi r22,0
 2937 0482 70E0      		ldi r23,0
 2938 0484 88E3      		ldi r24,lo8(56)
 2939 0486 92E4      		ldi r25,lo8(66)
 2940 0488 0E94 0000 		call calculate_error
 2941               	.LVL258:
 2942 048c 6B01      		movw r12,r22
 2943 048e 7C01      		movw r14,r24
 2944               	.LVL259:
 130:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2945               		.loc 1 130 0
 2946 0490 20E0      		ldi r18,0
 2947 0492 30E0      		ldi r19,0
 2948 0494 40E8      		ldi r20,lo8(-128)
 2949 0496 5FE3      		ldi r21,lo8(63)
 2950 0498 0E94 0000 		call __gtsf2
 2951               	.LVL260:
 2952 049c 1816      		cp __zero_reg__,r24
 2953 049e 04F4      		brge .+2
 2954 04a0 00C0      		rjmp .L46
 127:../src/range_algs.c **** 			error = calculate_error(range, bearing, heading);
 2955               		.loc 1 127 0
 2956 04a2 812C      		mov r8,__zero_reg__
 2957 04a4 912C      		mov r9,__zero_reg__
 2958 04a6 88E3      		ldi r24,lo8(56)
 2959 04a8 A82E      		mov r10,r24
 2960 04aa 82E4      		ldi r24,lo8(66)
 2961 04ac B82E      		mov r11,r24
 2962               	.LVL261:
 2963               	.L63:
 130:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2964               		.loc 1 130 0 discriminator 4
 2965 04ae 20E0      		ldi r18,0
 2966 04b0 30E0      		ldi r19,0
 2967 04b2 40EC      		ldi r20,lo8(-64)
 2968 04b4 5FE3      		ldi r21,lo8(63)
 2969 04b6 C701      		movw r24,r14
 2970 04b8 B601      		movw r22,r12
 2971 04ba 0E94 0000 		call __gtsf2
 2972               	.LVL262:
 2973 04be 1816      		cp __zero_reg__,r24
 2974 04c0 04F0      		brlt .+2
 2975 04c2 00C0      		rjmp .L52
 2976 04c4 00C0      		rjmp .L46
 2977               	.LVL263:
 2978               	.L74:
 2979               	.LBB176:
 2980               	.LBB168:
 2981               	.LBB167:
 2982               	.LBB166:
 2983               		.loc 3 74 0
 2984 04c6 C301      		movw r24,r6
 2985 04c8 B201      		movw r22,r4
 2986 04ca 0E94 0000 		call __subsf3
 2987               	.LVL264:
 2988 04ce 2BED      		ldi r18,lo8(-37)
 2989 04d0 3FE0      		ldi r19,lo8(15)
 2990 04d2 49EC      		ldi r20,lo8(-55)
 2991 04d4 50E4      		ldi r21,lo8(64)
 2992 04d6 0E94 0000 		call fmod
 2993               	.LVL265:
 2994 04da 2BED      		ldi r18,lo8(-37)
 2995 04dc 3FE0      		ldi r19,lo8(15)
 2996 04de 49E4      		ldi r20,lo8(73)
 2997 04e0 50E4      		ldi r21,lo8(64)
 2998 04e2 0E94 0000 		call __addsf3
 2999               	.LVL266:
 3000 04e6 00C0      		rjmp .L59
 3001               	.LVL267:
 3002               	.L75:
 3003               	.LBE166:
 3004               	.LBE167:
 3005               	.LBE168:
 3006               	.LBE176:
 3007               	.LBB177:
 3008               	.LBB175:
 3009               	.LBB174:
 3010               	.LBB173:
 3011 04e8 6985      		ldd r22,Y+9
 3012 04ea 7A85      		ldd r23,Y+10
 3013 04ec 8B85      		ldd r24,Y+11
 3014 04ee 9C85      		ldd r25,Y+12
 3015 04f0 0E94 0000 		call __subsf3
 3016               	.LVL268:
 3017 04f4 2BED      		ldi r18,lo8(-37)
 3018 04f6 3FE0      		ldi r19,lo8(15)
 3019 04f8 49EC      		ldi r20,lo8(-55)
 3020 04fa 50E4      		ldi r21,lo8(64)
 3021 04fc 0E94 0000 		call fmod
 3022               	.LVL269:
 3023 0500 2BED      		ldi r18,lo8(-37)
 3024 0502 3FE0      		ldi r19,lo8(15)
 3025 0504 49E4      		ldi r20,lo8(73)
 3026 0506 50E4      		ldi r21,lo8(64)
 3027 0508 0E94 0000 		call __addsf3
 3028               	.LVL270:
 3029 050c 00C0      		rjmp .L62
 3030               	.LVL271:
 3031               	.L79:
 3032               	.LBE173:
 3033               	.LBE174:
 3034               	.LBE175:
 3035               	.LBE177:
 130:../src/range_algs.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3036               		.loc 1 130 0 discriminator 1
 3037 050e 20E0      		ldi r18,0
 3038 0510 30E0      		ldi r19,0
 3039 0512 40E8      		ldi r20,lo8(-128)
 3040 0514 5FE3      		ldi r21,lo8(63)
 3041 0516 C701      		movw r24,r14
 3042 0518 B601      		movw r22,r12
 3043 051a 0E94 0000 		call __gtsf2
 3044               	.LVL272:
 3045 051e 1816      		cp __zero_reg__,r24
 3046 0520 04F0      		brlt .+2
 3047 0522 00C0      		rjmp .L49
 3048 0524 00C0      		rjmp .L46
 3049               	.LBE184:
 3050               		.cfi_endproc
 3051               	.LFE68:
 3053               		.section	.text.ir_range_meas,"ax",@progbits
 3054               	.global	ir_range_meas
 3056               	ir_range_meas:
 3057               	.LFB73:
 298:../src/range_algs.c **** 	//int32_t times[16] = {0};
 3058               		.loc 1 298 0
 3059               		.cfi_startproc
 3060 0000 8F92      		push r8
 3061               	.LCFI84:
 3062               		.cfi_def_cfa_offset 4
 3063               		.cfi_offset 8, -3
 3064 0002 9F92      		push r9
 3065               	.LCFI85:
 3066               		.cfi_def_cfa_offset 5
 3067               		.cfi_offset 9, -4
 3068 0004 AF92      		push r10
 3069               	.LCFI86:
 3070               		.cfi_def_cfa_offset 6
 3071               		.cfi_offset 10, -5
 3072 0006 BF92      		push r11
 3073               	.LCFI87:
 3074               		.cfi_def_cfa_offset 7
 3075               		.cfi_offset 11, -6
 3076 0008 CF92      		push r12
 3077               	.LCFI88:
 3078               		.cfi_def_cfa_offset 8
 3079               		.cfi_offset 12, -7
 3080 000a DF92      		push r13
 3081               	.LCFI89:
 3082               		.cfi_def_cfa_offset 9
 3083               		.cfi_offset 13, -8
 3084 000c EF92      		push r14
 3085               	.LCFI90:
 3086               		.cfi_def_cfa_offset 10
 3087               		.cfi_offset 14, -9
 3088 000e FF92      		push r15
 3089               	.LCFI91:
 3090               		.cfi_def_cfa_offset 11
 3091               		.cfi_offset 15, -10
 3092 0010 0F93      		push r16
 3093               	.LCFI92:
 3094               		.cfi_def_cfa_offset 12
 3095               		.cfi_offset 16, -11
 3096 0012 1F93      		push r17
 3097               	.LCFI93:
 3098               		.cfi_def_cfa_offset 13
 3099               		.cfi_offset 17, -12
 3100 0014 CF93      		push r28
 3101               	.LCFI94:
 3102               		.cfi_def_cfa_offset 14
 3103               		.cfi_offset 28, -13
 3104 0016 DF93      		push r29
 3105               	.LCFI95:
 3106               		.cfi_def_cfa_offset 15
 3107               		.cfi_offset 29, -14
 3108               	/* prologue: function */
 3109               	/* frame size = 0 */
 3110               	/* stack size = 12 */
 3111               	.L__stack_usage = 12
 300:../src/range_algs.c **** 	cmd_sender_dir;
 3112               		.loc 1 300 0
 3113 0018 8091 0000 		lds r24,cmd_arrival_dir
 301:../src/range_algs.c **** 	//times[0] = get_time();
 3114               		.loc 1 301 0
 3115 001c 8091 0000 		lds r24,cmd_sender_dir
 303:../src/range_algs.c **** 	//times[1] = get_time();
 3116               		.loc 1 303 0
 3117 0020 88E0      		ldi r24,lo8(8)
 3118 0022 C82E      		mov r12,r24
 3119 0024 D12C      		mov r13,__zero_reg__
 3120 0026 E12C      		mov r14,__zero_reg__
 3121 0028 F12C      		mov r15,__zero_reg__
 3122               	.L81:
 303:../src/range_algs.c **** 	//times[1] = get_time();
 3123               		.loc 1 303 0 is_stmt 0 discriminator 1
 3124 002a 0E94 0000 		call get_time
 3125               	.LVL273:
 3126 002e 0091 0000 		lds r16,rnbCmdSentTime
 3127 0032 1091 0000 		lds r17,rnbCmdSentTime+1
 3128 0036 2091 0000 		lds r18,rnbCmdSentTime+2
 3129 003a 3091 0000 		lds r19,rnbCmdSentTime+3
 3130 003e 4601      		movw r8,r12
 3131 0040 5701      		movw r10,r14
 3132 0042 801A      		sub r8,r16
 3133 0044 910A      		sbc r9,r17
 3134 0046 A20A      		sbc r10,r18
 3135 0048 B30A      		sbc r11,r19
 3136 004a DC01      		movw r26,r24
 3137 004c CB01      		movw r24,r22
 3138 004e 880D      		add r24,r8
 3139 0050 991D      		adc r25,r9
 3140 0052 AA1D      		adc r26,r10
 3141 0054 BB1D      		adc r27,r11
 3142 0056 4E97      		sbiw r24,30
 3143 0058 A105      		cpc r26,__zero_reg__
 3144 005a B105      		cpc r27,__zero_reg__
 3145 005c 00F0      		brlo .L81
 3146               	.LBB185:
 305:../src/range_algs.c **** 		uint32_t pre_sync_op = get_time();
 3147               		.loc 1 305 0 is_stmt 1
 3148 005e 1FB7      		in r17,__SREG__
 3149               	.LVL274:
 3150               	.LBB186:
 3151               	.LBB187:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3152               		.loc 4 50 0
 3153               	/* #APP */
 3154               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3155 0060 F894      		cli
 3156               	 ;  0 "" 2
 3157               	.LVL275:
 3158               	/* #NOAPP */
 3159               	.LBE187:
 3160               	.LBE186:
 3161               	.LBB188:
 306:../src/range_algs.c **** 		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
 3162               		.loc 1 306 0
 3163 0062 0E94 0000 		call get_time
 3164               	.LVL276:
 3165 0066 6B01      		movw r12,r22
 3166 0068 7C01      		movw r14,r24
 3167               	.LVL277:
 307:../src/range_algs.c **** 		//times[2] = get_time();
 3168               		.loc 1 307 0
 3169 006a 00C0      		rjmp .L82
 3170               	.L83:
 3171               	.LVL278:
 3172               	.LBB189:
 3173               	.LBB190:
 3174               	.LBB191:
 3175               		.file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 3176               		.loc 5 276 0
 3177 006c 8FE9      		ldi r24,lo8(3999)
 3178 006e 9FE0      		ldi r25,hi8(3999)
 3179 0070 0197      	1:	sbiw r24,1
 3180 0072 01F4      		brne 1b
 3181 0074 00C0      		rjmp .
 3182 0076 0000      		nop
 3183               	.LVL279:
 3184               	.L82:
 3185               	.LBE191:
 3186               	.LBE190:
 3187               	.LBE189:
 307:../src/range_algs.c **** 		//times[2] = get_time();
 3188               		.loc 1 307 0 discriminator 1
 3189 0078 0E94 0000 		call get_time
 3190               	.LVL280:
 3191 007c DC01      		movw r26,r24
 3192 007e CB01      		movw r24,r22
 3193 0080 8C19      		sub r24,r12
 3194 0082 9D09      		sbc r25,r13
 3195 0084 AE09      		sbc r26,r14
 3196 0086 BF09      		sbc r27,r15
 3197 0088 0297      		sbiw r24,2
 3198 008a A105      		cpc r26,__zero_reg__
 3199 008c B105      		cpc r27,__zero_reg__
 3200 008e 00F0      		brlo .L83
 3201 0090 C0E0      		ldi r28,lo8(brightMeas)
 3202 0092 D0E0      		ldi r29,hi8(brightMeas)
 3203               	.L88:
 3204               	.LBB192:
 310:../src/range_algs.c **** 			//times[2*emitter_dir+3] = pre_sync_op;
 3205               		.loc 1 310 0
 3206 0094 0E94 0000 		call get_time
 3207               	.LVL281:
 3208 0098 6B01      		movw r12,r22
 3209 009a 7C01      		movw r14,r24
 3210               	.LVL282:
 312:../src/range_algs.c **** 			get_ir_sensors(brightMeas[emitter_dir] , 9); //11
 3211               		.loc 1 312 0
 3212 009c 00C0      		rjmp .L84
 3213               	.L85:
 3214               	.LVL283:
 3215               	.LBB193:
 3216               	.LBB194:
 3217               	.LBB195:
 3218               		.loc 5 276 0
 3219 009e 8FE9      		ldi r24,lo8(3999)
 3220 00a0 9FE0      		ldi r25,hi8(3999)
 3221 00a2 0197      	1:	sbiw r24,1
 3222 00a4 01F4      		brne 1b
 3223 00a6 00C0      		rjmp .
 3224 00a8 0000      		nop
 3225               	.LVL284:
 3226               	.L84:
 3227               	.LBE195:
 3228               	.LBE194:
 3229               	.LBE193:
 312:../src/range_algs.c **** 			get_ir_sensors(brightMeas[emitter_dir] , 9); //11
 3230               		.loc 1 312 0 discriminator 1
 3231 00aa 0E94 0000 		call get_time
 3232               	.LVL285:
 3233 00ae DC01      		movw r26,r24
 3234 00b0 CB01      		movw r24,r22
 3235 00b2 8C19      		sub r24,r12
 3236 00b4 9D09      		sbc r25,r13
 3237 00b6 AE09      		sbc r26,r14
 3238 00b8 BF09      		sbc r27,r15
 3239 00ba 0297      		sbiw r24,2
 3240 00bc A105      		cpc r26,__zero_reg__
 3241 00be B105      		cpc r27,__zero_reg__
 3242 00c0 00F0      		brlo .L85
 313:../src/range_algs.c **** 			//times[2*emitter_dir+4] = get_time();			
 3243               		.loc 1 313 0
 3244 00c2 69E0      		ldi r22,lo8(9)
 3245 00c4 CE01      		movw r24,r28
 3246 00c6 0E94 0000 		call get_ir_sensors
 3247               	.LVL286:
 315:../src/range_algs.c **** 			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
 3248               		.loc 1 315 0
 3249 00ca 00C0      		rjmp .L86
 3250               	.L87:
 3251               	.LVL287:
 3252               	.LBB196:
 3253               	.LBB197:
 3254               	.LBB198:
 3255               		.loc 5 276 0
 3256 00cc 8FE9      		ldi r24,lo8(3999)
 3257 00ce 9FE0      		ldi r25,hi8(3999)
 3258 00d0 0197      	1:	sbiw r24,1
 3259 00d2 01F4      		brne 1b
 3260 00d4 00C0      		rjmp .
 3261 00d6 0000      		nop
 3262               	.LVL288:
 3263               	.L86:
 3264               	.LBE198:
 3265               	.LBE197:
 3266               	.LBE196:
 315:../src/range_algs.c **** 			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
 3267               		.loc 1 315 0 discriminator 1
 3268 00d8 0E94 0000 		call get_time
 3269               	.LVL289:
 3270 00dc DC01      		movw r26,r24
 3271 00de CB01      		movw r24,r22
 3272 00e0 8C19      		sub r24,r12
 3273 00e2 9D09      		sbc r25,r13
 3274 00e4 AE09      		sbc r26,r14
 3275 00e6 BF09      		sbc r27,r15
 3276 00e8 4097      		sbiw r24,16
 3277 00ea A105      		cpc r26,__zero_reg__
 3278 00ec B105      		cpc r27,__zero_reg__
 3279 00ee 00F0      		brlo .L87
 316:../src/range_algs.c **** 		}
 3280               		.loc 1 316 0 discriminator 2
 3281 00f0 8AE0      		ldi r24,lo8(10)
 3282 00f2 90E0      		ldi r25,0
 3283 00f4 0E94 0000 		call delay_ms
 3284               	.LVL290:
 3285 00f8 2C96      		adiw r28,12
 309:../src/range_algs.c **** 			pre_sync_op = get_time();
 3286               		.loc 1 309 0 discriminator 2
 3287 00fa 90E0      		ldi r25,hi8(brightMeas+72)
 3288 00fc C030      		cpi r28,lo8(brightMeas+72)
 3289 00fe D907      		cpc r29,r25
 3290 0100 01F4      		brne .L88
 3291               	.LVL291:
 3292               	.LBE192:
 3293               	.LBE188:
 3294               	.LBB199:
 3295               	.LBB200:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3296               		.loc 4 70 0 discriminator 3
 3297 0102 1FBF      		out __SREG__,r17
 3298               		.loc 4 71 0 discriminator 3
 3299               	.LVL292:
 3300               	/* epilogue start */
 3301               	.LBE200:
 3302               	.LBE199:
 3303               	.LBE185:
 319:../src/range_algs.c **** 
 3304               		.loc 1 319 0 discriminator 3
 3305 0104 DF91      		pop r29
 3306 0106 CF91      		pop r28
 3307 0108 1F91      		pop r17
 3308 010a 0F91      		pop r16
 3309 010c FF90      		pop r15
 3310 010e EF90      		pop r14
 3311 0110 DF90      		pop r13
 3312 0112 CF90      		pop r12
 3313               	.LVL293:
 3314 0114 BF90      		pop r11
 3315 0116 AF90      		pop r10
 3316 0118 9F90      		pop r9
 3317 011a 8F90      		pop r8
 3318 011c 0895      		ret
 3319               		.cfi_endproc
 3320               	.LFE73:
 3322               		.section	.text.ir_range_blast,"ax",@progbits
 3323               	.global	ir_range_blast
 3325               	ir_range_blast:
 3326               	.LFB74:
 321:../src/range_algs.c **** 	//int32_t times[16] = {0};
 3327               		.loc 1 321 0
 3328               		.cfi_startproc
 3329               	.LVL294:
 3330 0000 CF92      		push r12
 3331               	.LCFI96:
 3332               		.cfi_def_cfa_offset 4
 3333               		.cfi_offset 12, -3
 3334 0002 DF92      		push r13
 3335               	.LCFI97:
 3336               		.cfi_def_cfa_offset 5
 3337               		.cfi_offset 13, -4
 3338 0004 EF92      		push r14
 3339               	.LCFI98:
 3340               		.cfi_def_cfa_offset 6
 3341               		.cfi_offset 14, -5
 3342 0006 FF92      		push r15
 3343               	.LCFI99:
 3344               		.cfi_def_cfa_offset 7
 3345               		.cfi_offset 15, -6
 3346 0008 0F93      		push r16
 3347               	.LCFI100:
 3348               		.cfi_def_cfa_offset 8
 3349               		.cfi_offset 16, -7
 3350 000a 1F93      		push r17
 3351               	.LCFI101:
 3352               		.cfi_def_cfa_offset 9
 3353               		.cfi_offset 17, -8
 3354 000c CF93      		push r28
 3355               	.LCFI102:
 3356               		.cfi_def_cfa_offset 10
 3357               		.cfi_offset 28, -9
 3358 000e DF93      		push r29
 3359               	.LCFI103:
 3360               		.cfi_def_cfa_offset 11
 3361               		.cfi_offset 29, -10
 3362               	/* prologue: function */
 3363               	/* frame size = 0 */
 3364               	/* stack size = 8 */
 3365               	.L__stack_usage = 8
 324:../src/range_algs.c **** 	//times[1] = get_time();
 3366               		.loc 1 324 0
 3367 0010 00C0      		rjmp .L92
 3368               	.LVL295:
 3369               	.L93:
 3370               	.LBB201:
 3371               	.LBB202:
 3372               	.LBB203:
 3373               		.loc 5 276 0
 3374 0012 8FE9      		ldi r24,lo8(3999)
 3375 0014 9FE0      		ldi r25,hi8(3999)
 3376 0016 0197      	1:	sbiw r24,1
 3377 0018 01F4      		brne 1b
 3378 001a 00C0      		rjmp .
 3379 001c 0000      		nop
 3380               	.LVL296:
 3381               	.L92:
 3382               	.LBE203:
 3383               	.LBE202:
 3384               	.LBE201:
 324:../src/range_algs.c **** 	//times[1] = get_time();
 3385               		.loc 1 324 0 discriminator 1
 3386 001e 0E94 0000 		call get_time
 3387               	.LVL297:
 3388 0022 0091 0000 		lds r16,rnbCmdSentTime
 3389 0026 1091 0000 		lds r17,rnbCmdSentTime+1
 3390 002a 2091 0000 		lds r18,rnbCmdSentTime+2
 3391 002e 3091 0000 		lds r19,rnbCmdSentTime+3
 3392 0032 DC01      		movw r26,r24
 3393 0034 CB01      		movw r24,r22
 3394 0036 801B      		sub r24,r16
 3395 0038 910B      		sbc r25,r17
 3396 003a A20B      		sbc r26,r18
 3397 003c B30B      		sbc r27,r19
 3398 003e 4E97      		sbiw r24,30
 3399 0040 A105      		cpc r26,__zero_reg__
 3400 0042 B105      		cpc r27,__zero_reg__
 3401 0044 00F0      		brlo .L93
 326:../src/range_algs.c **** 	uint16_t prevPower = curr_ir_power;
 3402               		.loc 1 326 0
 3403 0046 0E94 0000 		call get_time
 3404               	.LVL298:
 3405 004a 6B01      		movw r12,r22
 3406 004c 7C01      		movw r14,r24
 3407               	.LVL299:
 327:../src/range_algs.c **** 	set_all_ir_powers(256);	
 3408               		.loc 1 327 0
 3409 004e C091 0000 		lds r28,curr_ir_power
 3410 0052 D091 0000 		lds r29,curr_ir_power+1
 3411               	.LVL300:
 328:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
 3412               		.loc 1 328 0
 3413 0056 80E0      		ldi r24,0
 3414 0058 91E0      		ldi r25,lo8(1)
 3415 005a 0E94 0000 		call set_all_ir_powers
 3416               	.LVL301:
 3417               	.LBB204:
 329:../src/range_algs.c **** 		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
 3418               		.loc 1 329 0
 3419 005e 1FB7      		in r17,__SREG__
 3420               	.LVL302:
 3421               	.LBB205:
 3422               	.LBB206:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3423               		.loc 4 50 0
 3424               	/* #APP */
 3425               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3426 0060 F894      		cli
 3427               	 ;  0 "" 2
 3428               	.LVL303:
 3429               	/* #NOAPP */
 3430 0062 00C0      		rjmp .L94
 3431               	.L95:
 3432               	.LVL304:
 3433               	.LBE206:
 3434               	.LBE205:
 3435               	.LBB207:
 3436               	.LBB208:
 3437               	.LBB209:
 3438               		.loc 5 276 0
 3439 0064 8FE9      		ldi r24,lo8(3999)
 3440 0066 9FE0      		ldi r25,hi8(3999)
 3441 0068 0197      	1:	sbiw r24,1
 3442 006a 01F4      		brne 1b
 3443 006c 00C0      		rjmp .
 3444 006e 0000      		nop
 3445               	.LVL305:
 3446               	.L94:
 3447               	.LBE209:
 3448               	.LBE208:
 3449               	.LBE207:
 330:../src/range_algs.c **** 		//times[2] = get_time();
 3450               		.loc 1 330 0 discriminator 1
 3451 0070 0E94 0000 		call get_time
 3452               	.LVL306:
 3453 0074 DC01      		movw r26,r24
 3454 0076 CB01      		movw r24,r22
 3455 0078 8C19      		sub r24,r12
 3456 007a 9D09      		sbc r25,r13
 3457 007c AE09      		sbc r26,r14
 3458 007e BF09      		sbc r27,r15
 3459 0080 0297      		sbiw r24,2
 3460 0082 A105      		cpc r26,__zero_reg__
 3461 0084 B105      		cpc r27,__zero_reg__
 3462 0086 00F0      		brlo .L95
 3463 0088 00E0      		ldi r16,0
 3464               	.LVL307:
 3465               	.L98:
 3466               	.LBB210:
 333:../src/range_algs.c **** 			//set_red_led(255);
 3467               		.loc 1 333 0
 3468 008a 0E94 0000 		call get_time
 3469               	.LVL308:
 3470 008e 6B01      		movw r12,r22
 3471 0090 7C01      		movw r14,r24
 3472               	.LVL309:
 336:../src/range_algs.c **** 			while((get_time() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
 3473               		.loc 1 336 0
 3474 0092 802F      		mov r24,r16
 3475 0094 0E94 0000 		call ir_led_on
 3476               	.LVL310:
 337:../src/range_algs.c **** 			ir_led_off(dir);
 3477               		.loc 1 337 0
 3478 0098 00C0      		rjmp .L96
 3479               	.L97:
 3480               	.LVL311:
 3481               	.LBB211:
 3482               	.LBB212:
 3483               	.LBB213:
 3484               		.loc 5 276 0
 3485 009a 8FE9      		ldi r24,lo8(3999)
 3486 009c 9FE0      		ldi r25,hi8(3999)
 3487 009e 0197      	1:	sbiw r24,1
 3488 00a0 01F4      		brne 1b
 3489 00a2 00C0      		rjmp .
 3490 00a4 0000      		nop
 3491               	.LVL312:
 3492               	.L96:
 3493               	.LBE213:
 3494               	.LBE212:
 3495               	.LBE211:
 337:../src/range_algs.c **** 			ir_led_off(dir);
 3496               		.loc 1 337 0 discriminator 1
 3497 00a6 0E94 0000 		call get_time
 3498               	.LVL313:
 3499 00aa DC01      		movw r26,r24
 3500 00ac CB01      		movw r24,r22
 3501 00ae 8C19      		sub r24,r12
 3502 00b0 9D09      		sbc r25,r13
 3503 00b2 AE09      		sbc r26,r14
 3504 00b4 BF09      		sbc r27,r15
 3505 00b6 4097      		sbiw r24,16
 3506 00b8 A105      		cpc r26,__zero_reg__
 3507 00ba B105      		cpc r27,__zero_reg__
 3508 00bc 00F0      		brlo .L97
 338:../src/range_algs.c **** 			//times[2*dir+4] = get_time();				
 3509               		.loc 1 338 0 discriminator 2
 3510 00be 802F      		mov r24,r16
 3511 00c0 0E94 0000 		call ir_led_off
 3512               	.LVL314:
 341:../src/range_algs.c **** 		}
 3513               		.loc 1 341 0 discriminator 2
 3514 00c4 8AE0      		ldi r24,lo8(10)
 3515 00c6 90E0      		ldi r25,0
 3516 00c8 0E94 0000 		call delay_ms
 3517               	.LVL315:
 332:../src/range_algs.c **** 			pre_sync_op = get_time();
 3518               		.loc 1 332 0 discriminator 2
 3519 00cc 0F5F      		subi r16,lo8(-(1))
 3520               	.LVL316:
 3521 00ce 0630      		cpi r16,lo8(6)
 3522 00d0 01F4      		brne .L98
 3523               	.LVL317:
 3524               	.LBE210:
 3525               	.LBB214:
 3526               	.LBB215:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3527               		.loc 4 70 0
 3528 00d2 1FBF      		out __SREG__,r17
 3529               		.loc 4 71 0
 3530               	.LVL318:
 3531               	.LBE215:
 3532               	.LBE214:
 3533               	.LBE204:
 344:../src/range_algs.c **** }
 3534               		.loc 1 344 0
 3535 00d4 CE01      		movw r24,r28
 3536               	/* epilogue start */
 345:../src/range_algs.c **** 
 3537               		.loc 1 345 0
 3538 00d6 DF91      		pop r29
 3539 00d8 CF91      		pop r28
 3540               	.LVL319:
 3541 00da 1F91      		pop r17
 3542 00dc 0F91      		pop r16
 3543               	.LVL320:
 3544 00de FF90      		pop r15
 3545 00e0 EF90      		pop r14
 3546 00e2 DF90      		pop r13
 3547 00e4 CF90      		pop r12
 3548               	.LVL321:
 344:../src/range_algs.c **** }
 3549               		.loc 1 344 0
 3550 00e6 0C94 0000 		jmp set_all_ir_powers
 3551               	.LVL322:
 3552               		.cfi_endproc
 3553               	.LFE74:
 3555               		.section	.text.broadcast_rnb_data,"ax",@progbits
 3556               	.global	broadcast_rnb_data
 3558               	broadcast_rnb_data:
 3559               	.LFB67:
  87:../src/range_algs.c **** 	uint8_t power = 255;
 3560               		.loc 1 87 0
 3561               		.cfi_startproc
 3562 0000 CF93      		push r28
 3563               	.LCFI104:
 3564               		.cfi_def_cfa_offset 4
 3565               		.cfi_offset 28, -3
 3566 0002 DF93      		push r29
 3567               	.LCFI105:
 3568               		.cfi_def_cfa_offset 5
 3569               		.cfi_offset 29, -4
 3570 0004 1F92      		push __zero_reg__
 3571               	.LCFI106:
 3572               		.cfi_def_cfa_offset 6
 3573 0006 CDB7      		in r28,__SP_L__
 3574 0008 DEB7      		in r29,__SP_H__
 3575               	.LCFI107:
 3576               		.cfi_def_cfa_register 28
 3577               	/* prologue: function */
 3578               	/* frame size = 1 */
 3579               	/* stack size = 3 */
 3580               	.L__stack_usage = 3
 3581               	.LVL323:
 3582               	.LBB216:
  90:../src/range_algs.c **** 		if(!rnbProcessingFlag){
 3583               		.loc 1 90 0
 3584 000a 9FB7      		in r25,__SREG__
 3585               	.LVL324:
 3586               	.LBB217:
 3587               	.LBB218:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3588               		.loc 4 50 0
 3589               	/* #APP */
 3590               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3591 000c F894      		cli
 3592               	 ;  0 "" 2
 3593               	.LVL325:
 3594               	/* #NOAPP */
 3595               	.LBE218:
 3596               	.LBE217:
  91:../src/range_algs.c **** 			rnbProcessingFlag = 1;
 3597               		.loc 1 91 0
 3598 000e 8091 0000 		lds r24,rnbProcessingFlag
 3599 0012 8111      		cpse r24,__zero_reg__
 3600 0014 00C0      		rjmp .L104
  92:../src/range_algs.c **** 			goAhead = 1;
 3601               		.loc 1 92 0
 3602 0016 81E0      		ldi r24,lo8(1)
 3603 0018 8093 0000 		sts rnbProcessingFlag,r24
 3604               	.LVL326:
 3605               	.LBB219:
 3606               	.LBB220:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3607               		.loc 4 70 0
 3608 001c 9FBF      		out __SREG__,r25
 3609               		.loc 4 71 0
 3610               	.LVL327:
 3611               	.LBE220:
 3612               	.LBE219:
 3613               	.LBE216:
  96:../src/range_algs.c **** 		rnbCmdSentTime = get_time();
 3614               		.loc 1 96 0
 3615 001e 8111      		cpse r24,__zero_reg__
 3616 0020 00C0      		rjmp .L111
 3617               	.LVL328:
 3618               	.L102:
 3619               	.LBB223:
 111:../src/range_algs.c **** 		rnbProcessingFlag = 0;
 3620               		.loc 1 111 0
 3621 0022 8FB7      		in r24,__SREG__
 3622               	.LVL329:
 3623               	.LBB224:
 3624               	.LBB225:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3625               		.loc 4 50 0
 3626               	/* #APP */
 3627               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3628 0024 F894      		cli
 3629               	 ;  0 "" 2
 3630               	.LVL330:
 3631               	/* #NOAPP */
 3632               	.LBE225:
 3633               	.LBE224:
 112:../src/range_algs.c **** 	}
 3634               		.loc 1 112 0
 3635 0026 1092 0000 		sts rnbProcessingFlag,__zero_reg__
 3636               	.LVL331:
 3637               	.LBB226:
 3638               	.LBB227:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3639               		.loc 4 70 0
 3640 002a 8FBF      		out __SREG__,r24
 3641               		.loc 4 71 0
 3642               	.LVL332:
 3643               	/* epilogue start */
 3644               	.LBE227:
 3645               	.LBE226:
 3646               	.LBE223:
 114:../src/range_algs.c **** 
 3647               		.loc 1 114 0
 3648 002c 0F90      		pop __tmp_reg__
 3649 002e DF91      		pop r29
 3650 0030 CF91      		pop r28
 3651 0032 0895      		ret
 3652               	.LVL333:
 3653               	.L104:
  89:../src/range_algs.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3654               		.loc 1 89 0
 3655 0034 80E0      		ldi r24,0
 3656               	.LVL334:
 3657               	.LBB228:
 3658               	.LBB222:
 3659               	.LBB221:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3660               		.loc 4 70 0
 3661 0036 9FBF      		out __SREG__,r25
 3662               		.loc 4 71 0
 3663               	.LVL335:
 3664               	.LBE221:
 3665               	.LBE222:
 3666               	.LBE228:
  96:../src/range_algs.c **** 		rnbCmdSentTime = get_time();
 3667               		.loc 1 96 0
 3668 0038 8823      		tst r24
 3669 003a 01F0      		breq .L102
 3670               	.LVL336:
 3671               	.L111:
 3672               	.LBB229:
  97:../src/range_algs.c **** 		char c = 'r';
 3673               		.loc 1 97 0
 3674 003c 0E94 0000 		call get_time
 3675               	.LVL337:
 3676 0040 6093 0000 		sts rnbCmdSentTime,r22
 3677 0044 7093 0000 		sts rnbCmdSentTime+1,r23
 3678 0048 8093 0000 		sts rnbCmdSentTime+2,r24
 3679 004c 9093 0000 		sts rnbCmdSentTime+3,r25
  98:../src/range_algs.c **** 		uint8_t result = hp_ir_targeted_cmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
 3680               		.loc 1 98 0
 3681 0050 82E7      		ldi r24,lo8(114)
 3682 0052 8983      		std Y+1,r24
  99:../src/range_algs.c **** 		if(result){
 3683               		.loc 1 99 0
 3684 0054 2091 0000 		lds r18,rnbCmdSentTime
 3685 0058 3091 0000 		lds r19,rnbCmdSentTime+1
 3686 005c 4091 0000 		lds r20,rnbCmdSentTime+2
 3687 0060 5091 0000 		lds r21,rnbCmdSentTime+3
 3688 0064 41E4      		ldi r20,lo8(65)
 3689 0066 BE01      		movw r22,r28
 3690 0068 6F5F      		subi r22,-1
 3691 006a 7F4F      		sbci r23,-1
 3692 006c 8FE3      		ldi r24,lo8(63)
 3693 006e 0E94 0000 		call hp_ir_targeted_cmd
 3694               	.LVL338:
 100:../src/range_algs.c **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3695               		.loc 1 100 0
 3696 0072 8823      		tst r24
 3697 0074 01F0      		breq .L102
 3698               	.LBB230:
 101:../src/range_algs.c **** 				hp_ir_block_bm = 0xFF;
 3699               		.loc 1 101 0
 3700 0076 8FB7      		in r24,__SREG__
 3701               	.LVL339:
 3702               	.LBB231:
 3703               	.LBB232:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3704               		.loc 4 50 0
 3705               	/* #APP */
 3706               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3707 0078 F894      		cli
 3708               	 ;  0 "" 2
 3709               	.LVL340:
 3710               	/* #NOAPP */
 3711               	.LBE232:
 3712               	.LBE231:
 102:../src/range_algs.c **** 			}		
 3713               		.loc 1 102 0
 3714 007a 9FEF      		ldi r25,lo8(-1)
 3715 007c 9093 0000 		sts hp_ir_block_bm,r25
 3716               	.LVL341:
 3717               	.LBB233:
 3718               	.LBB234:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3719               		.loc 4 70 0
 3720 0080 8FBF      		out __SREG__,r24
 3721               		.loc 4 71 0
 3722               	.LVL342:
 3723               	.LBE234:
 3724               	.LBE233:
 3725               	.LBE230:
 104:../src/range_algs.c **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3726               		.loc 1 104 0
 3727 0082 8FEF      		ldi r24,lo8(-1)
 3728 0084 0E94 0000 		call ir_range_blast
 3729               	.LVL343:
 3730               	.LBB235:
 105:../src/range_algs.c **** 				hp_ir_block_bm = 0;
 3731               		.loc 1 105 0
 3732 0088 8FB7      		in r24,__SREG__
 3733               	.LVL344:
 3734               	.LBB236:
 3735               	.LBB237:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3736               		.loc 4 50 0
 3737               	/* #APP */
 3738               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3739 008a F894      		cli
 3740               	 ;  0 "" 2
 3741               	.LVL345:
 3742               	/* #NOAPP */
 3743               	.LBE237:
 3744               	.LBE236:
 106:../src/range_algs.c **** 			}
 3745               		.loc 1 106 0
 3746 008c 1092 0000 		sts hp_ir_block_bm,__zero_reg__
 3747               	.LVL346:
 3748               	.LBB238:
 3749               	.LBB239:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3750               		.loc 4 70 0
 3751 0090 8FBF      		out __SREG__,r24
 3752               		.loc 4 71 0
 3753               	.LVL347:
 3754 0092 00C0      		rjmp .L102
 3755               	.LBE239:
 3756               	.LBE238:
 3757               	.LBE235:
 3758               	.LBE229:
 3759               		.cfi_endproc
 3760               	.LFE67:
 3762               		.section	.progmem.data.__c.5414,"a",@progbits
 3765               	__c.5414:
 3766 0000 2121 2109 		.string	"!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"
 3766      476F 7420 
 3766      3135 2063 
 3766      6F6E 7365 
 3766      6375 7469 
 3767               		.section	.bss.brightMeas,"aw",@nobits
 3770               	brightMeas:
 3771 0000 0000 0000 		.zero	72
 3771      0000 0000 
 3771      0000 0000 
 3771      0000 0000 
 3771      0000 0000 
 3772               		.section	.bss.sensorHealthHistory,"aw",@nobits
 3775               	sensorHealthHistory:
 3776 0000 0000 0000 		.zero	4
 3777               		.section	.rodata.headingBasis,"a",@progbits
 3780               	headingBasis:
 3781 0000 00        		.byte	0
 3782 0001 00        		.byte	0
 3783 0002 80        		.byte	-128
 3784 0003 BF        		.byte	-65
 3785 0004 00        		.byte	0
 3786 0005 00        		.byte	0
 3787 0006 00        		.byte	0
 3788 0007 00        		.byte	0
 3789 0008 00        		.byte	0
 3790 0009 00        		.byte	0
 3791 000a 00        		.byte	0
 3792 000b BF        		.byte	-65
 3793 000c D7        		.byte	-41
 3794 000d B3        		.byte	-77
 3795 000e 5D        		.byte	93
 3796 000f 3F        		.byte	63
 3797 0010 00        		.byte	0
 3798 0011 00        		.byte	0
 3799 0012 00        		.byte	0
 3800 0013 3F        		.byte	63
 3801 0014 D7        		.byte	-41
 3802 0015 B3        		.byte	-77
 3803 0016 5D        		.byte	93
 3804 0017 3F        		.byte	63
 3805 0018 00        		.byte	0
 3806 0019 00        		.byte	0
 3807 001a 80        		.byte	-128
 3808 001b 3F        		.byte	63
 3809 001c 00        		.byte	0
 3810 001d 00        		.byte	0
 3811 001e 00        		.byte	0
 3812 001f 00        		.byte	0
 3813 0020 00        		.byte	0
 3814 0021 00        		.byte	0
 3815 0022 00        		.byte	0
 3816 0023 3F        		.byte	63
 3817 0024 D7        		.byte	-41
 3818 0025 B3        		.byte	-77
 3819 0026 5D        		.byte	93
 3820 0027 BF        		.byte	-65
 3821 0028 00        		.byte	0
 3822 0029 00        		.byte	0
 3823 002a 00        		.byte	0
 3824 002b BF        		.byte	-65
 3825 002c D7        		.byte	-41
 3826 002d B3        		.byte	-77
 3827 002e 5D        		.byte	93
 3828 002f BF        		.byte	-65
 3829               		.section	.rodata.hats,"a",@progbits
 3832               	hats:
 3833 0000 00        		.byte	0
 3834 0001 00        		.byte	0
 3835 0002 30        		.byte	48
 3836 0003 41        		.byte	65
 3837 0004 A4        		.byte	-92
 3838 0005 6B        		.byte	107
 3839 0006 98        		.byte	-104
 3840 0007 41        		.byte	65
 3841 0008 00        		.byte	0
 3842 0009 00        		.byte	0
 3843 000a B0        		.byte	-80
 3844 000b 41        		.byte	65
 3845 000c 00        		.byte	0
 3846 000d 00        		.byte	0
 3847 000e 00        		.byte	0
 3848 000f 00        		.byte	0
 3849 0010 00        		.byte	0
 3850 0011 00        		.byte	0
 3851 0012 30        		.byte	48
 3852 0013 41        		.byte	65
 3853 0014 A4        		.byte	-92
 3854 0015 6B        		.byte	107
 3855 0016 98        		.byte	-104
 3856 0017 C1        		.byte	-63
 3857 0018 00        		.byte	0
 3858 0019 00        		.byte	0
 3859 001a 30        		.byte	48
 3860 001b C1        		.byte	-63
 3861 001c A4        		.byte	-92
 3862 001d 6B        		.byte	107
 3863 001e 98        		.byte	-104
 3864 001f C1        		.byte	-63
 3865 0020 00        		.byte	0
 3866 0021 00        		.byte	0
 3867 0022 B0        		.byte	-80
 3868 0023 C1        		.byte	-63
 3869 0024 00        		.byte	0
 3870 0025 00        		.byte	0
 3871 0026 00        		.byte	0
 3872 0027 00        		.byte	0
 3873 0028 00        		.byte	0
 3874 0029 00        		.byte	0
 3875 002a 30        		.byte	48
 3876 002b C1        		.byte	-63
 3877 002c A4        		.byte	-92
 3878 002d 6B        		.byte	107
 3879 002e 98        		.byte	-104
 3880 002f 41        		.byte	65
 3881               		.section	.rodata.bearingBasis,"a",@progbits
 3884               	bearingBasis:
 3885 0000 D7        		.byte	-41
 3886 0001 B3        		.byte	-77
 3887 0002 5D        		.byte	93
 3888 0003 3F        		.byte	63
 3889 0004 00        		.byte	0
 3890 0005 00        		.byte	0
 3891 0006 00        		.byte	0
 3892 0007 BF        		.byte	-65
 3893 0008 00        		.byte	0
 3894 0009 00        		.byte	0
 3895 000a 00        		.byte	0
 3896 000b 00        		.byte	0
 3897 000c 00        		.byte	0
 3898 000d 00        		.byte	0
 3899 000e 80        		.byte	-128
 3900 000f BF        		.byte	-65
 3901 0010 D7        		.byte	-41
 3902 0011 B3        		.byte	-77
 3903 0012 5D        		.byte	93
 3904 0013 BF        		.byte	-65
 3905 0014 00        		.byte	0
 3906 0015 00        		.byte	0
 3907 0016 00        		.byte	0
 3908 0017 BF        		.byte	-65
 3909 0018 D7        		.byte	-41
 3910 0019 B3        		.byte	-77
 3911 001a 5D        		.byte	93
 3912 001b BF        		.byte	-65
 3913 001c 00        		.byte	0
 3914 001d 00        		.byte	0
 3915 001e 00        		.byte	0
 3916 001f 3F        		.byte	63
 3917 0020 00        		.byte	0
 3918 0021 00        		.byte	0
 3919 0022 00        		.byte	0
 3920 0023 00        		.byte	0
 3921 0024 00        		.byte	0
 3922 0025 00        		.byte	0
 3923 0026 80        		.byte	-128
 3924 0027 3F        		.byte	63
 3925 0028 D7        		.byte	-41
 3926 0029 B3        		.byte	-77
 3927 002a 5D        		.byte	93
 3928 002b 3F        		.byte	63
 3929 002c 00        		.byte	0
 3930 002d 00        		.byte	0
 3931 002e 00        		.byte	0
 3932 002f 3F        		.byte	63
 3933               		.comm	rnbProcessingFlag,1,1
 3934               		.comm	rnbCmdSentTime,4,1
 3935               		.comm	rnbCmdID,2,1
 3936               		.comm	rnb_updated,1,1
 3937               		.comm	last_good_rnb,8,1
 3938               		.comm	cmd_sender_dir,1,1
 3939               		.comm	cmd_arrival_dir,1,1
 3940               		.comm	cmd_sender_id,2,1
 3941               		.comm	cmd_arrival_time,4,1
 3942               		.comm	user_facing_messages_ovf,1,1
 3943               		.comm	num_waiting_msgs,1,1
 3944               		.comm	hp_ir_block_bm,1,1
 3945               		.comm	msg_node,294,1
 3946               		.comm	ir_rxtx,342,1
 3947               		.comm	obsStart,2,1
 3948               		.comm	mm_per_kilostep,16,1
 3949               		.comm	motor_adjusts,48,1
 3950               		.comm	curr_ir_power,2,1
 3951               		.comm	twi,2,1
 3952               		.comm	twiMaster,25,1
 3953               		.section	.bss.task_storage_arr,"aw",@nobits
 3956               	task_storage_arr:
 3957 0000 0000 0000 		.zero	140
 3957      0000 0000 
 3957      0000 0000 
 3957      0000 0000 
 3957      0000 0000 
 3958               		.comm	task_executing,1,1
 3959               		.comm	num_tasks,1,1
 3960               		.comm	task_list,2,1
 3961               		.comm	rtc_epoch,2,1
 3962               		.comm	droplet_ID,2,1
 3963               		.text
 3964               	.Letext0:
 3965               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 3966               		.file 7 "C:/Program Files (x86)/Atmel/Studio/7.0/Packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 3967               		.file 8 "../include/droplet_base.h"
 3968               		.file 9 "../include/scheduler.h"
 3969               		.file 10 "../include/i2c.h"
 3970               		.file 11 "../include/firefly_sync.h"
 3971               		.file 12 "../include/ir_comm.h"
 3972               		.file 13 "../include/ir_led.h"
 3973               		.file 14 "../include/motor.h"
 3974               		.file 15 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 3975               		.file 16 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 3976               		.file 17 "../include/ir_sensor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 range_algs.c
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:2      *ABS*:0000003e __SP_H__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3      *ABS*:0000003d __SP_L__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:4      *ABS*:0000003f __SREG__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:6      *ABS*:00000034 __CCP__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:8      *ABS*:00000001 __zero_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:19     .text.magicRangeFunc:00000000 magicRangeFunc
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:131    .text.range_algs_init:00000000 range_algs_init
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3775   .bss.sensorHealthHistory:00000000 sensorHealthHistory
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3770   .bss.brightMeas:00000000 brightMeas
                            *COM*:00000002 rnbCmdID
                            *COM*:00000001 rnbProcessingFlag
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:193    .text.calculate_range:00000000 calculate_range
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3832   .rodata.hats:00000000 hats
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:817    .text.calculate_error:00000000 calculate_error
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:1761   .text.calculate_bearing_and_heading:00000000 calculate_bearing_and_heading
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3780   .rodata.headingBasis:00000000 headingBasis
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3884   .rodata.bearingBasis:00000000 bearingBasis
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:2160   .text.use_rnb_data:00000000 use_rnb_data
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3765   .progmem.data.__c.5414:00000000 __c.5414
                            *COM*:00000008 last_good_rnb
                            *COM*:00000001 rnb_updated
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3056   .text.ir_range_meas:00000000 ir_range_meas
                            *COM*:00000001 cmd_arrival_dir
                            *COM*:00000001 cmd_sender_dir
                            *COM*:00000004 rnbCmdSentTime
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3325   .text.ir_range_blast:00000000 ir_range_blast
                            *COM*:00000002 curr_ir_power
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3558   .text.broadcast_rnb_data:00000000 broadcast_rnb_data
                            *COM*:00000001 hp_ir_block_bm
                            *COM*:00000002 cmd_sender_id
                            *COM*:00000004 cmd_arrival_time
                            *COM*:00000001 user_facing_messages_ovf
                            *COM*:00000001 num_waiting_msgs
                            *COM*:00000126 msg_node
                            *COM*:00000156 ir_rxtx
                            *COM*:00000002 obsStart
                            *COM*:00000010 mm_per_kilostep
                            *COM*:00000030 motor_adjusts
                            *COM*:00000002 twi
                            *COM*:00000019 twiMaster
C:\Users\JOHNK~1\AppData\Local\Temp\cc7AcFkq.s:3956   .bss.task_storage_arr:00000000 task_storage_arr
                            *COM*:00000001 task_executing
                            *COM*:00000001 num_tasks
                            *COM*:00000002 task_list
                            *COM*:00000002 rtc_epoch
                            *COM*:00000002 droplet_ID

UNDEFINED SYMBOLS
__lesf2
__addsf3
__mulsf3
__divsf3
__subsf3
pow
exp
__ltsf2
__floatsisf
sin
cos
__divmodhi4
atan2
__nesf2
__unordsf2
__gtsf2
__fixunssfsi
__gesf2
__fixsfsi
set_rgb
delay_ms
led_off
fmod
printf_P
get_time
get_ir_sensors
set_all_ir_powers
ir_led_on
ir_led_off
hp_ir_targeted_cmd
__do_copy_data
__do_clear_bss
