   1               		.file	"flash_api.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.section	.text.FLASH_FlushFlasPageBuffer,"ax",@progbits
  13               	.global	FLASH_FlushFlasPageBuffer
  15               	FLASH_FlushFlasPageBuffer:
  16               	.LFB28:
  17               		.file 1 "../src/flash_api.c"
   1:../src/flash_api.c **** #include "flash_api.h"
   2:../src/flash_api.c **** 
   3:../src/flash_api.c **** /******************************************************New Code for write/read on flash************
   4:../src/flash_api.c **** /*! \brief Flush temporary FLASH page buffer. 
   5:../src/flash_api.c ****  * 
   6:../src/flash_api.c ****  *  This function flushes the FLASH page buffers. 
   7:../src/flash_api.c ****  */ 
   8:../src/flash_api.c **** void FLASH_FlushFlasPageBuffer(void) 
   9:../src/flash_api.c **** { 
  18               		.loc 1 9 0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  10:../src/flash_api.c ****     NVM.CMD = NVM_CMD_ERASE_FLASH_BUFFER_gc; 
  24               		.loc 1 10 0
  25 0000 86E2      		ldi r24,lo8(38)
  26 0002 8093 CA01 		sts 458,r24
  11:../src/flash_api.c ****     NVM_EXEC(); 
  27               		.loc 1 11 0
  28               	/* #APP */
  29               	 ;  11 "../src/flash_api.c" 1
  30 0006 EF93      		push r30
  31 0008 FF93      		push r31
  32 000a 0F93      		push r16
  33 000c 2F93      		push r18
  34 000e EBEC      		ldi r30, 0xCB
  35 0010 F1E0      		ldi r31, 0x01
  36 0012 08ED      		ldi r16, 0xD8
  37 0014 21E0      		ldi r18, 0x01
  38 0016 04BF      		out 0x34, r16
  39 0018 2083      		st Z, r18
  40 001a 2F91      		pop r18
  41 001c 0F91      		pop r16
  42 001e FF91      		pop r31
  43 0020 EF91      		pop r30
  44               		
  45               	 ;  0 "" 2
  46               	/* #NOAPP */
  47               	.L2:
  48               	.LBB12:
  49               	.LBB13:
  12:../src/flash_api.c **** 
  13:../src/flash_api.c ****     // Wait until NVM is not busy 
  14:../src/flash_api.c ****     FLASH_WaitForNVM(); 
  15:../src/flash_api.c **** }   // FLASH_FlushFlasPageBuffer 
  16:../src/flash_api.c **** 
  17:../src/flash_api.c **** /*! \brief Load entire page into temporary FLASH page buffer. 
  18:../src/flash_api.c ****  * 
  19:../src/flash_api.c ****  *  This function loads an entire FLASH page from an SRAM buffer to 
  20:../src/flash_api.c ****  *  the FLASH page buffers. Make sure that the buffer is flushed before 
  21:../src/flash_api.c ****  *  starting to load bytes. 
  22:../src/flash_api.c ****  * 
  23:../src/flash_api.c ****  *  \note Only the lower part of the address is used to address the buffer. 
  24:../src/flash_api.c ****  *        Therefore, no address parameter is needed. In the end, the data 
  25:../src/flash_api.c ****  *        is written to the FLASH page given by the address parameter to the 
  26:../src/flash_api.c ****  *        FLASH write page operation. 
  27:../src/flash_api.c ****  * 
  28:../src/flash_api.c ****  *  \param  values   Pointer to SRAM buffer containing an entire page. 
  29:../src/flash_api.c ****  */ 
  30:../src/flash_api.c **** void FLASH_LoadFlashPageBuffer(const uint8_t *ram_buffer_ptr) 
  31:../src/flash_api.c **** { 
  32:../src/flash_api.c ****     uint16_t i; 
  33:../src/flash_api.c ****     uint16_t *int_ptr; 
  34:../src/flash_api.c **** 
  35:../src/flash_api.c ****     // Wait until NVM is not busy 
  36:../src/flash_api.c ****     FLASH_WaitForNVM(); 
  37:../src/flash_api.c ****     NVM.CMD = NVM_CMD_LOAD_FLASH_BUFFER_gc; 
  38:../src/flash_api.c **** 
  39:../src/flash_api.c ****     int_ptr = (uint16_t *)ram_buffer_ptr; 
  40:../src/flash_api.c **** 
  41:../src/flash_api.c ****     // Load multiple bytes into page buffer 
  42:../src/flash_api.c ****     for (i = 0; i < (FLASH_PAGE_SIZE * 2); i+=2) 
  43:../src/flash_api.c ****     { 
  44:../src/flash_api.c ****         LoadR0(*int_ptr); 
  45:../src/flash_api.c ****         LoadZ(i); 
  46:../src/flash_api.c ****         CPU_CCP = CCP_SPM_gc; 
  47:../src/flash_api.c ****         asm("spm"); 
  48:../src/flash_api.c ****         int_ptr++; 
  49:../src/flash_api.c ****     } 
  50:../src/flash_api.c **** }   // FLASH_LoadFlashPageBuffer 
  51:../src/flash_api.c **** 
  52:../src/flash_api.c **** /*! \brief Erase entire application section. 
  53:../src/flash_api.c ****  * 
  54:../src/flash_api.c ****  *  This function erases the entire application and application table section 
  55:../src/flash_api.c ****  * 
  56:../src/flash_api.c ****  *  \note If the lock bits is set to not allow spm in the application or 
  57:../src/flash_api.c ****  *        application table section the erase is not done. 
  58:../src/flash_api.c ****  */ 
  59:../src/flash_api.c **** void FLASH_EraseApplicationSections(void) 
  60:../src/flash_api.c **** { 
  61:../src/flash_api.c ****     NVM.CMD = NVM_CMD_ERASE_APP_gc; 
  62:../src/flash_api.c ****     CPU_CCP = CCP_SPM_gc; 
  63:../src/flash_api.c ****     // Self-program. 
  64:../src/flash_api.c ****     asm("spm"); 
  65:../src/flash_api.c **** 
  66:../src/flash_api.c ****     // Wait until NVM is not busy 
  67:../src/flash_api.c ****     FLASH_WaitForNVM(); 
  68:../src/flash_api.c **** }   // FLASH_EraseApplicationSections 
  69:../src/flash_api.c **** 
  70:../src/flash_api.c **** 
  71:../src/flash_api.c **** 
  72:../src/flash_api.c **** /*! \brief Erase and write page buffer to application or application table section at byte address.
  73:../src/flash_api.c ****  * 
  74:../src/flash_api.c ****  *  This function does a combined erase and write to a flash page in the application 
  75:../src/flash_api.c ****  *  or application table section. 
  76:../src/flash_api.c ****  * 
  77:../src/flash_api.c ****  *  \param page_number Flash page number. 
  78:../src/flash_api.c ****  */ 
  79:../src/flash_api.c **** void FLASH_EraseWriteApplicationPage(uint16_t page_number) 
  80:../src/flash_api.c **** { 
  81:../src/flash_api.c ****     // addresses the page 
  82:../src/flash_api.c ****     CPU_RAMPZ = (uint8_t)(page_number >> (16 - FLASH_FWORD_SIZE)); 
  83:../src/flash_api.c ****     LoadZ((uint32_t)page_number << FLASH_FWORD_SIZE); 
  84:../src/flash_api.c **** 
  85:../src/flash_api.c ****     // Write the "safety code" to the CCP register 
  86:../src/flash_api.c ****     // FLASH write has to be executed within 4 cycles 
  87:../src/flash_api.c ****     NVM.CMD = NVM_CMD_ERASE_WRITE_APP_PAGE_gc; 
  88:../src/flash_api.c ****     CPU_CCP = CCP_SPM_gc; 
  89:../src/flash_api.c ****     // Self-program. 
  90:../src/flash_api.c ****     asm("spm"); 
  91:../src/flash_api.c **** 
  92:../src/flash_api.c ****     // Wait until NVM is not busy 
  93:../src/flash_api.c ****     FLASH_WaitForNVM(); 
  94:../src/flash_api.c **** }   // FLASH_EraseWriteApplicationPage 
  95:../src/flash_api.c **** 
  96:../src/flash_api.c **** /*! \brief Read a byte from flash. 
  97:../src/flash_api.c ****  * 
  98:../src/flash_api.c ****  *  This function reads one byte from the flash. 
  99:../src/flash_api.c ****  * 
 100:../src/flash_api.c ****  *  \note Both IAR and GCC have functions to do this, but 
 101:../src/flash_api.c ****  *        we include the fucntions for easier use. 
 102:../src/flash_api.c ****  * 
 103:../src/flash_api.c ****  *  \param address Address to the location of the byte to read. 
 104:../src/flash_api.c ****  * 
 105:../src/flash_api.c ****  *  \retval Byte read from flash. 
 106:../src/flash_api.c ****  */ 
 107:../src/flash_api.c **** /*uint8_t FLASH_ReadByte(uint32_t flash_address) 
 108:../src/flash_api.c **** { 
 109:../src/flash_api.c ****     uint8_t flash_data; 
 110:../src/flash_api.c **** 	uint32_t page_address = (uint8_t)((flash_address >> 10) & 0xFF); 
 111:../src/flash_api.c ****     CPU_RAMPZ = (uint8_t)(page_address >> 16); 
 112:../src/flash_api.c ****     LoadZ(flash_address); 
 113:../src/flash_api.c ****     flash_data = ReadELPM(); 
 114:../src/flash_api.c **** 
 115:../src/flash_api.c ****     return flash_data; 
 116:../src/flash_api.c **** }   // FLASH_ReadByte */
 117:../src/flash_api.c **** 
 118:../src/flash_api.c **** /*! \brief Wait for any NVM access to finish, including FLASH. 
 119:../src/flash_api.c ****  * 
 120:../src/flash_api.c ****  *  This function is blocking and waits for any NVM access to finish, 
 121:../src/flash_api.c ****  *  including FLASH. Use this function before any FLSH accesses, 
 122:../src/flash_api.c ****  *  if you are not certain that any previous operations are finished yet, 
 123:../src/flash_api.c ****  *  like an FLASH write. 
 124:../src/flash_api.c ****  */ 
 125:../src/flash_api.c **** void FLASH_WaitForNVM(void) 
 126:../src/flash_api.c **** { 
 127:../src/flash_api.c ****     do { 
 128:../src/flash_api.c ****         /* Block execution while waiting for the NVM to be ready. */ 
 129:../src/flash_api.c ****     } while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm); 
  50               		.loc 1 129 0
  51 0022 8091 CF01 		lds r24,463
  52 0026 87FD      		sbrc r24,7
  53 0028 00C0      		rjmp .L2
  54               	/* epilogue start */
  55               	.LBE13:
  56               	.LBE12:
  15:../src/flash_api.c **** 
  57               		.loc 1 15 0
  58 002a 0895      		ret
  59               		.cfi_endproc
  60               	.LFE28:
  62               		.section	.text.FLASH_LoadFlashPageBuffer,"ax",@progbits
  63               	.global	FLASH_LoadFlashPageBuffer
  65               	FLASH_LoadFlashPageBuffer:
  66               	.LFB29:
  31:../src/flash_api.c ****     uint16_t i; 
  67               		.loc 1 31 0
  68               		.cfi_startproc
  69               	.LVL0:
  70 0000 FF92      		push r15
  71               	.LCFI0:
  72               		.cfi_def_cfa_offset 4
  73               		.cfi_offset 15, -3
  74 0002 0F93      		push r16
  75               	.LCFI1:
  76               		.cfi_def_cfa_offset 5
  77               		.cfi_offset 16, -4
  78 0004 1F93      		push r17
  79               	.LCFI2:
  80               		.cfi_def_cfa_offset 6
  81               		.cfi_offset 17, -5
  82 0006 CF93      		push r28
  83               	.LCFI3:
  84               		.cfi_def_cfa_offset 7
  85               		.cfi_offset 28, -6
  86 0008 DF93      		push r29
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 8
  89               		.cfi_offset 29, -7
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 5 */
  93               	.L__stack_usage = 5
  94 000a 8C01      		movw r16,r24
  95               	.LVL1:
  96               	.L6:
  97               	.LBB14:
  98               	.LBB15:
  99               		.loc 1 129 0
 100 000c 8091 CF01 		lds r24,463
 101 0010 87FD      		sbrc r24,7
 102 0012 00C0      		rjmp .L6
 103               	.LBE15:
 104               	.LBE14:
  37:../src/flash_api.c **** 
 105               		.loc 1 37 0
 106 0014 83E2      		ldi r24,lo8(35)
 107 0016 8093 CA01 		sts 458,r24
 108               	.LVL2:
  42:../src/flash_api.c ****     { 
 109               		.loc 1 42 0
 110 001a C0E0      		ldi r28,0
 111 001c D0E0      		ldi r29,0
  46:../src/flash_api.c ****         asm("spm"); 
 112               		.loc 1 46 0
 113 001e 8DE9      		ldi r24,lo8(-99)
 114 0020 F82E      		mov r15,r24
 115               	.LVL3:
 116               	.L7:
  44:../src/flash_api.c ****         LoadZ(i); 
 117               		.loc 1 44 0 discriminator 3
 118 0022 F801      		movw r30,r16
 119 0024 8191      		ld r24,Z+
 120 0026 9191      		ld r25,Z+
 121 0028 8F01      		movw r16,r30
 122               	.LVL4:
 123 002a 0E94 0000 		call LoadR0
 124               	.LVL5:
  45:../src/flash_api.c ****         CPU_CCP = CCP_SPM_gc; 
 125               		.loc 1 45 0 discriminator 3
 126 002e CE01      		movw r24,r28
 127 0030 0E94 0000 		call LoadZ
 128               	.LVL6:
  46:../src/flash_api.c ****         asm("spm"); 
 129               		.loc 1 46 0 discriminator 3
 130 0034 F4BE      		out __CCP__,r15
  47:../src/flash_api.c ****         int_ptr++; 
 131               		.loc 1 47 0 discriminator 3
 132               	/* #APP */
 133               	 ;  47 "../src/flash_api.c" 1
 134 0036 E895      		spm
 135               	 ;  0 "" 2
 136               	.LVL7:
  42:../src/flash_api.c ****     { 
 137               		.loc 1 42 0 discriminator 3
 138               	/* #NOAPP */
 139 0038 2296      		adiw r28,2
 140               	.LVL8:
 141 003a C115      		cp r28,__zero_reg__
 142 003c F2E0      		ldi r31,2
 143 003e DF07      		cpc r29,r31
 144 0040 01F4      		brne .L7
 145               	/* epilogue start */
  50:../src/flash_api.c **** 
 146               		.loc 1 50 0
 147 0042 DF91      		pop r29
 148 0044 CF91      		pop r28
 149               	.LVL9:
 150 0046 1F91      		pop r17
 151 0048 0F91      		pop r16
 152               	.LVL10:
 153 004a FF90      		pop r15
 154 004c 0895      		ret
 155               		.cfi_endproc
 156               	.LFE29:
 158               		.section	.text.FLASH_EraseApplicationSections,"ax",@progbits
 159               	.global	FLASH_EraseApplicationSections
 161               	FLASH_EraseApplicationSections:
 162               	.LFB30:
  60:../src/flash_api.c ****     NVM.CMD = NVM_CMD_ERASE_APP_gc; 
 163               		.loc 1 60 0
 164               		.cfi_startproc
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
  61:../src/flash_api.c ****     CPU_CCP = CCP_SPM_gc; 
 169               		.loc 1 61 0
 170 0000 80E2      		ldi r24,lo8(32)
 171 0002 8093 CA01 		sts 458,r24
  62:../src/flash_api.c ****     // Self-program. 
 172               		.loc 1 62 0
 173 0006 8DE9      		ldi r24,lo8(-99)
 174 0008 84BF      		out __CCP__,r24
  64:../src/flash_api.c **** 
 175               		.loc 1 64 0
 176               	/* #APP */
 177               	 ;  64 "../src/flash_api.c" 1
 178 000a E895      		spm
 179               	 ;  0 "" 2
 180               	/* #NOAPP */
 181               	.L11:
 182               	.LBB16:
 183               	.LBB17:
 184               		.loc 1 129 0
 185 000c 8091 CF01 		lds r24,463
 186 0010 87FD      		sbrc r24,7
 187 0012 00C0      		rjmp .L11
 188               	/* epilogue start */
 189               	.LBE17:
 190               	.LBE16:
  68:../src/flash_api.c **** 
 191               		.loc 1 68 0
 192 0014 0895      		ret
 193               		.cfi_endproc
 194               	.LFE30:
 196               		.section	.text.FLASH_EraseWriteApplicationPage,"ax",@progbits
 197               	.global	FLASH_EraseWriteApplicationPage
 199               	FLASH_EraseWriteApplicationPage:
 200               	.LFB31:
  80:../src/flash_api.c ****     // addresses the page 
 201               		.loc 1 80 0
 202               		.cfi_startproc
 203               	.LVL11:
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 208 0000 9C01      		movw r18,r24
  82:../src/flash_api.c ****     LoadZ((uint32_t)page_number << FLASH_FWORD_SIZE); 
 209               		.loc 1 82 0
 210 0002 880F      		lsl r24
 211 0004 892F      		mov r24,r25
 212 0006 881F      		rol r24
 213 0008 990B      		sbc r25,r25
 214 000a 9195      		neg r25
 215               	.LVL12:
 216 000c 8BBF      		out __RAMPZ__,r24
  83:../src/flash_api.c **** 
 217               		.loc 1 83 0
 218 000e 80E0      		ldi r24,0
 219 0010 922F      		mov r25,r18
 220 0012 990F      		lsl r25
 221 0014 0E94 0000 		call LoadZ
 222               	.LVL13:
  87:../src/flash_api.c ****     CPU_CCP = CCP_SPM_gc; 
 223               		.loc 1 87 0
 224 0018 85E2      		ldi r24,lo8(37)
 225 001a 8093 CA01 		sts 458,r24
  88:../src/flash_api.c ****     // Self-program. 
 226               		.loc 1 88 0
 227 001e 8DE9      		ldi r24,lo8(-99)
 228 0020 84BF      		out __CCP__,r24
  90:../src/flash_api.c **** 
 229               		.loc 1 90 0
 230               	/* #APP */
 231               	 ;  90 "../src/flash_api.c" 1
 232 0022 E895      		spm
 233               	 ;  0 "" 2
 234               	/* #NOAPP */
 235               	.L14:
 236               	.LBB18:
 237               	.LBB19:
 238               		.loc 1 129 0
 239 0024 8091 CF01 		lds r24,463
 240 0028 87FD      		sbrc r24,7
 241 002a 00C0      		rjmp .L14
 242               	/* epilogue start */
 243               	.LBE19:
 244               	.LBE18:
  94:../src/flash_api.c **** 
 245               		.loc 1 94 0
 246 002c 0895      		ret
 247               		.cfi_endproc
 248               	.LFE31:
 250               		.section	.text.FLASH_WaitForNVM,"ax",@progbits
 251               	.global	FLASH_WaitForNVM
 253               	FLASH_WaitForNVM:
 254               	.LFB32:
 126:../src/flash_api.c ****     do { 
 255               		.loc 1 126 0
 256               		.cfi_startproc
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 0 */
 260               	.L__stack_usage = 0
 261               	.L17:
 262               		.loc 1 129 0 discriminator 1
 263 0000 8091 CF01 		lds r24,463
 264 0004 87FD      		sbrc r24,7
 265 0006 00C0      		rjmp .L17
 266               	/* epilogue start */
 130:../src/flash_api.c **** }   // FLASH_WaitForNVM 
 267               		.loc 1 130 0
 268 0008 0895      		ret
 269               		.cfi_endproc
 270               	.LFE32:
 272               		.section	.text.load_flash_page_buffer,"ax",@progbits
 273               	.global	load_flash_page_buffer
 275               	load_flash_page_buffer:
 276               	.LFB33:
 131:../src/flash_api.c **** 
 132:../src/flash_api.c **** 
 133:../src/flash_api.c **** /*! \brief Read entire Flash page into SRAM buffer. 
 134:../src/flash_api.c ****  * 
 135:../src/flash_api.c ****  *  This function reads an entire flash page and puts it to SRAM. 
 136:../src/flash_api.c ****  * 
 137:../src/flash_api.c ****  *  \param data        Pointer to where to store the data. 
 138:../src/flash_api.c ****  *  \param page_number Flash page number. 
 139:../src/flash_api.c ****  */ 
 140:../src/flash_api.c **** /*void FLASH_ReadFlashPage(uint8_t *ram_buffer, uint32_t page_number) 
 141:../src/flash_api.c **** { 
 142:../src/flash_api.c ****     uint16_t idx; 
 143:../src/flash_api.c ****     uint32_t base_address; 
 144:../src/flash_api.c **** 
 145:../src/flash_api.c ****     NVM.CMD = NVM_CMD_NO_OPERATION_gc; 
 146:../src/flash_api.c **** 
 147:../src/flash_api.c ****     CPU_RAMPZ = (uint8_t)(page_number >> (16 - FLASH_FWORD_SIZE)); 
 148:../src/flash_api.c **** 
 149:../src/flash_api.c ****     base_address = page_number << FLASH_FWORD_SIZE; 
 150:../src/flash_api.c **** 
 151:../src/flash_api.c ****     for (idx = 0; idx < (FLASH_PAGE_SIZE * 2); idx++) 
 152:../src/flash_api.c ****     { 
 153:../src/flash_api.c ****         LoadZ((uint32_t)(base_address + idx)); 
 154:../src/flash_api.c ****         *ram_buffer = ReadELPM(); 
 155:../src/flash_api.c ****         ram_buffer++; 
 156:../src/flash_api.c ****     } 
 157:../src/flash_api.c **** }   // FLASH_ReadFlashPage */
 158:../src/flash_api.c **** 
 159:../src/flash_api.c **** 
 160:../src/flash_api.c **** /************************************************End of New Code***********************************
 161:../src/flash_api.c **** 
 162:../src/flash_api.c **** 
 163:../src/flash_api.c **** void load_flash_page_buffer(uint8_t *data)
 164:../src/flash_api.c **** {
 277               		.loc 1 164 0
 278               		.cfi_startproc
 279               	.LVL14:
 280 0000 0F93      		push r16
 281               	.LCFI5:
 282               		.cfi_def_cfa_offset 4
 283               		.cfi_offset 16, -3
 284 0002 1F93      		push r17
 285               	.LCFI6:
 286               		.cfi_def_cfa_offset 5
 287               		.cfi_offset 17, -4
 288 0004 CF93      		push r28
 289               	.LCFI7:
 290               		.cfi_def_cfa_offset 6
 291               		.cfi_offset 28, -5
 292 0006 DF93      		push r29
 293               	.LCFI8:
 294               		.cfi_def_cfa_offset 7
 295               		.cfi_offset 29, -6
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 4 */
 299               	.L__stack_usage = 4
 300 0008 8C01      		movw r16,r24
 301               	.LVL15:
 165:../src/flash_api.c ****     uint16_t *int_ptr = (uint16_t *)data;
 166:../src/flash_api.c ****     SP_WaitForSPM(); // Wait until NVM is not busy 
 302               		.loc 1 166 0
 303 000a 0E94 0000 		call SP_WaitForSPM
 304               	.LVL16:
 305               	.LBB20:
 167:../src/flash_api.c ****     // Load multiple bytes into page buffer 
 168:../src/flash_api.c ****     for(uint16_t i=0; i<512; i+=2) 
 306               		.loc 1 168 0
 307 000e C0E0      		ldi r28,0
 308 0010 D0E0      		ldi r29,0
 309               	.LVL17:
 310               	.L20:
 169:../src/flash_api.c ****     { 
 170:../src/flash_api.c **** 		SP_LoadFlashWord(i, int_ptr[i/2]);
 311               		.loc 1 170 0 discriminator 3
 312 0012 FE01      		movw r30,r28
 313 0014 EE7F      		andi r30,254
 314 0016 E00F      		add r30,r16
 315 0018 F11F      		adc r31,r17
 316 001a 6081      		ld r22,Z
 317 001c 7181      		ldd r23,Z+1
 318 001e CE01      		movw r24,r28
 319 0020 0E94 0000 		call SP_LoadFlashWord
 320               	.LVL18:
 171:../src/flash_api.c **** 		NVM.CMD = NVM_CMD_NO_OPERATION_gc;
 321               		.loc 1 171 0 discriminator 3
 322 0024 1092 CA01 		sts 458,__zero_reg__
 168:../src/flash_api.c ****     { 
 323               		.loc 1 168 0 discriminator 3
 324 0028 2296      		adiw r28,2
 325               	.LVL19:
 326 002a C115      		cp r28,__zero_reg__
 327 002c 82E0      		ldi r24,2
 328 002e D807      		cpc r29,r24
 329 0030 01F4      		brne .L20
 330               	/* epilogue start */
 331               	.LBE20:
 172:../src/flash_api.c ****     } 
 173:../src/flash_api.c **** 
 174:../src/flash_api.c **** }
 332               		.loc 1 174 0
 333 0032 DF91      		pop r29
 334 0034 CF91      		pop r28
 335               	.LVL20:
 336 0036 1F91      		pop r17
 337 0038 0F91      		pop r16
 338               	.LVL21:
 339 003a 0895      		ret
 340               		.cfi_endproc
 341               	.LFE33:
 343               		.section	.text.write_user_signature_row,"ax",@progbits
 344               	.global	write_user_signature_row
 346               	write_user_signature_row:
 347               	.LFB34:
 175:../src/flash_api.c **** 
 176:../src/flash_api.c **** uint8_t write_user_signature_row(uint8_t *data)
 177:../src/flash_api.c **** {
 348               		.loc 1 177 0
 349               		.cfi_startproc
 350               	.LVL22:
 351 0000 CF93      		push r28
 352               	.LCFI9:
 353               		.cfi_def_cfa_offset 4
 354               		.cfi_offset 28, -3
 355 0002 DF93      		push r29
 356               	.LCFI10:
 357               		.cfi_def_cfa_offset 5
 358               		.cfi_offset 29, -4
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 2 */
 362               	.L__stack_usage = 2
 363               	.LVL23:
 364               	.LBB21:
 365               	.LBB22:
 178:../src/flash_api.c **** 	//uint8_t saved_status = SREG;
 179:../src/flash_api.c **** 	load_flash_page(data);
 180:../src/flash_api.c **** 	SP_EraseUserSignatureRow();
 181:../src/flash_api.c **** 	SP_WriteUserSignatureRow();
 182:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 183:../src/flash_api.c **** 	
 184:../src/flash_api.c **** 	//SREG = saved_status;
 185:../src/flash_api.c **** 	return XB_SUCCESS;
 186:../src/flash_api.c **** }
 187:../src/flash_api.c **** 
 188:../src/flash_api.c **** uint8_t read_user_signature_byte(uint16_t index)
 189:../src/flash_api.c **** {
 190:../src/flash_api.c **** 	cli();
 191:../src/flash_api.c **** 	uint8_t val = SP_ReadUserSignatureByte(index);
 192:../src/flash_api.c **** 	SP_WaitForSPM();
 193:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 194:../src/flash_api.c **** 	return val;
 195:../src/flash_api.c **** }
 196:../src/flash_api.c **** 
 197:../src/flash_api.c **** void load_flash_page(const uint8_t * data)
 198:../src/flash_api.c **** {
 199:../src/flash_api.c **** 	cli(); //prevents interrupts
 366               		.loc 1 199 0
 367               	/* #APP */
 368               	 ;  199 "../src/flash_api.c" 1
 369 0004 F894      		cli
 370               	 ;  0 "" 2
 200:../src/flash_api.c **** 	SP_LoadFlashPage(data);
 371               		.loc 1 200 0
 372               	/* #NOAPP */
 373 0006 0E94 0000 		call SP_LoadFlashPage
 374               	.LVL24:
 201:../src/flash_api.c **** 	SP_WaitForSPM();
 375               		.loc 1 201 0
 376 000a 0E94 0000 		call SP_WaitForSPM
 377               	.LVL25:
 202:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 378               		.loc 1 202 0
 379 000e CAEC      		ldi r28,lo8(-54)
 380 0010 D1E0      		ldi r29,lo8(1)
 381 0012 1882      		st Y,__zero_reg__
 382               	.LVL26:
 383               	.LBE22:
 384               	.LBE21:
 180:../src/flash_api.c **** 	SP_WriteUserSignatureRow();
 385               		.loc 1 180 0
 386 0014 0E94 0000 		call SP_EraseUserSignatureRow
 387               	.LVL27:
 181:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 388               		.loc 1 181 0
 389 0018 0E94 0000 		call SP_WriteUserSignatureRow
 390               	.LVL28:
 182:../src/flash_api.c **** 	
 391               		.loc 1 182 0
 392 001c 1882      		st Y,__zero_reg__
 186:../src/flash_api.c **** 
 393               		.loc 1 186 0
 394 001e 80E0      		ldi r24,0
 395               	/* epilogue start */
 396 0020 DF91      		pop r29
 397 0022 CF91      		pop r28
 398 0024 0895      		ret
 399               		.cfi_endproc
 400               	.LFE34:
 402               		.section	.text.read_user_signature_byte,"ax",@progbits
 403               	.global	read_user_signature_byte
 405               	read_user_signature_byte:
 406               	.LFB35:
 189:../src/flash_api.c **** 	cli();
 407               		.loc 1 189 0
 408               		.cfi_startproc
 409               	.LVL29:
 410 0000 CF93      		push r28
 411               	.LCFI11:
 412               		.cfi_def_cfa_offset 4
 413               		.cfi_offset 28, -3
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 1 */
 417               	.L__stack_usage = 1
 190:../src/flash_api.c **** 	uint8_t val = SP_ReadUserSignatureByte(index);
 418               		.loc 1 190 0
 419               	/* #APP */
 420               	 ;  190 "../src/flash_api.c" 1
 421 0002 F894      		cli
 422               	 ;  0 "" 2
 191:../src/flash_api.c **** 	SP_WaitForSPM();
 423               		.loc 1 191 0
 424               	/* #NOAPP */
 425 0004 0E94 0000 		call SP_ReadUserSignatureByte
 426               	.LVL30:
 427 0008 C82F      		mov r28,r24
 428               	.LVL31:
 192:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 429               		.loc 1 192 0
 430 000a 0E94 0000 		call SP_WaitForSPM
 431               	.LVL32:
 193:../src/flash_api.c **** 	return val;
 432               		.loc 1 193 0
 433 000e 1092 CA01 		sts 458,__zero_reg__
 195:../src/flash_api.c **** 
 434               		.loc 1 195 0
 435 0012 8C2F      		mov r24,r28
 436               	/* epilogue start */
 437 0014 CF91      		pop r28
 438               	.LVL33:
 439 0016 0895      		ret
 440               		.cfi_endproc
 441               	.LFE35:
 443               		.section	.text.load_flash_page,"ax",@progbits
 444               	.global	load_flash_page
 446               	load_flash_page:
 447               	.LFB36:
 198:../src/flash_api.c **** 	cli(); //prevents interrupts
 448               		.loc 1 198 0
 449               		.cfi_startproc
 450               	.LVL34:
 451               	/* prologue: function */
 452               	/* frame size = 0 */
 453               	/* stack size = 0 */
 454               	.L__stack_usage = 0
 199:../src/flash_api.c **** 	SP_LoadFlashPage(data);
 455               		.loc 1 199 0
 456               	/* #APP */
 457               	 ;  199 "../src/flash_api.c" 1
 458 0000 F894      		cli
 459               	 ;  0 "" 2
 200:../src/flash_api.c **** 	SP_WaitForSPM();
 460               		.loc 1 200 0
 461               	/* #NOAPP */
 462 0002 0E94 0000 		call SP_LoadFlashPage
 463               	.LVL35:
 201:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 464               		.loc 1 201 0
 465 0006 0E94 0000 		call SP_WaitForSPM
 466               	.LVL36:
 467               		.loc 1 202 0
 468 000a 1092 CA01 		sts 458,__zero_reg__
 469 000e 0895      		ret
 470               		.cfi_endproc
 471               	.LFE36:
 473               		.section	.text.erase_application_page,"ax",@progbits
 474               	.global	erase_application_page
 476               	erase_application_page:
 477               	.LFB37:
 203:../src/flash_api.c **** }
 204:../src/flash_api.c **** 
 205:../src/flash_api.c **** void erase_application_page(uint32_t address)
 206:../src/flash_api.c **** {
 478               		.loc 1 206 0
 479               		.cfi_startproc
 480               	.LVL37:
 481               	/* prologue: function */
 482               	/* frame size = 0 */
 483               	/* stack size = 0 */
 484               	.L__stack_usage = 0
 207:../src/flash_api.c **** 	SP_EraseApplicationPage(address);
 485               		.loc 1 207 0
 486 0000 0E94 0000 		call SP_EraseApplicationPage
 487               	.LVL38:
 208:../src/flash_api.c **** 	SP_WaitForSPM();
 488               		.loc 1 208 0
 489 0004 0E94 0000 		call SP_WaitForSPM
 490               	.LVL39:
 209:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 491               		.loc 1 209 0
 492 0008 1092 CA01 		sts 458,__zero_reg__
 493 000c 0895      		ret
 494               		.cfi_endproc
 495               	.LFE37:
 497               		.section	.text.erase_write_application_page,"ax",@progbits
 498               	.global	erase_write_application_page
 500               	erase_write_application_page:
 501               	.LFB38:
 210:../src/flash_api.c **** }
 211:../src/flash_api.c **** 
 212:../src/flash_api.c **** void erase_write_application_page(uint32_t address)
 213:../src/flash_api.c **** {
 502               		.loc 1 213 0
 503               		.cfi_startproc
 504               	.LVL40:
 505               	/* prologue: function */
 506               	/* frame size = 0 */
 507               	/* stack size = 0 */
 508               	.L__stack_usage = 0
 214:../src/flash_api.c **** 	SP_EraseWriteApplicationPage(address);
 509               		.loc 1 214 0
 510 0000 0E94 0000 		call SP_EraseWriteApplicationPage
 511               	.LVL41:
 215:../src/flash_api.c **** 	SP_WaitForSPM();
 512               		.loc 1 215 0
 513 0004 0E94 0000 		call SP_WaitForSPM
 514               	.LVL42:
 216:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;	
 515               		.loc 1 216 0
 516 0008 1092 CA01 		sts 458,__zero_reg__
 517 000c 0895      		ret
 518               		.cfi_endproc
 519               	.LFE38:
 521               		.section	.text.erase_flash_buffer,"ax",@progbits
 522               	.global	erase_flash_buffer
 524               	erase_flash_buffer:
 525               	.LFB39:
 217:../src/flash_api.c **** }
 218:../src/flash_api.c **** 
 219:../src/flash_api.c **** void erase_flash_buffer()
 220:../src/flash_api.c **** {
 526               		.loc 1 220 0
 527               		.cfi_startproc
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 221:../src/flash_api.c **** 	SP_EraseFlashBuffer();
 532               		.loc 1 221 0
 533 0000 0E94 0000 		call SP_EraseFlashBuffer
 534               	.LVL43:
 222:../src/flash_api.c **** 	SP_WaitForSPM();
 535               		.loc 1 222 0
 536 0004 0E94 0000 		call SP_WaitForSPM
 537               	.LVL44:
 223:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;	
 538               		.loc 1 223 0
 539 0008 1092 CA01 		sts 458,__zero_reg__
 540 000c 0895      		ret
 541               		.cfi_endproc
 542               	.LFE39:
 544               		.section	.text.read_flash_page,"ax",@progbits
 545               	.global	read_flash_page
 547               	read_flash_page:
 548               	.LFB40:
 224:../src/flash_api.c **** }
 225:../src/flash_api.c **** 
 226:../src/flash_api.c **** void read_flash_page(const uint8_t * data, uint32_t address)
 227:../src/flash_api.c **** {
 549               		.loc 1 227 0
 550               		.cfi_startproc
 551               	.LVL45:
 552               	/* prologue: function */
 553               	/* frame size = 0 */
 554               	/* stack size = 0 */
 555               	.L__stack_usage = 0
 228:../src/flash_api.c **** 	SP_ReadFlashPage(data, address);
 556               		.loc 1 228 0
 557 0000 0E94 0000 		call SP_ReadFlashPage
 558               	.LVL46:
 229:../src/flash_api.c **** 	SP_WaitForSPM();
 559               		.loc 1 229 0
 560 0004 0E94 0000 		call SP_WaitForSPM
 561               	.LVL47:
 230:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 562               		.loc 1 230 0
 563 0008 1092 CA01 		sts 458,__zero_reg__
 564 000c 0895      		ret
 565               		.cfi_endproc
 566               	.LFE40:
 568               		.section	.text.FLASH_ReadByte,"ax",@progbits
 569               	.global	FLASH_ReadByte
 571               	FLASH_ReadByte:
 572               	.LFB41:
 231:../src/flash_api.c **** }
 232:../src/flash_api.c **** 
 233:../src/flash_api.c **** uint8_t FLASH_ReadByte(uint32_t flash_address)
 234:../src/flash_api.c **** {
 573               		.loc 1 234 0
 574               		.cfi_startproc
 575               	.LVL48:
 576 0000 CF93      		push r28
 577               	.LCFI12:
 578               		.cfi_def_cfa_offset 4
 579               		.cfi_offset 28, -3
 580               	/* prologue: function */
 581               	/* frame size = 0 */
 582               	/* stack size = 1 */
 583               	.L__stack_usage = 1
 235:../src/flash_api.c **** 	uint8_t val = SP_ReadByte(flash_address);
 584               		.loc 1 235 0
 585 0002 0E94 0000 		call SP_ReadByte
 586               	.LVL49:
 587 0006 C82F      		mov r28,r24
 588               	.LVL50:
 236:../src/flash_api.c **** 	SP_WaitForSPM();
 589               		.loc 1 236 0
 590 0008 0E94 0000 		call SP_WaitForSPM
 591               	.LVL51:
 237:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 592               		.loc 1 237 0
 593 000c 1092 CA01 		sts 458,__zero_reg__
 238:../src/flash_api.c **** 	return val;
 239:../src/flash_api.c **** }
 594               		.loc 1 239 0
 595 0010 8C2F      		mov r24,r28
 596               	/* epilogue start */
 597 0012 CF91      		pop r28
 598               	.LVL52:
 599 0014 0895      		ret
 600               		.cfi_endproc
 601               	.LFE41:
 603               		.section	.text.FLASH_ReadFlashPage,"ax",@progbits
 604               	.global	FLASH_ReadFlashPage
 606               	FLASH_ReadFlashPage:
 607               	.LFB42:
 240:../src/flash_api.c **** 
 241:../src/flash_api.c **** void FLASH_ReadFlashPage(uint8_t *ram_buffer, uint32_t page_number)
 242:../src/flash_api.c **** {
 608               		.loc 1 242 0
 609               		.cfi_startproc
 610               	.LVL53:
 611               	/* prologue: function */
 612               	/* frame size = 0 */
 613               	/* stack size = 0 */
 614               	.L__stack_usage = 0
 243:../src/flash_api.c **** 	uint32_t base_address = page_number << FLASH_FWORD_SIZE;
 244:../src/flash_api.c **** 	//printf("\n\rbase_address=%lx",base_address);
 245:../src/flash_api.c **** 	SP_ReadFlashPage(ram_buffer,base_address);
 615               		.loc 1 245 0
 616 0000 29E0      		ldi r18,9
 617               		1:
 618 0002 440F      		lsl r20
 619 0004 551F      		rol r21
 620 0006 661F      		rol r22
 621 0008 771F      		rol r23
 622 000a 2A95      		dec r18
 623 000c 01F4      		brne 1b
 624               	.LVL54:
 625 000e 0E94 0000 		call SP_ReadFlashPage
 626               	.LVL55:
 246:../src/flash_api.c **** 	SP_WaitForSPM();
 627               		.loc 1 246 0
 628 0012 0E94 0000 		call SP_WaitForSPM
 629               	.LVL56:
 247:../src/flash_api.c **** 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 630               		.loc 1 247 0
 631 0016 1092 CA01 		sts 458,__zero_reg__
 632 001a 0895      		ret
 633               		.cfi_endproc
 634               	.LFE42:
 636               		.comm	rtc_epoch,2,1
 637               		.comm	droplet_ID,2,1
 638               		.text
 639               	.Letext0:
 640               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 641               		.file 3 "C:/Program Files (x86)/Atmel/Studio/7.0/Packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 642               		.file 4 "../include/droplet_base.h"
 643               		.file 5 "../include/flash_api.h"
 644               		.file 6 "../include/sp_driver.h"
DEFINED SYMBOLS
                            *ABS*:00000000 flash_api.c
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:2      *ABS*:0000003e __SP_H__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:3      *ABS*:0000003d __SP_L__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:4      *ABS*:0000003f __SREG__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:6      *ABS*:00000034 __CCP__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:8      *ABS*:00000001 __zero_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:15     .text.FLASH_FlushFlasPageBuffer:00000000 FLASH_FlushFlasPageBuffer
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:65     .text.FLASH_LoadFlashPageBuffer:00000000 FLASH_LoadFlashPageBuffer
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:161    .text.FLASH_EraseApplicationSections:00000000 FLASH_EraseApplicationSections
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:199    .text.FLASH_EraseWriteApplicationPage:00000000 FLASH_EraseWriteApplicationPage
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:253    .text.FLASH_WaitForNVM:00000000 FLASH_WaitForNVM
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:275    .text.load_flash_page_buffer:00000000 load_flash_page_buffer
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:346    .text.write_user_signature_row:00000000 write_user_signature_row
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:405    .text.read_user_signature_byte:00000000 read_user_signature_byte
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:446    .text.load_flash_page:00000000 load_flash_page
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:476    .text.erase_application_page:00000000 erase_application_page
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:500    .text.erase_write_application_page:00000000 erase_write_application_page
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:524    .text.erase_flash_buffer:00000000 erase_flash_buffer
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:547    .text.read_flash_page:00000000 read_flash_page
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:571    .text.FLASH_ReadByte:00000000 FLASH_ReadByte
C:\Users\JOHNK~1\AppData\Local\Temp\ccIJ94Up.s:606    .text.FLASH_ReadFlashPage:00000000 FLASH_ReadFlashPage
                            *COM*:00000002 rtc_epoch
                            *COM*:00000002 droplet_ID

UNDEFINED SYMBOLS
LoadR0
LoadZ
SP_WaitForSPM
SP_LoadFlashWord
SP_LoadFlashPage
SP_EraseUserSignatureRow
SP_WriteUserSignatureRow
SP_ReadUserSignatureByte
SP_EraseApplicationPage
SP_EraseWriteApplicationPage
SP_EraseFlashBuffer
SP_ReadFlashPage
SP_ReadByte
__do_clear_bss
