   1               		.file	"ir_comm.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.section	.text.ir_transmit_complete,"ax",@progbits
  14               	ir_transmit_complete:
  15               	.LFB81:
  16               		.file 1 "../src/ir_comm.c"
   1:../src/ir_comm.c **** #include "ir_comm.h"
   2:../src/ir_comm.c **** #include "rgb_led.h"
   3:../src/ir_comm.c **** 
   4:../src/ir_comm.c **** static volatile uint8_t processing_cmd;
   5:../src/ir_comm.c **** static volatile uint8_t processing_ffsync;
   6:../src/ir_comm.c **** 
   7:../src/ir_comm.c **** static void clear_ir_buffer(uint8_t dir);
   8:../src/ir_comm.c **** static void perform_ir_upkeep(void);
   9:../src/ir_comm.c **** static void ir_receive(uint8_t dir); //Called by Interrupt Handler Only
  10:../src/ir_comm.c **** static void received_ir_cmd(uint8_t dir);
  11:../src/ir_comm.c **** static void received_rnb_r(uint8_t delay, id_t senderID, uint32_t last_byte);
  12:../src/ir_comm.c **** static void received_ir_sync(uint8_t delay, id_t senderID);
  13:../src/ir_comm.c **** static void ir_transmit(uint8_t dir);
  14:../src/ir_comm.c **** //static void ir_remote_send(uint8_t dir, uint16_t data);
  15:../src/ir_comm.c **** static void ir_transmit_complete(uint8_t dir);
  16:../src/ir_comm.c **** 
  17:../src/ir_comm.c **** static volatile uint16_t	cmd_length;
  18:../src/ir_comm.c **** static volatile char		cmd_buffer[SRL_BUFFER_SIZE];
  19:../src/ir_comm.c **** /* Hardware addresses for the port pins with the carrier wave */
  20:../src/ir_comm.c **** static uint8_t ir_carrier_bm[] = { PIN0_bm, PIN1_bm, PIN4_bm, PIN5_bm, PIN6_bm, PIN7_bm };
  21:../src/ir_comm.c **** 
  22:../src/ir_comm.c **** //#define HARDCORE_DEBUG_DIR 1
  23:../src/ir_comm.c **** 
  24:../src/ir_comm.c **** static void clear_ir_buffer(uint8_t dir){
  25:../src/ir_comm.c **** 	#ifdef AUDIO_DROPLET
  26:../src/ir_comm.c **** 		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
  27:../src/ir_comm.c **** 	#endif
  28:../src/ir_comm.c **** 	#ifdef HARDCORE_DEBUG_DIR
  29:../src/ir_comm.c **** 		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
  30:../src/ir_comm.c **** 	#endif
  31:../src/ir_comm.c **** 	ir_rxtx[dir].data_crc		= 0;
  32:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
  33:../src/ir_comm.c **** 	
  34:../src/ir_comm.c **** 	ir_rxtx[dir].target_ID		= 0;	
  35:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
  36:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
  37:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
  38:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
  39:../src/ir_comm.c **** 	
  40:../src/ir_comm.c **** 	ir_rxtx[dir].status			= 0;	
  41:../src/ir_comm.c **** 	
  42:../src/ir_comm.c **** 	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
  43:../src/ir_comm.c **** 
  44:../src/ir_comm.c **** }
  45:../src/ir_comm.c **** 
  46:../src/ir_comm.c **** void ir_comm_init(){
  47:../src/ir_comm.c **** 	/* Initialize UARTs */
  48:../src/ir_comm.c **** 	// RX pins as inputs:
  49:../src/ir_comm.c **** 	PORTC.DIRCLR = PIN2_bm | PIN6_bm;		// DIR 0,1							
  50:../src/ir_comm.c **** 	PORTD.DIRCLR = PIN2_bm;					// DIR 2
  51:../src/ir_comm.c **** 	PORTE.DIRCLR = PIN2_bm | PIN6_bm;		// DIR 3,4
  52:../src/ir_comm.c **** 	PORTF.DIRCLR = PIN2_bm;					// DIR 5
  53:../src/ir_comm.c **** 
  54:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  55:../src/ir_comm.c **** 		hp_ir_block_bm=0xFF;
  56:../src/ir_comm.c **** 	}
  57:../src/ir_comm.c **** 
  58:../src/ir_comm.c **** 	for (uint8_t i = 0; i < 6; i++){
  59:../src/ir_comm.c **** 		channel[i]->CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_MED_gc;		// Set USART as m
  60:../src/ir_comm.c **** 		channel[i]->CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;		// 8 bits, no pari
  61:../src/ir_comm.c **** 		
  62:../src/ir_comm.c **** 		channel[i]->BAUDCTRLA = 0b01110000; channel[i]->BAUDCTRLB = 0b00000010;	//3200 baud - we have an 
  63:../src/ir_comm.c **** 		//channel[i]->BAUDCTRLA = 0b11000000; channel[i]->BAUDCTRLB = 0b00000100; //9600 baud - this woul
  64:../src/ir_comm.c **** 		
  65:../src/ir_comm.c **** 		channel[i]->CTRLB |= USART_RXEN_bm;		// Enable communication
  66:../src/ir_comm.c **** 		channel[i]->CTRLB |= USART_TXEN_bm;
  67:../src/ir_comm.c **** 	}
  68:../src/ir_comm.c **** 	#ifdef AUDIO_DROPLET
  69:../src/ir_comm.c **** 		PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
  70:../src/ir_comm.c **** 		PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
  71:../src/ir_comm.c **** 		PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
  72:../src/ir_comm.c **** 		PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
  73:../src/ir_comm.c **** 		PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
  74:../src/ir_comm.c **** 		PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
  75:../src/ir_comm.c **** 		EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN2_gc;
  76:../src/ir_comm.c **** 		EVSYS.CH2MUX = EVSYS_CHMUX_PORTC_PIN6_gc;
  77:../src/ir_comm.c **** 		EVSYS.CH3MUX = EVSYS_CHMUX_PORTD_PIN2_gc;
  78:../src/ir_comm.c **** 		EVSYS.CH5MUX = EVSYS_CHMUX_PORTE_PIN2_gc;
  79:../src/ir_comm.c **** 		EVSYS.CH6MUX = EVSYS_CHMUX_PORTE_PIN6_gc;
  80:../src/ir_comm.c **** 		EVSYS.CH7MUX = EVSYS_CHMUX_PORTF_PIN2_gc;
  81:../src/ir_comm.c **** 	#endif	
  82:../src/ir_comm.c **** 
  83:../src/ir_comm.c **** 	curr_ir_power=0;	
  84:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++) clear_ir_buffer(dir); //this initializes the buffer's values to 0
  85:../src/ir_comm.c **** 	cmd_arrival_time=0;
  86:../src/ir_comm.c **** 	num_waiting_msgs=0;
  87:../src/ir_comm.c **** 	user_facing_messages_ovf=0;
  88:../src/ir_comm.c **** 	processing_cmd = 0;
  89:../src/ir_comm.c **** 	processing_ffsync = 0;
  90:../src/ir_comm.c **** 
  91:../src/ir_comm.c **** 	schedule_periodic_task(1000/IR_UPKEEP_FREQUENCY, perform_ir_upkeep, NULL);
  92:../src/ir_comm.c **** 	
  93:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  94:../src/ir_comm.c **** 		hp_ir_block_bm = 0;
  95:../src/ir_comm.c **** 	}
  96:../src/ir_comm.c **** }
  97:../src/ir_comm.c **** 
  98:../src/ir_comm.c **** void handle_cmd_wrapper(){
  99:../src/ir_comm.c **** 	char local_msg_copy[cmd_length+1];	
 100:../src/ir_comm.c **** 	uint16_t local_msg_len;
 101:../src/ir_comm.c **** 	//printf("\tIn handle_cmd_wrapper.\r\n");
 102:../src/ir_comm.c **** 	//Nothing should touch the cmd_buffer and stuff as long as processing_cmd is still 1.
 103:../src/ir_comm.c **** 	memcpy(local_msg_copy, (const void*)cmd_buffer, cmd_length+1);
 104:../src/ir_comm.c **** 	local_msg_len = cmd_length;
 105:../src/ir_comm.c **** 	handle_serial_command(local_msg_copy, local_msg_len);
 106:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 107:../src/ir_comm.c **** 		processing_cmd = 0;
 108:../src/ir_comm.c **** 	}
 109:../src/ir_comm.c **** }
 110:../src/ir_comm.c **** 
 111:../src/ir_comm.c **** static void perform_ir_upkeep(void){
 112:../src/ir_comm.c **** 	uint16_t seen_crcs[6] = {0,0,0,0,0,0};
 113:../src/ir_comm.c **** 	uint8_t crc_seen;
 114:../src/ir_comm.c **** 	int8_t check_dir;
 115:../src/ir_comm.c **** 	int8_t dir;
 116:../src/ir_comm.c **** 	for(dir= 0; dir<6; dir++){ //This first loop looks for a channel on which we got a good message.
 117:../src/ir_comm.c **** 		if(ir_rxtx[dir].status&IR_STATUS_COMPLETE_bm){
 118:../src/ir_comm.c **** 			crc_seen = 0;
 119:../src/ir_comm.c **** 			for(check_dir=(dir-1) ;  check_dir>=0 ; check_dir--)
 120:../src/ir_comm.c **** 				if(seen_crcs[check_dir]==ir_rxtx[dir].data_crc) crc_seen = 1;
 121:../src/ir_comm.c **** 			seen_crcs[dir] = ir_rxtx[dir].data_crc;
 122:../src/ir_comm.c **** 
 123:../src/ir_comm.c **** 			if(crc_seen) clear_ir_buffer(dir);
 124:../src/ir_comm.c **** 			else{ //Normal message; add to message queue.		
 125:../src/ir_comm.c **** 				if(num_waiting_msgs>=MAX_USER_FACING_MESSAGES){
 126:../src/ir_comm.c **** 					user_facing_messages_ovf = 1;
 127:../src/ir_comm.c **** 					num_waiting_msgs=0;
 128:../src/ir_comm.c **** 				}
 129:../src/ir_comm.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 130:../src/ir_comm.c **** 					if(ir_rxtx[dir].data_length==0){
 131:../src/ir_comm.c **** 						printf_P(PSTR("ERROR: Message length 0 in perform_ir_upkeep.\r\n"));
 132:../src/ir_comm.c **** 					}
 133:../src/ir_comm.c **** 					memcpy((void *)msg_node[num_waiting_msgs].msg, (char*)ir_rxtx[dir].buf, ir_rxtx[dir].data_leng
 134:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].msg[ir_rxtx[dir].data_length]='\0';
 135:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].arrival_time = ir_rxtx[dir].last_byte;
 136:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].arrival_dir = dir;
 137:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].sender_ID = ir_rxtx[dir].sender_ID;
 138:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].msg_length = ir_rxtx[dir].data_length;
 139:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].wasTargeted = !!(ir_rxtx[dir].status&IR_STATUS_TARGETED_bm);
 140:../src/ir_comm.c **** 					if(msg_node[num_waiting_msgs].msg_length > IR_BUFFER_SIZE){
 141:../src/ir_comm.c **** 						printf_P(PSTR("ERROR! Message too long?\r\n"));
 142:../src/ir_comm.c **** 					}
 143:../src/ir_comm.c **** 					num_waiting_msgs++;
 144:../src/ir_comm.c **** 				}
 145:../src/ir_comm.c **** 
 146:../src/ir_comm.c **** 				clear_ir_buffer(dir);
 147:../src/ir_comm.c **** 			}
 148:../src/ir_comm.c **** 		}
 149:../src/ir_comm.c **** 	}
 150:../src/ir_comm.c **** }
 151:../src/ir_comm.c **** 
 152:../src/ir_comm.c **** void send_msg(uint8_t dirs, char *data, uint8_t data_length, uint8_t hp_flag){
 153:../src/ir_comm.c **** 	if(data_length>IR_BUFFER_SIZE) printf_P(PSTR("ERROR: Message exceeds IR_BUFFER_SIZE.\r\n"));
 154:../src/ir_comm.c **** 	
 155:../src/ir_comm.c **** 	uint16_t crc = get_droplet_id();
 156:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++){
 157:../src/ir_comm.c **** 		if(dirs&(1<<dir)){			
 158:../src/ir_comm.c **** 			crc = _crc16_update(crc, (ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm));
 159:../src/ir_comm.c **** 			crc = _crc16_update(crc, ir_rxtx[dir].target_ID);
 160:../src/ir_comm.c **** 			break;
 161:../src/ir_comm.c **** 		}	
 162:../src/ir_comm.c **** 	}
 163:../src/ir_comm.c **** 
 164:../src/ir_comm.c **** 	for(uint8_t i=0; i<data_length; i++) crc = _crc16_update(crc, data[i]); //Calculate CRC of outboun
 165:../src/ir_comm.c **** 	
 166:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++){
 167:../src/ir_comm.c **** 		if(dirs&(1<<dir)){
 168:../src/ir_comm.c **** 			ir_rxtx[dir].status |= IR_STATUS_TRANSMITTING_bm;
 169:../src/ir_comm.c **** 			ir_rxtx[dir].data_length = data_length;
 170:../src/ir_comm.c **** 			ir_rxtx[dir].data_crc = crc;
 171:../src/ir_comm.c **** 			ir_rxtx[dir].curr_pos = 0;
 172:../src/ir_comm.c **** 			ir_rxtx[dir].sender_ID = get_droplet_id();
 173:../src/ir_comm.c **** 			memcpy((char*)ir_rxtx[dir].buf, data, data_length);
 174:../src/ir_comm.c **** 			TCF2.CTRLB |= ir_carrier_bm[dir];		// Turn on carrier wave on port dir
 175:../src/ir_comm.c **** 		}
 176:../src/ir_comm.c **** 	}
 177:../src/ir_comm.c **** 
 178:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++){
 179:../src/ir_comm.c **** 		if(dirs&(1<<dir)){
 180:../src/ir_comm.c **** 			ir_rxtx[dir].last_byte = 0;
 181:../src/ir_comm.c **** 			if(hp_flag){
 182:../src/ir_comm.c **** 				channel[dir]->CTRLA |= USART_DREINTLVL_HI_gc;
 183:../src/ir_comm.c **** 			}else{
 184:../src/ir_comm.c **** 				channel[dir]->CTRLA |= USART_DREINTLVL_MED_gc;			
 185:../src/ir_comm.c **** 			}
 186:../src/ir_comm.c **** 		}
 187:../src/ir_comm.c **** 	}
 188:../src/ir_comm.c **** 
 189:../src/ir_comm.c **** 	/* The whole transmission will now occur in interrupts. */
 190:../src/ir_comm.c **** }
 191:../src/ir_comm.c **** 
 192:../src/ir_comm.c **** /*
 193:../src/ir_comm.c ****  * This function returns '0' if no message was sent because the channels were busy, and '1' if it w
 194:../src/ir_comm.c ****  * in claiming channels and starting the message send process. Note that this function returning '1
 195:../src/ir_comm.c ****  * guarantee a successful transmission, as it's still possible for something to go wrong with the s
 196:../src/ir_comm.c ****  */
 197:../src/ir_comm.c **** inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8
 198:../src/ir_comm.c **** 	if(hp_ir_block_bm){
 199:../src/ir_comm.c **** 		printf_P(PSTR("Normal send blocked by hp.\r\n"));
 200:../src/ir_comm.c **** 		return 0;
 201:../src/ir_comm.c **** 	}
 202:../src/ir_comm.c **** 	if(ir_is_busy(dirs_to_go)>1){
 203:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 204:../src/ir_comm.c **** 		for(uint8_t i=0;i<data_length;i++){
 205:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 206:../src/ir_comm.c **** 		}
 207:../src/ir_comm.c **** 		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
 208:../src/ir_comm.c ****         return 0;
 209:../src/ir_comm.c ****     }        
 210:../src/ir_comm.c **** 	for(uint8_t dir=0;dir<6;dir++){
 211:../src/ir_comm.c **** 		if(dirs_to_go&(1<<dir)){		
 212:../src/ir_comm.c **** 			channel[dir]->CTRLB &= ~USART_RXEN_bm;
 213:../src/ir_comm.c **** 			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
 214:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 215:../src/ir_comm.c **** 			ir_rxtx[dir].target_ID=target;
 216:../src/ir_comm.c **** 		}
 217:../src/ir_comm.c **** 	}
 218:../src/ir_comm.c **** 	send_msg(dirs_to_go, data, data_length, 0);
 219:../src/ir_comm.c ****     return 1;
 220:../src/ir_comm.c **** }
 221:../src/ir_comm.c **** 
 222:../src/ir_comm.c **** uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, id_t target){
 223:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, target, 1);
 224:../src/ir_comm.c **** }
 225:../src/ir_comm.c **** 
 226:../src/ir_comm.c **** uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
 227:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, 0, 1);
 228:../src/ir_comm.c **** }
 229:../src/ir_comm.c **** 
 230:../src/ir_comm.c **** uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, id_t target){
 231:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, target, 0);
 232:../src/ir_comm.c **** }
 233:../src/ir_comm.c **** 
 234:../src/ir_comm.c **** uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
 235:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, 0, 0);
 236:../src/ir_comm.c **** }
 237:../src/ir_comm.c **** 
 238:../src/ir_comm.c **** static inline uint8_t all_hp_ir_cmds(uint8_t dirs, char* data, uint8_t data_length, id_t target){
 239:../src/ir_comm.c ****     //perform_ir_upkeep();
 240:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 241:../src/ir_comm.c **** 		if(hp_ir_block_bm){
 242:../src/ir_comm.c **** 			return 0;
 243:../src/ir_comm.c **** 		}
 244:../src/ir_comm.c **** 		uint8_t timed;
 245:../src/ir_comm.c **** 		if(data_length>=64){
 246:../src/ir_comm.c **** 			data_length-=64;
 247:../src/ir_comm.c **** 			timed=1;
 248:../src/ir_comm.c **** 		}
 249:../src/ir_comm.c **** 		for(uint8_t dir=0;dir<6;dir++){
 250:../src/ir_comm.c **** 			if(dirs&(1<<dir)){
 251:../src/ir_comm.c **** 				channel[dir]->CTRLB &= ~USART_RXEN_bm;
 252:../src/ir_comm.c **** 				ir_rxtx[dir].status = IR_STATUS_BUSY_bm | IR_STATUS_COMMAND_bm;
 253:../src/ir_comm.c **** 				ir_rxtx[dir].status |= (timed ? IR_STATUS_TIMED_bm : 0);
 254:../src/ir_comm.c **** 				ir_rxtx[dir].target_ID=target;
 255:../src/ir_comm.c **** 				hp_ir_block_bm |= (1<<dir);
 256:../src/ir_comm.c **** 			}
 257:../src/ir_comm.c **** 		}
 258:../src/ir_comm.c **** 	}
 259:../src/ir_comm.c ****     send_msg(dirs, data, data_length, 1);
 260:../src/ir_comm.c **** 	return 1;
 261:../src/ir_comm.c **** }
 262:../src/ir_comm.c **** 
 263:../src/ir_comm.c **** uint8_t hp_ir_cmd(uint8_t dirs, char *data, uint8_t data_length){
 264:../src/ir_comm.c **** 	return all_hp_ir_cmds(dirs, data, data_length, 0);
 265:../src/ir_comm.c **** }
 266:../src/ir_comm.c **** 
 267:../src/ir_comm.c **** uint8_t hp_ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, id_t target){
 268:../src/ir_comm.c **** 	return all_hp_ir_cmds(dirs, data, data_length, target);
 269:../src/ir_comm.c **** }
 270:../src/ir_comm.c **** 
 271:../src/ir_comm.c **** void waitForTransmission(uint8_t dirs){
 272:../src/ir_comm.c **** 	   uint8_t busy;
 273:../src/ir_comm.c **** 	   do{
 274:../src/ir_comm.c **** 		   busy=0;
 275:../src/ir_comm.c **** 		   for(uint8_t dir=0; dir<6; dir++){
 276:../src/ir_comm.c **** 			   if(dirs&(1<<dir)){
 277:../src/ir_comm.c **** 				   if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
 278:../src/ir_comm.c **** 					   busy=1;
 279:../src/ir_comm.c **** 				   }
 280:../src/ir_comm.c **** 			   }
 281:../src/ir_comm.c **** 		   }
 282:../src/ir_comm.c **** 		   delay_us(100);
 283:../src/ir_comm.c **** 	   } while (busy);
 284:../src/ir_comm.c **** }
 285:../src/ir_comm.c **** 
 286:../src/ir_comm.c **** 
 287:../src/ir_comm.c **** 
 288:../src/ir_comm.c **** // To be called from interrupt handler only. Do not call.
 289:../src/ir_comm.c **** static void ir_receive(uint8_t dir){
 290:../src/ir_comm.c **** 	uint8_t in_byte = channel[dir]->DATA;				// Some data just came in
 291:../src/ir_comm.c **** 	#ifdef AUDIO_DROPLET
 292:../src/ir_comm.c **** 		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
 293:../src/ir_comm.c **** 	#endif	
 294:../src/ir_comm.c **** 	
 295:../src/ir_comm.c **** 	uint32_t now = get_time();
 296:../src/ir_comm.c **** 	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clear_ir_buffer(dir);	
 297:../src/ir_comm.c **** 	ir_rxtx[dir].last_byte = now;
 298:../src/ir_comm.c **** 	#ifdef HARDCORE_DEBUG_DIR
 299:../src/ir_comm.c **** 		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as
 300:../src/ir_comm.c **** 	#endif	
 301:../src/ir_comm.c **** 	switch(ir_rxtx[dir].curr_pos){
 302:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].sender_ID		= (uint16_t)in_byte;		break;
 303:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].sender_ID	   |= (((uint16_t)in_byte)<<8);	break;
 304:../src/ir_comm.c **** 		case HEADER_POS_CRC_LOW:		ir_rxtx[dir].data_crc		= (uint16_t)in_byte;		break;
 305:../src/ir_comm.c **** 		case HEADER_POS_CRC_HIGH:		ir_rxtx[dir].data_crc	   |= (((uint16_t)in_byte)<<8); break;										
 306:../src/ir_comm.c **** 		case HEADER_POS_MSG_LENGTH:
 307:../src/ir_comm.c **** 										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
 308:../src/ir_comm.c **** 										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].sender_ID, ir_rxtx[dir].status & IR_S
 309:../src/ir_comm.c **** 										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
 310:../src/ir_comm.c **** 										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this
 311:../src/ir_comm.c **** 																								break;
 312:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
 313:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_HIGH:
 314:../src/ir_comm.c **** 										ir_rxtx[dir].target_ID	   |= (((uint16_t)in_byte)<<8);
 315:../src/ir_comm.c **** 										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
 316:../src/ir_comm.c **** 										break;
 317:../src/ir_comm.c **** 		case HEADER_POS_SOURCE_DIR:		ir_rxtx[dir].inc_dir		= in_byte;				break;										
 318:../src/ir_comm.c **** 		default:
 319:../src/ir_comm.c **** 			ir_rxtx[dir].buf[ir_rxtx[dir].curr_pos-HEADER_LEN] = in_byte;
 320:../src/ir_comm.c **** 			ir_rxtx[dir].calc_crc = _crc16_update(ir_rxtx[dir].calc_crc, in_byte);
 321:../src/ir_comm.c **** 	}
 322:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos++;
 323:../src/ir_comm.c **** 	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
 324:../src/ir_comm.c **** 		ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
 325:../src/ir_comm.c **** 		//pre checks.
 326:../src/ir_comm.c **** 		const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
 327:../src/ir_comm.c **** 		const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
 328:../src/ir_comm.c **** 		const uint8_t selfSender  = ir_rxtx[dir].sender_ID == get_droplet_id();
 329:../src/ir_comm.c **** 		const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
 330:../src/ir_comm.c **** 		const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=get_dr
 331:../src/ir_comm.c **** 		const uint8_t incDirErr	= 0;//(notTimed && (ir_rxtx[dir].inc_dir&INC_DIR_KEY)!=INC_DIR_KEY);
 332:../src/ir_comm.c **** 		if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget)||incDirErr)){
 333:../src/ir_comm.c **** 			if(notTimed){
 334:../src/ir_comm.c **** 				ir_rxtx[dir].inc_dir = ir_rxtx[dir].inc_dir&(~INC_DIR_KEY); //remove key bits.							
 335:../src/ir_comm.c **** 			}
 336:../src/ir_comm.c **** 			if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
 337:../src/ir_comm.c **** 				if(notTimed){
 338:../src/ir_comm.c **** 					received_ir_cmd(dir);
 339:../src/ir_comm.c **** 				}else{
 340:../src/ir_comm.c **** 					switch(ir_rxtx[dir].data_length){
 341:../src/ir_comm.c **** 						case 0: received_ir_sync(ir_rxtx[dir].inc_dir, ir_rxtx[dir].sender_ID); break;
 342:../src/ir_comm.c **** 						case 1: received_rnb_r(ir_rxtx[dir].inc_dir, ir_rxtx[dir].sender_ID, ir_rxtx[dir].last_byte);
 343:../src/ir_comm.c **** 					}			
 344:../src/ir_comm.c **** 				}			
 345:../src/ir_comm.c **** 			}else{
 346:../src/ir_comm.c **** 				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 347:../src/ir_comm.c **** 					ir_rxtx[dir].status |= IR_STATUS_COMPLETE_bm;
 348:../src/ir_comm.c **** 					ir_rxtx[dir].status |= IR_STATUS_BUSY_bm; //mark as busy so we don't overwrite it.
 349:../src/ir_comm.c **** 					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receiving messages on this channel until the 
 350:../src/ir_comm.c **** 					if(ir_rxtx[dir].data_length==22) printf("%hu %04X\r\n", dir, ir_rxtx[dir].sender_ID);
 351:../src/ir_comm.c **** 				}
 352:../src/ir_comm.c **** 			}
 353:../src/ir_comm.c **** 			//printf("\r\n");
 354:../src/ir_comm.c **** 		}else{
 355:../src/ir_comm.c **** 			clear_ir_buffer(dir);
 356:../src/ir_comm.c **** 		}
 357:../src/ir_comm.c **** 	}
 358:../src/ir_comm.c **** }
 359:../src/ir_comm.c **** 
 360:../src/ir_comm.c **** static void received_ir_cmd(uint8_t dir){
 361:../src/ir_comm.c **** 	uint8_t processThisCommand = 0;
 362:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 363:../src/ir_comm.c **** 		if(!processing_cmd){
 364:../src/ir_comm.c **** 			processThisCommand = 1;
 365:../src/ir_comm.c **** 			memcpy((void*)cmd_buffer, (char*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
 366:../src/ir_comm.c **** 			cmd_buffer[ir_rxtx[dir].data_length]='\0';
 367:../src/ir_comm.c **** 			cmd_length = ir_rxtx[dir].data_length;
 368:../src/ir_comm.c **** 			cmd_arrival_time = ir_rxtx[dir].last_byte;	//This is a 'global' value, referenced by other *.c f
 369:../src/ir_comm.c **** 			cmd_sender_id = ir_rxtx[dir].sender_ID;		//This is a 'global' value, referenced by other *.c fil
 370:../src/ir_comm.c **** 			cmd_arrival_dir = dir;
 371:../src/ir_comm.c **** 			cmd_sender_dir  = ir_rxtx[dir].inc_dir;
 372:../src/ir_comm.c **** 			processing_cmd = 1;
 373:../src/ir_comm.c **** 		}
 374:../src/ir_comm.c **** 	}
 375:../src/ir_comm.c **** 	if(processThisCommand){
 376:../src/ir_comm.c **** 		schedule_task(5, handle_cmd_wrapper, NULL);
 377:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 378:../src/ir_comm.c **** 			for(uint8_t other_dir=0;other_dir<6;other_dir++){
 379:../src/ir_comm.c **** 				clear_ir_buffer(other_dir);
 380:../src/ir_comm.c **** 			}
 381:../src/ir_comm.c **** 		}
 382:../src/ir_comm.c **** 	}
 383:../src/ir_comm.c **** }
 384:../src/ir_comm.c **** 
 385:../src/ir_comm.c **** static void received_ir_sync(uint8_t delay, id_t senderID){
 386:../src/ir_comm.c **** 	uint8_t processThisFFSync = 0;
 387:../src/ir_comm.c **** 	uint16_t count;
 388:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 389:../src/ir_comm.c **** 		if(!processing_ffsync){
 390:../src/ir_comm.c **** 			count = TCE0.CNT;
 391:../src/ir_comm.c **** 			if(delay!=0xFF){
 392:../src/ir_comm.c **** 				processThisFFSync = 1;
 393:../src/ir_comm.c **** 				processing_ffsync = 1;
 394:../src/ir_comm.c **** 			}
 395:../src/ir_comm.c **** 		}
 396:../src/ir_comm.c **** 	}
 397:../src/ir_comm.c **** 	if(processThisFFSync){
 398:../src/ir_comm.c **** 		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
 399:../src/ir_comm.c **** 		update_firefly_counter(count, delay);
 400:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 401:../src/ir_comm.c **** 			for(uint8_t dir=0;dir<6;dir++){
 402:../src/ir_comm.c **** 				if(ir_rxtx[dir].sender_ID==senderID){
 403:../src/ir_comm.c **** 					clear_ir_buffer(dir);
 404:../src/ir_comm.c **** 				}
 405:../src/ir_comm.c **** 			}
 406:../src/ir_comm.c **** 			processing_ffsync = 0;
 407:../src/ir_comm.c **** 		}
 408:../src/ir_comm.c **** 	}
 409:../src/ir_comm.c **** 	//printf("F\r\n");
 410:../src/ir_comm.c **** }
 411:../src/ir_comm.c **** 
 412:../src/ir_comm.c **** static void received_rnb_r(uint8_t delay, id_t senderID, uint32_t last_byte){
 413:../src/ir_comm.c **** 	uint8_t processThisRNB = 0;
 414:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 415:../src/ir_comm.c **** 		if(!rnbProcessingFlag && !hp_ir_block_bm){
 416:../src/ir_comm.c **** 			if(delay!=0xFF){
 417:../src/ir_comm.c **** 				rnbCmdID = senderID;
 418:../src/ir_comm.c **** 				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
 419:../src/ir_comm.c **** 				if(delay<5) delay = 20-delay;
 420:../src/ir_comm.c **** 				rnbCmdSentTime = last_byte-(delay+5);
 421:../src/ir_comm.c **** 				processThisRNB = 1;
 422:../src/ir_comm.c **** 				rnbProcessingFlag = 1;
 423:../src/ir_comm.c **** 				hp_ir_block_bm = 0xFF;
 424:../src/ir_comm.c **** 
 425:../src/ir_comm.c **** 			}
 426:../src/ir_comm.c **** 		}
 427:../src/ir_comm.c **** 	}
 428:../src/ir_comm.c **** 	if(processThisRNB){
 429:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 430:../src/ir_comm.c **** 			for(uint8_t dir=0;dir<6;dir++){
 431:../src/ir_comm.c **** 				if(ir_rxtx[dir].sender_ID==senderID){
 432:../src/ir_comm.c **** 					clear_ir_buffer(dir);
 433:../src/ir_comm.c **** 				}
 434:../src/ir_comm.c **** 			}
 435:../src/ir_comm.c **** 		}
 436:../src/ir_comm.c **** 		rnbCmdSentTime-= (processThisRNB>1) ? (20-delay) : 0;
 437:../src/ir_comm.c **** 		ir_range_meas();	
 438:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 439:../src/ir_comm.c **** 			hp_ir_block_bm = 0;
 440:../src/ir_comm.c **** 		}
 441:../src/ir_comm.c **** 		schedule_task(5, use_rnb_data, NULL);
 442:../src/ir_comm.c **** 	}
 443:../src/ir_comm.c **** 	//printf("R\r\n");
 444:../src/ir_comm.c **** }
 445:../src/ir_comm.c **** 
 446:../src/ir_comm.c **** // TO BE CALLED FROM INTERRUPT HANDLER ONLY
 447:../src/ir_comm.c **** // DO NOT CALL
 448:../src/ir_comm.c **** static volatile uint8_t next_byte;
 449:../src/ir_comm.c **** static void ir_transmit(uint8_t dir){
 450:../src/ir_comm.c **** 	switch(ir_rxtx[dir].curr_pos){
 451:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_LOW:  next_byte  = (uint8_t)(ir_rxtx[dir].sender_ID&0xFF);		break;
 452:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_HIGH: next_byte  = (uint8_t)((ir_rxtx[dir].sender_ID>>8)&0xFF);	break;	
 453:../src/ir_comm.c **** 		case HEADER_POS_CRC_LOW:		next_byte  = (uint8_t)(ir_rxtx[dir].data_crc&0xFF);			break;
 454:../src/ir_comm.c **** 		case HEADER_POS_CRC_HIGH:		next_byte  = (uint8_t)((ir_rxtx[dir].data_crc>>8)&0xFF);	break;	
 455:../src/ir_comm.c **** 		case HEADER_POS_MSG_LENGTH:		next_byte  = ir_rxtx[dir].data_length & DATA_LEN_VAL_bm;
 456:../src/ir_comm.c **** 										next_byte |= (ir_rxtx[dir].status & IR_STATUS_COMMAND_bm);
 457:../src/ir_comm.c **** 										next_byte |= (ir_rxtx[dir].status & IR_STATUS_TIMED_bm); break;
 458:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_LOW:	next_byte  = (uint8_t)(ir_rxtx[dir].target_ID&0xFF);		break;
 459:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_HIGH:	next_byte  = (uint8_t)((ir_rxtx[dir].target_ID>>8)&0xFF);	break;
 460:../src/ir_comm.c **** 		case HEADER_POS_SOURCE_DIR:	
 461:../src/ir_comm.c **** 									if(!(ir_rxtx[dir].status&IR_STATUS_TIMED_bm)){
 462:../src/ir_comm.c **** 										next_byte  = INC_DIR_KEY|dir;								
 463:../src/ir_comm.c **** 									}else{
 464:../src/ir_comm.c **** 										uint16_t diff = ((uint16_t)(get_time()&0xFFFF))-ir_rxtx[dir].target_ID;
 465:../src/ir_comm.c **** 										//if(dir==0||dir==5) printf("(%hu) T: %u\r\n",dir, diff);
 466:../src/ir_comm.c **** 										if(diff<255){
 467:../src/ir_comm.c **** 											next_byte = (uint8_t)diff;
 468:../src/ir_comm.c **** 										}else{
 469:../src/ir_comm.c **** 											next_byte = 255;
 470:../src/ir_comm.c **** 										}
 471:../src/ir_comm.c **** 									}
 472:../src/ir_comm.c **** 									break;
 473:../src/ir_comm.c **** 		default: next_byte = ir_rxtx[dir].buf[ir_rxtx[dir].curr_pos - HEADER_LEN];
 474:../src/ir_comm.c **** 	}
 475:../src/ir_comm.c **** 	channel[dir]->DATA = next_byte;
 476:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos++;
 477:../src/ir_comm.c **** 	/* CHECK TO SEE IF MESSAGE IS COMPLETE */
 478:../src/ir_comm.c **** 	if(ir_rxtx[dir].curr_pos >= (ir_rxtx[dir].data_length+HEADER_LEN)){
 479:../src/ir_comm.c **** 		//printf("transmit of %hu-byte long message completed on dir %hu.\r\n\t", ir_rxtx[dir].data_lengt
 480:../src/ir_comm.c **** 		//for(uint8_t i=0;i<ir_rxtx[dir].data_length & DATA_LEN_VAL_bm; i++){
 481:../src/ir_comm.c **** 			//printf("%02hX ", ir_rxtx[dir].buf[i]);
 482:../src/ir_comm.c **** 		//}
 483:../src/ir_comm.c **** 		//printf("\r\n");
 484:../src/ir_comm.c **** 		clear_ir_buffer(dir);
 485:../src/ir_comm.c **** 		channel[dir]->CTRLA &= ~USART_DREINTLVL_gm; //Turn off interrupt things.
 486:../src/ir_comm.c **** 		
 487:../src/ir_comm.c **** 	}
 488:../src/ir_comm.c **** 
 489:../src/ir_comm.c **** }
 490:../src/ir_comm.c **** //
 491:../src/ir_comm.c **** //static void ir_remote_send(uint8_t dir, uint16_t data){	
 492:../src/ir_comm.c **** 	//channel[dir]->CTRLB &= ~USART_RXEN_bm;
 493:../src/ir_comm.c **** 	//channel[dir]->CTRLB &= ~USART_TXEN_bm;
 494:../src/ir_comm.c **** 	////printf("Sending:\t");
 495:../src/ir_comm.c **** 	//TCF2.CTRLB |= ir_carrier_bm[dir];
 496:../src/ir_comm.c **** 	//PORT_t* port = 0;
 497:../src/ir_comm.c **** 	//if((dir==0)|(dir==1))		port=&PORTC;
 498:../src/ir_comm.c **** 	//else if(dir==2)			port=&PORTD;
 499:../src/ir_comm.c **** 	//else if((dir==3)|(dir==4))	port=&PORTE;
 500:../src/ir_comm.c **** 	//else if(dir==5)			port=&PORTF;
 501:../src/ir_comm.c **** 	//uint8_t pin_mask=0;
 502:../src/ir_comm.c **** 	//if((dir==0)|(dir==2)|(dir==3)|(dir==5)) pin_mask=PIN3_bm;
 503:../src/ir_comm.c **** 	//else if((dir==1)|(dir==4))				pin_mask=PIN7_bm;
 504:../src/ir_comm.c **** 	//
 505:../src/ir_comm.c **** 	//ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 506:../src/ir_comm.c **** 		//port->DIRSET = pin_mask;	
 507:../src/ir_comm.c **** 		////start bit
 508:../src/ir_comm.c **** 		//port->OUTCLR = pin_mask;				delay_us(5000);
 509:../src/ir_comm.c **** 		//port->OUTSET = pin_mask;				delay_us(5000);
 510:../src/ir_comm.c **** 		////send E0E0:
 511:../src/ir_comm.c **** 		//for(uint8_t i=0;i<16;i++){
 512:../src/ir_comm.c **** 			//port->OUTCLR = pin_mask;	delay_us(560);		
 513:../src/ir_comm.c **** 			//if((0xE0E0<<i)&0x8000){	port->OUTSET = pin_mask;	delay_us(1600);}
 514:../src/ir_comm.c **** 			//else{					port->OUTSET = pin_mask;	delay_us(560);	}
 515:../src/ir_comm.c **** 		//}
 516:../src/ir_comm.c **** 		////send data:
 517:../src/ir_comm.c **** 		//for(uint8_t i=0;i<16;i++){
 518:../src/ir_comm.c **** 			//port->OUTCLR = pin_mask;	delay_us(560);		
 519:../src/ir_comm.c **** 			//if((data<<i)&0x8000){		port->OUTSET = pin_mask;	delay_us(1600);}
 520:../src/ir_comm.c **** 			//else{						port->OUTSET = pin_mask;	delay_us(560);	}
 521:../src/ir_comm.c **** 		//}	
 522:../src/ir_comm.c **** 		////stop bit
 523:../src/ir_comm.c **** 		//port->OUTCLR = pin_mask;		delay_us(560);
 524:../src/ir_comm.c **** 		//port->OUTSET = pin_mask;
 525:../src/ir_comm.c **** 	//}
 526:../src/ir_comm.c **** 	//channel[dir]->CTRLB |= USART_TXEN_bm;
 527:../src/ir_comm.c **** 	//ir_transmit_complete(dir);
 528:../src/ir_comm.c **** 	////printf("End of ir_remote_send.\r\n");	
 529:../src/ir_comm.c **** //}
 530:../src/ir_comm.c **** 
 531:../src/ir_comm.c **** // TO BE CALLED FROM INTERRUPT HANDLER ONLY
 532:../src/ir_comm.c **** // DO NOT CALL
 533:../src/ir_comm.c **** static void ir_transmit_complete(uint8_t dir){
  17               		.loc 1 533 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24               	.LBB190:
 534:../src/ir_comm.c **** 	// this code is being executed because a TXCIF interrupt was executed, see pg. 305 AU manual:
 535:../src/ir_comm.c **** 	//	TXCIF: Transmit Complete Interrupt Flag
 536:../src/ir_comm.c **** 	//	This flag is set when the entire frame in the transmit shift register has been shifted out and 
 537:../src/ir_comm.c **** 	//	are no new data in the transmit buffer (DATA). TXCIF is automatically cleared when the transmit
 538:../src/ir_comm.c **** 	//	complete interrupt vector is executed. The flag can also be cleared by writing a one to its bit
 539:../src/ir_comm.c **** 	//	To do: this suggests we don't really need to do this a byte at a time? Need to check.
 540:../src/ir_comm.c **** 	//  Calling this code signals the end of the transmit process
 541:../src/ir_comm.c **** 	//printf("\r\n");
 542:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  25               		.loc 1 542 0
  26 0000 5FB7      		in r21,__SREG__
  27               	.LVL1:
  28               	.LBB191:
  29               	.LBB192:
  30               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    All rights reserved.
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions of source code must retain the above copyright
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      the documentation and/or other materials provided with the
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      distribution.
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      contributors may be used to endorse or promote products derived
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      from this software without specific prior written permission.
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** */
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* $Id$ */
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/io.h>
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/interrupt.h>
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #if !defined(__DOXYGEN__)
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Internal helper functions. */
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  31               		.loc 2 50 0
  32               	/* #APP */
  33               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
  34 0002 F894      		cli
  35               	 ;  0 "" 2
  36               	.LVL2:
  37               	/* #NOAPP */
  38               	.LBE192:
  39               	.LBE191:
 543:../src/ir_comm.c **** 		TCF2.CTRLB &= ~ir_carrier_bm[dir]; //Turn off the carrier wave.
  40               		.loc 1 543 0
  41 0004 E0E0      		ldi r30,0
  42 0006 FBE0      		ldi r31,lo8(11)
  43 0008 4181      		ldd r20,Z+1
  44 000a 282F      		mov r18,r24
  45 000c 30E0      		ldi r19,0
  46 000e D901      		movw r26,r18
  47 0010 A050      		subi r26,lo8(-(ir_carrier_bm))
  48 0012 B040      		sbci r27,hi8(-(ir_carrier_bm))
  49 0014 9C91      		ld r25,X
  50 0016 9095      		com r25
  51 0018 9423      		and r25,r20
  52 001a 9183      		std Z+1,r25
 544:../src/ir_comm.c **** 
 545:../src/ir_comm.c **** 		ir_rxtx[dir].status = 0;
  53               		.loc 1 545 0
  54 001c 99E3      		ldi r25,lo8(57)
  55 001e 929F      		mul r25,r18
  56 0020 F001      		movw r30,r0
  57 0022 939F      		mul r25,r19
  58 0024 F00D      		add r31,r0
  59 0026 1124      		clr __zero_reg__
  60 0028 E050      		subi r30,lo8(-(ir_rxtx))
  61 002a F040      		sbci r31,hi8(-(ir_rxtx))
  62 002c 10AE      		std Z+56,__zero_reg__
 546:../src/ir_comm.c **** 		ir_rxtx[dir].data_length = 0;
  63               		.loc 1 546 0
  64 002e 16AA      		std Z+54,__zero_reg__
 547:../src/ir_comm.c **** 		ir_rxtx[dir].curr_pos = 0;
  65               		.loc 1 547 0
  66 0030 1286      		std Z+10,__zero_reg__
  67 0032 1386      		std Z+11,__zero_reg__
 548:../src/ir_comm.c **** 		ir_rxtx[dir].target_ID = 0;
  68               		.loc 1 548 0
  69 0034 1086      		std Z+8,__zero_reg__
  70 0036 1186      		std Z+9,__zero_reg__
 549:../src/ir_comm.c **** 		ir_rxtx[dir].sender_ID = 0;
  71               		.loc 1 549 0
  72 0038 1682      		std Z+6,__zero_reg__
  73 003a 1782      		std Z+7,__zero_reg__
 550:../src/ir_comm.c **** 	
 551:../src/ir_comm.c **** 		channel[dir]->STATUS |= USART_TXCIF_bm;		// writing a 1 to this bit manually clears the TXCIF fla
  74               		.loc 1 551 0
  75 003c 220F      		lsl r18
  76 003e 331F      		rol r19
  77 0040 F901      		movw r30,r18
  78 0042 E050      		subi r30,lo8(-(channel))
  79 0044 F040      		sbci r31,hi8(-(channel))
  80 0046 0190      		ld __tmp_reg__,Z+
  81 0048 F081      		ld r31,Z
  82 004a E02D      		mov r30,__tmp_reg__
  83 004c 9181      		ldd r25,Z+1
  84 004e 9064      		ori r25,lo8(64)
  85 0050 9183      		std Z+1,r25
 552:../src/ir_comm.c **** 		channel[dir]->CTRLB |= USART_RXEN_bm;	// this enables receive on the USART
  86               		.loc 1 552 0
  87 0052 9481      		ldd r25,Z+4
  88 0054 9061      		ori r25,lo8(16)
  89 0056 9483      		std Z+4,r25
 553:../src/ir_comm.c **** 		hp_ir_block_bm &= (~(1<<dir));
  90               		.loc 1 553 0
  91 0058 4091 0000 		lds r20,hp_ir_block_bm
  92 005c 21E0      		ldi r18,lo8(1)
  93 005e 30E0      		ldi r19,0
  94 0060 B901      		movw r22,r18
  95 0062 00C0      		rjmp 2f
  96               		1:
  97 0064 660F      		lsl r22
  98 0066 771F      		rol r23
  99               		2:
 100 0068 8A95      		dec r24
 101 006a 02F4      		brpl 1b
 102 006c CB01      		movw r24,r22
 103               	.LVL3:
 104 006e 8095      		com r24
 105 0070 8423      		and r24,r20
 106 0072 8093 0000 		sts hp_ir_block_bm,r24
 107               	.LVL4:
 108               	.LBB193:
 109               	.LBB194:
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     SREG = *__s;
 110               		.loc 2 70 0
 111 0076 5FBF      		out __SREG__,r21
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 112               		.loc 2 71 0
 113               	.LVL5:
 114 0078 0895      		ret
 115               	.LBE194:
 116               	.LBE193:
 117               	.LBE190:
 118               		.cfi_endproc
 119               	.LFE81:
 121               		.section	.text.perform_ir_upkeep,"ax",@progbits
 123               	perform_ir_upkeep:
 124               	.LFB65:
 111:../src/ir_comm.c **** 	uint16_t seen_crcs[6] = {0,0,0,0,0,0};
 125               		.loc 1 111 0
 126               		.cfi_startproc
 127 0000 2F92      		push r2
 128               	.LCFI0:
 129               		.cfi_def_cfa_offset 4
 130               		.cfi_offset 2, -3
 131 0002 3F92      		push r3
 132               	.LCFI1:
 133               		.cfi_def_cfa_offset 5
 134               		.cfi_offset 3, -4
 135 0004 4F92      		push r4
 136               	.LCFI2:
 137               		.cfi_def_cfa_offset 6
 138               		.cfi_offset 4, -5
 139 0006 5F92      		push r5
 140               	.LCFI3:
 141               		.cfi_def_cfa_offset 7
 142               		.cfi_offset 5, -6
 143 0008 6F92      		push r6
 144               	.LCFI4:
 145               		.cfi_def_cfa_offset 8
 146               		.cfi_offset 6, -7
 147 000a 7F92      		push r7
 148               	.LCFI5:
 149               		.cfi_def_cfa_offset 9
 150               		.cfi_offset 7, -8
 151 000c 8F92      		push r8
 152               	.LCFI6:
 153               		.cfi_def_cfa_offset 10
 154               		.cfi_offset 8, -9
 155 000e 9F92      		push r9
 156               	.LCFI7:
 157               		.cfi_def_cfa_offset 11
 158               		.cfi_offset 9, -10
 159 0010 AF92      		push r10
 160               	.LCFI8:
 161               		.cfi_def_cfa_offset 12
 162               		.cfi_offset 10, -11
 163 0012 BF92      		push r11
 164               	.LCFI9:
 165               		.cfi_def_cfa_offset 13
 166               		.cfi_offset 11, -12
 167 0014 CF92      		push r12
 168               	.LCFI10:
 169               		.cfi_def_cfa_offset 14
 170               		.cfi_offset 12, -13
 171 0016 DF92      		push r13
 172               	.LCFI11:
 173               		.cfi_def_cfa_offset 15
 174               		.cfi_offset 13, -14
 175 0018 EF92      		push r14
 176               	.LCFI12:
 177               		.cfi_def_cfa_offset 16
 178               		.cfi_offset 14, -15
 179 001a FF92      		push r15
 180               	.LCFI13:
 181               		.cfi_def_cfa_offset 17
 182               		.cfi_offset 15, -16
 183 001c 0F93      		push r16
 184               	.LCFI14:
 185               		.cfi_def_cfa_offset 18
 186               		.cfi_offset 16, -17
 187 001e 1F93      		push r17
 188               	.LCFI15:
 189               		.cfi_def_cfa_offset 19
 190               		.cfi_offset 17, -18
 191 0020 CF93      		push r28
 192               	.LCFI16:
 193               		.cfi_def_cfa_offset 20
 194               		.cfi_offset 28, -19
 195 0022 DF93      		push r29
 196               	.LCFI17:
 197               		.cfi_def_cfa_offset 21
 198               		.cfi_offset 29, -20
 199 0024 CDB7      		in r28,__SP_L__
 200 0026 DEB7      		in r29,__SP_H__
 201               	.LCFI18:
 202               		.cfi_def_cfa_register 28
 203 0028 2D97      		sbiw r28,13
 204               	.LCFI19:
 205               		.cfi_def_cfa_offset 34
 206 002a CDBF      		out __SP_L__,r28
 207 002c DEBF      		out __SP_H__,r29
 208               	/* prologue: function */
 209               	/* frame size = 13 */
 210               	/* stack size = 31 */
 211               	.L__stack_usage = 31
 112:../src/ir_comm.c **** 	uint8_t crc_seen;
 212               		.loc 1 112 0
 213 002e CE01      		movw r24,r28
 214 0030 0196      		adiw r24,1
 215 0032 6C01      		movw r12,r24
 216 0034 8CE0      		ldi r24,lo8(12)
 217 0036 D601      		movw r26,r12
 218               		0:
 219 0038 1D92      		st X+,__zero_reg__
 220 003a 8A95      		dec r24
 221 003c 01F4      		brne 0b
 222               	.LVL6:
 223 003e 80E0      		ldi r24,lo8(channel)
 224 0040 A82E      		mov r10,r24
 225 0042 80E0      		ldi r24,hi8(channel)
 226 0044 B82E      		mov r11,r24
 227 0046 90E0      		ldi r25,lo8(ir_rxtx+14)
 228 0048 892E      		mov r8,r25
 229 004a 90E0      		ldi r25,hi8(ir_rxtx+14)
 230 004c 992E      		mov r9,r25
 231 004e 3601      		movw r6,r12
 232 0050 BFEF      		ldi r27,lo8(-1)
 233 0052 BD87      		std Y+13,r27
 234 0054 E12C      		mov r14,__zero_reg__
 235 0056 F12C      		mov r15,__zero_reg__
 116:../src/ir_comm.c **** 		if(ir_rxtx[dir].status&IR_STATUS_COMPLETE_bm){
 236               		.loc 1 116 0
 237 0058 312C      		mov r3,__zero_reg__
 117:../src/ir_comm.c **** 			crc_seen = 0;
 238               		.loc 1 117 0
 239 005a 29E3      		ldi r18,lo8(57)
 240 005c 422E      		mov r4,r18
 241               	.LBB195:
 133:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].msg[ir_rxtx[dir].data_length]='\0';
 242               		.loc 1 133 0
 243 005e 31E3      		ldi r19,lo8(49)
 244 0060 532E      		mov r5,r19
 245               	.LVL7:
 246               	.L11:
 247               	.LBE195:
 117:../src/ir_comm.c **** 			crc_seen = 0;
 248               		.loc 1 117 0
 249 0062 4E9C      		mul r4,r14
 250 0064 D001      		movw r26,r0
 251 0066 4F9C      		mul r4,r15
 252 0068 B00D      		add r27,r0
 253 006a 1124      		clr __zero_reg__
 254 006c A050      		subi r26,lo8(-(ir_rxtx))
 255 006e B040      		sbci r27,hi8(-(ir_rxtx))
 256 0070 D896      		adiw r26,56
 257 0072 8C91      		ld r24,X
 258 0074 D897      		sbiw r26,56
 259 0076 81FF      		sbrs r24,1
 260 0078 00C0      		rjmp .L3
 261               	.LVL8:
 119:../src/ir_comm.c **** 				if(seen_crcs[check_dir]==ir_rxtx[dir].data_crc) crc_seen = 1;
 262               		.loc 1 119 0
 263 007a 8D85      		ldd r24,Y+13
 264               	.LVL9:
 265 007c 8F3F      		cpi r24,lo8(-1)
 266 007e 01F4      		brne .+2
 267 0080 00C0      		rjmp .L4
 268 0082 90E0      		ldi r25,0
 120:../src/ir_comm.c **** 			seen_crcs[dir] = ir_rxtx[dir].data_crc;
 269               		.loc 1 120 0
 270 0084 1496      		adiw r26,4
 271 0086 00C0      		rjmp .L6
 272               	.LVL10:
 273               	.L5:
 274 0088 8150      		subi r24,1
 275 008a 00F0      		brcs .L25
 276               	.LVL11:
 277               	.L6:
 278 008c 2D91      		ld r18,X+
 279 008e 3C91      		ld r19,X
 280 0090 1197      		sbiw r26,1
 281 0092 E82F      		mov r30,r24
 282 0094 EE0F      		lsl r30
 283 0096 FF0B      		sbc r31,r31
 284 0098 EC0D      		add r30,r12
 285 009a FD1D      		adc r31,r13
 286 009c 4081      		ld r20,Z
 287 009e 5181      		ldd r21,Z+1
 288 00a0 4217      		cp r20,r18
 289 00a2 5307      		cpc r21,r19
 290 00a4 01F4      		brne .L5
 291 00a6 91E0      		ldi r25,lo8(1)
 292               	.LVL12:
 293 00a8 8150      		subi r24,1
 294 00aa 00F4      		brcc .L6
 295               	.L25:
 121:../src/ir_comm.c **** 
 296               		.loc 1 121 0
 297 00ac 4E9C      		mul r4,r14
 298 00ae F001      		movw r30,r0
 299 00b0 4F9C      		mul r4,r15
 300 00b2 F00D      		add r31,r0
 301 00b4 1124      		clr __zero_reg__
 302 00b6 E050      		subi r30,lo8(-(ir_rxtx))
 303 00b8 F040      		sbci r31,hi8(-(ir_rxtx))
 304 00ba 2481      		ldd r18,Z+4
 305 00bc 3581      		ldd r19,Z+5
 306 00be D301      		movw r26,r6
 307 00c0 2D93      		st X+,r18
 308 00c2 3C93      		st X,r19
 123:../src/ir_comm.c **** 			else{ //Normal message; add to message queue.		
 309               		.loc 1 123 0
 310 00c4 9923      		tst r25
 311 00c6 01F4      		brne .+2
 312 00c8 00C0      		rjmp .L7
 313               	.LVL13:
 314               	.L22:
 315               	.LBB200:
 316               	.LBB201:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 317               		.loc 1 31 0 discriminator 2
 318 00ca 1482      		std Z+4,__zero_reg__
 319 00cc 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 320               		.loc 1 32 0 discriminator 2
 321 00ce 1682      		std Z+6,__zero_reg__
 322 00d0 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 323               		.loc 1 34 0 discriminator 2
 324 00d2 1086      		std Z+8,__zero_reg__
 325 00d4 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 326               		.loc 1 35 0 discriminator 2
 327 00d6 1286      		std Z+10,__zero_reg__
 328 00d8 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 329               		.loc 1 36 0 discriminator 2
 330 00da 1486      		std Z+12,__zero_reg__
 331 00dc 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 332               		.loc 1 37 0 discriminator 2
 333 00de 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 334               		.loc 1 38 0 discriminator 2
 335 00e0 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 336               		.loc 1 40 0 discriminator 2
 337 00e2 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 338               		.loc 1 42 0 discriminator 2
 339 00e4 D501      		movw r26,r10
 340 00e6 ED91      		ld r30,X+
 341 00e8 FC91      		ld r31,X
 342 00ea 8481      		ldd r24,Z+4
 343 00ec 8061      		ori r24,lo8(16)
 344 00ee 8483      		std Z+4,r24
 345               	.L3:
 346 00f0 3394      		inc r3
 347               	.LVL14:
 348 00f2 BFEF      		ldi r27,-1
 349 00f4 EB1A      		sub r14,r27
 350 00f6 FB0A      		sbc r15,r27
 351 00f8 E2E0      		ldi r30,2
 352 00fa AE0E      		add r10,r30
 353 00fc B11C      		adc r11,__zero_reg__
 354 00fe F9E3      		ldi r31,57
 355 0100 8F0E      		add r8,r31
 356 0102 911C      		adc r9,__zero_reg__
 357 0104 22E0      		ldi r18,2
 358 0106 620E      		add r6,r18
 359 0108 711C      		adc r7,__zero_reg__
 360 010a 8D85      		ldd r24,Y+13
 361 010c 8F5F      		subi r24,lo8(-(1))
 362 010e 8D87      		std Y+13,r24
 363               	.LBE201:
 364               	.LBE200:
 116:../src/ir_comm.c **** 		if(ir_rxtx[dir].status&IR_STATUS_COMPLETE_bm){
 365               		.loc 1 116 0 discriminator 2
 366 0110 96E0      		ldi r25,lo8(6)
 367 0112 3912      		cpse r3,r25
 368 0114 00C0      		rjmp .L11
 369               	/* epilogue start */
 150:../src/ir_comm.c **** 
 370               		.loc 1 150 0
 371 0116 2D96      		adiw r28,13
 372 0118 CDBF      		out __SP_L__,r28
 373 011a DEBF      		out __SP_H__,r29
 374 011c DF91      		pop r29
 375 011e CF91      		pop r28
 376 0120 1F91      		pop r17
 377 0122 0F91      		pop r16
 378 0124 FF90      		pop r15
 379 0126 EF90      		pop r14
 380 0128 DF90      		pop r13
 381 012a CF90      		pop r12
 382 012c BF90      		pop r11
 383 012e AF90      		pop r10
 384 0130 9F90      		pop r9
 385 0132 8F90      		pop r8
 386 0134 7F90      		pop r7
 387 0136 6F90      		pop r6
 388 0138 5F90      		pop r5
 389 013a 4F90      		pop r4
 390 013c 3F90      		pop r3
 391               	.LVL15:
 392 013e 2F90      		pop r2
 393 0140 0895      		ret
 394               	.LVL16:
 395               	.L4:
 121:../src/ir_comm.c **** 
 396               		.loc 1 121 0
 397 0142 1496      		adiw r26,4
 398 0144 8D91      		ld r24,X+
 399 0146 9C91      		ld r25,X
 400 0148 1597      		sbiw r26,4+1
 401               	.LVL17:
 402 014a D301      		movw r26,r6
 403 014c 8D93      		st X+,r24
 404 014e 9C93      		st X,r25
 405               	.LVL18:
 406               	.L7:
 125:../src/ir_comm.c **** 					user_facing_messages_ovf = 1;
 407               		.loc 1 125 0
 408 0150 8091 0000 		lds r24,num_waiting_msgs
 409 0154 8630      		cpi r24,lo8(6)
 410 0156 00F0      		brlo .L8
 126:../src/ir_comm.c **** 					num_waiting_msgs=0;
 411               		.loc 1 126 0
 412 0158 B1E0      		ldi r27,lo8(1)
 413 015a B093 0000 		sts user_facing_messages_ovf,r27
 127:../src/ir_comm.c **** 				}
 414               		.loc 1 127 0
 415 015e 1092 0000 		sts num_waiting_msgs,__zero_reg__
 416               	.L8:
 417               	.LBB203:
 129:../src/ir_comm.c **** 					if(ir_rxtx[dir].data_length==0){
 418               		.loc 1 129 0
 419 0162 2FB6      		in r2,__SREG__
 420               	.LVL19:
 421               	.LBB196:
 422               	.LBB197:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 423               		.loc 2 50 0
 424               	/* #APP */
 425               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 426 0164 F894      		cli
 427               	 ;  0 "" 2
 428               	.LVL20:
 429               	/* #NOAPP */
 430               	.LBE197:
 431               	.LBE196:
 130:../src/ir_comm.c **** 						printf_P(PSTR("ERROR: Message length 0 in perform_ir_upkeep.\r\n"));
 432               		.loc 1 130 0
 433 0166 4E9C      		mul r4,r14
 434 0168 F001      		movw r30,r0
 435 016a 4F9C      		mul r4,r15
 436 016c F00D      		add r31,r0
 437 016e 1124      		clr __zero_reg__
 438 0170 E050      		subi r30,lo8(-(ir_rxtx))
 439 0172 F040      		sbci r31,hi8(-(ir_rxtx))
 440 0174 86A9      		ldd r24,Z+54
 441 0176 8823      		tst r24
 442 0178 01F4      		brne .+2
 443 017a 00C0      		rjmp .L26
 444               	.L9:
 133:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].msg[ir_rxtx[dir].data_length]='\0';
 445               		.loc 1 133 0
 446 017c 4E9C      		mul r4,r14
 447 017e 8001      		movw r16,r0
 448 0180 4F9C      		mul r4,r15
 449 0182 100D      		add r17,r0
 450 0184 1124      		clr __zero_reg__
 451 0186 0050      		subi r16,lo8(-(ir_rxtx))
 452 0188 1040      		sbci r17,hi8(-(ir_rxtx))
 453 018a D801      		movw r26,r16
 454 018c D696      		adiw r26,54
 455 018e 4C91      		ld r20,X
 456 0190 8091 0000 		lds r24,num_waiting_msgs
 457 0194 589E      		mul r5,r24
 458 0196 C001      		movw r24,r0
 459 0198 1124      		clr __zero_reg__
 460 019a 50E0      		ldi r21,0
 461 019c B401      		movw r22,r8
 462 019e 8050      		subi r24,lo8(-(msg_node+6))
 463 01a0 9040      		sbci r25,hi8(-(msg_node+6))
 464 01a2 0E94 0000 		call memcpy
 465               	.LVL21:
 134:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].arrival_time = ir_rxtx[dir].last_byte;
 466               		.loc 1 134 0
 467 01a6 E091 0000 		lds r30,num_waiting_msgs
 468 01aa D801      		movw r26,r16
 469 01ac D696      		adiw r26,54
 470 01ae 8C91      		ld r24,X
 471 01b0 D697      		sbiw r26,54
 472 01b2 5E9E      		mul r5,r30
 473 01b4 F001      		movw r30,r0
 474 01b6 1124      		clr __zero_reg__
 475 01b8 E050      		subi r30,lo8(-(msg_node))
 476 01ba F040      		sbci r31,hi8(-(msg_node))
 477 01bc E80F      		add r30,r24
 478 01be F11D      		adc r31,__zero_reg__
 479 01c0 1682      		std Z+6,__zero_reg__
 135:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].arrival_dir = dir;
 480               		.loc 1 135 0
 481 01c2 2091 0000 		lds r18,num_waiting_msgs
 482 01c6 8D91      		ld r24,X+
 483 01c8 9D91      		ld r25,X+
 484 01ca 0D90      		ld __tmp_reg__,X+
 485 01cc BC91      		ld r27,X
 486 01ce A02D      		mov r26,__tmp_reg__
 487 01d0 529E      		mul r5,r18
 488 01d2 F001      		movw r30,r0
 489 01d4 1124      		clr __zero_reg__
 490 01d6 E050      		subi r30,lo8(-(msg_node))
 491 01d8 F040      		sbci r31,hi8(-(msg_node))
 492 01da 8083      		st Z,r24
 493 01dc 9183      		std Z+1,r25
 494 01de A283      		std Z+2,r26
 495 01e0 B383      		std Z+3,r27
 136:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].sender_ID = ir_rxtx[dir].sender_ID;
 496               		.loc 1 136 0
 497 01e2 E091 0000 		lds r30,num_waiting_msgs
 498 01e6 5E9E      		mul r5,r30
 499 01e8 F001      		movw r30,r0
 500 01ea 1124      		clr __zero_reg__
 501 01ec E050      		subi r30,lo8(-(msg_node))
 502 01ee F040      		sbci r31,hi8(-(msg_node))
 503 01f0 36A6      		std Z+46,r3
 137:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].msg_length = ir_rxtx[dir].data_length;
 504               		.loc 1 137 0
 505 01f2 E091 0000 		lds r30,num_waiting_msgs
 506 01f6 D801      		movw r26,r16
 507 01f8 1696      		adiw r26,6
 508 01fa 8D91      		ld r24,X+
 509 01fc 9C91      		ld r25,X
 510 01fe 1797      		sbiw r26,6+1
 511 0200 5E9E      		mul r5,r30
 512 0202 F001      		movw r30,r0
 513 0204 1124      		clr __zero_reg__
 514 0206 E050      		subi r30,lo8(-(msg_node))
 515 0208 F040      		sbci r31,hi8(-(msg_node))
 516 020a 8483      		std Z+4,r24
 517 020c 9583      		std Z+5,r25
 138:../src/ir_comm.c **** 					msg_node[num_waiting_msgs].wasTargeted = !!(ir_rxtx[dir].status&IR_STATUS_TARGETED_bm);
 518               		.loc 1 138 0
 519 020e E091 0000 		lds r30,num_waiting_msgs
 520 0212 D696      		adiw r26,54
 521 0214 8C91      		ld r24,X
 522 0216 D697      		sbiw r26,54
 523 0218 5E9E      		mul r5,r30
 524 021a F001      		movw r30,r0
 525 021c 1124      		clr __zero_reg__
 526 021e E050      		subi r30,lo8(-(msg_node))
 527 0220 F040      		sbci r31,hi8(-(msg_node))
 528 0222 87A7      		std Z+47,r24
 139:../src/ir_comm.c **** 					if(msg_node[num_waiting_msgs].msg_length > IR_BUFFER_SIZE){
 529               		.loc 1 139 0
 530 0224 E091 0000 		lds r30,num_waiting_msgs
 531 0228 D896      		adiw r26,56
 532 022a 8C91      		ld r24,X
 533 022c 8295      		swap r24
 534 022e 8170      		andi r24,1
 535 0230 5E9E      		mul r5,r30
 536 0232 F001      		movw r30,r0
 537 0234 1124      		clr __zero_reg__
 538 0236 E050      		subi r30,lo8(-(msg_node))
 539 0238 F040      		sbci r31,hi8(-(msg_node))
 540 023a 80AB      		std Z+48,r24
 140:../src/ir_comm.c **** 						printf_P(PSTR("ERROR! Message too long?\r\n"));
 541               		.loc 1 140 0
 542 023c E091 0000 		lds r30,num_waiting_msgs
 543 0240 5E9E      		mul r5,r30
 544 0242 F001      		movw r30,r0
 545 0244 1124      		clr __zero_reg__
 546 0246 E050      		subi r30,lo8(-(msg_node))
 547 0248 F040      		sbci r31,hi8(-(msg_node))
 548 024a 87A5      		ldd r24,Z+47
 549 024c 8932      		cpi r24,lo8(41)
 550 024e 00F4      		brsh .L27
 551               	.L10:
 143:../src/ir_comm.c **** 				}
 552               		.loc 1 143 0 discriminator 2
 553 0250 8091 0000 		lds r24,num_waiting_msgs
 554 0254 8F5F      		subi r24,lo8(-(1))
 555 0256 8093 0000 		sts num_waiting_msgs,r24
 556               	.LVL22:
 557               	.LBB198:
 558               	.LBB199:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 559               		.loc 2 70 0 discriminator 2
 560 025a 2FBE      		out __SREG__,r2
 561               		.loc 2 71 0 discriminator 2
 562               	.LVL23:
 563               	.LBE199:
 564               	.LBE198:
 565               	.LBE203:
 566               	.LBB204:
 567               	.LBB202:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 568               		.loc 1 31 0 discriminator 2
 569 025c 4E9C      		mul r4,r14
 570 025e F001      		movw r30,r0
 571 0260 4F9C      		mul r4,r15
 572 0262 F00D      		add r31,r0
 573 0264 1124      		clr __zero_reg__
 574 0266 E050      		subi r30,lo8(-(ir_rxtx))
 575 0268 F040      		sbci r31,hi8(-(ir_rxtx))
 576 026a 00C0      		rjmp .L22
 577               	.LVL24:
 578               	.L26:
 579               	.LBE202:
 580               	.LBE204:
 581               	.LBB205:
 131:../src/ir_comm.c **** 					}
 582               		.loc 1 131 0
 583 026c E0E0      		ldi r30,lo8(__c.5306)
 584 026e F0E0      		ldi r31,hi8(__c.5306)
 585 0270 FF93      		push r31
 586 0272 EF93      		push r30
 587 0274 0E94 0000 		call printf_P
 588               	.LVL25:
 589 0278 0F90      		pop __tmp_reg__
 590 027a 0F90      		pop __tmp_reg__
 591 027c 00C0      		rjmp .L9
 592               	.L27:
 141:../src/ir_comm.c **** 					}
 593               		.loc 1 141 0
 594 027e E0E0      		ldi r30,lo8(__c.5308)
 595 0280 F0E0      		ldi r31,hi8(__c.5308)
 596 0282 FF93      		push r31
 597 0284 EF93      		push r30
 598 0286 0E94 0000 		call printf_P
 599               	.LVL26:
 600 028a 0F90      		pop __tmp_reg__
 601 028c 0F90      		pop __tmp_reg__
 602 028e 00C0      		rjmp .L10
 603               	.LBE205:
 604               		.cfi_endproc
 605               	.LFE65:
 607               		.section	.text.handle_cmd_wrapper,"ax",@progbits
 608               	.global	handle_cmd_wrapper
 610               	handle_cmd_wrapper:
 611               	.LFB64:
  98:../src/ir_comm.c **** 	char local_msg_copy[cmd_length+1];	
 612               		.loc 1 98 0
 613               		.cfi_startproc
 614 0000 EF92      		push r14
 615               	.LCFI20:
 616               		.cfi_def_cfa_offset 4
 617               		.cfi_offset 14, -3
 618 0002 FF92      		push r15
 619               	.LCFI21:
 620               		.cfi_def_cfa_offset 5
 621               		.cfi_offset 15, -4
 622 0004 0F93      		push r16
 623               	.LCFI22:
 624               		.cfi_def_cfa_offset 6
 625               		.cfi_offset 16, -5
 626 0006 1F93      		push r17
 627               	.LCFI23:
 628               		.cfi_def_cfa_offset 7
 629               		.cfi_offset 17, -6
 630 0008 CF93      		push r28
 631               	.LCFI24:
 632               		.cfi_def_cfa_offset 8
 633               		.cfi_offset 28, -7
 634 000a DF93      		push r29
 635               	.LCFI25:
 636               		.cfi_def_cfa_offset 9
 637               		.cfi_offset 29, -8
 638 000c CDB7      		in r28,__SP_L__
 639 000e DEB7      		in r29,__SP_H__
 640               	.LCFI26:
 641               		.cfi_def_cfa_register 28
 642               	/* prologue: function */
 643               	/* frame size = 0 */
 644               	/* stack size = 6 */
 645               	.L__stack_usage = 6
 109:../src/ir_comm.c **** 
 646               		.loc 1 109 0
 647 0010 0DB7      		in r16,__SP_L__
 648 0012 1EB7      		in r17,__SP_H__
  99:../src/ir_comm.c **** 	uint16_t local_msg_len;
 649               		.loc 1 99 0
 650 0014 8091 0000 		lds r24,cmd_length
 651 0018 9091 0000 		lds r25,cmd_length+1
 652               	.LVL27:
 653 001c 0196      		adiw r24,1
 654               	.LVL28:
 655 001e 2DB7      		in r18,__SP_L__
 656 0020 3EB7      		in r19,__SP_H__
 657 0022 281B      		sub r18,r24
 658 0024 390B      		sbc r19,r25
 659 0026 2DBF      		out __SP_L__,r18
 660 0028 3EBF      		out __SP_H__,r19
 661 002a 8DB7      		in r24,__SP_L__
 662 002c 9EB7      		in r25,__SP_H__
 663               	.LVL29:
 664 002e 0196      		adiw r24,1
 665 0030 7C01      		movw r14,r24
 666               	.LVL30:
 103:../src/ir_comm.c **** 	local_msg_len = cmd_length;
 667               		.loc 1 103 0
 668 0032 4091 0000 		lds r20,cmd_length
 669 0036 5091 0000 		lds r21,cmd_length+1
 670 003a 4F5F      		subi r20,-1
 671 003c 5F4F      		sbci r21,-1
 672 003e 60E0      		ldi r22,lo8(cmd_buffer)
 673 0040 70E0      		ldi r23,hi8(cmd_buffer)
 674 0042 0E94 0000 		call memcpy
 675               	.LVL31:
 104:../src/ir_comm.c **** 	handle_serial_command(local_msg_copy, local_msg_len);
 676               		.loc 1 104 0
 677 0046 6091 0000 		lds r22,cmd_length
 678 004a 7091 0000 		lds r23,cmd_length+1
 679               	.LVL32:
 105:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 680               		.loc 1 105 0
 681 004e C701      		movw r24,r14
 682 0050 0E94 0000 		call handle_serial_command
 683               	.LVL33:
 684               	.LBB206:
 106:../src/ir_comm.c **** 		processing_cmd = 0;
 685               		.loc 1 106 0
 686 0054 8FB7      		in r24,__SREG__
 687               	.LVL34:
 688               	.LBB207:
 689               	.LBB208:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 690               		.loc 2 50 0
 691               	/* #APP */
 692               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 693 0056 F894      		cli
 694               	 ;  0 "" 2
 695               	.LVL35:
 696               	/* #NOAPP */
 697               	.LBE208:
 698               	.LBE207:
 107:../src/ir_comm.c **** 	}
 699               		.loc 1 107 0
 700 0058 1092 0000 		sts processing_cmd,__zero_reg__
 701               	.LVL36:
 702               	.LBB209:
 703               	.LBB210:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 704               		.loc 2 70 0
 705 005c 8FBF      		out __SREG__,r24
 706               		.loc 2 71 0
 707               	.LVL37:
 708               	.LBE210:
 709               	.LBE209:
 710               	.LBE206:
 109:../src/ir_comm.c **** 
 711               		.loc 1 109 0
 712 005e 0DBF      		out __SP_L__,r16
 713 0060 1EBF      		out __SP_H__,r17
 714               	/* epilogue start */
 715 0062 DF91      		pop r29
 716 0064 CF91      		pop r28
 717 0066 1F91      		pop r17
 718 0068 0F91      		pop r16
 719 006a FF90      		pop r15
 720 006c EF90      		pop r14
 721               	.LVL38:
 722 006e 0895      		ret
 723               		.cfi_endproc
 724               	.LFE64:
 726               		.section	.text.ir_transmit,"ax",@progbits
 728               	ir_transmit:
 729               	.LFB80:
 449:../src/ir_comm.c **** 	switch(ir_rxtx[dir].curr_pos){
 730               		.loc 1 449 0
 731               		.cfi_startproc
 732               	.LVL39:
 733 0000 0F93      		push r16
 734               	.LCFI27:
 735               		.cfi_def_cfa_offset 4
 736               		.cfi_offset 16, -3
 737 0002 1F93      		push r17
 738               	.LCFI28:
 739               		.cfi_def_cfa_offset 5
 740               		.cfi_offset 17, -4
 741 0004 CF93      		push r28
 742               	.LCFI29:
 743               		.cfi_def_cfa_offset 6
 744               		.cfi_offset 28, -5
 745 0006 DF93      		push r29
 746               	.LCFI30:
 747               		.cfi_def_cfa_offset 7
 748               		.cfi_offset 29, -6
 749               	/* prologue: function */
 750               	/* frame size = 0 */
 751               	/* stack size = 4 */
 752               	.L__stack_usage = 4
 753 0008 982F      		mov r25,r24
 450:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_LOW:  next_byte  = (uint8_t)(ir_rxtx[dir].sender_ID&0xFF);		break;
 754               		.loc 1 450 0
 755 000a C82F      		mov r28,r24
 756 000c D0E0      		ldi r29,0
 757 000e 89E3      		ldi r24,lo8(57)
 758               	.LVL40:
 759 0010 989F      		mul r25,r24
 760 0012 D001      		movw r26,r0
 761 0014 1124      		clr __zero_reg__
 762 0016 A050      		subi r26,lo8(-(ir_rxtx))
 763 0018 B040      		sbci r27,hi8(-(ir_rxtx))
 764 001a 1A96      		adiw r26,10
 765 001c ED91      		ld r30,X+
 766 001e FC91      		ld r31,X
 767 0020 1B97      		sbiw r26,10+1
 768 0022 E830      		cpi r30,8
 769 0024 F105      		cpc r31,__zero_reg__
 770 0026 00F4      		brsh .+2
 771 0028 00C0      		rjmp .L44
 473:../src/ir_comm.c **** 	}
 772               		.loc 1 473 0
 773 002a 1A96      		adiw r26,10
 774 002c 8D91      		ld r24,X+
 775 002e 9C91      		ld r25,X
 776 0030 1B97      		sbiw r26,10+1
 777 0032 0897      		sbiw r24,8
 778 0034 A80F      		add r26,r24
 779 0036 B91F      		adc r27,r25
 780 0038 1E96      		adiw r26,14
 781 003a 8C91      		ld r24,X
 782 003c 8093 0000 		sts next_byte,r24
 783               	.LVL41:
 784               	.L40:
 475:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos++;
 785               		.loc 1 475 0
 786 0040 FE01      		movw r30,r28
 787 0042 EE0F      		lsl r30
 788 0044 FF1F      		rol r31
 789 0046 E050      		subi r30,lo8(-(channel))
 790 0048 F040      		sbci r31,hi8(-(channel))
 791 004a A081      		ld r26,Z
 792 004c B181      		ldd r27,Z+1
 793 004e 8091 0000 		lds r24,next_byte
 794 0052 8C93      		st X,r24
 476:../src/ir_comm.c **** 	/* CHECK TO SEE IF MESSAGE IS COMPLETE */
 795               		.loc 1 476 0
 796 0054 89E3      		ldi r24,lo8(57)
 797 0056 8C9F      		mul r24,r28
 798 0058 F001      		movw r30,r0
 799 005a 8D9F      		mul r24,r29
 800 005c F00D      		add r31,r0
 801 005e 1124      		clr __zero_reg__
 802 0060 E050      		subi r30,lo8(-(ir_rxtx))
 803 0062 F040      		sbci r31,hi8(-(ir_rxtx))
 804 0064 8285      		ldd r24,Z+10
 805 0066 9385      		ldd r25,Z+11
 806 0068 0196      		adiw r24,1
 807 006a 8287      		std Z+10,r24
 808 006c 9387      		std Z+11,r25
 478:../src/ir_comm.c **** 		//printf("transmit of %hu-byte long message completed on dir %hu.\r\n\t", ir_rxtx[dir].data_lengt
 809               		.loc 1 478 0
 810 006e 2285      		ldd r18,Z+10
 811 0070 3385      		ldd r19,Z+11
 812 0072 86A9      		ldd r24,Z+54
 813 0074 90E0      		ldi r25,0
 814 0076 0896      		adiw r24,8
 815 0078 2817      		cp r18,r24
 816 007a 3907      		cpc r19,r25
 817 007c 00F0      		brlo .L29
 818               	.LVL42:
 819               	.LBB211:
 820               	.LBB212:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 821               		.loc 1 31 0
 822 007e 1482      		std Z+4,__zero_reg__
 823 0080 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 824               		.loc 1 32 0
 825 0082 1682      		std Z+6,__zero_reg__
 826 0084 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 827               		.loc 1 34 0
 828 0086 1086      		std Z+8,__zero_reg__
 829 0088 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 830               		.loc 1 35 0
 831 008a 1286      		std Z+10,__zero_reg__
 832 008c 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 833               		.loc 1 36 0
 834 008e 1486      		std Z+12,__zero_reg__
 835 0090 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 836               		.loc 1 37 0
 837 0092 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 838               		.loc 1 38 0
 839 0094 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 840               		.loc 1 40 0
 841 0096 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 842               		.loc 1 42 0
 843 0098 1496      		adiw r26,4
 844 009a 8C91      		ld r24,X
 845 009c 1497      		sbiw r26,4
 846 009e 8061      		ori r24,lo8(16)
 847 00a0 1496      		adiw r26,4
 848 00a2 8C93      		st X,r24
 849 00a4 1497      		sbiw r26,4
 850               	.LVL43:
 851               	.LBE212:
 852               	.LBE211:
 485:../src/ir_comm.c **** 		
 853               		.loc 1 485 0
 854 00a6 1396      		adiw r26,3
 855 00a8 8C91      		ld r24,X
 856 00aa 1397      		sbiw r26,3
 857 00ac 8C7F      		andi r24,lo8(-4)
 858 00ae 1396      		adiw r26,3
 859 00b0 8C93      		st X,r24
 860               	.L29:
 861               	/* epilogue start */
 489:../src/ir_comm.c **** //
 862               		.loc 1 489 0
 863 00b2 DF91      		pop r29
 864 00b4 CF91      		pop r28
 865               	.LVL44:
 866 00b6 1F91      		pop r17
 867 00b8 0F91      		pop r16
 868 00ba 0895      		ret
 869               	.LVL45:
 870               	.L44:
 450:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_LOW:  next_byte  = (uint8_t)(ir_rxtx[dir].sender_ID&0xFF);		break;
 871               		.loc 1 450 0
 872 00bc 8827      		clr r24
 873 00be E050      		subi r30,pm_lo8(-(.L32))
 874 00c0 F040      		sbci r31,pm_hi8(-(.L32))
 875 00c2 8040      		sbci r24,pm_hh8(-(.L32))
 876 00c4 0C94 0000 		jmp __tablejump2__
 877               		.section	.progmem.gcc_sw_table.ir_transmit,"a",@progbits
 878               		.p2align	1
 879               	.L32:
 880 0000 0000      		.word gs(.L31)
 881 0002 0000      		.word gs(.L33)
 882 0004 0000      		.word gs(.L34)
 883 0006 0000      		.word gs(.L35)
 884 0008 0000      		.word gs(.L36)
 885 000a 0000      		.word gs(.L37)
 886 000c 0000      		.word gs(.L38)
 887 000e 0000      		.word gs(.L39)
 888               		.section	.text.ir_transmit
 889               	.L38:
 459:../src/ir_comm.c **** 		case HEADER_POS_SOURCE_DIR:	
 890               		.loc 1 459 0
 891 00c8 89E3      		ldi r24,lo8(57)
 892 00ca 8C9F      		mul r24,r28
 893 00cc F001      		movw r30,r0
 894 00ce 8D9F      		mul r24,r29
 895 00d0 F00D      		add r31,r0
 896 00d2 1124      		clr __zero_reg__
 897 00d4 E050      		subi r30,lo8(-(ir_rxtx))
 898 00d6 F040      		sbci r31,hi8(-(ir_rxtx))
 899 00d8 8085      		ldd r24,Z+8
 900 00da 9185      		ldd r25,Z+9
 901 00dc 9093 0000 		sts next_byte,r25
 902 00e0 00C0      		rjmp .L40
 903               	.L39:
 461:../src/ir_comm.c **** 										next_byte  = INC_DIR_KEY|dir;								
 904               		.loc 1 461 0
 905 00e2 89E3      		ldi r24,lo8(57)
 906 00e4 8C9F      		mul r24,r28
 907 00e6 8001      		movw r16,r0
 908 00e8 8D9F      		mul r24,r29
 909 00ea 100D      		add r17,r0
 910 00ec 1124      		clr __zero_reg__
 911 00ee 0050      		subi r16,lo8(-(ir_rxtx))
 912 00f0 1040      		sbci r17,hi8(-(ir_rxtx))
 913 00f2 F801      		movw r30,r16
 914 00f4 80AD      		ldd r24,Z+56
 915 00f6 86FD      		sbrc r24,6
 916 00f8 00C0      		rjmp .L41
 462:../src/ir_comm.c **** 									}else{
 917               		.loc 1 462 0
 918 00fa 986F      		ori r25,lo8(-8)
 919               	.LVL46:
 920 00fc 9093 0000 		sts next_byte,r25
 921 0100 00C0      		rjmp .L40
 922               	.LVL47:
 923               	.L31:
 451:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_HIGH: next_byte  = (uint8_t)((ir_rxtx[dir].sender_ID>>8)&0xFF);	break;	
 924               		.loc 1 451 0
 925 0102 89E3      		ldi r24,lo8(57)
 926 0104 8C9F      		mul r24,r28
 927 0106 F001      		movw r30,r0
 928 0108 8D9F      		mul r24,r29
 929 010a F00D      		add r31,r0
 930 010c 1124      		clr __zero_reg__
 931 010e E050      		subi r30,lo8(-(ir_rxtx))
 932 0110 F040      		sbci r31,hi8(-(ir_rxtx))
 933 0112 8681      		ldd r24,Z+6
 934 0114 9781      		ldd r25,Z+7
 935 0116 8093 0000 		sts next_byte,r24
 936 011a 00C0      		rjmp .L40
 937               	.L33:
 452:../src/ir_comm.c **** 		case HEADER_POS_CRC_LOW:		next_byte  = (uint8_t)(ir_rxtx[dir].data_crc&0xFF);			break;
 938               		.loc 1 452 0
 939 011c 89E3      		ldi r24,lo8(57)
 940 011e 8C9F      		mul r24,r28
 941 0120 F001      		movw r30,r0
 942 0122 8D9F      		mul r24,r29
 943 0124 F00D      		add r31,r0
 944 0126 1124      		clr __zero_reg__
 945 0128 E050      		subi r30,lo8(-(ir_rxtx))
 946 012a F040      		sbci r31,hi8(-(ir_rxtx))
 947 012c 8681      		ldd r24,Z+6
 948 012e 9781      		ldd r25,Z+7
 949 0130 9093 0000 		sts next_byte,r25
 950 0134 00C0      		rjmp .L40
 951               	.L34:
 453:../src/ir_comm.c **** 		case HEADER_POS_CRC_HIGH:		next_byte  = (uint8_t)((ir_rxtx[dir].data_crc>>8)&0xFF);	break;	
 952               		.loc 1 453 0
 953 0136 89E3      		ldi r24,lo8(57)
 954 0138 8C9F      		mul r24,r28
 955 013a F001      		movw r30,r0
 956 013c 8D9F      		mul r24,r29
 957 013e F00D      		add r31,r0
 958 0140 1124      		clr __zero_reg__
 959 0142 E050      		subi r30,lo8(-(ir_rxtx))
 960 0144 F040      		sbci r31,hi8(-(ir_rxtx))
 961 0146 8481      		ldd r24,Z+4
 962 0148 9581      		ldd r25,Z+5
 963 014a 8093 0000 		sts next_byte,r24
 964 014e 00C0      		rjmp .L40
 965               	.L35:
 454:../src/ir_comm.c **** 		case HEADER_POS_MSG_LENGTH:		next_byte  = ir_rxtx[dir].data_length & DATA_LEN_VAL_bm;
 966               		.loc 1 454 0
 967 0150 89E3      		ldi r24,lo8(57)
 968 0152 8C9F      		mul r24,r28
 969 0154 F001      		movw r30,r0
 970 0156 8D9F      		mul r24,r29
 971 0158 F00D      		add r31,r0
 972 015a 1124      		clr __zero_reg__
 973 015c E050      		subi r30,lo8(-(ir_rxtx))
 974 015e F040      		sbci r31,hi8(-(ir_rxtx))
 975 0160 8481      		ldd r24,Z+4
 976 0162 9581      		ldd r25,Z+5
 977 0164 9093 0000 		sts next_byte,r25
 978 0168 00C0      		rjmp .L40
 979               	.L36:
 455:../src/ir_comm.c **** 										next_byte |= (ir_rxtx[dir].status & IR_STATUS_COMMAND_bm);
 980               		.loc 1 455 0
 981 016a 89E3      		ldi r24,lo8(57)
 982 016c 8C9F      		mul r24,r28
 983 016e F001      		movw r30,r0
 984 0170 8D9F      		mul r24,r29
 985 0172 F00D      		add r31,r0
 986 0174 1124      		clr __zero_reg__
 987 0176 E050      		subi r30,lo8(-(ir_rxtx))
 988 0178 F040      		sbci r31,hi8(-(ir_rxtx))
 989 017a 86A9      		ldd r24,Z+54
 990 017c 8F73      		andi r24,lo8(63)
 991 017e 8093 0000 		sts next_byte,r24
 456:../src/ir_comm.c **** 										next_byte |= (ir_rxtx[dir].status & IR_STATUS_TIMED_bm); break;
 992               		.loc 1 456 0
 993 0182 80AD      		ldd r24,Z+56
 994 0184 9091 0000 		lds r25,next_byte
 995               	.LVL48:
 996 0188 8078      		andi r24,lo8(-128)
 997 018a 892B      		or r24,r25
 998 018c 8093 0000 		sts next_byte,r24
 457:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_LOW:	next_byte  = (uint8_t)(ir_rxtx[dir].target_ID&0xFF);		break;
 999               		.loc 1 457 0
 1000 0190 80AD      		ldd r24,Z+56
 1001 0192 9091 0000 		lds r25,next_byte
 1002 0196 8074      		andi r24,lo8(64)
 1003 0198 892B      		or r24,r25
 1004 019a 8093 0000 		sts next_byte,r24
 1005 019e 00C0      		rjmp .L40
 1006               	.LVL49:
 1007               	.L37:
 458:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_HIGH:	next_byte  = (uint8_t)((ir_rxtx[dir].target_ID>>8)&0xFF);	break;
 1008               		.loc 1 458 0
 1009 01a0 89E3      		ldi r24,lo8(57)
 1010 01a2 8C9F      		mul r24,r28
 1011 01a4 F001      		movw r30,r0
 1012 01a6 8D9F      		mul r24,r29
 1013 01a8 F00D      		add r31,r0
 1014 01aa 1124      		clr __zero_reg__
 1015 01ac E050      		subi r30,lo8(-(ir_rxtx))
 1016 01ae F040      		sbci r31,hi8(-(ir_rxtx))
 1017 01b0 8085      		ldd r24,Z+8
 1018 01b2 9185      		ldd r25,Z+9
 1019 01b4 8093 0000 		sts next_byte,r24
 1020 01b8 00C0      		rjmp .L40
 1021               	.L41:
 1022               	.LBB213:
 464:../src/ir_comm.c **** 										//if(dir==0||dir==5) printf("(%hu) T: %u\r\n",dir, diff);
 1023               		.loc 1 464 0
 1024 01ba 0E94 0000 		call get_time
 1025               	.LVL50:
 1026 01be F801      		movw r30,r16
 1027 01c0 2085      		ldd r18,Z+8
 1028 01c2 3185      		ldd r19,Z+9
 1029 01c4 621B      		sub r22,r18
 1030 01c6 730B      		sbc r23,r19
 1031               	.LVL51:
 466:../src/ir_comm.c **** 											next_byte = (uint8_t)diff;
 1032               		.loc 1 466 0
 1033 01c8 6F3F      		cpi r22,-1
 1034 01ca 7105      		cpc r23,__zero_reg__
 1035 01cc 00F4      		brsh .L42
 467:../src/ir_comm.c **** 										}else{
 1036               		.loc 1 467 0
 1037 01ce 6093 0000 		sts next_byte,r22
 1038 01d2 00C0      		rjmp .L40
 1039               	.L42:
 469:../src/ir_comm.c **** 										}
 1040               		.loc 1 469 0
 1041 01d4 8FEF      		ldi r24,lo8(-1)
 1042 01d6 8093 0000 		sts next_byte,r24
 1043 01da 00C0      		rjmp .L40
 1044               	.LBE213:
 1045               		.cfi_endproc
 1046               	.LFE80:
 1048               	.global	__floatsisf
 1049               	.global	__mulsf3
 1050               	.global	__fixunssfsi
 1051               		.section	.rodata.str1.1,"aMS",@progbits,1
 1052               	.LC0:
 1053 0000 2568 7520 		.string	"%hu %04X\r\n"
 1053      2530 3458 
 1053      0D0A 00
 1054               		.section	.text.ir_receive,"ax",@progbits
 1056               	ir_receive:
 1057               	.LFB76:
 289:../src/ir_comm.c **** 	uint8_t in_byte = channel[dir]->DATA;				// Some data just came in
 1058               		.loc 1 289 0
 1059               		.cfi_startproc
 1060               	.LVL52:
 1061 0000 4F92      		push r4
 1062               	.LCFI31:
 1063               		.cfi_def_cfa_offset 4
 1064               		.cfi_offset 4, -3
 1065 0002 5F92      		push r5
 1066               	.LCFI32:
 1067               		.cfi_def_cfa_offset 5
 1068               		.cfi_offset 5, -4
 1069 0004 6F92      		push r6
 1070               	.LCFI33:
 1071               		.cfi_def_cfa_offset 6
 1072               		.cfi_offset 6, -5
 1073 0006 7F92      		push r7
 1074               	.LCFI34:
 1075               		.cfi_def_cfa_offset 7
 1076               		.cfi_offset 7, -6
 1077 0008 AF92      		push r10
 1078               	.LCFI35:
 1079               		.cfi_def_cfa_offset 8
 1080               		.cfi_offset 10, -7
 1081 000a BF92      		push r11
 1082               	.LCFI36:
 1083               		.cfi_def_cfa_offset 9
 1084               		.cfi_offset 11, -8
 1085 000c CF92      		push r12
 1086               	.LCFI37:
 1087               		.cfi_def_cfa_offset 10
 1088               		.cfi_offset 12, -9
 1089 000e DF92      		push r13
 1090               	.LCFI38:
 1091               		.cfi_def_cfa_offset 11
 1092               		.cfi_offset 13, -10
 1093 0010 EF92      		push r14
 1094               	.LCFI39:
 1095               		.cfi_def_cfa_offset 12
 1096               		.cfi_offset 14, -11
 1097 0012 FF92      		push r15
 1098               	.LCFI40:
 1099               		.cfi_def_cfa_offset 13
 1100               		.cfi_offset 15, -12
 1101 0014 0F93      		push r16
 1102               	.LCFI41:
 1103               		.cfi_def_cfa_offset 14
 1104               		.cfi_offset 16, -13
 1105 0016 1F93      		push r17
 1106               	.LCFI42:
 1107               		.cfi_def_cfa_offset 15
 1108               		.cfi_offset 17, -14
 1109 0018 CF93      		push r28
 1110               	.LCFI43:
 1111               		.cfi_def_cfa_offset 16
 1112               		.cfi_offset 28, -15
 1113 001a DF93      		push r29
 1114               	.LCFI44:
 1115               		.cfi_def_cfa_offset 17
 1116               		.cfi_offset 29, -16
 1117               	/* prologue: function */
 1118               	/* frame size = 0 */
 1119               	/* stack size = 14 */
 1120               	.L__stack_usage = 14
 1121 001c F82E      		mov r15,r24
 290:../src/ir_comm.c **** 	#ifdef AUDIO_DROPLET
 1122               		.loc 1 290 0
 1123 001e C82F      		mov r28,r24
 1124 0020 D0E0      		ldi r29,0
 1125 0022 8E01      		movw r16,r28
 1126 0024 000F      		lsl r16
 1127 0026 111F      		rol r17
 1128               	.LVL53:
 1129 0028 9801      		movw r18,r16
 1130 002a 2050      		subi r18,lo8(-(channel))
 1131 002c 3040      		sbci r19,hi8(-(channel))
 1132 002e 6901      		movw r12,r18
 1133 0030 D901      		movw r26,r18
 1134 0032 ED91      		ld r30,X+
 1135 0034 FC91      		ld r31,X
 1136 0036 E080      		ld r14,Z
 1137               	.LVL54:
 295:../src/ir_comm.c **** 	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clear_ir_buffer(dir);	
 1138               		.loc 1 295 0
 1139 0038 0E94 0000 		call get_time
 1140               	.LVL55:
 296:../src/ir_comm.c **** 	ir_rxtx[dir].last_byte = now;
 1141               		.loc 1 296 0
 1142 003c 29E3      		ldi r18,lo8(57)
 1143 003e 2C9F      		mul r18,r28
 1144 0040 F001      		movw r30,r0
 1145 0042 2D9F      		mul r18,r29
 1146 0044 F00D      		add r31,r0
 1147 0046 1124      		clr __zero_reg__
 1148 0048 E050      		subi r30,lo8(-(ir_rxtx))
 1149 004a F040      		sbci r31,hi8(-(ir_rxtx))
 1150 004c 4080      		ld r4,Z
 1151 004e 5180      		ldd r5,Z+1
 1152 0050 6280      		ldd r6,Z+2
 1153 0052 7380      		ldd r7,Z+3
 1154 0054 9B01      		movw r18,r22
 1155 0056 AC01      		movw r20,r24
 1156 0058 2419      		sub r18,r4
 1157 005a 3509      		sbc r19,r5
 1158 005c 4609      		sbc r20,r6
 1159 005e 5709      		sbc r21,r7
 1160 0060 2901      		movw r4,r18
 1161 0062 3A01      		movw r6,r20
 1162 0064 31E1      		ldi r19,17
 1163 0066 4316      		cp r4,r19
 1164 0068 5104      		cpc r5,__zero_reg__
 1165 006a 6104      		cpc r6,__zero_reg__
 1166 006c 7104      		cpc r7,__zero_reg__
 1167 006e 00F0      		brlo .L46
 1168               	.LVL56:
 1169               	.LBB291:
 1170               	.LBB292:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 1171               		.loc 1 31 0
 1172 0070 1482      		std Z+4,__zero_reg__
 1173 0072 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 1174               		.loc 1 32 0
 1175 0074 1682      		std Z+6,__zero_reg__
 1176 0076 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 1177               		.loc 1 34 0
 1178 0078 1086      		std Z+8,__zero_reg__
 1179 007a 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 1180               		.loc 1 35 0
 1181 007c 1286      		std Z+10,__zero_reg__
 1182 007e 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 1183               		.loc 1 36 0
 1184 0080 1486      		std Z+12,__zero_reg__
 1185 0082 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 1186               		.loc 1 37 0
 1187 0084 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 1188               		.loc 1 38 0
 1189 0086 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 1190               		.loc 1 40 0
 1191 0088 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 1192               		.loc 1 42 0
 1193 008a D601      		movw r26,r12
 1194 008c ED91      		ld r30,X+
 1195 008e FC91      		ld r31,X
 1196 0090 2481      		ldd r18,Z+4
 1197 0092 2061      		ori r18,lo8(16)
 1198 0094 2483      		std Z+4,r18
 1199               	.LVL57:
 1200               	.L46:
 1201               	.LBE292:
 1202               	.LBE291:
 297:../src/ir_comm.c **** 	#ifdef HARDCORE_DEBUG_DIR
 1203               		.loc 1 297 0
 1204 0096 29E3      		ldi r18,lo8(57)
 1205 0098 2C9F      		mul r18,r28
 1206 009a D001      		movw r26,r0
 1207 009c 2D9F      		mul r18,r29
 1208 009e B00D      		add r27,r0
 1209 00a0 1124      		clr __zero_reg__
 1210 00a2 A050      		subi r26,lo8(-(ir_rxtx))
 1211 00a4 B040      		sbci r27,hi8(-(ir_rxtx))
 1212 00a6 6D93      		st X+,r22
 1213 00a8 7D93      		st X+,r23
 1214 00aa 8D93      		st X+,r24
 1215 00ac 9C93      		st X,r25
 1216 00ae 1397      		sbiw r26,3
 301:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].sender_ID		= (uint16_t)in_byte;		break;
 1217               		.loc 1 301 0
 1218 00b0 1A96      		adiw r26,10
 1219 00b2 ED91      		ld r30,X+
 1220 00b4 FC91      		ld r31,X
 1221 00b6 1B97      		sbiw r26,10+1
 1222 00b8 E830      		cpi r30,8
 1223 00ba F105      		cpc r31,__zero_reg__
 1224 00bc 00F4      		brsh .+2
 1225 00be 00C0      		rjmp .L119
 319:../src/ir_comm.c **** 			ir_rxtx[dir].calc_crc = _crc16_update(ir_rxtx[dir].calc_crc, in_byte);
 1226               		.loc 1 319 0
 1227 00c0 1A96      		adiw r26,10
 1228 00c2 ED91      		ld r30,X+
 1229 00c4 FC91      		ld r31,X
 1230 00c6 1B97      		sbiw r26,10+1
 1231 00c8 3897      		sbiw r30,8
 1232 00ca EA0F      		add r30,r26
 1233 00cc FB1F      		adc r31,r27
 1234 00ce E686      		std Z+14,r14
 320:../src/ir_comm.c **** 	}
 1235               		.loc 1 320 0
 1236 00d0 1C96      		adiw r26,12
 1237 00d2 8D91      		ld r24,X+
 1238 00d4 9C91      		ld r25,X
 1239 00d6 1D97      		sbiw r26,12+1
 1240               	.LVL58:
 1241               	.LBB293:
 1242               	.LBB294:
 1243               		.file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** /* Copyright (c) 2002, 2003, 2004  Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    Copyright (c) 2005, 2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    Copyright (c) 2013 Dave Hylands
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    Copyright (c) 2013 Frederic Nadeau
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    All rights reserved.
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    Redistribution and use in source and binary forms, with or without
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    modification, are permitted provided that the following conditions are met:
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    * Redistributions of source code must retain the above copyright
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****      notice, this list of conditions and the following disclaimer.
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    * Redistributions in binary form must reproduce the above copyright
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****      notice, this list of conditions and the following disclaimer in
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****      the documentation and/or other materials provided with the
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****      distribution.
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****    * Neither the name of the copyright holders nor the names of
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****      contributors may be used to endorse or promote products derived
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****      from this software without specific prior written permission.
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****   POSSIBILITY OF SUCH DAMAGE. */
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** /* $Id$ */
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** #ifndef _UTIL_CRC16_H_
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** #define _UTIL_CRC16_H_
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** #include <stdint.h>
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** /** \file */
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** /** \defgroup util_crc <util/crc16.h>: CRC Computations
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \code#include <util/crc16.h>\endcode
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     This header file provides a optimized inline functions for calculating
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     cyclic redundancy checks (CRC) using common polynomials.
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \par References:
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \par
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     See the Dallas Semiconductor app note 27 for 8051 assembler example and
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     general CRC optimization suggestions. The table on the last page of the
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     app note is the key to understanding these implementations.
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \par
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     Jack Crenshaw's "Implementing CRCs" article in the January 1992 isue of \e
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     Embedded \e Systems \e Programming. This may be difficult to find, but it
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     explains CRC's in very clear and concise terms. Well worth the effort to
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     obtain a copy.
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     A typical application would look like:
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \code
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     // Dallas iButton test vector.
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     uint8_t serno[] = { 0x02, 0x1c, 0xb8, 0x01, 0, 0, 0, 0xa2 };
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     int
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     checkcrc(void)
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     {
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	uint8_t crc = 0, i;
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	for (i = 0; i < sizeof serno / sizeof serno[0]; i++)
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	    crc = _crc_ibutton_update(crc, serno[i]);
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	return crc; // must be 0
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     }
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \endcode
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** */
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** /** \ingroup util_crc
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     Optimized CRC-16 calculation.
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     Polynomial: x^16 + x^15 + x^2 + 1 (0xa001)<br>
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     Initial value: 0xffff
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     This CRC is normally used in disk-drive controllers.
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     The following is the equivalent functionality written in C.
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \code
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     uint16_t
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     crc16_update(uint16_t crc, uint8_t a)
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     {
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	int i;
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	crc ^= a;
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	for (i = 0; i < 8; ++i)
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	{
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	    if (crc & 1)
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 		crc = (crc >> 1) ^ 0xA001;
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	    else
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 		crc = (crc >> 1);
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	}
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	return crc;
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     }
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h ****     \endcode */
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** static __inline__ uint16_t
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** _crc16_update(uint16_t __crc, uint8_t __data)
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** {
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	uint8_t __tmp;
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	uint16_t __ret;
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\crc16.h **** 	__asm__ __volatile__ (
 1244               		.loc 3 118 0
 1245               	/* #APP */
 1246               	 ;  118 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util
 1247 00d8 8E25      		eor r24,r14
 1248 00da 282F      		mov r18,r24
 1249 00dc 2295      		swap r18
 1250 00de 2827      		eor r18,r24
 1251 00e0 022E      		mov __tmp_reg__,r18
 1252 00e2 2695      		lsr r18
 1253 00e4 2695      		lsr r18
 1254 00e6 2025      		eor r18,__tmp_reg__
 1255 00e8 022E      		mov __tmp_reg__,r18
 1256 00ea 2695      		lsr r18
 1257 00ec 2025      		eor r18,__tmp_reg__
 1258 00ee 2770      		andi r18,0x07
 1259 00f0 082E      		mov __tmp_reg__,r24
 1260 00f2 892F      		mov r24,r25
 1261 00f4 2695      		lsr r18
 1262 00f6 0794      		ror __tmp_reg__
 1263 00f8 2795      		ror r18
 1264 00fa 902D      		mov r25,__tmp_reg__
 1265 00fc 8227      		eor r24,r18
 1266 00fe 0694      		lsr __tmp_reg__
 1267 0100 2795      		ror r18
 1268 0102 9025      		eor r25,__tmp_reg__
 1269 0104 8227      		eor r24,r18
 1270               	 ;  0 "" 2
 1271               	.LVL59:
 1272               	/* #NOAPP */
 1273               	.LBE294:
 1274               	.LBE293:
 320:../src/ir_comm.c **** 	}
 1275               		.loc 1 320 0
 1276 0106 1C96      		adiw r26,12
 1277 0108 8D93      		st X+,r24
 1278 010a 9C93      		st X,r25
 1279 010c 1D97      		sbiw r26,12+1
 1280               	.L57:
 322:../src/ir_comm.c **** 	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
 1281               		.loc 1 322 0
 1282 010e 89E3      		ldi r24,lo8(57)
 1283 0110 8C9F      		mul r24,r28
 1284 0112 F001      		movw r30,r0
 1285 0114 8D9F      		mul r24,r29
 1286 0116 F00D      		add r31,r0
 1287 0118 1124      		clr __zero_reg__
 1288 011a E050      		subi r30,lo8(-(ir_rxtx))
 1289 011c F040      		sbci r31,hi8(-(ir_rxtx))
 1290 011e 8285      		ldd r24,Z+10
 1291 0120 9385      		ldd r25,Z+11
 1292 0122 0196      		adiw r24,1
 1293 0124 8287      		std Z+10,r24
 1294 0126 9387      		std Z+11,r25
 323:../src/ir_comm.c **** 		ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
 1295               		.loc 1 323 0
 1296 0128 2285      		ldd r18,Z+10
 1297 012a 3385      		ldd r19,Z+11
 1298 012c 86A9      		ldd r24,Z+54
 1299 012e 90E0      		ldi r25,0
 1300 0130 0896      		adiw r24,8
 1301 0132 2817      		cp r18,r24
 1302 0134 3907      		cpc r19,r25
 1303 0136 00F4      		brsh .+2
 1304 0138 00C0      		rjmp .L45
 1305               	.LBB295:
 324:../src/ir_comm.c **** 		//pre checks.
 1306               		.loc 1 324 0
 1307 013a 8085      		ldd r24,Z+8
 1308 013c 9185      		ldd r25,Z+9
 1309 013e 892B      		or r24,r25
 1310 0140 01F0      		breq .+2
 1311 0142 00C0      		rjmp .L120
 1312 0144 80E0      		ldi r24,0
 1313               	.L60:
 324:../src/ir_comm.c **** 		//pre checks.
 1314               		.loc 1 324 0 is_stmt 0 discriminator 4
 1315 0146 99E3      		ldi r25,lo8(57)
 1316 0148 9C9F      		mul r25,r28
 1317 014a F001      		movw r30,r0
 1318 014c 9D9F      		mul r25,r29
 1319 014e F00D      		add r31,r0
 1320 0150 1124      		clr __zero_reg__
 1321 0152 E050      		subi r30,lo8(-(ir_rxtx))
 1322 0154 F040      		sbci r31,hi8(-(ir_rxtx))
 1323 0156 90AD      		ldd r25,Z+56
 1324 0158 892B      		or r24,r25
 1325 015a 80AF      		std Z+56,r24
 326:../src/ir_comm.c **** 		const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
 1326               		.loc 1 326 0 is_stmt 1 discriminator 4
 1327 015c 2485      		ldd r18,Z+12
 1328 015e 3585      		ldd r19,Z+13
 1329 0160 8481      		ldd r24,Z+4
 1330 0162 9581      		ldd r25,Z+5
 1331               	.LVL60:
 327:../src/ir_comm.c **** 		const uint8_t selfSender  = ir_rxtx[dir].sender_ID == get_droplet_id();
 1332               		.loc 1 327 0 discriminator 4
 1333 0164 6485      		ldd r22,Z+12
 1334 0166 7585      		ldd r23,Z+13
 1335               	.LVL61:
 328:../src/ir_comm.c **** 		const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
 1336               		.loc 1 328 0 discriminator 4
 1337 0168 4680      		ldd r4,Z+6
 1338 016a 5780      		ldd r5,Z+7
 1339               	.LBB296:
 1340               	.LBB297:
 1341               		.file 4 "../include/droplet_base.h"
   1:../include/droplet_base.h **** #pragma once
   2:../include/droplet_base.h **** 
   3:../include/droplet_base.h **** //#define AUDIO_DROPLET
   4:../include/droplet_base.h **** #define SYNCHRONIZED
   5:../include/droplet_base.h **** 
   6:../include/droplet_base.h **** #include <avr/io.h>
   7:../include/droplet_base.h **** #include <avr/interrupt.h>
   8:../include/droplet_base.h **** #include <util/atomic.h>
   9:../include/droplet_base.h **** #include <util/delay.h>
  10:../include/droplet_base.h **** #include <util/crc16.h>
  11:../include/droplet_base.h **** #include <stdlib.h>
  12:../include/droplet_base.h **** #include <stdio.h>
  13:../include/droplet_base.h **** #include <avr/pgmspace.h>
  14:../include/droplet_base.h **** #include <string.h>
  15:../include/droplet_base.h **** 
  16:../include/droplet_base.h **** typedef uint16_t id_t;
  17:../include/droplet_base.h **** 
  18:../include/droplet_base.h **** //Any #defines needed by other Droplet files
  19:../include/droplet_base.h **** #define DIR0		((uint8_t)0x01)
  20:../include/droplet_base.h **** #define DIR1		((uint8_t)0x02)
  21:../include/droplet_base.h **** #define DIR2		((uint8_t)0x04)
  22:../include/droplet_base.h **** #define DIR3		((uint8_t)0x08)
  23:../include/droplet_base.h **** #define DIR4		((uint8_t)0x10)
  24:../include/droplet_base.h **** #define DIR5		((uint8_t)0x20)
  25:../include/droplet_base.h **** #define ALL_DIRS	((uint8_t)0x3F)
  26:../include/droplet_base.h **** 
  27:../include/droplet_base.h **** #define DIR_NE		DIR0
  28:../include/droplet_base.h **** #define DIR_E		DIR1
  29:../include/droplet_base.h **** #define DIR_SE		DIR2
  30:../include/droplet_base.h **** #define DIR_SW		DIR3
  31:../include/droplet_base.h **** #define DIR_W		DIR4
  32:../include/droplet_base.h **** #define DIR_NW		DIR5
  33:../include/droplet_base.h **** 
  34:../include/droplet_base.h **** id_t droplet_ID;
  35:../include/droplet_base.h **** volatile uint16_t rtc_epoch;
  36:../include/droplet_base.h **** 
  37:../include/droplet_base.h **** // Returns the number of ms elapsed since the last reset. (Defined in droplet_base_asm.s)
  38:../include/droplet_base.h **** uint32_t get_time(void);
  39:../include/droplet_base.h **** 
  40:../include/droplet_base.h **** // Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
  41:../include/droplet_base.h **** inline id_t get_droplet_id(void){ 
  42:../include/droplet_base.h **** 	return droplet_ID;
 1342               		.loc 4 42 0 discriminator 4
 1343 016c 4091 0000 		lds r20,droplet_ID
 1344 0170 5091 0000 		lds r21,droplet_ID+1
 1345               	.LVL62:
 1346               	.LBE297:
 1347               	.LBE296:
 329:../src/ir_comm.c **** 		const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=get_dr
 1348               		.loc 1 329 0 discriminator 4
 1349 0174 E0AC      		ldd r14,Z+56
 1350               	.LVL63:
 330:../src/ir_comm.c **** 		const uint8_t incDirErr	= 0;//(notTimed && (ir_rxtx[dir].inc_dir&INC_DIR_KEY)!=INC_DIR_KEY);
 1351               		.loc 1 330 0 discriminator 4
 1352 0176 BE2D      		mov r27,r14
 1353 0178 B074      		andi r27,lo8(64)
 1354 017a 7B2E      		mov r7,r27
 1355 017c E6FC      		sbrc r14,6
 1356 017e 00C0      		rjmp .L90
 330:../src/ir_comm.c **** 		const uint8_t incDirErr	= 0;//(notTimed && (ir_rxtx[dir].inc_dir&INC_DIR_KEY)!=INC_DIR_KEY);
 1357               		.loc 1 330 0 is_stmt 0 discriminator 1
 1358 0180 C084      		ldd r12,Z+8
 1359 0182 D184      		ldd r13,Z+9
 1360 0184 CD28      		or r12,r13
 1361 0186 01F4      		brne .L121
 1362               	.L90:
 1363 0188 E0E0      		ldi r30,0
 1364               	.LVL64:
 332:../src/ir_comm.c **** 			if(notTimed){
 1365               		.loc 1 332 0 is_stmt 1
 1366 018a 2817      		cp r18,r24
 1367 018c 3907      		cpc r19,r25
 1368 018e 01F0      		breq .L122
 1369               	.L63:
 1370               	.LVL65:
 1371               	.LBB298:
 1372               	.LBB299:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 1373               		.loc 1 31 0
 1374 0190 89E3      		ldi r24,lo8(57)
 1375               	.LVL66:
 1376 0192 8C9F      		mul r24,r28
 1377 0194 F001      		movw r30,r0
 1378 0196 8D9F      		mul r24,r29
 1379 0198 F00D      		add r31,r0
 1380 019a 1124      		clr __zero_reg__
 1381 019c E050      		subi r30,lo8(-(ir_rxtx))
 1382 019e F040      		sbci r31,hi8(-(ir_rxtx))
 1383 01a0 1482      		std Z+4,__zero_reg__
 1384 01a2 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 1385               		.loc 1 32 0
 1386 01a4 1682      		std Z+6,__zero_reg__
 1387 01a6 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 1388               		.loc 1 34 0
 1389 01a8 1086      		std Z+8,__zero_reg__
 1390 01aa 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 1391               		.loc 1 35 0
 1392 01ac 1286      		std Z+10,__zero_reg__
 1393 01ae 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 1394               		.loc 1 36 0
 1395 01b0 1486      		std Z+12,__zero_reg__
 1396 01b2 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 1397               		.loc 1 37 0
 1398 01b4 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 1399               		.loc 1 38 0
 1400 01b6 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 1401               		.loc 1 40 0
 1402 01b8 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 1403               		.loc 1 42 0
 1404 01ba F801      		movw r30,r16
 1405 01bc E050      		subi r30,lo8(-(channel))
 1406 01be F040      		sbci r31,hi8(-(channel))
 1407 01c0 0190      		ld __tmp_reg__,Z+
 1408 01c2 F081      		ld r31,Z
 1409 01c4 E02D      		mov r30,__tmp_reg__
 1410 01c6 8481      		ldd r24,Z+4
 1411 01c8 8061      		ori r24,lo8(16)
 1412 01ca 8483      		std Z+4,r24
 1413               	.LVL67:
 1414               	.L45:
 1415               	/* epilogue start */
 1416               	.LBE299:
 1417               	.LBE298:
 1418               	.LBE295:
 358:../src/ir_comm.c **** 
 1419               		.loc 1 358 0
 1420 01cc DF91      		pop r29
 1421 01ce CF91      		pop r28
 1422 01d0 1F91      		pop r17
 1423 01d2 0F91      		pop r16
 1424 01d4 FF90      		pop r15
 1425               	.LVL68:
 1426 01d6 EF90      		pop r14
 1427 01d8 DF90      		pop r13
 1428 01da CF90      		pop r12
 1429 01dc BF90      		pop r11
 1430 01de AF90      		pop r10
 1431 01e0 7F90      		pop r7
 1432 01e2 6F90      		pop r6
 1433 01e4 5F90      		pop r5
 1434 01e6 4F90      		pop r4
 1435 01e8 0895      		ret
 1436               	.LVL69:
 1437               	.L119:
 301:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].sender_ID		= (uint16_t)in_byte;		break;
 1438               		.loc 1 301 0
 1439 01ea 8827      		clr r24
 1440 01ec E050      		subi r30,pm_lo8(-(.L49))
 1441 01ee F040      		sbci r31,pm_hi8(-(.L49))
 1442 01f0 8040      		sbci r24,pm_hh8(-(.L49))
 1443 01f2 0C94 0000 		jmp __tablejump2__
 1444               		.section	.progmem.gcc_sw_table.ir_receive,"a",@progbits
 1445               		.p2align	1
 1446               	.L49:
 1447 0000 0000      		.word gs(.L48)
 1448 0002 0000      		.word gs(.L50)
 1449 0004 0000      		.word gs(.L51)
 1450 0006 0000      		.word gs(.L52)
 1451 0008 0000      		.word gs(.L53)
 1452 000a 0000      		.word gs(.L54)
 1453 000c 0000      		.word gs(.L55)
 1454 000e 0000      		.word gs(.L56)
 1455               		.section	.text.ir_receive
 1456               	.L120:
 1457               	.LBB385:
 324:../src/ir_comm.c **** 		//pre checks.
 1458               		.loc 1 324 0
 1459 01f6 80E1      		ldi r24,lo8(16)
 1460 01f8 00C0      		rjmp .L60
 1461               	.LVL70:
 1462               	.L121:
 330:../src/ir_comm.c **** 		const uint8_t incDirErr	= 0;//(notTimed && (ir_rxtx[dir].inc_dir&INC_DIR_KEY)!=INC_DIR_KEY);
 1463               		.loc 1 330 0 discriminator 3
 1464 01fa C084      		ldd r12,Z+8
 1465 01fc D184      		ldd r13,Z+9
 1466 01fe E1E0      		ldi r30,lo8(1)
 1467 0200 C416      		cp r12,r20
 1468 0202 D506      		cpc r13,r21
 1469 0204 01F0      		breq .L90
 1470               	.LVL71:
 332:../src/ir_comm.c **** 			if(notTimed){
 1471               		.loc 1 332 0
 1472 0206 2817      		cp r18,r24
 1473 0208 3907      		cpc r19,r25
 1474 020a 01F4      		brne .L63
 1475               	.L122:
 332:../src/ir_comm.c **** 			if(notTimed){
 1476               		.loc 1 332 0 is_stmt 0 discriminator 1
 1477 020c 672B      		or r22,r23
 1478 020e 01F4      		brne .+2
 1479 0210 00C0      		rjmp .L63
 332:../src/ir_comm.c **** 			if(notTimed){
 1480               		.loc 1 332 0 discriminator 2
 1481 0212 4416      		cp r4,r20
 1482 0214 5506      		cpc r5,r21
 1483 0216 01F4      		brne .+2
 1484 0218 00C0      		rjmp .L63
 332:../src/ir_comm.c **** 			if(notTimed){
 1485               		.loc 1 332 0 discriminator 3
 1486 021a E111      		cpse r30,__zero_reg__
 1487 021c 00C0      		rjmp .L63
 334:../src/ir_comm.c **** 			}
 1488               		.loc 1 334 0 is_stmt 1
 1489 021e 89E3      		ldi r24,lo8(57)
 1490               	.LVL72:
 333:../src/ir_comm.c **** 				ir_rxtx[dir].inc_dir = ir_rxtx[dir].inc_dir&(~INC_DIR_KEY); //remove key bits.							
 1491               		.loc 1 333 0
 1492 0220 7110      		cpse r7,__zero_reg__
 1493 0222 00C0      		rjmp .L64
 334:../src/ir_comm.c **** 			}
 1494               		.loc 1 334 0
 1495 0224 8C9F      		mul r24,r28
 1496 0226 B001      		movw r22,r0
 1497 0228 8D9F      		mul r24,r29
 1498 022a 700D      		add r23,r0
 1499 022c 1124      		clr __zero_reg__
 1500               	.LVL73:
 1501 022e FB01      		movw r30,r22
 1502 0230 E050      		subi r30,lo8(-(ir_rxtx))
 1503 0232 F040      		sbci r31,hi8(-(ir_rxtx))
 1504 0234 6F01      		movw r12,r30
 1505 0236 87A9      		ldd r24,Z+55
 1506 0238 8770      		andi r24,lo8(7)
 1507 023a 87AB      		std Z+55,r24
 336:../src/ir_comm.c **** 				if(notTimed){
 1508               		.loc 1 336 0
 1509 023c 80AD      		ldd r24,Z+56
 1510 023e 87FD      		sbrc r24,7
 1511 0240 00C0      		rjmp .L123
 1512               	.L65:
 1513               	.LBB300:
 346:../src/ir_comm.c **** 					ir_rxtx[dir].status |= IR_STATUS_COMPLETE_bm;
 1514               		.loc 1 346 0
 1515 0242 EFB6      		in r14,__SREG__
 1516               	.LVL74:
 1517               	.LBB301:
 1518               	.LBB302:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 1519               		.loc 2 50 0
 1520               	/* #APP */
 1521               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 1522 0244 F894      		cli
 1523               	 ;  0 "" 2
 1524               	.LVL75:
 1525               	/* #NOAPP */
 1526               	.LBE302:
 1527               	.LBE301:
 347:../src/ir_comm.c **** 					ir_rxtx[dir].status |= IR_STATUS_BUSY_bm; //mark as busy so we don't overwrite it.
 1528               		.loc 1 347 0
 1529 0246 89E3      		ldi r24,lo8(57)
 1530 0248 8C9F      		mul r24,r28
 1531 024a F001      		movw r30,r0
 1532 024c 8D9F      		mul r24,r29
 1533 024e F00D      		add r31,r0
 1534 0250 1124      		clr __zero_reg__
 1535 0252 E050      		subi r30,lo8(-(ir_rxtx))
 1536 0254 F040      		sbci r31,hi8(-(ir_rxtx))
 1537 0256 80AD      		ldd r24,Z+56
 1538 0258 8260      		ori r24,lo8(2)
 1539 025a 80AF      		std Z+56,r24
 348:../src/ir_comm.c **** 					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receiving messages on this channel until the 
 1540               		.loc 1 348 0
 1541 025c 80AD      		ldd r24,Z+56
 1542 025e 8160      		ori r24,lo8(1)
 1543 0260 80AF      		std Z+56,r24
 349:../src/ir_comm.c **** 					if(ir_rxtx[dir].data_length==22) printf("%hu %04X\r\n", dir, ir_rxtx[dir].sender_ID);
 1544               		.loc 1 349 0
 1545 0262 D801      		movw r26,r16
 1546 0264 A050      		subi r26,lo8(-(channel))
 1547 0266 B040      		sbci r27,hi8(-(channel))
 1548 0268 0D90      		ld __tmp_reg__,X+
 1549 026a BC91      		ld r27,X
 1550 026c A02D      		mov r26,__tmp_reg__
 1551 026e 1496      		adiw r26,4
 1552 0270 8C91      		ld r24,X
 1553 0272 1497      		sbiw r26,4
 1554 0274 8F7E      		andi r24,lo8(-17)
 1555 0276 1496      		adiw r26,4
 1556 0278 8C93      		st X,r24
 350:../src/ir_comm.c **** 				}
 1557               		.loc 1 350 0
 1558 027a 86A9      		ldd r24,Z+54
 1559 027c 8631      		cpi r24,lo8(22)
 1560 027e 01F4      		brne .+2
 1561 0280 00C0      		rjmp .L124
 1562               	.LVL76:
 1563               	.LBB303:
 1564               	.LBB304:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 1565               		.loc 2 70 0 discriminator 3
 1566 0282 EFBE      		out __SREG__,r14
 1567               		.loc 2 71 0 discriminator 3
 1568               	.LVL77:
 1569 0284 00C0      		rjmp .L45
 1570               	.LVL78:
 1571               	.L56:
 1572               	.LBE304:
 1573               	.LBE303:
 1574               	.LBE300:
 1575               	.LBE385:
 317:../src/ir_comm.c **** 		default:
 1576               		.loc 1 317 0
 1577 0286 89E3      		ldi r24,lo8(57)
 1578 0288 8C9F      		mul r24,r28
 1579 028a F001      		movw r30,r0
 1580 028c 8D9F      		mul r24,r29
 1581 028e F00D      		add r31,r0
 1582 0290 1124      		clr __zero_reg__
 1583 0292 E050      		subi r30,lo8(-(ir_rxtx))
 1584 0294 F040      		sbci r31,hi8(-(ir_rxtx))
 1585 0296 E7AA      		std Z+55,r14
 1586 0298 00C0      		rjmp .L57
 1587               	.L48:
 302:../src/ir_comm.c **** 		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].sender_ID	   |= (((uint16_t)in_byte)<<8);	break;
 1588               		.loc 1 302 0
 1589 029a 8E2D      		mov r24,r14
 1590 029c 90E0      		ldi r25,0
 1591 029e 29E3      		ldi r18,lo8(57)
 1592 02a0 2C9F      		mul r18,r28
 1593 02a2 F001      		movw r30,r0
 1594 02a4 2D9F      		mul r18,r29
 1595 02a6 F00D      		add r31,r0
 1596 02a8 1124      		clr __zero_reg__
 1597 02aa E050      		subi r30,lo8(-(ir_rxtx))
 1598 02ac F040      		sbci r31,hi8(-(ir_rxtx))
 1599 02ae 8683      		std Z+6,r24
 1600 02b0 9783      		std Z+7,r25
 1601 02b2 00C0      		rjmp .L57
 1602               	.L50:
 303:../src/ir_comm.c **** 		case HEADER_POS_CRC_LOW:		ir_rxtx[dir].data_crc		= (uint16_t)in_byte;		break;
 1603               		.loc 1 303 0
 1604 02b4 89E3      		ldi r24,lo8(57)
 1605 02b6 8C9F      		mul r24,r28
 1606 02b8 F001      		movw r30,r0
 1607 02ba 8D9F      		mul r24,r29
 1608 02bc F00D      		add r31,r0
 1609 02be 1124      		clr __zero_reg__
 1610 02c0 E050      		subi r30,lo8(-(ir_rxtx))
 1611 02c2 F040      		sbci r31,hi8(-(ir_rxtx))
 1612 02c4 8681      		ldd r24,Z+6
 1613 02c6 9781      		ldd r25,Z+7
 1614 02c8 9E29      		or r25,r14
 1615 02ca 8683      		std Z+6,r24
 1616 02cc 9783      		std Z+7,r25
 1617 02ce 00C0      		rjmp .L57
 1618               	.L51:
 304:../src/ir_comm.c **** 		case HEADER_POS_CRC_HIGH:		ir_rxtx[dir].data_crc	   |= (((uint16_t)in_byte)<<8); break;										
 1619               		.loc 1 304 0
 1620 02d0 8E2D      		mov r24,r14
 1621 02d2 90E0      		ldi r25,0
 1622 02d4 29E3      		ldi r18,lo8(57)
 1623 02d6 2C9F      		mul r18,r28
 1624 02d8 F001      		movw r30,r0
 1625 02da 2D9F      		mul r18,r29
 1626 02dc F00D      		add r31,r0
 1627 02de 1124      		clr __zero_reg__
 1628 02e0 E050      		subi r30,lo8(-(ir_rxtx))
 1629 02e2 F040      		sbci r31,hi8(-(ir_rxtx))
 1630 02e4 8483      		std Z+4,r24
 1631 02e6 9583      		std Z+5,r25
 1632 02e8 00C0      		rjmp .L57
 1633               	.L52:
 305:../src/ir_comm.c **** 		case HEADER_POS_MSG_LENGTH:
 1634               		.loc 1 305 0
 1635 02ea 89E3      		ldi r24,lo8(57)
 1636 02ec 8C9F      		mul r24,r28
 1637 02ee F001      		movw r30,r0
 1638 02f0 8D9F      		mul r24,r29
 1639 02f2 F00D      		add r31,r0
 1640 02f4 1124      		clr __zero_reg__
 1641 02f6 E050      		subi r30,lo8(-(ir_rxtx))
 1642 02f8 F040      		sbci r31,hi8(-(ir_rxtx))
 1643 02fa 8481      		ldd r24,Z+4
 1644 02fc 9581      		ldd r25,Z+5
 1645 02fe 9E29      		or r25,r14
 1646 0300 8483      		std Z+4,r24
 1647 0302 9583      		std Z+5,r25
 1648 0304 00C0      		rjmp .L57
 1649               	.L53:
 307:../src/ir_comm.c **** 										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].sender_ID, ir_rxtx[dir].status & IR_S
 1650               		.loc 1 307 0
 1651 0306 89E3      		ldi r24,lo8(57)
 1652 0308 8C9F      		mul r24,r28
 1653 030a F001      		movw r30,r0
 1654 030c 8D9F      		mul r24,r29
 1655 030e F00D      		add r31,r0
 1656 0310 1124      		clr __zero_reg__
 1657 0312 E050      		subi r30,lo8(-(ir_rxtx))
 1658 0314 F040      		sbci r31,hi8(-(ir_rxtx))
 1659 0316 80AD      		ldd r24,Z+56
 1660 0318 9E2D      		mov r25,r14
 1661 031a 907C      		andi r25,lo8(-64)
 1662 031c 892B      		or r24,r25
 1663 031e 80AF      		std Z+56,r24
 308:../src/ir_comm.c **** 										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
 1664               		.loc 1 308 0
 1665 0320 20AD      		ldd r18,Z+56
 1666 0322 8681      		ldd r24,Z+6
 1667 0324 9781      		ldd r25,Z+7
 1668               	.LVL79:
 1669               	.LBB386:
 1670               	.LBB387:
 1671               		.loc 3 118 0
 1672 0326 207C      		andi r18,lo8(-64)
 1673               	.LVL80:
 1674               	/* #APP */
 1675               	 ;  118 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util
 1676 0328 8227      		eor r24,r18
 1677 032a 282F      		mov r18,r24
 1678 032c 2295      		swap r18
 1679 032e 2827      		eor r18,r24
 1680 0330 022E      		mov __tmp_reg__,r18
 1681 0332 2695      		lsr r18
 1682 0334 2695      		lsr r18
 1683 0336 2025      		eor r18,__tmp_reg__
 1684 0338 022E      		mov __tmp_reg__,r18
 1685 033a 2695      		lsr r18
 1686 033c 2025      		eor r18,__tmp_reg__
 1687 033e 2770      		andi r18,0x07
 1688 0340 082E      		mov __tmp_reg__,r24
 1689 0342 892F      		mov r24,r25
 1690 0344 2695      		lsr r18
 1691 0346 0794      		ror __tmp_reg__
 1692 0348 2795      		ror r18
 1693 034a 902D      		mov r25,__tmp_reg__
 1694 034c 8227      		eor r24,r18
 1695 034e 0694      		lsr __tmp_reg__
 1696 0350 2795      		ror r18
 1697 0352 9025      		eor r25,__tmp_reg__
 1698 0354 8227      		eor r24,r18
 1699               	 ;  0 "" 2
 1700               	.LVL81:
 1701               	/* #NOAPP */
 1702               	.LBE387:
 1703               	.LBE386:
 308:../src/ir_comm.c **** 										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
 1704               		.loc 1 308 0
 1705 0356 8487      		std Z+12,r24
 1706 0358 9587      		std Z+13,r25
 309:../src/ir_comm.c **** 										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this
 1707               		.loc 1 309 0
 1708 035a 8E2D      		mov r24,r14
 1709 035c 8F73      		andi r24,lo8(63)
 1710 035e 86AB      		std Z+54,r24
 310:../src/ir_comm.c **** 																								break;
 1711               		.loc 1 310 0
 1712 0360 86A9      		ldd r24,Z+54
 1713 0362 8932      		cpi r24,lo8(41)
 1714 0364 00F4      		brsh .+2
 1715 0366 00C0      		rjmp .L57
 310:../src/ir_comm.c **** 																								break;
 1716               		.loc 1 310 0 is_stmt 0 discriminator 1
 1717 0368 81E0      		ldi r24,lo8(1)
 1718 036a 86AB      		std Z+54,r24
 1719 036c 00C0      		rjmp .L57
 1720               	.L54:
 312:../src/ir_comm.c **** 		case HEADER_POS_TARGET_ID_HIGH:
 1721               		.loc 1 312 0 is_stmt 1
 1722 036e 8E2D      		mov r24,r14
 1723 0370 90E0      		ldi r25,0
 1724 0372 29E3      		ldi r18,lo8(57)
 1725 0374 2C9F      		mul r18,r28
 1726 0376 F001      		movw r30,r0
 1727 0378 2D9F      		mul r18,r29
 1728 037a F00D      		add r31,r0
 1729 037c 1124      		clr __zero_reg__
 1730 037e E050      		subi r30,lo8(-(ir_rxtx))
 1731 0380 F040      		sbci r31,hi8(-(ir_rxtx))
 1732 0382 8087      		std Z+8,r24
 1733 0384 9187      		std Z+9,r25
 1734 0386 00C0      		rjmp .L57
 1735               	.L55:
 314:../src/ir_comm.c **** 										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
 1736               		.loc 1 314 0
 1737 0388 89E3      		ldi r24,lo8(57)
 1738 038a 8C9F      		mul r24,r28
 1739 038c F001      		movw r30,r0
 1740 038e 8D9F      		mul r24,r29
 1741 0390 F00D      		add r31,r0
 1742 0392 1124      		clr __zero_reg__
 1743 0394 E050      		subi r30,lo8(-(ir_rxtx))
 1744 0396 F040      		sbci r31,hi8(-(ir_rxtx))
 1745 0398 8085      		ldd r24,Z+8
 1746 039a 9185      		ldd r25,Z+9
 1747 039c 9E29      		or r25,r14
 1748 039e 8087      		std Z+8,r24
 1749 03a0 9187      		std Z+9,r25
 315:../src/ir_comm.c **** 										break;
 1750               		.loc 1 315 0
 1751 03a2 2085      		ldd r18,Z+8
 1752 03a4 3185      		ldd r19,Z+9
 1753 03a6 8485      		ldd r24,Z+12
 1754 03a8 9585      		ldd r25,Z+13
 1755               	.LVL82:
 1756               	.LBB388:
 1757               	.LBB389:
 1758               		.loc 3 118 0
 1759               	/* #APP */
 1760               	 ;  118 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util
 1761 03aa 8227      		eor r24,r18
 1762 03ac 282F      		mov r18,r24
 1763 03ae 2295      		swap r18
 1764 03b0 2827      		eor r18,r24
 1765 03b2 022E      		mov __tmp_reg__,r18
 1766 03b4 2695      		lsr r18
 1767 03b6 2695      		lsr r18
 1768 03b8 2025      		eor r18,__tmp_reg__
 1769 03ba 022E      		mov __tmp_reg__,r18
 1770 03bc 2695      		lsr r18
 1771 03be 2025      		eor r18,__tmp_reg__
 1772 03c0 2770      		andi r18,0x07
 1773 03c2 082E      		mov __tmp_reg__,r24
 1774 03c4 892F      		mov r24,r25
 1775 03c6 2695      		lsr r18
 1776 03c8 0794      		ror __tmp_reg__
 1777 03ca 2795      		ror r18
 1778 03cc 902D      		mov r25,__tmp_reg__
 1779 03ce 8227      		eor r24,r18
 1780 03d0 0694      		lsr __tmp_reg__
 1781 03d2 2795      		ror r18
 1782 03d4 9025      		eor r25,__tmp_reg__
 1783 03d6 8227      		eor r24,r18
 1784               	 ;  0 "" 2
 1785               	.LVL83:
 1786               	/* #NOAPP */
 1787               	.LBE389:
 1788               	.LBE388:
 315:../src/ir_comm.c **** 										break;
 1789               		.loc 1 315 0
 1790 03d8 8487      		std Z+12,r24
 1791 03da 9587      		std Z+13,r25
 316:../src/ir_comm.c **** 		case HEADER_POS_SOURCE_DIR:		ir_rxtx[dir].inc_dir		= in_byte;				break;										
 1792               		.loc 1 316 0
 1793 03dc 00C0      		rjmp .L57
 1794               	.LVL84:
 1795               	.L124:
 1796               	.LBB390:
 1797               	.LBB307:
 350:../src/ir_comm.c **** 				}
 1798               		.loc 1 350 0 discriminator 1
 1799 03de 8681      		ldd r24,Z+6
 1800 03e0 9781      		ldd r25,Z+7
 1801 03e2 9F93      		push r25
 1802               	.LCFI45:
 1803               		.cfi_def_cfa_offset 18
 1804 03e4 8F93      		push r24
 1805               	.LCFI46:
 1806               		.cfi_def_cfa_offset 19
 1807 03e6 1F92      		push __zero_reg__
 1808               	.LCFI47:
 1809               		.cfi_def_cfa_offset 20
 1810 03e8 FF92      		push r15
 1811               	.LCFI48:
 1812               		.cfi_def_cfa_offset 21
 1813 03ea 80E0      		ldi r24,lo8(.LC0)
 1814 03ec 90E0      		ldi r25,hi8(.LC0)
 1815 03ee 9F93      		push r25
 1816               	.LCFI49:
 1817               		.cfi_def_cfa_offset 22
 1818 03f0 8F93      		push r24
 1819               	.LCFI50:
 1820               		.cfi_def_cfa_offset 23
 1821 03f2 0E94 0000 		call printf
 1822               	.LVL85:
 1823 03f6 0F90      		pop __tmp_reg__
 1824 03f8 0F90      		pop __tmp_reg__
 1825 03fa 0F90      		pop __tmp_reg__
 1826 03fc 0F90      		pop __tmp_reg__
 1827 03fe 0F90      		pop __tmp_reg__
 1828 0400 0F90      		pop __tmp_reg__
 1829               	.LCFI51:
 1830               		.cfi_def_cfa_offset 17
 1831               	.LVL86:
 1832               	.LBB306:
 1833               	.LBB305:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 1834               		.loc 2 70 0 discriminator 1
 1835 0402 EFBE      		out __SREG__,r14
 1836               		.loc 2 71 0 discriminator 1
 1837               	.LVL87:
 1838 0404 00C0      		rjmp .L45
 1839               	.LVL88:
 1840               	.L123:
 1841               	.LBE305:
 1842               	.LBE306:
 1843               	.LBE307:
 1844               	.LBB308:
 1845               	.LBB309:
 1846               	.LBB310:
 362:../src/ir_comm.c **** 		if(!processing_cmd){
 1847               		.loc 1 362 0
 1848 0406 CFB7      		in r28,__SREG__
 1849               	.LVL89:
 1850               	.LBB311:
 1851               	.LBB312:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 1852               		.loc 2 50 0
 1853               	/* #APP */
 1854               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 1855 0408 F894      		cli
 1856               	 ;  0 "" 2
 1857               	.LVL90:
 1858               	/* #NOAPP */
 1859               	.LBE312:
 1860               	.LBE311:
 363:../src/ir_comm.c **** 			processThisCommand = 1;
 1861               		.loc 1 363 0
 1862 040a 8091 0000 		lds r24,processing_cmd
 1863 040e 8111      		cpse r24,__zero_reg__
 1864 0410 00C0      		rjmp .L91
 1865               	.LVL91:
 365:../src/ir_comm.c **** 			cmd_buffer[ir_rxtx[dir].data_length]='\0';
 1866               		.loc 1 365 0
 1867 0412 46A9      		ldd r20,Z+54
 1868               	.LVL92:
 1869 0414 50E0      		ldi r21,0
 1870 0416 6050      		subi r22,lo8(-(ir_rxtx+14))
 1871 0418 7040      		sbci r23,hi8(-(ir_rxtx+14))
 1872 041a 80E0      		ldi r24,lo8(cmd_buffer)
 1873 041c 90E0      		ldi r25,hi8(cmd_buffer)
 1874 041e 0E94 0000 		call memcpy
 1875               	.LVL93:
 366:../src/ir_comm.c **** 			cmd_length = ir_rxtx[dir].data_length;
 1876               		.loc 1 366 0
 1877 0422 D601      		movw r26,r12
 1878 0424 D696      		adiw r26,54
 1879 0426 EC91      		ld r30,X
 1880 0428 D697      		sbiw r26,54
 1881 042a F0E0      		ldi r31,0
 1882 042c E050      		subi r30,lo8(-(cmd_buffer))
 1883 042e F040      		sbci r31,hi8(-(cmd_buffer))
 1884 0430 1082      		st Z,__zero_reg__
 367:../src/ir_comm.c **** 			cmd_arrival_time = ir_rxtx[dir].last_byte;	//This is a 'global' value, referenced by other *.c f
 1885               		.loc 1 367 0
 1886 0432 D696      		adiw r26,54
 1887 0434 8C91      		ld r24,X
 1888 0436 D697      		sbiw r26,54
 1889 0438 90E0      		ldi r25,0
 1890 043a 8093 0000 		sts cmd_length,r24
 1891 043e 9093 0000 		sts cmd_length+1,r25
 368:../src/ir_comm.c **** 			cmd_sender_id = ir_rxtx[dir].sender_ID;		//This is a 'global' value, referenced by other *.c fil
 1892               		.loc 1 368 0
 1893 0442 8D91      		ld r24,X+
 1894 0444 9D91      		ld r25,X+
 1895 0446 0D90      		ld __tmp_reg__,X+
 1896 0448 BC91      		ld r27,X
 1897 044a A02D      		mov r26,__tmp_reg__
 1898 044c 8093 0000 		sts cmd_arrival_time,r24
 1899 0450 9093 0000 		sts cmd_arrival_time+1,r25
 1900 0454 A093 0000 		sts cmd_arrival_time+2,r26
 1901 0458 B093 0000 		sts cmd_arrival_time+3,r27
 369:../src/ir_comm.c **** 			cmd_arrival_dir = dir;
 1902               		.loc 1 369 0
 1903 045c F601      		movw r30,r12
 1904 045e 8681      		ldd r24,Z+6
 1905 0460 9781      		ldd r25,Z+7
 1906 0462 8093 0000 		sts cmd_sender_id,r24
 1907 0466 9093 0000 		sts cmd_sender_id+1,r25
 370:../src/ir_comm.c **** 			cmd_sender_dir  = ir_rxtx[dir].inc_dir;
 1908               		.loc 1 370 0
 1909 046a F092 0000 		sts cmd_arrival_dir,r15
 371:../src/ir_comm.c **** 			processing_cmd = 1;
 1910               		.loc 1 371 0
 1911 046e 87A9      		ldd r24,Z+55
 1912 0470 8093 0000 		sts cmd_sender_dir,r24
 372:../src/ir_comm.c **** 		}
 1913               		.loc 1 372 0
 1914 0474 81E0      		ldi r24,lo8(1)
 1915 0476 8093 0000 		sts processing_cmd,r24
 1916               	.LVL94:
 1917               	.L66:
 1918               	.LBB313:
 1919               	.LBB314:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 1920               		.loc 2 70 0
 1921 047a CFBF      		out __SREG__,r28
 1922               		.loc 2 71 0
 1923               	.LVL95:
 1924               	.LBE314:
 1925               	.LBE313:
 1926               	.LBE310:
 375:../src/ir_comm.c **** 		schedule_task(5, handle_cmd_wrapper, NULL);
 1927               		.loc 1 375 0
 1928 047c 8823      		tst r24
 1929 047e 01F4      		brne .+2
 1930 0480 00C0      		rjmp .L45
 376:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 1931               		.loc 1 376 0
 1932 0482 20E0      		ldi r18,0
 1933 0484 30E0      		ldi r19,0
 1934 0486 40E0      		ldi r20,lo8(gs(handle_cmd_wrapper))
 1935 0488 50E0      		ldi r21,hi8(gs(handle_cmd_wrapper))
 1936 048a 65E0      		ldi r22,lo8(5)
 1937 048c 70E0      		ldi r23,0
 1938 048e 80E0      		ldi r24,0
 1939 0490 90E0      		ldi r25,0
 1940 0492 0E94 0000 		call schedule_task
 1941               	.LVL96:
 1942               	.LBB315:
 377:../src/ir_comm.c **** 			for(uint8_t other_dir=0;other_dir<6;other_dir++){
 1943               		.loc 1 377 0
 1944 0496 4FB7      		in r20,__SREG__
 1945               	.LVL97:
 1946               	.LBB316:
 1947               	.LBB317:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 1948               		.loc 2 50 0
 1949               	/* #APP */
 1950               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 1951 0498 F894      		cli
 1952               	 ;  0 "" 2
 1953               	.LVL98:
 1954               	/* #NOAPP */
 1955 049a A0E0      		ldi r26,lo8(channel)
 1956 049c B0E0      		ldi r27,hi8(channel)
 1957 049e 80E0      		ldi r24,0
 1958 04a0 90E0      		ldi r25,0
 1959               	.LBE317:
 1960               	.LBE316:
 1961               	.LBB318:
 1962               	.LBB319:
 1963               	.LBB320:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 1964               		.loc 1 31 0
 1965 04a2 39E3      		ldi r19,lo8(57)
 1966               	.LVL99:
 1967               	.L68:
 1968 04a4 389F      		mul r19,r24
 1969 04a6 F001      		movw r30,r0
 1970 04a8 399F      		mul r19,r25
 1971 04aa F00D      		add r31,r0
 1972 04ac 1124      		clr __zero_reg__
 1973 04ae E050      		subi r30,lo8(-(ir_rxtx))
 1974 04b0 F040      		sbci r31,hi8(-(ir_rxtx))
 1975 04b2 1482      		std Z+4,__zero_reg__
 1976 04b4 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 1977               		.loc 1 32 0
 1978 04b6 1682      		std Z+6,__zero_reg__
 1979 04b8 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 1980               		.loc 1 34 0
 1981 04ba 1086      		std Z+8,__zero_reg__
 1982 04bc 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 1983               		.loc 1 35 0
 1984 04be 1286      		std Z+10,__zero_reg__
 1985 04c0 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 1986               		.loc 1 36 0
 1987 04c2 1486      		std Z+12,__zero_reg__
 1988 04c4 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 1989               		.loc 1 37 0
 1990 04c6 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 1991               		.loc 1 38 0
 1992 04c8 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 1993               		.loc 1 40 0
 1994 04ca 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 1995               		.loc 1 42 0
 1996 04cc ED91      		ld r30,X+
 1997 04ce FD91      		ld r31,X+
 1998 04d0 2481      		ldd r18,Z+4
 1999 04d2 2061      		ori r18,lo8(16)
 2000 04d4 2483      		std Z+4,r18
 2001               	.LVL100:
 2002 04d6 0196      		adiw r24,1
 2003               	.LVL101:
 2004               	.LBE320:
 2005               	.LBE319:
 378:../src/ir_comm.c **** 				clear_ir_buffer(other_dir);
 2006               		.loc 1 378 0
 2007 04d8 8630      		cpi r24,6
 2008 04da 9105      		cpc r25,__zero_reg__
 2009 04dc 01F4      		brne .L68
 2010               	.LVL102:
 2011               	.LBE318:
 2012               	.LBB321:
 2013               	.LBB322:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2014               		.loc 2 70 0
 2015 04de 4FBF      		out __SREG__,r20
 2016               		.loc 2 71 0
 2017               	.LVL103:
 2018 04e0 00C0      		rjmp .L45
 2019               	.LVL104:
 2020               	.L64:
 2021               	.LBE322:
 2022               	.LBE321:
 2023               	.LBE315:
 2024               	.LBE309:
 2025               	.LBE308:
 336:../src/ir_comm.c **** 				if(notTimed){
 2026               		.loc 1 336 0
 2027 04e2 8C9F      		mul r24,r28
 2028 04e4 F001      		movw r30,r0
 2029 04e6 8D9F      		mul r24,r29
 2030 04e8 F00D      		add r31,r0
 2031 04ea 1124      		clr __zero_reg__
 2032 04ec E050      		subi r30,lo8(-(ir_rxtx))
 2033 04ee F040      		sbci r31,hi8(-(ir_rxtx))
 2034 04f0 80AD      		ldd r24,Z+56
 2035 04f2 87FF      		sbrs r24,7
 2036 04f4 00C0      		rjmp .L65
 340:../src/ir_comm.c **** 						case 0: received_ir_sync(ir_rxtx[dir].inc_dir, ir_rxtx[dir].sender_ID); break;
 2037               		.loc 1 340 0
 2038 04f6 86A9      		ldd r24,Z+54
 2039 04f8 8823      		tst r24
 2040 04fa 01F4      		brne .+2
 2041 04fc 00C0      		rjmp .L69
 2042 04fe 8130      		cpi r24,lo8(1)
 2043 0500 01F0      		breq .+2
 2044 0502 00C0      		rjmp .L45
 342:../src/ir_comm.c **** 					}			
 2045               		.loc 1 342 0
 2046 0504 4081      		ld r20,Z
 2047 0506 5181      		ldd r21,Z+1
 2048 0508 6281      		ldd r22,Z+2
 2049 050a 7381      		ldd r23,Z+3
 2050               	.LVL105:
 2051 050c 2681      		ldd r18,Z+6
 2052 050e 3781      		ldd r19,Z+7
 2053 0510 C7A9      		ldd r28,Z+55
 2054               	.LVL106:
 2055               	.LBB324:
 2056               	.LBB325:
 2057               	.LBB326:
 414:../src/ir_comm.c **** 		if(!rnbProcessingFlag && !hp_ir_block_bm){
 2058               		.loc 1 414 0
 2059 0512 EFB7      		in r30,__SREG__
 2060               	.LVL107:
 2061               	.LBB327:
 2062               	.LBB328:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2063               		.loc 2 50 0
 2064               	/* #APP */
 2065               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2066 0514 F894      		cli
 2067               	 ;  0 "" 2
 2068               	.LVL108:
 2069               	/* #NOAPP */
 2070               	.LBE328:
 2071               	.LBE327:
 415:../src/ir_comm.c **** 			if(delay!=0xFF){
 2072               		.loc 1 415 0
 2073 0516 8091 0000 		lds r24,rnbProcessingFlag
 2074 051a 8111      		cpse r24,__zero_reg__
 2075 051c 00C0      		rjmp .L94
 2076 051e 8091 0000 		lds r24,hp_ir_block_bm
 2077 0522 8111      		cpse r24,__zero_reg__
 2078 0524 00C0      		rjmp .L94
 416:../src/ir_comm.c **** 				rnbCmdID = senderID;
 2079               		.loc 1 416 0
 2080 0526 CF3F      		cpi r28,lo8(-1)
 2081 0528 01F4      		brne .+2
 2082 052a 00C0      		rjmp .L94
 417:../src/ir_comm.c **** 				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
 2083               		.loc 1 417 0
 2084 052c 2093 0000 		sts rnbCmdID,r18
 2085 0530 3093 0000 		sts rnbCmdID+1,r19
 419:../src/ir_comm.c **** 				rnbCmdSentTime = last_byte-(delay+5);
 2086               		.loc 1 419 0
 2087 0534 C530      		cpi r28,lo8(5)
 2088 0536 00F4      		brsh .L82
 2089 0538 84E1      		ldi r24,lo8(20)
 2090 053a 8C1B      		sub r24,r28
 2091 053c C82F      		mov r28,r24
 2092               	.LVL109:
 2093               	.L82:
 420:../src/ir_comm.c **** 				processThisRNB = 1;
 2094               		.loc 1 420 0
 2095 053e 8C2F      		mov r24,r28
 2096 0540 90E0      		ldi r25,0
 2097 0542 0596      		adiw r24,5
 2098 0544 092E      		mov __tmp_reg__,r25
 2099 0546 000C      		lsl r0
 2100 0548 AA0B      		sbc r26,r26
 2101 054a BB0B      		sbc r27,r27
 2102 054c 481B      		sub r20,r24
 2103 054e 590B      		sbc r21,r25
 2104 0550 6A0B      		sbc r22,r26
 2105 0552 7B0B      		sbc r23,r27
 2106               	.LVL110:
 2107 0554 4093 0000 		sts rnbCmdSentTime,r20
 2108 0558 5093 0000 		sts rnbCmdSentTime+1,r21
 2109 055c 6093 0000 		sts rnbCmdSentTime+2,r22
 2110 0560 7093 0000 		sts rnbCmdSentTime+3,r23
 2111               	.LVL111:
 422:../src/ir_comm.c **** 				hp_ir_block_bm = 0xFF;
 2112               		.loc 1 422 0
 2113 0564 81E0      		ldi r24,lo8(1)
 2114 0566 8093 0000 		sts rnbProcessingFlag,r24
 423:../src/ir_comm.c **** 
 2115               		.loc 1 423 0
 2116 056a 8FEF      		ldi r24,lo8(-1)
 2117 056c 8093 0000 		sts hp_ir_block_bm,r24
 421:../src/ir_comm.c **** 				rnbProcessingFlag = 1;
 2118               		.loc 1 421 0
 2119 0570 41E0      		ldi r20,lo8(1)
 2120               	.LVL112:
 2121               	.L80:
 2122               	.LBB329:
 2123               	.LBB330:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2124               		.loc 2 70 0
 2125 0572 EFBF      		out __SREG__,r30
 2126               	.LVL113:
 2127               		.loc 2 71 0
 2128               	.LVL114:
 2129               	.LBE330:
 2130               	.LBE329:
 2131               	.LBE326:
 428:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2132               		.loc 1 428 0
 2133 0574 4423      		tst r20
 2134 0576 01F4      		brne .+2
 2135 0578 00C0      		rjmp .L45
 2136               	.LBB331:
 429:../src/ir_comm.c **** 			for(uint8_t dir=0;dir<6;dir++){
 2137               		.loc 1 429 0
 2138 057a DFB7      		in r29,__SREG__
 2139               	.LVL115:
 2140               	.LBB332:
 2141               	.LBB333:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2142               		.loc 2 50 0
 2143               	/* #APP */
 2144               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2145 057c F894      		cli
 2146               	 ;  0 "" 2
 2147               	.LVL116:
 2148               	/* #NOAPP */
 2149 057e A0E0      		ldi r26,lo8(channel)
 2150 0580 B0E0      		ldi r27,hi8(channel)
 2151 0582 80E0      		ldi r24,0
 2152 0584 90E0      		ldi r25,0
 2153               	.LBE333:
 2154               	.LBE332:
 2155               	.LBB334:
 431:../src/ir_comm.c **** 					clear_ir_buffer(dir);
 2156               		.loc 1 431 0
 2157 0586 59E3      		ldi r21,lo8(57)
 2158 0588 00C0      		rjmp .L84
 2159               	.LVL117:
 2160               	.L83:
 2161 058a 0196      		adiw r24,1
 2162               	.LVL118:
 2163 058c 1296      		adiw r26,2
 430:../src/ir_comm.c **** 				if(ir_rxtx[dir].sender_ID==senderID){
 2164               		.loc 1 430 0
 2165 058e 8630      		cpi r24,6
 2166 0590 9105      		cpc r25,__zero_reg__
 2167 0592 01F4      		brne .+2
 2168 0594 00C0      		rjmp .L125
 2169               	.LVL119:
 2170               	.L84:
 431:../src/ir_comm.c **** 					clear_ir_buffer(dir);
 2171               		.loc 1 431 0
 2172 0596 589F      		mul r21,r24
 2173 0598 F001      		movw r30,r0
 2174 059a 599F      		mul r21,r25
 2175 059c F00D      		add r31,r0
 2176 059e 1124      		clr __zero_reg__
 2177 05a0 E050      		subi r30,lo8(-(ir_rxtx))
 2178 05a2 F040      		sbci r31,hi8(-(ir_rxtx))
 2179 05a4 6681      		ldd r22,Z+6
 2180 05a6 7781      		ldd r23,Z+7
 2181 05a8 2617      		cp r18,r22
 2182 05aa 3707      		cpc r19,r23
 2183 05ac 01F4      		brne .L83
 2184               	.LVL120:
 2185               	.LBB335:
 2186               	.LBB336:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 2187               		.loc 1 31 0
 2188 05ae 1482      		std Z+4,__zero_reg__
 2189 05b0 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 2190               		.loc 1 32 0
 2191 05b2 1682      		std Z+6,__zero_reg__
 2192 05b4 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 2193               		.loc 1 34 0
 2194 05b6 1086      		std Z+8,__zero_reg__
 2195 05b8 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 2196               		.loc 1 35 0
 2197 05ba 1286      		std Z+10,__zero_reg__
 2198 05bc 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 2199               		.loc 1 36 0
 2200 05be 1486      		std Z+12,__zero_reg__
 2201 05c0 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 2202               		.loc 1 37 0
 2203 05c2 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 2204               		.loc 1 38 0
 2205 05c4 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 2206               		.loc 1 40 0
 2207 05c6 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 2208               		.loc 1 42 0
 2209 05c8 ED91      		ld r30,X+
 2210 05ca FC91      		ld r31,X
 2211 05cc 1197      		sbiw r26,1
 2212 05ce 6481      		ldd r22,Z+4
 2213 05d0 6061      		ori r22,lo8(16)
 2214 05d2 6483      		std Z+4,r22
 2215 05d4 00C0      		rjmp .L83
 2216               	.LVL121:
 2217               	.L69:
 2218               	.LBE336:
 2219               	.LBE335:
 2220               	.LBE334:
 2221               	.LBE331:
 2222               	.LBE325:
 2223               	.LBE324:
 341:../src/ir_comm.c **** 						case 1: received_rnb_r(ir_rxtx[dir].inc_dir, ir_rxtx[dir].sender_ID, ir_rxtx[dir].last_byte);
 2224               		.loc 1 341 0
 2225 05d6 C681      		ldd r28,Z+6
 2226 05d8 D781      		ldd r29,Z+7
 2227 05da 67A9      		ldd r22,Z+55
 2228               	.LVL122:
 2229               	.LBB348:
 2230               	.LBB349:
 2231               	.LBB350:
 388:../src/ir_comm.c **** 		if(!processing_ffsync){
 2232               		.loc 1 388 0
 2233 05dc 9FB7      		in r25,__SREG__
 2234               	.LVL123:
 2235               	.LBB351:
 2236               	.LBB352:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2237               		.loc 2 50 0
 2238               	/* #APP */
 2239               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2240 05de F894      		cli
 2241               	 ;  0 "" 2
 2242               	.LVL124:
 2243               	/* #NOAPP */
 2244               	.LBE352:
 2245               	.LBE351:
 389:../src/ir_comm.c **** 			count = TCE0.CNT;
 2246               		.loc 1 389 0
 2247 05e0 8091 0000 		lds r24,processing_ffsync
 2248 05e4 8111      		cpse r24,__zero_reg__
 2249 05e6 00C0      		rjmp .L92
 390:../src/ir_comm.c **** 			if(delay!=0xFF){
 2250               		.loc 1 390 0
 2251 05e8 A090 200A 		lds r10,2592
 2252 05ec B090 210A 		lds r11,2592+1
 2253               	.LVL125:
 391:../src/ir_comm.c **** 				processThisFFSync = 1;
 2254               		.loc 1 391 0
 2255 05f0 6F3F      		cpi r22,lo8(-1)
 2256 05f2 01F4      		brne .+2
 2257 05f4 00C0      		rjmp .L92
 2258               	.LVL126:
 393:../src/ir_comm.c **** 			}
 2259               		.loc 1 393 0
 2260 05f6 81E0      		ldi r24,lo8(1)
 2261 05f8 8093 0000 		sts processing_ffsync,r24
 2262               	.LVL127:
 2263               	.L71:
 2264               	.LBB353:
 2265               	.LBB354:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2266               		.loc 2 70 0
 2267 05fc 9FBF      		out __SREG__,r25
 2268               		.loc 2 71 0
 2269               	.LVL128:
 2270               	.LBE354:
 2271               	.LBE353:
 2272               	.LBE350:
 397:../src/ir_comm.c **** 		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
 2273               		.loc 1 397 0
 2274 05fe 8823      		tst r24
 2275 0600 01F4      		brne .+2
 2276 0602 00C0      		rjmp .L45
 2277               	.LVL129:
 2278               	.LBB355:
 2279               	.LBB356:
 2280               		.file 5 "../include/firefly_sync.h"
   1:../include/firefly_sync.h **** #pragma once
   2:../include/firefly_sync.h **** #include "droplet_base.h"
   3:../include/firefly_sync.h **** #include "ir_comm.h"
   4:../include/firefly_sync.h **** #include "random.h"
   5:../include/firefly_sync.h **** 
   6:../include/firefly_sync.h **** #define FFSYNC_FULL_PERIOD_MS		5153
   7:../include/firefly_sync.h **** 
   8:../include/firefly_sync.h **** #define FFSYNC_MS_CONVERSION_FACTOR 7.8125
   9:../include/firefly_sync.h **** 
  10:../include/firefly_sync.h **** #define FFSYNC_FULL_PERIOD		/*	58648	//*/(uint16_t)(FFSYNC_FULL_PERIOD_MS*FFSYNC_MS_CONVERSION_FACT
  11:../include/firefly_sync.h **** 								
  12:../include/firefly_sync.h **** #define FFSYNC_MAX_DEVIATION	/*	42		//*/(((uint16_t)(FFSYNC_FULL_PERIOD_MS/182))+1)
  13:../include/firefly_sync.h **** 
  14:../include/firefly_sync.h **** #define FFSYNC_EPSILON			60.0
  15:../include/firefly_sync.h **** 
  16:../include/firefly_sync.h **** #define FFSYNC_D				160
  17:../include/firefly_sync.h **** #define FFSYNC_W				200
  18:../include/firefly_sync.h **** 
  19:../include/firefly_sync.h **** void firefly_sync_init(void);
  20:../include/firefly_sync.h **** 
  21:../include/firefly_sync.h **** void set_sync_blink_color(uint8_t r, uint8_t g, uint8_t b);
  22:../include/firefly_sync.h **** void set_sync_blink_duration(uint16_t dur);
  23:../include/firefly_sync.h **** void enable_sync_blink(uint16_t phase_offset_ms);
  24:../include/firefly_sync.h **** uint8_t sync_blink_enabled(void);
  25:../include/firefly_sync.h **** void disable_sync_blink(void);
  26:../include/firefly_sync.h **** void processObsQueue(void);
  27:../include/firefly_sync.h **** void sendPing(uint16_t val);
  28:../include/firefly_sync.h **** 
  29:../include/firefly_sync.h **** typedef struct obs_queue_struct{
  30:../include/firefly_sync.h **** 	uint16_t obs;
  31:../include/firefly_sync.h **** 	struct obs_queue_struct* next;
  32:../include/firefly_sync.h **** 	struct obs_queue_struct* prev;
  33:../include/firefly_sync.h **** } ObsQueue;
  34:../include/firefly_sync.h **** 
  35:../include/firefly_sync.h **** ObsQueue* obsStart;
  36:../include/firefly_sync.h **** 
  37:../include/firefly_sync.h **** inline void update_firefly_counter(volatile uint16_t count, volatile uint8_t delay){
  38:../include/firefly_sync.h **** 	uint16_t theDelay = (delay+2)*FFSYNC_MS_CONVERSION_FACTOR;
 2281               		.loc 5 38 0
 2282 0604 70E0      		ldi r23,0
 2283 0606 6E5F      		subi r22,-2
 2284 0608 7F4F      		sbci r23,-1
 2285               	.LVL130:
 2286 060a 072E      		mov __tmp_reg__,r23
 2287 060c 000C      		lsl r0
 2288 060e 880B      		sbc r24,r24
 2289 0610 990B      		sbc r25,r25
 2290 0612 0E94 0000 		call __floatsisf
 2291               	.LVL131:
 2292 0616 20E0      		ldi r18,0
 2293 0618 30E0      		ldi r19,0
 2294 061a 4AEF      		ldi r20,lo8(-6)
 2295 061c 50E4      		ldi r21,lo8(64)
 2296 061e 0E94 0000 		call __mulsf3
 2297               	.LVL132:
 2298 0622 0E94 0000 		call __fixunssfsi
 2299               	.LVL133:
  39:../include/firefly_sync.h **** 	uint16_t obs;
  40:../include/firefly_sync.h **** 	ObsQueue* node;
  41:../include/firefly_sync.h **** 	if(count<=theDelay){
 2300               		.loc 5 41 0
 2301 0626 6A15      		cp r22,r10
 2302 0628 7B05      		cpc r23,r11
 2303 062a 00F4      		brsh .+2
 2304 062c 00C0      		rjmp .L73
  42:../include/firefly_sync.h **** 		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
 2305               		.loc 5 42 0
 2306 062e FFEB      		ldi r31,-65
 2307 0630 AF1A      		sub r10,r31
 2308 0632 F2E6      		ldi r31,98
 2309 0634 BF0A      		sbc r11,r31
 2310               	.LVL134:
 2311 0636 A61A      		sub r10,r22
 2312 0638 B70A      		sbc r11,r23
 2313               	.LVL135:
 2314               	.L74:
 2315               	.LBB357:
 2316               	.LBB358:
 2317               	.LBB359:
  43:../include/droplet_base.h **** }
  44:../include/droplet_base.h **** 
  45:../include/droplet_base.h **** inline void* myMalloc(size_t size){
  46:../include/droplet_base.h **** 	void* tmp = NULL;
  47:../include/droplet_base.h **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2318               		.loc 4 47 0
 2319 063a 1FB7      		in r17,__SREG__
 2320               	.LVL136:
 2321               	.LBB360:
 2322               	.LBB361:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2323               		.loc 2 50 0
 2324               	/* #APP */
 2325               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2326 063c F894      		cli
 2327               	 ;  0 "" 2
 2328               	.LVL137:
 2329               	/* #NOAPP */
 2330               	.LBE361:
 2331               	.LBE360:
  48:../include/droplet_base.h **** 		tmp = malloc(size);
 2332               		.loc 4 48 0
 2333 063e 86E0      		ldi r24,lo8(6)
 2334 0640 90E0      		ldi r25,0
 2335 0642 0E94 0000 		call malloc
 2336               	.LVL138:
 2337               	.LBB362:
 2338               	.LBB363:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2339               		.loc 2 70 0
 2340 0646 1FBF      		out __SREG__,r17
 2341               		.loc 2 71 0
 2342               	.LVL139:
 2343               	.LBE363:
 2344               	.LBE362:
 2345               	.LBE359:
 2346               	.LBE358:
 2347               	.LBE357:
  43:../include/firefly_sync.h **** 	}else{
  44:../include/firefly_sync.h **** 		obs = count - theDelay;
  45:../include/firefly_sync.h **** 	}
  46:../include/firefly_sync.h **** 	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
  47:../include/firefly_sync.h **** 	if(node==NULL){
 2348               		.loc 5 47 0
 2349 0648 0097      		sbiw r24,0
 2350 064a 01F0      		breq .L75
  48:../include/firefly_sync.h **** 		return;
  49:../include/firefly_sync.h **** 	}
  50:../include/firefly_sync.h **** 	ObsQueue* curr = obsStart->prev;
 2351               		.loc 5 50 0
 2352 064c E091 0000 		lds r30,obsStart
 2353 0650 F091 0000 		lds r31,obsStart+1
 2354 0654 0480      		ldd __tmp_reg__,Z+4
 2355 0656 F581      		ldd r31,Z+5
 2356 0658 E02D      		mov r30,__tmp_reg__
 2357               	.LVL140:
  51:../include/firefly_sync.h **** 	while(obs < curr->obs){
 2358               		.loc 5 51 0
 2359 065a 2081      		ld r18,Z
 2360 065c 3181      		ldd r19,Z+1
 2361 065e A216      		cp r10,r18
 2362 0660 B306      		cpc r11,r19
 2363 0662 00F4      		brsh .L76
 2364               	.L77:
  52:../include/firefly_sync.h **** 		curr = curr->prev;
 2365               		.loc 5 52 0
 2366 0664 0480      		ldd __tmp_reg__,Z+4
 2367 0666 F581      		ldd r31,Z+5
 2368 0668 E02D      		mov r30,__tmp_reg__
 2369               	.LVL141:
  51:../include/firefly_sync.h **** 	while(obs < curr->obs){
 2370               		.loc 5 51 0
 2371 066a 2081      		ld r18,Z
 2372 066c 3181      		ldd r19,Z+1
 2373 066e A216      		cp r10,r18
 2374 0670 B306      		cpc r11,r19
 2375 0672 00F0      		brlo .L77
 2376               	.L76:
  53:../include/firefly_sync.h **** 	}
  54:../include/firefly_sync.h **** 	(curr->next)->prev = node;
 2377               		.loc 5 54 0
 2378 0674 2281      		ldd r18,Z+2
 2379 0676 3381      		ldd r19,Z+3
 2380 0678 D901      		movw r26,r18
 2381 067a 1496      		adiw r26,4
 2382 067c 8D93      		st X+,r24
 2383 067e 9C93      		st X,r25
 2384 0680 1597      		sbiw r26,4+1
  55:../include/firefly_sync.h **** 	node->next = curr->next;
 2385               		.loc 5 55 0
 2386 0682 DC01      		movw r26,r24
 2387 0684 1296      		adiw r26,2
 2388 0686 2D93      		st X+,r18
 2389 0688 3C93      		st X,r19
 2390 068a 1397      		sbiw r26,2+1
  56:../include/firefly_sync.h **** 	node->prev = curr;
 2391               		.loc 5 56 0
 2392 068c 1496      		adiw r26,4
 2393 068e ED93      		st X+,r30
 2394 0690 FC93      		st X,r31
 2395 0692 1597      		sbiw r26,4+1
  57:../include/firefly_sync.h **** 	curr->next = node;
 2396               		.loc 5 57 0
 2397 0694 8283      		std Z+2,r24
 2398 0696 9383      		std Z+3,r25
  58:../include/firefly_sync.h **** 			
  59:../include/firefly_sync.h **** 	node->obs = obs;
 2399               		.loc 5 59 0
 2400 0698 AD92      		st X+,r10
 2401 069a BC92      		st X,r11
 2402               	.LVL142:
 2403               	.L75:
 2404               	.LBE356:
 2405               	.LBE355:
 2406               	.LBB365:
 400:../src/ir_comm.c **** 			for(uint8_t dir=0;dir<6;dir++){
 2407               		.loc 1 400 0
 2408 069c 5FB7      		in r21,__SREG__
 2409               	.LVL143:
 2410               	.LBB366:
 2411               	.LBB367:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2412               		.loc 2 50 0
 2413               	/* #APP */
 2414               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2415 069e F894      		cli
 2416               	 ;  0 "" 2
 2417               	.LVL144:
 2418               	/* #NOAPP */
 2419 06a0 A0E0      		ldi r26,lo8(channel)
 2420 06a2 B0E0      		ldi r27,hi8(channel)
 2421 06a4 80E0      		ldi r24,0
 2422 06a6 90E0      		ldi r25,0
 2423               	.LBE367:
 2424               	.LBE366:
 2425               	.LBB368:
 402:../src/ir_comm.c **** 					clear_ir_buffer(dir);
 2426               		.loc 1 402 0
 2427 06a8 49E3      		ldi r20,lo8(57)
 2428 06aa 00C0      		rjmp .L79
 2429               	.LVL145:
 2430               	.L78:
 2431 06ac 0196      		adiw r24,1
 2432               	.LVL146:
 2433 06ae 1296      		adiw r26,2
 401:../src/ir_comm.c **** 				if(ir_rxtx[dir].sender_ID==senderID){
 2434               		.loc 1 401 0
 2435 06b0 8630      		cpi r24,6
 2436 06b2 9105      		cpc r25,__zero_reg__
 2437 06b4 01F0      		breq .L126
 2438               	.LVL147:
 2439               	.L79:
 402:../src/ir_comm.c **** 					clear_ir_buffer(dir);
 2440               		.loc 1 402 0
 2441 06b6 489F      		mul r20,r24
 2442 06b8 F001      		movw r30,r0
 2443 06ba 499F      		mul r20,r25
 2444 06bc F00D      		add r31,r0
 2445 06be 1124      		clr __zero_reg__
 2446 06c0 E050      		subi r30,lo8(-(ir_rxtx))
 2447 06c2 F040      		sbci r31,hi8(-(ir_rxtx))
 2448 06c4 2681      		ldd r18,Z+6
 2449 06c6 3781      		ldd r19,Z+7
 2450 06c8 C217      		cp r28,r18
 2451 06ca D307      		cpc r29,r19
 2452 06cc 01F4      		brne .L78
 2453               	.LVL148:
 2454               	.LBB369:
 2455               	.LBB370:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 2456               		.loc 1 31 0
 2457 06ce 1482      		std Z+4,__zero_reg__
 2458 06d0 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 2459               		.loc 1 32 0
 2460 06d2 1682      		std Z+6,__zero_reg__
 2461 06d4 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 2462               		.loc 1 34 0
 2463 06d6 1086      		std Z+8,__zero_reg__
 2464 06d8 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 2465               		.loc 1 35 0
 2466 06da 1286      		std Z+10,__zero_reg__
 2467 06dc 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 2468               		.loc 1 36 0
 2469 06de 1486      		std Z+12,__zero_reg__
 2470 06e0 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 2471               		.loc 1 37 0
 2472 06e2 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 2473               		.loc 1 38 0
 2474 06e4 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 2475               		.loc 1 40 0
 2476 06e6 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 2477               		.loc 1 42 0
 2478 06e8 ED91      		ld r30,X+
 2479 06ea FC91      		ld r31,X
 2480 06ec 1197      		sbiw r26,1
 2481 06ee 2481      		ldd r18,Z+4
 2482 06f0 2061      		ori r18,lo8(16)
 2483 06f2 2483      		std Z+4,r18
 2484 06f4 00C0      		rjmp .L78
 2485               	.LVL149:
 2486               	.L94:
 2487               	.LBE370:
 2488               	.LBE369:
 2489               	.LBE368:
 2490               	.LBE365:
 2491               	.LBE349:
 2492               	.LBE348:
 2493               	.LBB378:
 2494               	.LBB345:
 413:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2495               		.loc 1 413 0
 2496 06f6 40E0      		ldi r20,0
 2497               	.LVL150:
 2498 06f8 00C0      		rjmp .L80
 2499               	.LVL151:
 2500               	.L92:
 2501               	.LBE345:
 2502               	.LBE378:
 2503               	.LBB379:
 2504               	.LBB375:
 386:../src/ir_comm.c **** 	uint16_t count;
 2505               		.loc 1 386 0
 2506 06fa 80E0      		ldi r24,0
 2507 06fc 00C0      		rjmp .L71
 2508               	.LVL152:
 2509               	.L91:
 2510               	.LBE375:
 2511               	.LBE379:
 2512               	.LBB380:
 2513               	.LBB323:
 361:../src/ir_comm.c **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2514               		.loc 1 361 0
 2515 06fe 80E0      		ldi r24,0
 2516 0700 00C0      		rjmp .L66
 2517               	.LVL153:
 2518               	.L126:
 2519               	.LBE323:
 2520               	.LBE380:
 2521               	.LBB381:
 2522               	.LBB376:
 2523               	.LBB373:
 406:../src/ir_comm.c **** 		}
 2524               		.loc 1 406 0
 2525 0702 1092 0000 		sts processing_ffsync,__zero_reg__
 2526               	.LVL154:
 2527               	.LBB371:
 2528               	.LBB372:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2529               		.loc 2 70 0
 2530 0706 5FBF      		out __SREG__,r21
 2531               		.loc 2 71 0
 2532               	.LVL155:
 2533 0708 00C0      		rjmp .L45
 2534               	.LVL156:
 2535               	.L125:
 2536               	.LBE372:
 2537               	.LBE371:
 2538               	.LBE373:
 2539               	.LBE376:
 2540               	.LBE381:
 2541               	.LBB382:
 2542               	.LBB346:
 2543               	.LBB339:
 2544               	.LBB337:
 2545               	.LBB338:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2546               		.loc 2 70 0
 2547 070a DFBF      		out __SREG__,r29
 2548               		.loc 2 71 0
 2549               	.LVL157:
 2550               	.LBE338:
 2551               	.LBE337:
 2552               	.LBE339:
 436:../src/ir_comm.c **** 		ir_range_meas();	
 2553               		.loc 1 436 0
 2554 070c 0091 0000 		lds r16,rnbCmdSentTime
 2555 0710 1091 0000 		lds r17,rnbCmdSentTime+1
 2556 0714 2091 0000 		lds r18,rnbCmdSentTime+2
 2557 0718 3091 0000 		lds r19,rnbCmdSentTime+3
 2558 071c 4130      		cpi r20,lo8(1)
 2559 071e 01F0      		breq .L97
 2560 0720 84E1      		ldi r24,lo8(20)
 2561 0722 90E0      		ldi r25,0
 2562               	.LVL158:
 2563 0724 8C1B      		sub r24,r28
 2564 0726 9109      		sbc r25,__zero_reg__
 2565 0728 092E      		mov __tmp_reg__,r25
 2566 072a 000C      		lsl r0
 2567 072c AA0B      		sbc r26,r26
 2568 072e BB0B      		sbc r27,r27
 2569               	.L85:
 2570 0730 B901      		movw r22,r18
 2571 0732 A801      		movw r20,r16
 2572 0734 481B      		sub r20,r24
 2573 0736 590B      		sbc r21,r25
 2574 0738 6A0B      		sbc r22,r26
 2575 073a 7B0B      		sbc r23,r27
 2576 073c 4093 0000 		sts rnbCmdSentTime,r20
 2577 0740 5093 0000 		sts rnbCmdSentTime+1,r21
 2578 0744 6093 0000 		sts rnbCmdSentTime+2,r22
 2579 0748 7093 0000 		sts rnbCmdSentTime+3,r23
 437:../src/ir_comm.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2580               		.loc 1 437 0
 2581 074c 0E94 0000 		call ir_range_meas
 2582               	.LVL159:
 2583               	.LBB340:
 438:../src/ir_comm.c **** 			hp_ir_block_bm = 0;
 2584               		.loc 1 438 0
 2585 0750 8FB7      		in r24,__SREG__
 2586               	.LVL160:
 2587               	.LBB341:
 2588               	.LBB342:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2589               		.loc 2 50 0
 2590               	/* #APP */
 2591               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2592 0752 F894      		cli
 2593               	 ;  0 "" 2
 2594               	.LVL161:
 2595               	/* #NOAPP */
 2596               	.LBE342:
 2597               	.LBE341:
 439:../src/ir_comm.c **** 		}
 2598               		.loc 1 439 0
 2599 0754 1092 0000 		sts hp_ir_block_bm,__zero_reg__
 2600               	.LVL162:
 2601               	.LBB343:
 2602               	.LBB344:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2603               		.loc 2 70 0
 2604 0758 8FBF      		out __SREG__,r24
 2605               		.loc 2 71 0
 2606               	.LVL163:
 2607               	.LBE344:
 2608               	.LBE343:
 2609               	.LBE340:
 441:../src/ir_comm.c **** 	}
 2610               		.loc 1 441 0
 2611 075a 20E0      		ldi r18,0
 2612 075c 30E0      		ldi r19,0
 2613 075e 40E0      		ldi r20,lo8(gs(use_rnb_data))
 2614 0760 50E0      		ldi r21,hi8(gs(use_rnb_data))
 2615 0762 65E0      		ldi r22,lo8(5)
 2616 0764 70E0      		ldi r23,0
 2617 0766 80E0      		ldi r24,0
 2618 0768 90E0      		ldi r25,0
 2619 076a 0E94 0000 		call schedule_task
 2620               	.LVL164:
 2621 076e 00C0      		rjmp .L45
 2622               	.LVL165:
 2623               	.L73:
 2624               	.LBE346:
 2625               	.LBE382:
 2626               	.LBB383:
 2627               	.LBB377:
 2628               	.LBB374:
 2629               	.LBB364:
  44:../include/firefly_sync.h **** 	}
 2630               		.loc 5 44 0
 2631 0770 A61A      		sub r10,r22
 2632 0772 B70A      		sbc r11,r23
 2633               	.LVL166:
 2634 0774 00C0      		rjmp .L74
 2635               	.LVL167:
 2636               	.L97:
 2637               	.LBE364:
 2638               	.LBE374:
 2639               	.LBE377:
 2640               	.LBE383:
 2641               	.LBB384:
 2642               	.LBB347:
 436:../src/ir_comm.c **** 		ir_range_meas();	
 2643               		.loc 1 436 0
 2644 0776 80E0      		ldi r24,0
 2645 0778 90E0      		ldi r25,0
 2646 077a DC01      		movw r26,r24
 2647               	.LVL168:
 2648 077c 00C0      		rjmp .L85
 2649               	.LBE347:
 2650               	.LBE384:
 2651               	.LBE390:
 2652               		.cfi_endproc
 2653               	.LFE76:
 2655               		.section	.text.ir_comm_init,"ax",@progbits
 2656               	.global	ir_comm_init
 2658               	ir_comm_init:
 2659               	.LFB63:
  46:../src/ir_comm.c **** 	/* Initialize UARTs */
 2660               		.loc 1 46 0
 2661               		.cfi_startproc
 2662 0000 CF93      		push r28
 2663               	.LCFI52:
 2664               		.cfi_def_cfa_offset 4
 2665               		.cfi_offset 28, -3
 2666 0002 DF93      		push r29
 2667               	.LCFI53:
 2668               		.cfi_def_cfa_offset 5
 2669               		.cfi_offset 29, -4
 2670               	/* prologue: function */
 2671               	/* frame size = 0 */
 2672               	/* stack size = 2 */
 2673               	.L__stack_usage = 2
  49:../src/ir_comm.c **** 	PORTD.DIRCLR = PIN2_bm;					// DIR 2
 2674               		.loc 1 49 0
 2675 0004 94E4      		ldi r25,lo8(68)
 2676 0006 9093 4206 		sts 1602,r25
  50:../src/ir_comm.c **** 	PORTE.DIRCLR = PIN2_bm | PIN6_bm;		// DIR 3,4
 2677               		.loc 1 50 0
 2678 000a 84E0      		ldi r24,lo8(4)
 2679 000c 8093 6206 		sts 1634,r24
  51:../src/ir_comm.c **** 	PORTF.DIRCLR = PIN2_bm;					// DIR 5
 2680               		.loc 1 51 0
 2681 0010 9093 8206 		sts 1666,r25
  52:../src/ir_comm.c **** 
 2682               		.loc 1 52 0
 2683 0014 8093 A206 		sts 1698,r24
 2684               	.LBB391:
  54:../src/ir_comm.c **** 		hp_ir_block_bm=0xFF;
 2685               		.loc 1 54 0
 2686 0018 8FB7      		in r24,__SREG__
 2687               	.LVL169:
 2688               	.LBB392:
 2689               	.LBB393:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2690               		.loc 2 50 0
 2691               	/* #APP */
 2692               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2693 001a F894      		cli
 2694               	 ;  0 "" 2
 2695               	.LVL170:
 2696               	/* #NOAPP */
 2697               	.LBE393:
 2698               	.LBE392:
  55:../src/ir_comm.c **** 	}
 2699               		.loc 1 55 0
 2700 001c 9FEF      		ldi r25,lo8(-1)
 2701 001e 9093 0000 		sts hp_ir_block_bm,r25
 2702               	.LVL171:
 2703               	.LBB394:
 2704               	.LBB395:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2705               		.loc 2 70 0
 2706 0022 8FBF      		out __SREG__,r24
 2707               		.loc 2 71 0
 2708               	.LVL172:
 2709 0024 C0E0      		ldi r28,lo8(channel)
 2710 0026 D0E0      		ldi r29,hi8(channel)
 2711 0028 60E0      		ldi r22,lo8(channel+12)
 2712 002a 70E0      		ldi r23,hi8(channel+12)
 2713 002c DE01      		movw r26,r28
 2714               	.LBE395:
 2715               	.LBE394:
 2716               	.LBE391:
 2717               	.LBB396:
  59:../src/ir_comm.c **** 		channel[i]->CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;		// 8 bits, no pari
 2718               		.loc 1 59 0
 2719 002e 48E2      		ldi r20,lo8(40)
  60:../src/ir_comm.c **** 		
 2720               		.loc 1 60 0
 2721 0030 33E0      		ldi r19,lo8(3)
  62:../src/ir_comm.c **** 		//channel[i]->BAUDCTRLA = 0b11000000; channel[i]->BAUDCTRLB = 0b00000100; //9600 baud - this woul
 2722               		.loc 1 62 0
 2723 0032 20E7      		ldi r18,lo8(112)
 2724 0034 92E0      		ldi r25,lo8(2)
 2725               	.LVL173:
 2726               	.L128:
  59:../src/ir_comm.c **** 		channel[i]->CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;		// 8 bits, no pari
 2727               		.loc 1 59 0 discriminator 3
 2728 0036 ED91      		ld r30,X+
 2729 0038 FD91      		ld r31,X+
 2730 003a 4383      		std Z+3,r20
  60:../src/ir_comm.c **** 		
 2731               		.loc 1 60 0 discriminator 3
 2732 003c 3583      		std Z+5,r19
  62:../src/ir_comm.c **** 		//channel[i]->BAUDCTRLA = 0b11000000; channel[i]->BAUDCTRLB = 0b00000100; //9600 baud - this woul
 2733               		.loc 1 62 0 discriminator 3
 2734 003e 2683      		std Z+6,r18
 2735 0040 9783      		std Z+7,r25
  65:../src/ir_comm.c **** 		channel[i]->CTRLB |= USART_TXEN_bm;
 2736               		.loc 1 65 0 discriminator 3
 2737 0042 8481      		ldd r24,Z+4
 2738 0044 8061      		ori r24,lo8(16)
 2739 0046 8483      		std Z+4,r24
  66:../src/ir_comm.c **** 	}
 2740               		.loc 1 66 0 discriminator 3
 2741 0048 8481      		ldd r24,Z+4
 2742 004a 8860      		ori r24,lo8(8)
 2743 004c 8483      		std Z+4,r24
  58:../src/ir_comm.c **** 		channel[i]->CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_MED_gc;		// Set USART as m
 2744               		.loc 1 58 0 discriminator 3
 2745 004e 6A17      		cp r22,r26
 2746 0050 7B07      		cpc r23,r27
 2747 0052 01F4      		brne .L128
 2748               	.LBE396:
  83:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++) clear_ir_buffer(dir); //this initializes the buffer's values to 0
 2749               		.loc 1 83 0
 2750 0054 1092 0000 		sts curr_ir_power,__zero_reg__
 2751 0058 1092 0000 		sts curr_ir_power+1,__zero_reg__
 2752               	.LVL174:
 2753 005c 80E0      		ldi r24,0
 2754 005e 90E0      		ldi r25,0
 2755               	.LBB397:
 2756               	.LBB398:
 2757               	.LBB399:
  31:../src/ir_comm.c **** 	ir_rxtx[dir].sender_ID		= 0;
 2758               		.loc 1 31 0
 2759 0060 39E3      		ldi r19,lo8(57)
 2760               	.LVL175:
 2761               	.L129:
 2762 0062 389F      		mul r19,r24
 2763 0064 F001      		movw r30,r0
 2764 0066 399F      		mul r19,r25
 2765 0068 F00D      		add r31,r0
 2766 006a 1124      		clr __zero_reg__
 2767 006c E050      		subi r30,lo8(-(ir_rxtx))
 2768 006e F040      		sbci r31,hi8(-(ir_rxtx))
 2769 0070 1482      		std Z+4,__zero_reg__
 2770 0072 1582      		std Z+5,__zero_reg__
  32:../src/ir_comm.c **** 	
 2771               		.loc 1 32 0
 2772 0074 1682      		std Z+6,__zero_reg__
 2773 0076 1782      		std Z+7,__zero_reg__
  34:../src/ir_comm.c **** 	ir_rxtx[dir].curr_pos		= 0;
 2774               		.loc 1 34 0
 2775 0078 1086      		std Z+8,__zero_reg__
 2776 007a 1186      		std Z+9,__zero_reg__
  35:../src/ir_comm.c **** 	ir_rxtx[dir].calc_crc		= 0;
 2777               		.loc 1 35 0
 2778 007c 1286      		std Z+10,__zero_reg__
 2779 007e 1386      		std Z+11,__zero_reg__
  36:../src/ir_comm.c **** 	ir_rxtx[dir].data_length	= 0;	
 2780               		.loc 1 36 0
 2781 0080 1486      		std Z+12,__zero_reg__
 2782 0082 1586      		std Z+13,__zero_reg__
  37:../src/ir_comm.c **** 	ir_rxtx[dir].inc_dir 		= 0;
 2783               		.loc 1 37 0
 2784 0084 16AA      		std Z+54,__zero_reg__
  38:../src/ir_comm.c **** 	
 2785               		.loc 1 38 0
 2786 0086 17AA      		std Z+55,__zero_reg__
  40:../src/ir_comm.c **** 	
 2787               		.loc 1 40 0
 2788 0088 10AE      		std Z+56,__zero_reg__
  42:../src/ir_comm.c **** 
 2789               		.loc 1 42 0
 2790 008a E991      		ld r30,Y+
 2791 008c F991      		ld r31,Y+
 2792 008e 2481      		ldd r18,Z+4
 2793 0090 2061      		ori r18,lo8(16)
 2794 0092 2483      		std Z+4,r18
 2795               	.LVL176:
 2796 0094 0196      		adiw r24,1
 2797               	.LVL177:
 2798               	.LBE399:
 2799               	.LBE398:
  84:../src/ir_comm.c **** 	cmd_arrival_time=0;
 2800               		.loc 1 84 0
 2801 0096 8630      		cpi r24,6
 2802 0098 9105      		cpc r25,__zero_reg__
 2803 009a 01F4      		brne .L129
 2804               	.LBE397:
  85:../src/ir_comm.c **** 	num_waiting_msgs=0;
 2805               		.loc 1 85 0
 2806 009c 1092 0000 		sts cmd_arrival_time,__zero_reg__
 2807 00a0 1092 0000 		sts cmd_arrival_time+1,__zero_reg__
 2808 00a4 1092 0000 		sts cmd_arrival_time+2,__zero_reg__
 2809 00a8 1092 0000 		sts cmd_arrival_time+3,__zero_reg__
  86:../src/ir_comm.c **** 	user_facing_messages_ovf=0;
 2810               		.loc 1 86 0
 2811 00ac 1092 0000 		sts num_waiting_msgs,__zero_reg__
  87:../src/ir_comm.c **** 	processing_cmd = 0;
 2812               		.loc 1 87 0
 2813 00b0 1092 0000 		sts user_facing_messages_ovf,__zero_reg__
  88:../src/ir_comm.c **** 	processing_ffsync = 0;
 2814               		.loc 1 88 0
 2815 00b4 1092 0000 		sts processing_cmd,__zero_reg__
  89:../src/ir_comm.c **** 
 2816               		.loc 1 89 0
 2817 00b8 1092 0000 		sts processing_ffsync,__zero_reg__
  91:../src/ir_comm.c **** 	
 2818               		.loc 1 91 0
 2819 00bc 20E0      		ldi r18,0
 2820 00be 30E0      		ldi r19,0
 2821 00c0 40E0      		ldi r20,lo8(gs(perform_ir_upkeep))
 2822 00c2 50E0      		ldi r21,hi8(gs(perform_ir_upkeep))
 2823 00c4 6EE3      		ldi r22,lo8(62)
 2824 00c6 70E0      		ldi r23,0
 2825 00c8 80E0      		ldi r24,0
 2826 00ca 90E0      		ldi r25,0
 2827 00cc 0E94 0000 		call schedule_periodic_task
 2828               	.LVL178:
 2829               	.LBB400:
  93:../src/ir_comm.c **** 		hp_ir_block_bm = 0;
 2830               		.loc 1 93 0
 2831 00d0 8FB7      		in r24,__SREG__
 2832               	.LVL179:
 2833               	.LBB401:
 2834               	.LBB402:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 2835               		.loc 2 50 0
 2836               	/* #APP */
 2837               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 2838 00d2 F894      		cli
 2839               	 ;  0 "" 2
 2840               	.LVL180:
 2841               	/* #NOAPP */
 2842               	.LBE402:
 2843               	.LBE401:
  94:../src/ir_comm.c **** 	}
 2844               		.loc 1 94 0
 2845 00d4 1092 0000 		sts hp_ir_block_bm,__zero_reg__
 2846               	.LVL181:
 2847               	.LBB403:
 2848               	.LBB404:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 2849               		.loc 2 70 0
 2850 00d8 8FBF      		out __SREG__,r24
 2851               		.loc 2 71 0
 2852               	.LVL182:
 2853               	/* epilogue start */
 2854               	.LBE404:
 2855               	.LBE403:
 2856               	.LBE400:
  96:../src/ir_comm.c **** 
 2857               		.loc 1 96 0
 2858 00da DF91      		pop r29
 2859 00dc CF91      		pop r28
 2860 00de 0895      		ret
 2861               		.cfi_endproc
 2862               	.LFE63:
 2864               		.section	.text.send_msg,"ax",@progbits
 2865               	.global	send_msg
 2867               	send_msg:
 2868               	.LFB66:
 152:../src/ir_comm.c **** 	if(data_length>IR_BUFFER_SIZE) printf_P(PSTR("ERROR: Message exceeds IR_BUFFER_SIZE.\r\n"));
 2869               		.loc 1 152 0
 2870               		.cfi_startproc
 2871               	.LVL183:
 2872 0000 2F92      		push r2
 2873               	.LCFI54:
 2874               		.cfi_def_cfa_offset 4
 2875               		.cfi_offset 2, -3
 2876 0002 3F92      		push r3
 2877               	.LCFI55:
 2878               		.cfi_def_cfa_offset 5
 2879               		.cfi_offset 3, -4
 2880 0004 4F92      		push r4
 2881               	.LCFI56:
 2882               		.cfi_def_cfa_offset 6
 2883               		.cfi_offset 4, -5
 2884 0006 5F92      		push r5
 2885               	.LCFI57:
 2886               		.cfi_def_cfa_offset 7
 2887               		.cfi_offset 5, -6
 2888 0008 6F92      		push r6
 2889               	.LCFI58:
 2890               		.cfi_def_cfa_offset 8
 2891               		.cfi_offset 6, -7
 2892 000a 7F92      		push r7
 2893               	.LCFI59:
 2894               		.cfi_def_cfa_offset 9
 2895               		.cfi_offset 7, -8
 2896 000c 8F92      		push r8
 2897               	.LCFI60:
 2898               		.cfi_def_cfa_offset 10
 2899               		.cfi_offset 8, -9
 2900 000e 9F92      		push r9
 2901               	.LCFI61:
 2902               		.cfi_def_cfa_offset 11
 2903               		.cfi_offset 9, -10
 2904 0010 AF92      		push r10
 2905               	.LCFI62:
 2906               		.cfi_def_cfa_offset 12
 2907               		.cfi_offset 10, -11
 2908 0012 BF92      		push r11
 2909               	.LCFI63:
 2910               		.cfi_def_cfa_offset 13
 2911               		.cfi_offset 11, -12
 2912 0014 CF92      		push r12
 2913               	.LCFI64:
 2914               		.cfi_def_cfa_offset 14
 2915               		.cfi_offset 12, -13
 2916 0016 DF92      		push r13
 2917               	.LCFI65:
 2918               		.cfi_def_cfa_offset 15
 2919               		.cfi_offset 13, -14
 2920 0018 EF92      		push r14
 2921               	.LCFI66:
 2922               		.cfi_def_cfa_offset 16
 2923               		.cfi_offset 14, -15
 2924 001a FF92      		push r15
 2925               	.LCFI67:
 2926               		.cfi_def_cfa_offset 17
 2927               		.cfi_offset 15, -16
 2928 001c 0F93      		push r16
 2929               	.LCFI68:
 2930               		.cfi_def_cfa_offset 18
 2931               		.cfi_offset 16, -17
 2932 001e 1F93      		push r17
 2933               	.LCFI69:
 2934               		.cfi_def_cfa_offset 19
 2935               		.cfi_offset 17, -18
 2936 0020 CF93      		push r28
 2937               	.LCFI70:
 2938               		.cfi_def_cfa_offset 20
 2939               		.cfi_offset 28, -19
 2940 0022 DF93      		push r29
 2941               	.LCFI71:
 2942               		.cfi_def_cfa_offset 21
 2943               		.cfi_offset 29, -20
 2944               	/* prologue: function */
 2945               	/* frame size = 0 */
 2946               	/* stack size = 18 */
 2947               	.L__stack_usage = 18
 2948 0024 E82E      		mov r14,r24
 2949 0026 4B01      		movw r8,r22
 2950 0028 342E      		mov r3,r20
 2951 002a 222E      		mov r2,r18
 153:../src/ir_comm.c **** 	
 2952               		.loc 1 153 0
 2953 002c 88E2      		ldi r24,lo8(40)
 2954               	.LVL184:
 2955 002e 8417      		cp r24,r20
 2956 0030 00F4      		brsh .+2
 2957 0032 00C0      		rjmp .L155
 2958               	.LVL185:
 2959               	.L133:
 2960               	.LBB420:
 2961               	.LBB421:
  42:../include/droplet_base.h **** }
 2962               		.loc 4 42 0
 2963 0034 6090 0000 		lds r6,droplet_ID
 2964 0038 7090 0000 		lds r7,droplet_ID+1
 2965               	.LVL186:
 2966 003c F12C      		mov r15,__zero_reg__
 2967 003e 80E0      		ldi r24,0
 2968 0040 90E0      		ldi r25,0
 2969               	.LVL187:
 2970               	.L137:
 2971               	.LBE421:
 2972               	.LBE420:
 2973               	.LBB422:
 157:../src/ir_comm.c **** 			crc = _crc16_update(crc, (ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm));
 2974               		.loc 1 157 0
 2975 0042 9701      		movw r18,r14
 2976 0044 082E      		mov r0,r24
 2977 0046 00C0      		rjmp 2f
 2978               		1:
 2979 0048 3595      		asr r19
 2980 004a 2795      		ror r18
 2981               		2:
 2982 004c 0A94      		dec r0
 2983 004e 02F4      		brpl 1b
 2984 0050 20FD      		sbrc r18,0
 2985 0052 00C0      		rjmp .L156
 2986               	.LVL188:
 2987 0054 0196      		adiw r24,1
 2988               	.LVL189:
 156:../src/ir_comm.c **** 		if(dirs&(1<<dir)){			
 2989               		.loc 1 156 0 discriminator 2
 2990 0056 8630      		cpi r24,6
 2991 0058 9105      		cpc r25,__zero_reg__
 2992 005a 01F4      		brne .L137
 2993               	.LBE422:
 155:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++){
 2994               		.loc 1 155 0
 2995 005c E301      		movw r28,r6
 2996               	.LVL190:
 2997               	.L138:
 2998               	.LBB427:
 164:../src/ir_comm.c **** 	
 2999               		.loc 1 164 0 discriminator 1
 3000 005e 3320      		tst r3
 3001 0060 01F0      		breq .L136
 3002 0062 F401      		movw r30,r8
 3003 0064 2FEF      		ldi r18,lo8(-1)
 3004 0066 230D      		add r18,r3
 3005 0068 30E0      		ldi r19,0
 3006 006a 2F5F      		subi r18,-1
 3007 006c 3F4F      		sbci r19,-1
 3008 006e 280D      		add r18,r8
 3009 0070 391D      		adc r19,r9
 3010               	.LVL191:
 3011               	.L139:
 164:../src/ir_comm.c **** 	
 3012               		.loc 1 164 0 is_stmt 0 discriminator 3
 3013 0072 8191      		ld r24,Z+
 3014               	.LVL192:
 3015               	.LBB428:
 3016               	.LBB429:
 3017               		.loc 3 118 0 is_stmt 1 discriminator 3
 3018               	/* #APP */
 3019               	 ;  118 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util
 3020 0074 C827      		eor r28,r24
 3021 0076 8C2F      		mov r24,r28
 3022 0078 8295      		swap r24
 3023 007a 8C27      		eor r24,r28
 3024 007c 082E      		mov __tmp_reg__,r24
 3025 007e 8695      		lsr r24
 3026 0080 8695      		lsr r24
 3027 0082 8025      		eor r24,__tmp_reg__
 3028 0084 082E      		mov __tmp_reg__,r24
 3029 0086 8695      		lsr r24
 3030 0088 8025      		eor r24,__tmp_reg__
 3031 008a 8770      		andi r24,0x07
 3032 008c 0C2E      		mov __tmp_reg__,r28
 3033 008e CD2F      		mov r28,r29
 3034 0090 8695      		lsr r24
 3035 0092 0794      		ror __tmp_reg__
 3036 0094 8795      		ror r24
 3037 0096 D02D      		mov r29,__tmp_reg__
 3038 0098 C827      		eor r28,r24
 3039 009a 0694      		lsr __tmp_reg__
 3040 009c 8795      		ror r24
 3041 009e D025      		eor r29,__tmp_reg__
 3042 00a0 C827      		eor r28,r24
 3043               	 ;  0 "" 2
 3044               	.LVL193:
 3045               	/* #NOAPP */
 3046               	.LBE429:
 3047               	.LBE428:
 164:../src/ir_comm.c **** 	
 3048               		.loc 1 164 0 discriminator 3
 3049 00a2 E217      		cp r30,r18
 3050 00a4 F307      		cpc r31,r19
 3051 00a6 01F4      		brne .L139
 3052               	.LVL194:
 3053               	.L136:
 3054 00a8 80E0      		ldi r24,lo8(ir_rxtx+14)
 3055 00aa A82E      		mov r10,r24
 3056 00ac 80E0      		ldi r24,hi8(ir_rxtx+14)
 3057 00ae B82E      		mov r11,r24
 3058 00b0 90E0      		ldi r25,lo8(ir_carrier_bm)
 3059 00b2 C92E      		mov r12,r25
 3060 00b4 90E0      		ldi r25,hi8(ir_carrier_bm)
 3061 00b6 D92E      		mov r13,r25
 3062               	.LBE427:
 155:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++){
 3063               		.loc 1 155 0
 3064 00b8 00E0      		ldi r16,0
 3065 00ba 10E0      		ldi r17,0
 3066               	.LBB430:
 173:../src/ir_comm.c **** 			TCF2.CTRLB |= ir_carrier_bm[dir];		// Turn on carrier wave on port dir
 3067               		.loc 1 173 0
 3068 00bc 432C      		mov r4,r3
 3069 00be 512C      		mov r5,__zero_reg__
 3070 00c0 00C0      		rjmp .L141
 3071               	.LVL195:
 3072               	.L140:
 3073 00c2 0F5F      		subi r16,-1
 3074 00c4 1F4F      		sbci r17,-1
 3075               	.LVL196:
 3076 00c6 F9E3      		ldi r31,57
 3077 00c8 AF0E      		add r10,r31
 3078 00ca B11C      		adc r11,__zero_reg__
 3079 00cc 8FEF      		ldi r24,-1
 3080 00ce C81A      		sub r12,r24
 3081 00d0 D80A      		sbc r13,r24
 166:../src/ir_comm.c **** 		if(dirs&(1<<dir)){
 3082               		.loc 1 166 0 discriminator 2
 3083 00d2 0630      		cpi r16,6
 3084 00d4 1105      		cpc r17,__zero_reg__
 3085 00d6 01F0      		breq .L157
 3086               	.LVL197:
 3087               	.L141:
 167:../src/ir_comm.c **** 			ir_rxtx[dir].status |= IR_STATUS_TRANSMITTING_bm;
 3088               		.loc 1 167 0
 3089 00d8 C701      		movw r24,r14
 3090 00da 002E      		mov r0,r16
 3091 00dc 00C0      		rjmp 2f
 3092               		1:
 3093 00de 9595      		asr r25
 3094 00e0 8795      		ror r24
 3095               		2:
 3096 00e2 0A94      		dec r0
 3097 00e4 02F4      		brpl 1b
 3098 00e6 80FF      		sbrs r24,0
 3099 00e8 00C0      		rjmp .L140
 168:../src/ir_comm.c **** 			ir_rxtx[dir].data_length = data_length;
 3100               		.loc 1 168 0
 3101 00ea 89E3      		ldi r24,lo8(57)
 3102 00ec 809F      		mul r24,r16
 3103 00ee F001      		movw r30,r0
 3104 00f0 819F      		mul r24,r17
 3105 00f2 F00D      		add r31,r0
 3106 00f4 1124      		clr __zero_reg__
 3107 00f6 E050      		subi r30,lo8(-(ir_rxtx))
 3108 00f8 F040      		sbci r31,hi8(-(ir_rxtx))
 3109 00fa 80AD      		ldd r24,Z+56
 3110 00fc 8062      		ori r24,lo8(32)
 3111 00fe 80AF      		std Z+56,r24
 169:../src/ir_comm.c **** 			ir_rxtx[dir].data_crc = crc;
 3112               		.loc 1 169 0
 3113 0100 36AA      		std Z+54,r3
 170:../src/ir_comm.c **** 			ir_rxtx[dir].curr_pos = 0;
 3114               		.loc 1 170 0
 3115 0102 C483      		std Z+4,r28
 3116 0104 D583      		std Z+5,r29
 171:../src/ir_comm.c **** 			ir_rxtx[dir].sender_ID = get_droplet_id();
 3117               		.loc 1 171 0
 3118 0106 1286      		std Z+10,__zero_reg__
 3119 0108 1386      		std Z+11,__zero_reg__
 172:../src/ir_comm.c **** 			memcpy((char*)ir_rxtx[dir].buf, data, data_length);
 3120               		.loc 1 172 0
 3121 010a 6682      		std Z+6,r6
 3122 010c 7782      		std Z+7,r7
 173:../src/ir_comm.c **** 			TCF2.CTRLB |= ir_carrier_bm[dir];		// Turn on carrier wave on port dir
 3123               		.loc 1 173 0
 3124 010e A201      		movw r20,r4
 3125 0110 B401      		movw r22,r8
 3126 0112 C501      		movw r24,r10
 3127 0114 0E94 0000 		call memcpy
 3128               	.LVL198:
 174:../src/ir_comm.c **** 		}
 3129               		.loc 1 174 0
 3130 0118 9091 010B 		lds r25,2817
 3131 011c F601      		movw r30,r12
 3132 011e 8081      		ld r24,Z
 3133 0120 892B      		or r24,r25
 3134 0122 8093 010B 		sts 2817,r24
 3135 0126 00C0      		rjmp .L140
 3136               	.L157:
 3137 0128 E0E0      		ldi r30,lo8(channel)
 3138 012a F0E0      		ldi r31,hi8(channel)
 166:../src/ir_comm.c **** 		if(dirs&(1<<dir)){
 3139               		.loc 1 166 0
 3140 012c 80E0      		ldi r24,0
 3141 012e 90E0      		ldi r25,0
 3142               	.LBE430:
 3143               	.LBB431:
 180:../src/ir_comm.c **** 			if(hp_flag){
 3144               		.loc 1 180 0
 3145 0130 49E3      		ldi r20,lo8(57)
 3146 0132 00C0      		rjmp .L144
 3147               	.LVL199:
 3148               	.L159:
 182:../src/ir_comm.c **** 			}else{
 3149               		.loc 1 182 0
 3150 0134 2360      		ori r18,lo8(3)
 3151 0136 1396      		adiw r26,3
 3152 0138 2C93      		st X,r18
 3153               	.L142:
 3154               	.LVL200:
 3155 013a 0196      		adiw r24,1
 3156               	.LVL201:
 3157 013c 3296      		adiw r30,2
 178:../src/ir_comm.c **** 		if(dirs&(1<<dir)){
 3158               		.loc 1 178 0 discriminator 2
 3159 013e 8630      		cpi r24,6
 3160 0140 9105      		cpc r25,__zero_reg__
 3161 0142 01F0      		breq .L158
 3162               	.LVL202:
 3163               	.L144:
 179:../src/ir_comm.c **** 			ir_rxtx[dir].last_byte = 0;
 3164               		.loc 1 179 0
 3165 0144 9701      		movw r18,r14
 3166 0146 082E      		mov r0,r24
 3167 0148 00C0      		rjmp 2f
 3168               		1:
 3169 014a 3595      		asr r19
 3170 014c 2795      		ror r18
 3171               		2:
 3172 014e 0A94      		dec r0
 3173 0150 02F4      		brpl 1b
 3174 0152 20FF      		sbrs r18,0
 3175 0154 00C0      		rjmp .L142
 180:../src/ir_comm.c **** 			if(hp_flag){
 3176               		.loc 1 180 0
 3177 0156 489F      		mul r20,r24
 3178 0158 D001      		movw r26,r0
 3179 015a 499F      		mul r20,r25
 3180 015c B00D      		add r27,r0
 3181 015e 1124      		clr __zero_reg__
 3182 0160 A050      		subi r26,lo8(-(ir_rxtx))
 3183 0162 B040      		sbci r27,hi8(-(ir_rxtx))
 3184 0164 1D92      		st X+,__zero_reg__
 3185 0166 1D92      		st X+,__zero_reg__
 3186 0168 1D92      		st X+,__zero_reg__
 3187 016a 1C92      		st X,__zero_reg__
 3188 016c 1397      		sbiw r26,3
 182:../src/ir_comm.c **** 			}else{
 3189               		.loc 1 182 0
 3190 016e A081      		ld r26,Z
 3191 0170 B181      		ldd r27,Z+1
 3192 0172 1396      		adiw r26,3
 3193 0174 2C91      		ld r18,X
 3194 0176 1397      		sbiw r26,3
 181:../src/ir_comm.c **** 				channel[dir]->CTRLA |= USART_DREINTLVL_HI_gc;
 3195               		.loc 1 181 0
 3196 0178 2110      		cpse r2,__zero_reg__
 3197 017a 00C0      		rjmp .L159
 184:../src/ir_comm.c **** 			}
 3198               		.loc 1 184 0
 3199 017c 2260      		ori r18,lo8(2)
 3200 017e 1396      		adiw r26,3
 3201 0180 2C93      		st X,r18
 3202               	.LVL203:
 3203 0182 0196      		adiw r24,1
 3204               	.LVL204:
 3205 0184 3296      		adiw r30,2
 178:../src/ir_comm.c **** 		if(dirs&(1<<dir)){
 3206               		.loc 1 178 0
 3207 0186 8630      		cpi r24,6
 3208 0188 9105      		cpc r25,__zero_reg__
 3209 018a 01F4      		brne .L144
 3210               	.LVL205:
 3211               	.L158:
 3212               	/* epilogue start */
 3213               	.LBE431:
 190:../src/ir_comm.c **** 
 3214               		.loc 1 190 0
 3215 018c DF91      		pop r29
 3216 018e CF91      		pop r28
 3217 0190 1F91      		pop r17
 3218 0192 0F91      		pop r16
 3219               	.LVL206:
 3220 0194 FF90      		pop r15
 3221 0196 EF90      		pop r14
 3222               	.LVL207:
 3223 0198 DF90      		pop r13
 3224 019a CF90      		pop r12
 3225 019c BF90      		pop r11
 3226 019e AF90      		pop r10
 3227 01a0 9F90      		pop r9
 3228 01a2 8F90      		pop r8
 3229               	.LVL208:
 3230 01a4 7F90      		pop r7
 3231 01a6 6F90      		pop r6
 3232 01a8 5F90      		pop r5
 3233 01aa 4F90      		pop r4
 3234 01ac 3F90      		pop r3
 3235               	.LVL209:
 3236 01ae 2F90      		pop r2
 3237               	.LVL210:
 3238 01b0 0895      		ret
 3239               	.LVL211:
 3240               	.L155:
 153:../src/ir_comm.c **** 	
 3241               		.loc 1 153 0 discriminator 1
 3242 01b2 80E0      		ldi r24,lo8(__c.5322)
 3243 01b4 90E0      		ldi r25,hi8(__c.5322)
 3244 01b6 9F93      		push r25
 3245               	.LCFI72:
 3246               		.cfi_def_cfa_offset 22
 3247 01b8 8F93      		push r24
 3248               	.LCFI73:
 3249               		.cfi_def_cfa_offset 23
 3250 01ba 0E94 0000 		call printf_P
 3251               	.LVL212:
 3252 01be 0F90      		pop __tmp_reg__
 3253 01c0 0F90      		pop __tmp_reg__
 3254               	.LCFI74:
 3255               		.cfi_def_cfa_offset 21
 3256 01c2 00C0      		rjmp .L133
 3257               	.LVL213:
 3258               	.L156:
 3259               	.LBB432:
 158:../src/ir_comm.c **** 			crc = _crc16_update(crc, ir_rxtx[dir].target_ID);
 3260               		.loc 1 158 0
 3261 01c4 29E3      		ldi r18,lo8(57)
 3262 01c6 289F      		mul r18,r24
 3263 01c8 F001      		movw r30,r0
 3264 01ca 299F      		mul r18,r25
 3265 01cc F00D      		add r31,r0
 3266 01ce 1124      		clr __zero_reg__
 3267 01d0 E050      		subi r30,lo8(-(ir_rxtx))
 3268 01d2 F040      		sbci r31,hi8(-(ir_rxtx))
 3269 01d4 80AD      		ldd r24,Z+56
 3270               	.LVL214:
 3271               	.LBB423:
 3272               	.LBB424:
 3273               		.loc 3 118 0
 3274 01d6 807C      		andi r24,lo8(-64)
 3275               	.LVL215:
 3276 01d8 E301      		movw r28,r6
 3277               	/* #APP */
 3278               	 ;  118 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util
 3279 01da C827      		eor r28,r24
 3280 01dc 8C2F      		mov r24,r28
 3281 01de 8295      		swap r24
 3282 01e0 8C27      		eor r24,r28
 3283 01e2 082E      		mov __tmp_reg__,r24
 3284 01e4 8695      		lsr r24
 3285 01e6 8695      		lsr r24
 3286 01e8 8025      		eor r24,__tmp_reg__
 3287 01ea 082E      		mov __tmp_reg__,r24
 3288 01ec 8695      		lsr r24
 3289 01ee 8025      		eor r24,__tmp_reg__
 3290 01f0 8770      		andi r24,0x07
 3291 01f2 0C2E      		mov __tmp_reg__,r28
 3292 01f4 CD2F      		mov r28,r29
 3293 01f6 8695      		lsr r24
 3294 01f8 0794      		ror __tmp_reg__
 3295 01fa 8795      		ror r24
 3296 01fc D02D      		mov r29,__tmp_reg__
 3297 01fe C827      		eor r28,r24
 3298 0200 0694      		lsr __tmp_reg__
 3299 0202 8795      		ror r24
 3300 0204 D025      		eor r29,__tmp_reg__
 3301 0206 C827      		eor r28,r24
 3302               	 ;  0 "" 2
 3303               	.LVL216:
 3304               	/* #NOAPP */
 3305               	.LBE424:
 3306               	.LBE423:
 159:../src/ir_comm.c **** 			break;
 3307               		.loc 1 159 0
 3308 0208 8085      		ldd r24,Z+8
 3309 020a 9185      		ldd r25,Z+9
 3310               	.LVL217:
 3311               	.LBB425:
 3312               	.LBB426:
 3313               		.loc 3 118 0
 3314               	/* #APP */
 3315               	 ;  118 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util
 3316 020c C827      		eor r28,r24
 3317 020e 8C2F      		mov r24,r28
 3318 0210 8295      		swap r24
 3319 0212 8C27      		eor r24,r28
 3320 0214 082E      		mov __tmp_reg__,r24
 3321 0216 8695      		lsr r24
 3322 0218 8695      		lsr r24
 3323 021a 8025      		eor r24,__tmp_reg__
 3324 021c 082E      		mov __tmp_reg__,r24
 3325 021e 8695      		lsr r24
 3326 0220 8025      		eor r24,__tmp_reg__
 3327 0222 8770      		andi r24,0x07
 3328 0224 0C2E      		mov __tmp_reg__,r28
 3329 0226 CD2F      		mov r28,r29
 3330 0228 8695      		lsr r24
 3331 022a 0794      		ror __tmp_reg__
 3332 022c 8795      		ror r24
 3333 022e D02D      		mov r29,__tmp_reg__
 3334 0230 C827      		eor r28,r24
 3335 0232 0694      		lsr __tmp_reg__
 3336 0234 8795      		ror r24
 3337 0236 D025      		eor r29,__tmp_reg__
 3338 0238 C827      		eor r28,r24
 3339               	 ;  0 "" 2
 3340               	.LVL218:
 3341               	/* #NOAPP */
 3342               	.LBE426:
 3343               	.LBE425:
 160:../src/ir_comm.c **** 		}	
 3344               		.loc 1 160 0
 3345 023a 00C0      		rjmp .L138
 3346               	.LBE432:
 3347               		.cfi_endproc
 3348               	.LFE66:
 3350               		.section	.text.hp_ir_cmd,"ax",@progbits
 3351               	.global	hp_ir_cmd
 3353               	hp_ir_cmd:
 3354               	.LFB73:
 263:../src/ir_comm.c **** 	return all_hp_ir_cmds(dirs, data, data_length, 0);
 3355               		.loc 1 263 0
 3356               		.cfi_startproc
 3357               	.LVL219:
 3358 0000 CF92      		push r12
 3359               	.LCFI75:
 3360               		.cfi_def_cfa_offset 4
 3361               		.cfi_offset 12, -3
 3362 0002 DF92      		push r13
 3363               	.LCFI76:
 3364               		.cfi_def_cfa_offset 5
 3365               		.cfi_offset 13, -4
 3366 0004 EF92      		push r14
 3367               	.LCFI77:
 3368               		.cfi_def_cfa_offset 6
 3369               		.cfi_offset 14, -5
 3370 0006 0F93      		push r16
 3371               	.LCFI78:
 3372               		.cfi_def_cfa_offset 7
 3373               		.cfi_offset 16, -6
 3374 0008 1F93      		push r17
 3375               	.LCFI79:
 3376               		.cfi_def_cfa_offset 8
 3377               		.cfi_offset 17, -7
 3378 000a CF93      		push r28
 3379               	.LCFI80:
 3380               		.cfi_def_cfa_offset 9
 3381               		.cfi_offset 28, -8
 3382 000c DF93      		push r29
 3383               	.LCFI81:
 3384               		.cfi_def_cfa_offset 10
 3385               		.cfi_offset 29, -9
 3386               	/* prologue: function */
 3387               	/* frame size = 0 */
 3388               	/* stack size = 7 */
 3389               	.L__stack_usage = 7
 3390 000e 6B01      		movw r12,r22
 3391 0010 642F      		mov r22,r20
 3392               	.LVL220:
 3393               	.LBB444:
 3394               	.LBB445:
 3395               	.LBB446:
 240:../src/ir_comm.c **** 		if(hp_ir_block_bm){
 3396               		.loc 1 240 0
 3397 0012 EFB6      		in r14,__SREG__
 3398               	.LVL221:
 3399               	.LBB447:
 3400               	.LBB448:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3401               		.loc 2 50 0
 3402               	/* #APP */
 3403               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3404 0014 F894      		cli
 3405               	 ;  0 "" 2
 3406               	.LVL222:
 3407               	/* #NOAPP */
 3408               	.LBE448:
 3409               	.LBE447:
 3410               	.LBB449:
 241:../src/ir_comm.c **** 			return 0;
 3411               		.loc 1 241 0
 3412 0016 9091 0000 		lds r25,hp_ir_block_bm
 3413 001a 9111      		cpse r25,__zero_reg__
 3414 001c 00C0      		rjmp .L170
 245:../src/ir_comm.c **** 			data_length-=64;
 3415               		.loc 1 245 0
 3416 001e 4034      		cpi r20,lo8(64)
 3417 0020 00F0      		brlo .L163
 246:../src/ir_comm.c **** 			timed=1;
 3418               		.loc 1 246 0
 3419 0022 6054      		subi r22,lo8(-(-64))
 3420               	.LVL223:
 3421               	.L163:
 3422 0024 C82F      		mov r28,r24
 3423 0026 D0E0      		ldi r29,0
 3424 0028 A0E0      		ldi r26,lo8(channel)
 3425 002a B0E0      		ldi r27,hi8(channel)
 3426               	.LBE449:
 3427               	.LBE446:
 3428               	.LBE445:
 3429               	.LBE444:
 263:../src/ir_comm.c **** 	return all_hp_ir_cmds(dirs, data, data_length, 0);
 3430               		.loc 1 263 0
 3431 002c 20E0      		ldi r18,0
 3432 002e 30E0      		ldi r19,0
 3433               	.LBB461:
 3434               	.LBB459:
 3435               	.LBB457:
 3436               	.LBB451:
 3437               	.LBB450:
 252:../src/ir_comm.c **** 				ir_rxtx[dir].status |= (timed ? IR_STATUS_TIMED_bm : 0);
 3438               		.loc 1 252 0
 3439 0030 49E3      		ldi r20,lo8(57)
 3440               	.LVL224:
 3441 0032 51E8      		ldi r21,lo8(-127)
 255:../src/ir_comm.c **** 			}
 3442               		.loc 1 255 0
 3443 0034 01E0      		ldi r16,lo8(1)
 3444 0036 10E0      		ldi r17,0
 3445               	.LVL225:
 3446               	.L165:
 250:../src/ir_comm.c **** 				channel[dir]->CTRLB &= ~USART_RXEN_bm;
 3447               		.loc 1 250 0
 3448 0038 FE01      		movw r30,r28
 3449 003a 022E      		mov r0,r18
 3450 003c 00C0      		rjmp 2f
 3451               		1:
 3452 003e F595      		asr r31
 3453 0040 E795      		ror r30
 3454               		2:
 3455 0042 0A94      		dec r0
 3456 0044 02F4      		brpl 1b
 3457 0046 E0FF      		sbrs r30,0
 3458 0048 00C0      		rjmp .L164
 251:../src/ir_comm.c **** 				ir_rxtx[dir].status = IR_STATUS_BUSY_bm | IR_STATUS_COMMAND_bm;
 3459               		.loc 1 251 0
 3460 004a ED91      		ld r30,X+
 3461 004c FC91      		ld r31,X
 3462 004e 1197      		sbiw r26,1
 3463 0050 9481      		ldd r25,Z+4
 3464 0052 9F7E      		andi r25,lo8(-17)
 3465 0054 9483      		std Z+4,r25
 252:../src/ir_comm.c **** 				ir_rxtx[dir].status |= (timed ? IR_STATUS_TIMED_bm : 0);
 3466               		.loc 1 252 0
 3467 0056 429F      		mul r20,r18
 3468 0058 F001      		movw r30,r0
 3469 005a 439F      		mul r20,r19
 3470 005c F00D      		add r31,r0
 3471 005e 1124      		clr __zero_reg__
 3472 0060 E050      		subi r30,lo8(-(ir_rxtx))
 3473 0062 F040      		sbci r31,hi8(-(ir_rxtx))
 3474 0064 50AF      		std Z+56,r21
 253:../src/ir_comm.c **** 				ir_rxtx[dir].target_ID=target;
 3475               		.loc 1 253 0
 3476 0066 90AD      		ldd r25,Z+56
 3477 0068 9064      		ori r25,lo8(64)
 3478 006a 90AF      		std Z+56,r25
 254:../src/ir_comm.c **** 				hp_ir_block_bm |= (1<<dir);
 3479               		.loc 1 254 0
 3480 006c 1086      		std Z+8,__zero_reg__
 3481 006e 1186      		std Z+9,__zero_reg__
 255:../src/ir_comm.c **** 			}
 3482               		.loc 1 255 0
 3483 0070 9091 0000 		lds r25,hp_ir_block_bm
 3484 0074 F801      		movw r30,r16
 3485 0076 022E      		mov r0,r18
 3486 0078 00C0      		rjmp 2f
 3487               		1:
 3488 007a EE0F      		lsl r30
 3489               		2:
 3490 007c 0A94      		dec r0
 3491 007e 02F4      		brpl 1b
 3492 0080 E92B      		or r30,r25
 3493 0082 E093 0000 		sts hp_ir_block_bm,r30
 3494               	.L164:
 3495               	.LVL226:
 3496 0086 2F5F      		subi r18,-1
 3497 0088 3F4F      		sbci r19,-1
 3498               	.LVL227:
 3499 008a 1296      		adiw r26,2
 249:../src/ir_comm.c **** 			if(dirs&(1<<dir)){
 3500               		.loc 1 249 0
 3501 008c 2630      		cpi r18,6
 3502 008e 3105      		cpc r19,__zero_reg__
 3503 0090 01F4      		brne .L165
 3504               	.LVL228:
 3505               	.LBE450:
 3506               	.LBE451:
 3507               	.LBB452:
 3508               	.LBB453:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3509               		.loc 2 70 0
 3510 0092 EFBE      		out __SREG__,r14
 3511               		.loc 2 71 0
 3512               	.LVL229:
 3513               	.LBE453:
 3514               	.LBE452:
 3515               	.LBE457:
 259:../src/ir_comm.c **** 	return 1;
 3516               		.loc 1 259 0
 3517 0094 21E0      		ldi r18,lo8(1)
 3518               	.LVL230:
 3519 0096 462F      		mov r20,r22
 3520 0098 B601      		movw r22,r12
 3521               	.LVL231:
 3522 009a 0E94 0000 		call send_msg
 3523               	.LVL232:
 260:../src/ir_comm.c **** }
 3524               		.loc 1 260 0
 3525 009e 81E0      		ldi r24,lo8(1)
 3526               	.LVL233:
 3527               	/* epilogue start */
 3528               	.LBE459:
 3529               	.LBE461:
 265:../src/ir_comm.c **** 
 3530               		.loc 1 265 0
 3531 00a0 DF91      		pop r29
 3532 00a2 CF91      		pop r28
 3533               	.LVL234:
 3534 00a4 1F91      		pop r17
 3535 00a6 0F91      		pop r16
 3536 00a8 EF90      		pop r14
 3537 00aa DF90      		pop r13
 3538 00ac CF90      		pop r12
 3539               	.LVL235:
 3540 00ae 0895      		ret
 3541               	.LVL236:
 3542               	.L170:
 3543               	.LBB462:
 3544               	.LBB460:
 3545               	.LBB458:
 3546               	.LBB454:
 3547               	.LBB455:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3548               		.loc 2 70 0
 3549 00b0 EFBE      		out __SREG__,r14
 3550               		.loc 2 71 0
 3551               	.LVL237:
 3552               	.LBE455:
 3553               	.LBE454:
 3554               	.LBB456:
 242:../src/ir_comm.c **** 		}
 3555               		.loc 1 242 0
 3556 00b2 80E0      		ldi r24,0
 3557               	.LVL238:
 3558               	/* epilogue start */
 3559               	.LBE456:
 3560               	.LBE458:
 3561               	.LBE460:
 3562               	.LBE462:
 265:../src/ir_comm.c **** 
 3563               		.loc 1 265 0
 3564 00b4 DF91      		pop r29
 3565 00b6 CF91      		pop r28
 3566 00b8 1F91      		pop r17
 3567 00ba 0F91      		pop r16
 3568 00bc EF90      		pop r14
 3569 00be DF90      		pop r13
 3570 00c0 CF90      		pop r12
 3571               	.LVL239:
 3572 00c2 0895      		ret
 3573               		.cfi_endproc
 3574               	.LFE73:
 3576               		.section	.text.hp_ir_targeted_cmd,"ax",@progbits
 3577               	.global	hp_ir_targeted_cmd
 3579               	hp_ir_targeted_cmd:
 3580               	.LFB74:
 267:../src/ir_comm.c **** 	return all_hp_ir_cmds(dirs, data, data_length, target);
 3581               		.loc 1 267 0
 3582               		.cfi_startproc
 3583               	.LVL240:
 3584 0000 AF92      		push r10
 3585               	.LCFI82:
 3586               		.cfi_def_cfa_offset 4
 3587               		.cfi_offset 10, -3
 3588 0002 BF92      		push r11
 3589               	.LCFI83:
 3590               		.cfi_def_cfa_offset 5
 3591               		.cfi_offset 11, -4
 3592 0004 CF92      		push r12
 3593               	.LCFI84:
 3594               		.cfi_def_cfa_offset 6
 3595               		.cfi_offset 12, -5
 3596 0006 EF92      		push r14
 3597               	.LCFI85:
 3598               		.cfi_def_cfa_offset 7
 3599               		.cfi_offset 14, -6
 3600 0008 FF92      		push r15
 3601               	.LCFI86:
 3602               		.cfi_def_cfa_offset 8
 3603               		.cfi_offset 15, -7
 3604 000a 0F93      		push r16
 3605               	.LCFI87:
 3606               		.cfi_def_cfa_offset 9
 3607               		.cfi_offset 16, -8
 3608 000c 1F93      		push r17
 3609               	.LCFI88:
 3610               		.cfi_def_cfa_offset 10
 3611               		.cfi_offset 17, -9
 3612 000e CF93      		push r28
 3613               	.LCFI89:
 3614               		.cfi_def_cfa_offset 11
 3615               		.cfi_offset 28, -10
 3616 0010 DF93      		push r29
 3617               	.LCFI90:
 3618               		.cfi_def_cfa_offset 12
 3619               		.cfi_offset 29, -11
 3620               	/* prologue: function */
 3621               	/* frame size = 0 */
 3622               	/* stack size = 9 */
 3623               	.L__stack_usage = 9
 3624 0012 5B01      		movw r10,r22
 3625 0014 7901      		movw r14,r18
 3626               	.LVL241:
 3627               	.LBB474:
 3628               	.LBB475:
 3629               	.LBB476:
 240:../src/ir_comm.c **** 		if(hp_ir_block_bm){
 3630               		.loc 1 240 0
 3631 0016 CFB6      		in r12,__SREG__
 3632               	.LVL242:
 3633               	.LBB477:
 3634               	.LBB478:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3635               		.loc 2 50 0
 3636               	/* #APP */
 3637               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3638 0018 F894      		cli
 3639               	 ;  0 "" 2
 3640               	.LVL243:
 3641               	/* #NOAPP */
 3642               	.LBE478:
 3643               	.LBE477:
 3644               	.LBB479:
 241:../src/ir_comm.c **** 			return 0;
 3645               		.loc 1 241 0
 3646 001a 9091 0000 		lds r25,hp_ir_block_bm
 3647 001e 9111      		cpse r25,__zero_reg__
 3648 0020 00C0      		rjmp .L181
 245:../src/ir_comm.c **** 			data_length-=64;
 3649               		.loc 1 245 0
 3650 0022 4034      		cpi r20,lo8(64)
 3651 0024 00F0      		brlo .L174
 246:../src/ir_comm.c **** 			timed=1;
 3652               		.loc 1 246 0
 3653 0026 4054      		subi r20,lo8(-(-64))
 3654               	.LVL244:
 3655               	.L174:
 3656 0028 082F      		mov r16,r24
 3657 002a 10E0      		ldi r17,0
 3658 002c C0E0      		ldi r28,lo8(channel)
 3659 002e D0E0      		ldi r29,hi8(channel)
 3660               	.LBE479:
 3661               	.LBE476:
 3662               	.LBE475:
 3663               	.LBE474:
 267:../src/ir_comm.c **** 	return all_hp_ir_cmds(dirs, data, data_length, target);
 3664               		.loc 1 267 0
 3665 0030 E0E0      		ldi r30,0
 3666 0032 F0E0      		ldi r31,0
 3667               	.LBB491:
 3668               	.LBB489:
 3669               	.LBB487:
 3670               	.LBB481:
 3671               	.LBB480:
 252:../src/ir_comm.c **** 				ir_rxtx[dir].status |= (timed ? IR_STATUS_TIMED_bm : 0);
 3672               		.loc 1 252 0
 3673 0034 69E3      		ldi r22,lo8(57)
 3674               	.LVL245:
 3675 0036 51E8      		ldi r21,lo8(-127)
 255:../src/ir_comm.c **** 			}
 3676               		.loc 1 255 0
 3677 0038 21E0      		ldi r18,lo8(1)
 3678 003a 30E0      		ldi r19,0
 3679               	.LVL246:
 3680               	.L176:
 250:../src/ir_comm.c **** 				channel[dir]->CTRLB &= ~USART_RXEN_bm;
 3681               		.loc 1 250 0
 3682 003c D801      		movw r26,r16
 3683 003e 0E2E      		mov r0,r30
 3684 0040 00C0      		rjmp 2f
 3685               		1:
 3686 0042 B595      		asr r27
 3687 0044 A795      		ror r26
 3688               		2:
 3689 0046 0A94      		dec r0
 3690 0048 02F4      		brpl 1b
 3691 004a A0FF      		sbrs r26,0
 3692 004c 00C0      		rjmp .L175
 251:../src/ir_comm.c **** 				ir_rxtx[dir].status = IR_STATUS_BUSY_bm | IR_STATUS_COMMAND_bm;
 3693               		.loc 1 251 0
 3694 004e A881      		ld r26,Y
 3695 0050 B981      		ldd r27,Y+1
 3696 0052 1496      		adiw r26,4
 3697 0054 9C91      		ld r25,X
 3698 0056 1497      		sbiw r26,4
 3699 0058 9F7E      		andi r25,lo8(-17)
 3700 005a 1496      		adiw r26,4
 3701 005c 9C93      		st X,r25
 252:../src/ir_comm.c **** 				ir_rxtx[dir].status |= (timed ? IR_STATUS_TIMED_bm : 0);
 3702               		.loc 1 252 0
 3703 005e 6E9F      		mul r22,r30
 3704 0060 D001      		movw r26,r0
 3705 0062 6F9F      		mul r22,r31
 3706 0064 B00D      		add r27,r0
 3707 0066 1124      		clr __zero_reg__
 3708 0068 A050      		subi r26,lo8(-(ir_rxtx))
 3709 006a B040      		sbci r27,hi8(-(ir_rxtx))
 3710 006c D896      		adiw r26,56
 3711 006e 5C93      		st X,r21
 3712 0070 D897      		sbiw r26,56
 253:../src/ir_comm.c **** 				ir_rxtx[dir].target_ID=target;
 3713               		.loc 1 253 0
 3714 0072 D896      		adiw r26,56
 3715 0074 9C91      		ld r25,X
 3716 0076 D897      		sbiw r26,56
 3717 0078 9064      		ori r25,lo8(64)
 3718 007a D896      		adiw r26,56
 3719 007c 9C93      		st X,r25
 3720 007e D897      		sbiw r26,56
 254:../src/ir_comm.c **** 				hp_ir_block_bm |= (1<<dir);
 3721               		.loc 1 254 0
 3722 0080 1896      		adiw r26,8
 3723 0082 ED92      		st X+,r14
 3724 0084 FC92      		st X,r15
 3725 0086 1997      		sbiw r26,8+1
 255:../src/ir_comm.c **** 			}
 3726               		.loc 1 255 0
 3727 0088 9091 0000 		lds r25,hp_ir_block_bm
 3728 008c D901      		movw r26,r18
 3729 008e 0E2E      		mov r0,r30
 3730 0090 00C0      		rjmp 2f
 3731               		1:
 3732 0092 AA0F      		lsl r26
 3733               		2:
 3734 0094 0A94      		dec r0
 3735 0096 02F4      		brpl 1b
 3736 0098 A92B      		or r26,r25
 3737 009a A093 0000 		sts hp_ir_block_bm,r26
 3738               	.L175:
 3739               	.LVL247:
 3740 009e 3196      		adiw r30,1
 3741               	.LVL248:
 3742 00a0 2296      		adiw r28,2
 249:../src/ir_comm.c **** 			if(dirs&(1<<dir)){
 3743               		.loc 1 249 0
 3744 00a2 E630      		cpi r30,6
 3745 00a4 F105      		cpc r31,__zero_reg__
 3746 00a6 01F4      		brne .L176
 3747               	.LVL249:
 3748               	.LBE480:
 3749               	.LBE481:
 3750               	.LBB482:
 3751               	.LBB483:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3752               		.loc 2 70 0
 3753 00a8 CFBE      		out __SREG__,r12
 3754               		.loc 2 71 0
 3755               	.LVL250:
 3756               	.LBE483:
 3757               	.LBE482:
 3758               	.LBE487:
 259:../src/ir_comm.c **** 	return 1;
 3759               		.loc 1 259 0
 3760 00aa 21E0      		ldi r18,lo8(1)
 3761 00ac B501      		movw r22,r10
 3762 00ae 0E94 0000 		call send_msg
 3763               	.LVL251:
 260:../src/ir_comm.c **** }
 3764               		.loc 1 260 0
 3765 00b2 81E0      		ldi r24,lo8(1)
 3766               	.LVL252:
 3767               	.L173:
 3768               	/* epilogue start */
 3769               	.LBE489:
 3770               	.LBE491:
 269:../src/ir_comm.c **** 
 3771               		.loc 1 269 0
 3772 00b4 DF91      		pop r29
 3773 00b6 CF91      		pop r28
 3774 00b8 1F91      		pop r17
 3775 00ba 0F91      		pop r16
 3776 00bc FF90      		pop r15
 3777 00be EF90      		pop r14
 3778               	.LVL253:
 3779 00c0 CF90      		pop r12
 3780 00c2 BF90      		pop r11
 3781 00c4 AF90      		pop r10
 3782               	.LVL254:
 3783 00c6 0895      		ret
 3784               	.LVL255:
 3785               	.L181:
 3786               	.LBB492:
 3787               	.LBB490:
 3788               	.LBB488:
 3789               	.LBB484:
 3790               	.LBB485:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3791               		.loc 2 70 0
 3792 00c8 CFBE      		out __SREG__,r12
 3793               		.loc 2 71 0
 3794               	.LVL256:
 3795               	.LBE485:
 3796               	.LBE484:
 3797               	.LBB486:
 242:../src/ir_comm.c **** 		}
 3798               		.loc 1 242 0
 3799 00ca 80E0      		ldi r24,0
 3800               	.LVL257:
 3801 00cc 00C0      		rjmp .L173
 3802               	.LBE486:
 3803               	.LBE488:
 3804               	.LBE490:
 3805               	.LBE492:
 3806               		.cfi_endproc
 3807               	.LFE74:
 3809               		.section	.text.waitForTransmission,"ax",@progbits
 3810               	.global	waitForTransmission
 3812               	waitForTransmission:
 3813               	.LFB75:
 271:../src/ir_comm.c **** 	   uint8_t busy;
 3814               		.loc 1 271 0
 3815               		.cfi_startproc
 3816               	.LVL258:
 3817               	/* prologue: function */
 3818               	/* frame size = 0 */
 3819               	/* stack size = 0 */
 3820               	.L__stack_usage = 0
 3821 0000 90E0      		ldi r25,0
 3822               	.LBB493:
 277:../src/ir_comm.c **** 					   busy=1;
 3823               		.loc 1 277 0
 3824 0002 79E3      		ldi r23,lo8(57)
 3825               	.L185:
 3826               	.LVL259:
 3827               	.LBE493:
 271:../src/ir_comm.c **** 	   uint8_t busy;
 3828               		.loc 1 271 0
 3829 0004 20E0      		ldi r18,0
 3830 0006 30E0      		ldi r19,0
 274:../src/ir_comm.c **** 		   for(uint8_t dir=0; dir<6; dir++){
 3831               		.loc 1 274 0
 3832 0008 60E0      		ldi r22,0
 3833               	.LVL260:
 3834               	.L184:
 3835               	.LBB494:
 276:../src/ir_comm.c **** 				   if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
 3836               		.loc 1 276 0
 3837 000a AC01      		movw r20,r24
 3838 000c 022E      		mov r0,r18
 3839 000e 00C0      		rjmp 2f
 3840               		1:
 3841 0010 5595      		asr r21
 3842 0012 4795      		ror r20
 3843               		2:
 3844 0014 0A94      		dec r0
 3845 0016 02F4      		brpl 1b
 3846 0018 40FF      		sbrs r20,0
 3847 001a 00C0      		rjmp .L183
 277:../src/ir_comm.c **** 					   busy=1;
 3848               		.loc 1 277 0
 3849 001c 729F      		mul r23,r18
 3850 001e F001      		movw r30,r0
 3851 0020 739F      		mul r23,r19
 3852 0022 F00D      		add r31,r0
 3853 0024 1124      		clr __zero_reg__
 3854 0026 E050      		subi r30,lo8(-(ir_rxtx))
 3855 0028 F040      		sbci r31,hi8(-(ir_rxtx))
 3856 002a 40AD      		ldd r20,Z+56
 3857 002c 45FD      		sbrc r20,5
 278:../src/ir_comm.c **** 				   }
 3858               		.loc 1 278 0
 3859 002e 61E0      		ldi r22,lo8(1)
 3860               	.LVL261:
 3861               	.L183:
 3862 0030 2F5F      		subi r18,-1
 3863 0032 3F4F      		sbci r19,-1
 3864               	.LVL262:
 275:../src/ir_comm.c **** 			   if(dirs&(1<<dir)){
 3865               		.loc 1 275 0 discriminator 2
 3866 0034 2630      		cpi r18,6
 3867 0036 3105      		cpc r19,__zero_reg__
 3868 0038 01F4      		brne .L184
 3869               	.LVL263:
 3870               	.LBE494:
 3871               	.LBB495:
 3872               	.LBB496:
 3873               	.LBB497:
 3874               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 3875               		.loc 6 276 0
 3876 003a EFE1      		ldi r30,lo8(799)
 3877 003c F3E0      		ldi r31,hi8(799)
 3878 003e 3197      	1:	sbiw r30,1
 3879 0040 01F4      		brne 1b
 3880 0042 00C0      		rjmp .
 3881 0044 0000      		nop
 3882               	.LVL264:
 3883               	.LBE497:
 3884               	.LBE496:
 3885               	.LBE495:
 283:../src/ir_comm.c **** }
 3886               		.loc 1 283 0
 3887 0046 6111      		cpse r22,__zero_reg__
 3888 0048 00C0      		rjmp .L185
 3889               	/* epilogue start */
 284:../src/ir_comm.c **** 
 3890               		.loc 1 284 0
 3891 004a 0895      		ret
 3892               		.cfi_endproc
 3893               	.LFE75:
 3895               		.section	.text.ir_is_busy,"ax",@progbits
 3896               	.global	ir_is_busy
 3898               	ir_is_busy:
 3899               	.LFB82:
 554:../src/ir_comm.c **** 	}
 555:../src/ir_comm.c **** }
 556:../src/ir_comm.c **** 
 557:../src/ir_comm.c **** uint8_t ir_is_busy(uint8_t dirs_mask){
 3900               		.loc 1 557 0
 3901               		.cfi_startproc
 3902               	.LVL265:
 3903 0000 4F92      		push r4
 3904               	.LCFI91:
 3905               		.cfi_def_cfa_offset 4
 3906               		.cfi_offset 4, -3
 3907 0002 5F92      		push r5
 3908               	.LCFI92:
 3909               		.cfi_def_cfa_offset 5
 3910               		.cfi_offset 5, -4
 3911 0004 6F92      		push r6
 3912               	.LCFI93:
 3913               		.cfi_def_cfa_offset 6
 3914               		.cfi_offset 6, -5
 3915 0006 7F92      		push r7
 3916               	.LCFI94:
 3917               		.cfi_def_cfa_offset 7
 3918               		.cfi_offset 7, -6
 3919 0008 8F92      		push r8
 3920               	.LCFI95:
 3921               		.cfi_def_cfa_offset 8
 3922               		.cfi_offset 8, -7
 3923 000a 9F92      		push r9
 3924               	.LCFI96:
 3925               		.cfi_def_cfa_offset 9
 3926               		.cfi_offset 9, -8
 3927 000c AF92      		push r10
 3928               	.LCFI97:
 3929               		.cfi_def_cfa_offset 10
 3930               		.cfi_offset 10, -9
 3931 000e BF92      		push r11
 3932               	.LCFI98:
 3933               		.cfi_def_cfa_offset 11
 3934               		.cfi_offset 11, -10
 3935 0010 EF92      		push r14
 3936               	.LCFI99:
 3937               		.cfi_def_cfa_offset 12
 3938               		.cfi_offset 14, -11
 3939 0012 FF92      		push r15
 3940               	.LCFI100:
 3941               		.cfi_def_cfa_offset 13
 3942               		.cfi_offset 15, -12
 3943 0014 CF93      		push r28
 3944               	.LCFI101:
 3945               		.cfi_def_cfa_offset 14
 3946               		.cfi_offset 28, -13
 3947               	/* prologue: function */
 3948               	/* frame size = 0 */
 3949               	/* stack size = 11 */
 3950               	.L__stack_usage = 11
 3951 0016 C82F      		mov r28,r24
 558:../src/ir_comm.c **** 	uint32_t now = get_time();
 3952               		.loc 1 558 0
 3953 0018 0E94 0000 		call get_time
 3954               	.LVL266:
 559:../src/ir_comm.c **** 	uint8_t transmitting = 0;
 560:../src/ir_comm.c **** 	uint8_t receiving = 0;
 561:../src/ir_comm.c **** 	if(hp_ir_block_bm&dirs_mask){
 3955               		.loc 1 561 0
 3956 001c 2091 0000 		lds r18,hp_ir_block_bm
 3957 0020 2C23      		and r18,r28
 3958 0022 01F0      		breq .L206
 562:../src/ir_comm.c **** 		return 3;
 3959               		.loc 1 562 0
 3960 0024 83E0      		ldi r24,lo8(3)
 3961               	.LVL267:
 3962               	.L193:
 3963               	/* epilogue start */
 563:../src/ir_comm.c **** 	}
 564:../src/ir_comm.c **** 	for(uint8_t dir=0; dir<6; dir++){
 565:../src/ir_comm.c ****     	if(dirs_mask&(1<<dir)){
 566:../src/ir_comm.c ****         	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
 567:../src/ir_comm.c ****             	transmitting = 1;
 568:../src/ir_comm.c ****         	}
 569:../src/ir_comm.c **** 			if((now - ir_rxtx[dir].last_byte) < IR_MSG_TIMEOUT){
 570:../src/ir_comm.c **** 				receiving = 1;	
 571:../src/ir_comm.c **** 			}
 572:../src/ir_comm.c ****     	}
 573:../src/ir_comm.c **** 	}
 574:../src/ir_comm.c **** 	return transmitting ? 2 : (receiving ? 1 : 0);
 575:../src/ir_comm.c **** }
 3964               		.loc 1 575 0
 3965 0026 CF91      		pop r28
 3966 0028 FF90      		pop r15
 3967 002a EF90      		pop r14
 3968 002c BF90      		pop r11
 3969 002e AF90      		pop r10
 3970 0030 9F90      		pop r9
 3971 0032 8F90      		pop r8
 3972 0034 7F90      		pop r7
 3973 0036 6F90      		pop r6
 3974 0038 5F90      		pop r5
 3975 003a 4F90      		pop r4
 3976 003c 0895      		ret
 3977               	.LVL268:
 3978               	.L206:
 3979 003e EC2E      		mov r14,r28
 3980 0040 F12C      		mov r15,__zero_reg__
 561:../src/ir_comm.c **** 		return 3;
 3981               		.loc 1 561 0
 3982 0042 20E0      		ldi r18,0
 3983 0044 30E0      		ldi r19,0
 3984 0046 B0E0      		ldi r27,0
 3985 0048 A0E0      		ldi r26,0
 3986               	.LBB498:
 566:../src/ir_comm.c ****             	transmitting = 1;
 3987               		.loc 1 566 0
 3988 004a C9E3      		ldi r28,lo8(57)
 3989               	.LVL269:
 3990               	.L196:
 565:../src/ir_comm.c ****         	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
 3991               		.loc 1 565 0
 3992 004c A701      		movw r20,r14
 3993 004e 022E      		mov r0,r18
 3994 0050 00C0      		rjmp 2f
 3995               		1:
 3996 0052 5595      		asr r21
 3997 0054 4795      		ror r20
 3998               		2:
 3999 0056 0A94      		dec r0
 4000 0058 02F4      		brpl 1b
 4001 005a 40FF      		sbrs r20,0
 4002 005c 00C0      		rjmp .L194
 566:../src/ir_comm.c ****             	transmitting = 1;
 4003               		.loc 1 566 0
 4004 005e C29F      		mul r28,r18
 4005 0060 F001      		movw r30,r0
 4006 0062 C39F      		mul r28,r19
 4007 0064 F00D      		add r31,r0
 4008 0066 1124      		clr __zero_reg__
 4009 0068 E050      		subi r30,lo8(-(ir_rxtx))
 4010 006a F040      		sbci r31,hi8(-(ir_rxtx))
 4011 006c 40AD      		ldd r20,Z+56
 4012 006e 45FD      		sbrc r20,5
 567:../src/ir_comm.c ****         	}
 4013               		.loc 1 567 0
 4014 0070 A1E0      		ldi r26,lo8(1)
 4015               	.LVL270:
 4016               	.L195:
 569:../src/ir_comm.c **** 				receiving = 1;	
 4017               		.loc 1 569 0
 4018 0072 C29F      		mul r28,r18
 4019 0074 F001      		movw r30,r0
 4020 0076 C39F      		mul r28,r19
 4021 0078 F00D      		add r31,r0
 4022 007a 1124      		clr __zero_reg__
 4023 007c E050      		subi r30,lo8(-(ir_rxtx))
 4024 007e F040      		sbci r31,hi8(-(ir_rxtx))
 4025 0080 8080      		ld r8,Z
 4026 0082 9180      		ldd r9,Z+1
 4027 0084 A280      		ldd r10,Z+2
 4028 0086 B380      		ldd r11,Z+3
 4029 0088 2B01      		movw r4,r22
 4030 008a 3C01      		movw r6,r24
 4031 008c 4818      		sub r4,r8
 4032 008e 5908      		sbc r5,r9
 4033 0090 6A08      		sbc r6,r10
 4034 0092 7B08      		sbc r7,r11
 4035 0094 40E1      		ldi r20,16
 4036 0096 4416      		cp r4,r20
 4037 0098 5104      		cpc r5,__zero_reg__
 4038 009a 6104      		cpc r6,__zero_reg__
 4039 009c 7104      		cpc r7,__zero_reg__
 4040 009e 00F4      		brsh .L194
 570:../src/ir_comm.c **** 			}
 4041               		.loc 1 570 0
 4042 00a0 B1E0      		ldi r27,lo8(1)
 4043               	.LVL271:
 4044               	.L194:
 4045 00a2 2F5F      		subi r18,-1
 4046 00a4 3F4F      		sbci r19,-1
 4047               	.LVL272:
 564:../src/ir_comm.c ****     	if(dirs_mask&(1<<dir)){
 4048               		.loc 1 564 0 discriminator 2
 4049 00a6 2630      		cpi r18,6
 4050 00a8 3105      		cpc r19,__zero_reg__
 4051 00aa 01F4      		brne .L196
 4052               	.LBE498:
 574:../src/ir_comm.c **** }
 4053               		.loc 1 574 0
 4054 00ac AA23      		tst r26
 4055 00ae 01F0      		breq .L207
 4056 00b0 82E0      		ldi r24,lo8(2)
 4057 00b2 00C0      		rjmp .L193
 4058               	.L207:
 574:../src/ir_comm.c **** }
 4059               		.loc 1 574 0 is_stmt 0 discriminator 1
 4060 00b4 81E0      		ldi r24,lo8(1)
 4061 00b6 B111      		cpse r27,__zero_reg__
 4062 00b8 00C0      		rjmp .L193
 4063 00ba 80E0      		ldi r24,0
 4064 00bc 00C0      		rjmp .L193
 4065               		.cfi_endproc
 4066               	.LFE82:
 4068               		.section	.rodata.str1.1
 4069               	.LC1:
 4070 000b 2530 3268 		.string	"%02hX "
 4070      5820 00
 4071               		.section	.text.ir_targeted_cmd,"ax",@progbits
 4072               	.global	ir_targeted_cmd
 4074               	ir_targeted_cmd:
 4075               	.LFB68:
 222:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, target, 1);
 4076               		.loc 1 222 0 is_stmt 1
 4077               		.cfi_startproc
 4078               	.LVL273:
 4079 0000 DF92      		push r13
 4080               	.LCFI102:
 4081               		.cfi_def_cfa_offset 4
 4082               		.cfi_offset 13, -3
 4083 0002 EF92      		push r14
 4084               	.LCFI103:
 4085               		.cfi_def_cfa_offset 5
 4086               		.cfi_offset 14, -4
 4087 0004 FF92      		push r15
 4088               	.LCFI104:
 4089               		.cfi_def_cfa_offset 6
 4090               		.cfi_offset 15, -5
 4091 0006 0F93      		push r16
 4092               	.LCFI105:
 4093               		.cfi_def_cfa_offset 7
 4094               		.cfi_offset 16, -6
 4095 0008 1F93      		push r17
 4096               	.LCFI106:
 4097               		.cfi_def_cfa_offset 8
 4098               		.cfi_offset 17, -7
 4099 000a CF93      		push r28
 4100               	.LCFI107:
 4101               		.cfi_def_cfa_offset 9
 4102               		.cfi_offset 28, -8
 4103 000c DF93      		push r29
 4104               	.LCFI108:
 4105               		.cfi_def_cfa_offset 10
 4106               		.cfi_offset 29, -9
 4107               	/* prologue: function */
 4108               	/* frame size = 0 */
 4109               	/* stack size = 7 */
 4110               	.L__stack_usage = 7
 4111 000e F82E      		mov r15,r24
 4112 0010 8B01      		movw r16,r22
 4113 0012 E42E      		mov r14,r20
 4114 0014 E901      		movw r28,r18
 4115               	.LVL274:
 4116               	.LBB499:
 4117               	.LBB500:
 198:../src/ir_comm.c **** 		printf_P(PSTR("Normal send blocked by hp.\r\n"));
 4118               		.loc 1 198 0
 4119 0016 D090 0000 		lds r13,hp_ir_block_bm
 4120 001a D110      		cpse r13,__zero_reg__
 4121 001c 00C0      		rjmp .L222
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4122               		.loc 1 202 0
 4123 001e 0E94 0000 		call ir_is_busy
 4124               	.LVL275:
 4125 0022 8230      		cpi r24,lo8(2)
 4126 0024 00F0      		brlo .L211
 203:../src/ir_comm.c **** 		for(uint8_t i=0;i<data_length;i++){
 4127               		.loc 1 203 0
 4128 0026 80E0      		ldi r24,lo8(__c.5350)
 4129 0028 90E0      		ldi r25,hi8(__c.5350)
 4130 002a 9F93      		push r25
 4131               	.LCFI109:
 4132               		.cfi_def_cfa_offset 11
 4133 002c 8F93      		push r24
 4134               	.LCFI110:
 4135               		.cfi_def_cfa_offset 12
 4136 002e 0E94 0000 		call printf_P
 4137               	.LVL276:
 4138               	.LBB501:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4139               		.loc 1 204 0
 4140 0032 0F90      		pop __tmp_reg__
 4141 0034 0F90      		pop __tmp_reg__
 4142               	.LCFI111:
 4143               		.cfi_def_cfa_offset 10
 4144 0036 EE20      		tst r14
 4145 0038 01F0      		breq .L214
 4146 003a E801      		movw r28,r16
 4147               	.LVL277:
 4148 003c EA94      		dec r14
 4149               	.LVL278:
 4150 003e F12C      		mov r15,__zero_reg__
 4151               	.LVL279:
 4152 0040 8FEF      		ldi r24,-1
 4153 0042 E81A      		sub r14,r24
 4154 0044 F80A      		sbc r15,r24
 4155               	.LVL280:
 4156 0046 E00E      		add r14,r16
 4157 0048 F11E      		adc r15,r17
 205:../src/ir_comm.c **** 		}
 4158               		.loc 1 205 0
 4159 004a 00E0      		ldi r16,lo8(.LC1)
 4160 004c 10E0      		ldi r17,hi8(.LC1)
 4161               	.LVL281:
 4162               	.L213:
 4163 004e 8991      		ld r24,Y+
 4164               	.LVL282:
 4165 0050 282F      		mov r18,r24
 4166 0052 082E      		mov __tmp_reg__,r24
 4167 0054 000C      		lsl r0
 4168 0056 330B      		sbc r19,r19
 4169 0058 3F93      		push r19
 4170               	.LCFI112:
 4171               		.cfi_def_cfa_offset 11
 4172 005a 8F93      		push r24
 4173               	.LCFI113:
 4174               		.cfi_def_cfa_offset 12
 4175 005c 1F93      		push r17
 4176               	.LCFI114:
 4177               		.cfi_def_cfa_offset 13
 4178 005e 0F93      		push r16
 4179               	.LCFI115:
 4180               		.cfi_def_cfa_offset 14
 4181 0060 0E94 0000 		call printf
 4182               	.LVL283:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4183               		.loc 1 204 0
 4184 0064 0F90      		pop __tmp_reg__
 4185 0066 0F90      		pop __tmp_reg__
 4186 0068 0F90      		pop __tmp_reg__
 4187 006a 0F90      		pop __tmp_reg__
 4188               	.LCFI116:
 4189               		.cfi_def_cfa_offset 10
 4190 006c CE15      		cp r28,r14
 4191 006e DF05      		cpc r29,r15
 4192 0070 01F4      		brne .L213
 4193               	.LVL284:
 4194               	.L214:
 4195               	.LBE501:
 207:../src/ir_comm.c ****         return 0;
 4196               		.loc 1 207 0
 4197 0072 80E0      		ldi r24,lo8(__c.5356)
 4198 0074 90E0      		ldi r25,hi8(__c.5356)
 4199 0076 9F93      		push r25
 4200               	.LCFI117:
 4201               		.cfi_def_cfa_offset 11
 4202 0078 8F93      		push r24
 4203               	.LCFI118:
 4204               		.cfi_def_cfa_offset 12
 4205 007a 0E94 0000 		call printf_P
 4206               	.LVL285:
 4207 007e 0F90      		pop __tmp_reg__
 4208 0080 0F90      		pop __tmp_reg__
 4209               	.LCFI119:
 4210               		.cfi_def_cfa_offset 10
 4211               	.L210:
 4212               	.LVL286:
 4213               	.LBE500:
 4214               	.LBE499:
 224:../src/ir_comm.c **** 
 4215               		.loc 1 224 0
 4216 0082 8D2D      		mov r24,r13
 4217               	/* epilogue start */
 4218 0084 DF91      		pop r29
 4219 0086 CF91      		pop r28
 4220 0088 1F91      		pop r17
 4221 008a 0F91      		pop r16
 4222 008c FF90      		pop r15
 4223 008e EF90      		pop r14
 4224 0090 DF90      		pop r13
 4225 0092 0895      		ret
 4226               	.LVL287:
 4227               	.L211:
 4228 0094 4F2D      		mov r20,r15
 4229 0096 50E0      		ldi r21,0
 4230 0098 A0E0      		ldi r26,lo8(channel)
 4231 009a B0E0      		ldi r27,hi8(channel)
 4232               	.LBB504:
 4233               	.LBB503:
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4234               		.loc 1 202 0
 4235 009c 80E0      		ldi r24,0
 4236 009e 90E0      		ldi r25,0
 4237               	.LBB502:
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 4238               		.loc 1 213 0
 4239 00a0 79E3      		ldi r23,lo8(57)
 4240 00a2 61E0      		ldi r22,lo8(1)
 4241               	.L216:
 4242               	.LVL288:
 211:../src/ir_comm.c **** 			channel[dir]->CTRLB &= ~USART_RXEN_bm;
 4243               		.loc 1 211 0
 4244 00a4 9A01      		movw r18,r20
 4245 00a6 082E      		mov r0,r24
 4246 00a8 00C0      		rjmp 2f
 4247               		1:
 4248 00aa 3595      		asr r19
 4249 00ac 2795      		ror r18
 4250               		2:
 4251 00ae 0A94      		dec r0
 4252 00b0 02F4      		brpl 1b
 4253 00b2 20FF      		sbrs r18,0
 4254 00b4 00C0      		rjmp .L215
 212:../src/ir_comm.c **** 			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
 4255               		.loc 1 212 0
 4256 00b6 ED91      		ld r30,X+
 4257 00b8 FC91      		ld r31,X
 4258 00ba 1197      		sbiw r26,1
 4259 00bc 2481      		ldd r18,Z+4
 4260 00be 2F7E      		andi r18,lo8(-17)
 4261 00c0 2483      		std Z+4,r18
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 4262               		.loc 1 213 0
 4263 00c2 789F      		mul r23,r24
 4264 00c4 F001      		movw r30,r0
 4265 00c6 799F      		mul r23,r25
 4266 00c8 F00D      		add r31,r0
 4267 00ca 1124      		clr __zero_reg__
 4268 00cc E050      		subi r30,lo8(-(ir_rxtx))
 4269 00ce F040      		sbci r31,hi8(-(ir_rxtx))
 4270 00d0 60AF      		std Z+56,r22
 214:../src/ir_comm.c **** 			ir_rxtx[dir].target_ID=target;
 4271               		.loc 1 214 0
 4272 00d2 20AD      		ldd r18,Z+56
 4273 00d4 2068      		ori r18,lo8(-128)
 4274 00d6 20AF      		std Z+56,r18
 215:../src/ir_comm.c **** 		}
 4275               		.loc 1 215 0
 4276 00d8 C087      		std Z+8,r28
 4277 00da D187      		std Z+9,r29
 4278               	.L215:
 4279               	.LVL289:
 4280 00dc 0196      		adiw r24,1
 4281               	.LVL290:
 4282 00de 1296      		adiw r26,2
 210:../src/ir_comm.c **** 		if(dirs_to_go&(1<<dir)){		
 4283               		.loc 1 210 0
 4284 00e0 8630      		cpi r24,6
 4285 00e2 9105      		cpc r25,__zero_reg__
 4286 00e4 01F4      		brne .L216
 4287               	.LBE502:
 218:../src/ir_comm.c ****     return 1;
 4288               		.loc 1 218 0
 4289 00e6 20E0      		ldi r18,0
 4290 00e8 4E2D      		mov r20,r14
 4291 00ea B801      		movw r22,r16
 4292 00ec 8F2D      		mov r24,r15
 4293               	.LVL291:
 4294 00ee 0E94 0000 		call send_msg
 4295               	.LVL292:
 219:../src/ir_comm.c **** }
 4296               		.loc 1 219 0
 4297 00f2 DD24      		clr r13
 4298 00f4 D394      		inc r13
 4299 00f6 00C0      		rjmp .L210
 4300               	.LVL293:
 4301               	.L222:
 199:../src/ir_comm.c **** 		return 0;
 4302               		.loc 1 199 0
 4303 00f8 80E0      		ldi r24,lo8(__c.5348)
 4304 00fa 90E0      		ldi r25,hi8(__c.5348)
 4305 00fc 9F93      		push r25
 4306               	.LCFI120:
 4307               		.cfi_def_cfa_offset 11
 4308 00fe 8F93      		push r24
 4309               	.LCFI121:
 4310               		.cfi_def_cfa_offset 12
 4311 0100 0E94 0000 		call printf_P
 4312               	.LVL294:
 4313 0104 0F90      		pop __tmp_reg__
 4314 0106 0F90      		pop __tmp_reg__
 4315               	.LCFI122:
 4316               		.cfi_def_cfa_offset 10
 200:../src/ir_comm.c **** 	}
 4317               		.loc 1 200 0
 4318 0108 D12C      		mov r13,__zero_reg__
 4319 010a 00C0      		rjmp .L210
 4320               	.LBE503:
 4321               	.LBE504:
 4322               		.cfi_endproc
 4323               	.LFE68:
 4325               		.section	.text.ir_cmd,"ax",@progbits
 4326               	.global	ir_cmd
 4328               	ir_cmd:
 4329               	.LFB69:
 226:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, 0, 1);
 4330               		.loc 1 226 0
 4331               		.cfi_startproc
 4332               	.LVL295:
 4333 0000 DF92      		push r13
 4334               	.LCFI123:
 4335               		.cfi_def_cfa_offset 4
 4336               		.cfi_offset 13, -3
 4337 0002 EF92      		push r14
 4338               	.LCFI124:
 4339               		.cfi_def_cfa_offset 5
 4340               		.cfi_offset 14, -4
 4341 0004 FF92      		push r15
 4342               	.LCFI125:
 4343               		.cfi_def_cfa_offset 6
 4344               		.cfi_offset 15, -5
 4345 0006 0F93      		push r16
 4346               	.LCFI126:
 4347               		.cfi_def_cfa_offset 7
 4348               		.cfi_offset 16, -6
 4349 0008 1F93      		push r17
 4350               	.LCFI127:
 4351               		.cfi_def_cfa_offset 8
 4352               		.cfi_offset 17, -7
 4353 000a CF93      		push r28
 4354               	.LCFI128:
 4355               		.cfi_def_cfa_offset 9
 4356               		.cfi_offset 28, -8
 4357 000c DF93      		push r29
 4358               	.LCFI129:
 4359               		.cfi_def_cfa_offset 10
 4360               		.cfi_offset 29, -9
 4361               	/* prologue: function */
 4362               	/* frame size = 0 */
 4363               	/* stack size = 7 */
 4364               	.L__stack_usage = 7
 4365 000e C82F      		mov r28,r24
 4366 0010 8B01      		movw r16,r22
 4367 0012 E42E      		mov r14,r20
 4368               	.LVL296:
 4369               	.LBB505:
 4370               	.LBB506:
 198:../src/ir_comm.c **** 		printf_P(PSTR("Normal send blocked by hp.\r\n"));
 4371               		.loc 1 198 0
 4372 0014 D090 0000 		lds r13,hp_ir_block_bm
 4373 0018 D110      		cpse r13,__zero_reg__
 4374 001a 00C0      		rjmp .L237
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4375               		.loc 1 202 0
 4376 001c 0E94 0000 		call ir_is_busy
 4377               	.LVL297:
 4378 0020 8230      		cpi r24,lo8(2)
 4379 0022 00F0      		brlo .L226
 203:../src/ir_comm.c **** 		for(uint8_t i=0;i<data_length;i++){
 4380               		.loc 1 203 0
 4381 0024 80E0      		ldi r24,lo8(__c.5350)
 4382 0026 90E0      		ldi r25,hi8(__c.5350)
 4383 0028 9F93      		push r25
 4384               	.LCFI130:
 4385               		.cfi_def_cfa_offset 11
 4386 002a 8F93      		push r24
 4387               	.LCFI131:
 4388               		.cfi_def_cfa_offset 12
 4389 002c 0E94 0000 		call printf_P
 4390               	.LVL298:
 4391               	.LBB507:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4392               		.loc 1 204 0
 4393 0030 0F90      		pop __tmp_reg__
 4394 0032 0F90      		pop __tmp_reg__
 4395               	.LCFI132:
 4396               		.cfi_def_cfa_offset 10
 4397 0034 EE20      		tst r14
 4398 0036 01F0      		breq .L229
 4399 0038 E801      		movw r28,r16
 4400               	.LVL299:
 4401 003a EA94      		dec r14
 4402               	.LVL300:
 4403 003c F12C      		mov r15,__zero_reg__
 4404 003e 8FEF      		ldi r24,-1
 4405 0040 E81A      		sub r14,r24
 4406 0042 F80A      		sbc r15,r24
 4407               	.LVL301:
 4408 0044 E00E      		add r14,r16
 4409 0046 F11E      		adc r15,r17
 205:../src/ir_comm.c **** 		}
 4410               		.loc 1 205 0
 4411 0048 00E0      		ldi r16,lo8(.LC1)
 4412 004a 10E0      		ldi r17,hi8(.LC1)
 4413               	.LVL302:
 4414               	.L228:
 4415 004c 8991      		ld r24,Y+
 4416               	.LVL303:
 4417 004e 282F      		mov r18,r24
 4418 0050 082E      		mov __tmp_reg__,r24
 4419 0052 000C      		lsl r0
 4420 0054 330B      		sbc r19,r19
 4421 0056 3F93      		push r19
 4422               	.LCFI133:
 4423               		.cfi_def_cfa_offset 11
 4424 0058 8F93      		push r24
 4425               	.LCFI134:
 4426               		.cfi_def_cfa_offset 12
 4427 005a 1F93      		push r17
 4428               	.LCFI135:
 4429               		.cfi_def_cfa_offset 13
 4430 005c 0F93      		push r16
 4431               	.LCFI136:
 4432               		.cfi_def_cfa_offset 14
 4433 005e 0E94 0000 		call printf
 4434               	.LVL304:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4435               		.loc 1 204 0
 4436 0062 0F90      		pop __tmp_reg__
 4437 0064 0F90      		pop __tmp_reg__
 4438 0066 0F90      		pop __tmp_reg__
 4439 0068 0F90      		pop __tmp_reg__
 4440               	.LCFI137:
 4441               		.cfi_def_cfa_offset 10
 4442 006a CE15      		cp r28,r14
 4443 006c DF05      		cpc r29,r15
 4444 006e 01F4      		brne .L228
 4445               	.LVL305:
 4446               	.L229:
 4447               	.LBE507:
 207:../src/ir_comm.c ****         return 0;
 4448               		.loc 1 207 0
 4449 0070 80E0      		ldi r24,lo8(__c.5356)
 4450 0072 90E0      		ldi r25,hi8(__c.5356)
 4451 0074 9F93      		push r25
 4452               	.LCFI138:
 4453               		.cfi_def_cfa_offset 11
 4454 0076 8F93      		push r24
 4455               	.LCFI139:
 4456               		.cfi_def_cfa_offset 12
 4457 0078 0E94 0000 		call printf_P
 4458               	.LVL306:
 4459 007c 0F90      		pop __tmp_reg__
 4460 007e 0F90      		pop __tmp_reg__
 4461               	.LCFI140:
 4462               		.cfi_def_cfa_offset 10
 4463               	.L225:
 4464               	.LVL307:
 4465               	.LBE506:
 4466               	.LBE505:
 228:../src/ir_comm.c **** 
 4467               		.loc 1 228 0
 4468 0080 8D2D      		mov r24,r13
 4469               	/* epilogue start */
 4470 0082 DF91      		pop r29
 4471 0084 CF91      		pop r28
 4472 0086 1F91      		pop r17
 4473 0088 0F91      		pop r16
 4474 008a FF90      		pop r15
 4475 008c EF90      		pop r14
 4476 008e DF90      		pop r13
 4477 0090 0895      		ret
 4478               	.LVL308:
 4479               	.L226:
 4480 0092 4C2F      		mov r20,r28
 4481 0094 50E0      		ldi r21,0
 4482 0096 A0E0      		ldi r26,lo8(channel)
 4483 0098 B0E0      		ldi r27,hi8(channel)
 4484               	.LBB510:
 4485               	.LBB509:
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4486               		.loc 1 202 0
 4487 009a 80E0      		ldi r24,0
 4488 009c 90E0      		ldi r25,0
 4489               	.LBB508:
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 4490               		.loc 1 213 0
 4491 009e 79E3      		ldi r23,lo8(57)
 4492 00a0 61E0      		ldi r22,lo8(1)
 4493               	.LVL309:
 4494               	.L231:
 211:../src/ir_comm.c **** 			channel[dir]->CTRLB &= ~USART_RXEN_bm;
 4495               		.loc 1 211 0
 4496 00a2 9A01      		movw r18,r20
 4497 00a4 082E      		mov r0,r24
 4498 00a6 00C0      		rjmp 2f
 4499               		1:
 4500 00a8 3595      		asr r19
 4501 00aa 2795      		ror r18
 4502               		2:
 4503 00ac 0A94      		dec r0
 4504 00ae 02F4      		brpl 1b
 4505 00b0 20FF      		sbrs r18,0
 4506 00b2 00C0      		rjmp .L230
 212:../src/ir_comm.c **** 			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
 4507               		.loc 1 212 0
 4508 00b4 ED91      		ld r30,X+
 4509 00b6 FC91      		ld r31,X
 4510 00b8 1197      		sbiw r26,1
 4511 00ba 2481      		ldd r18,Z+4
 4512 00bc 2F7E      		andi r18,lo8(-17)
 4513 00be 2483      		std Z+4,r18
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 4514               		.loc 1 213 0
 4515 00c0 789F      		mul r23,r24
 4516 00c2 F001      		movw r30,r0
 4517 00c4 799F      		mul r23,r25
 4518 00c6 F00D      		add r31,r0
 4519 00c8 1124      		clr __zero_reg__
 4520 00ca E050      		subi r30,lo8(-(ir_rxtx))
 4521 00cc F040      		sbci r31,hi8(-(ir_rxtx))
 4522 00ce 60AF      		std Z+56,r22
 214:../src/ir_comm.c **** 			ir_rxtx[dir].target_ID=target;
 4523               		.loc 1 214 0
 4524 00d0 20AD      		ldd r18,Z+56
 4525 00d2 2068      		ori r18,lo8(-128)
 4526 00d4 20AF      		std Z+56,r18
 215:../src/ir_comm.c **** 		}
 4527               		.loc 1 215 0
 4528 00d6 1086      		std Z+8,__zero_reg__
 4529 00d8 1186      		std Z+9,__zero_reg__
 4530               	.L230:
 4531               	.LVL310:
 4532 00da 0196      		adiw r24,1
 4533               	.LVL311:
 4534 00dc 1296      		adiw r26,2
 210:../src/ir_comm.c **** 		if(dirs_to_go&(1<<dir)){		
 4535               		.loc 1 210 0
 4536 00de 8630      		cpi r24,6
 4537 00e0 9105      		cpc r25,__zero_reg__
 4538 00e2 01F4      		brne .L231
 4539               	.LBE508:
 218:../src/ir_comm.c ****     return 1;
 4540               		.loc 1 218 0
 4541 00e4 20E0      		ldi r18,0
 4542 00e6 4E2D      		mov r20,r14
 4543               	.LVL312:
 4544 00e8 B801      		movw r22,r16
 4545 00ea 8C2F      		mov r24,r28
 4546               	.LVL313:
 4547 00ec 0E94 0000 		call send_msg
 4548               	.LVL314:
 219:../src/ir_comm.c **** }
 4549               		.loc 1 219 0
 4550 00f0 DD24      		clr r13
 4551 00f2 D394      		inc r13
 4552 00f4 00C0      		rjmp .L225
 4553               	.LVL315:
 4554               	.L237:
 199:../src/ir_comm.c **** 		return 0;
 4555               		.loc 1 199 0
 4556 00f6 80E0      		ldi r24,lo8(__c.5348)
 4557 00f8 90E0      		ldi r25,hi8(__c.5348)
 4558               	.LVL316:
 4559 00fa 9F93      		push r25
 4560               	.LCFI141:
 4561               		.cfi_def_cfa_offset 11
 4562 00fc 8F93      		push r24
 4563               	.LCFI142:
 4564               		.cfi_def_cfa_offset 12
 4565 00fe 0E94 0000 		call printf_P
 4566               	.LVL317:
 4567 0102 0F90      		pop __tmp_reg__
 4568 0104 0F90      		pop __tmp_reg__
 4569               	.LCFI143:
 4570               		.cfi_def_cfa_offset 10
 200:../src/ir_comm.c **** 	}
 4571               		.loc 1 200 0
 4572 0106 D12C      		mov r13,__zero_reg__
 4573 0108 00C0      		rjmp .L225
 4574               	.LBE509:
 4575               	.LBE510:
 4576               		.cfi_endproc
 4577               	.LFE69:
 4579               		.section	.text.ir_targeted_send,"ax",@progbits
 4580               	.global	ir_targeted_send
 4582               	ir_targeted_send:
 4583               	.LFB70:
 230:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, target, 0);
 4584               		.loc 1 230 0
 4585               		.cfi_startproc
 4586               	.LVL318:
 4587 0000 DF92      		push r13
 4588               	.LCFI144:
 4589               		.cfi_def_cfa_offset 4
 4590               		.cfi_offset 13, -3
 4591 0002 EF92      		push r14
 4592               	.LCFI145:
 4593               		.cfi_def_cfa_offset 5
 4594               		.cfi_offset 14, -4
 4595 0004 FF92      		push r15
 4596               	.LCFI146:
 4597               		.cfi_def_cfa_offset 6
 4598               		.cfi_offset 15, -5
 4599 0006 0F93      		push r16
 4600               	.LCFI147:
 4601               		.cfi_def_cfa_offset 7
 4602               		.cfi_offset 16, -6
 4603 0008 1F93      		push r17
 4604               	.LCFI148:
 4605               		.cfi_def_cfa_offset 8
 4606               		.cfi_offset 17, -7
 4607 000a CF93      		push r28
 4608               	.LCFI149:
 4609               		.cfi_def_cfa_offset 9
 4610               		.cfi_offset 28, -8
 4611 000c DF93      		push r29
 4612               	.LCFI150:
 4613               		.cfi_def_cfa_offset 10
 4614               		.cfi_offset 29, -9
 4615               	/* prologue: function */
 4616               	/* frame size = 0 */
 4617               	/* stack size = 7 */
 4618               	.L__stack_usage = 7
 4619 000e F82E      		mov r15,r24
 4620 0010 8B01      		movw r16,r22
 4621 0012 E42E      		mov r14,r20
 4622 0014 E901      		movw r28,r18
 4623               	.LVL319:
 4624               	.LBB511:
 4625               	.LBB512:
 198:../src/ir_comm.c **** 		printf_P(PSTR("Normal send blocked by hp.\r\n"));
 4626               		.loc 1 198 0
 4627 0016 D090 0000 		lds r13,hp_ir_block_bm
 4628 001a D110      		cpse r13,__zero_reg__
 4629 001c 00C0      		rjmp .L252
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4630               		.loc 1 202 0
 4631 001e 0E94 0000 		call ir_is_busy
 4632               	.LVL320:
 4633 0022 8230      		cpi r24,lo8(2)
 4634 0024 00F0      		brlo .L241
 203:../src/ir_comm.c **** 		for(uint8_t i=0;i<data_length;i++){
 4635               		.loc 1 203 0
 4636 0026 80E0      		ldi r24,lo8(__c.5350)
 4637 0028 90E0      		ldi r25,hi8(__c.5350)
 4638 002a 9F93      		push r25
 4639               	.LCFI151:
 4640               		.cfi_def_cfa_offset 11
 4641 002c 8F93      		push r24
 4642               	.LCFI152:
 4643               		.cfi_def_cfa_offset 12
 4644 002e 0E94 0000 		call printf_P
 4645               	.LVL321:
 4646               	.LBB513:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4647               		.loc 1 204 0
 4648 0032 0F90      		pop __tmp_reg__
 4649 0034 0F90      		pop __tmp_reg__
 4650               	.LCFI153:
 4651               		.cfi_def_cfa_offset 10
 4652 0036 EE20      		tst r14
 4653 0038 01F0      		breq .L244
 4654 003a E801      		movw r28,r16
 4655               	.LVL322:
 4656 003c EA94      		dec r14
 4657               	.LVL323:
 4658 003e F12C      		mov r15,__zero_reg__
 4659               	.LVL324:
 4660 0040 8FEF      		ldi r24,-1
 4661 0042 E81A      		sub r14,r24
 4662 0044 F80A      		sbc r15,r24
 4663               	.LVL325:
 4664 0046 E00E      		add r14,r16
 4665 0048 F11E      		adc r15,r17
 205:../src/ir_comm.c **** 		}
 4666               		.loc 1 205 0
 4667 004a 00E0      		ldi r16,lo8(.LC1)
 4668 004c 10E0      		ldi r17,hi8(.LC1)
 4669               	.LVL326:
 4670               	.L243:
 4671 004e 8991      		ld r24,Y+
 4672               	.LVL327:
 4673 0050 282F      		mov r18,r24
 4674 0052 082E      		mov __tmp_reg__,r24
 4675 0054 000C      		lsl r0
 4676 0056 330B      		sbc r19,r19
 4677 0058 3F93      		push r19
 4678               	.LCFI154:
 4679               		.cfi_def_cfa_offset 11
 4680 005a 8F93      		push r24
 4681               	.LCFI155:
 4682               		.cfi_def_cfa_offset 12
 4683 005c 1F93      		push r17
 4684               	.LCFI156:
 4685               		.cfi_def_cfa_offset 13
 4686 005e 0F93      		push r16
 4687               	.LCFI157:
 4688               		.cfi_def_cfa_offset 14
 4689 0060 0E94 0000 		call printf
 4690               	.LVL328:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4691               		.loc 1 204 0
 4692 0064 0F90      		pop __tmp_reg__
 4693 0066 0F90      		pop __tmp_reg__
 4694 0068 0F90      		pop __tmp_reg__
 4695 006a 0F90      		pop __tmp_reg__
 4696               	.LCFI158:
 4697               		.cfi_def_cfa_offset 10
 4698 006c CE15      		cp r28,r14
 4699 006e DF05      		cpc r29,r15
 4700 0070 01F4      		brne .L243
 4701               	.LVL329:
 4702               	.L244:
 4703               	.LBE513:
 207:../src/ir_comm.c ****         return 0;
 4704               		.loc 1 207 0
 4705 0072 80E0      		ldi r24,lo8(__c.5356)
 4706 0074 90E0      		ldi r25,hi8(__c.5356)
 4707 0076 9F93      		push r25
 4708               	.LCFI159:
 4709               		.cfi_def_cfa_offset 11
 4710 0078 8F93      		push r24
 4711               	.LCFI160:
 4712               		.cfi_def_cfa_offset 12
 4713 007a 0E94 0000 		call printf_P
 4714               	.LVL330:
 4715 007e 0F90      		pop __tmp_reg__
 4716 0080 0F90      		pop __tmp_reg__
 4717               	.LCFI161:
 4718               		.cfi_def_cfa_offset 10
 4719               	.L240:
 4720               	.LVL331:
 4721               	.LBE512:
 4722               	.LBE511:
 232:../src/ir_comm.c **** 
 4723               		.loc 1 232 0
 4724 0082 8D2D      		mov r24,r13
 4725               	/* epilogue start */
 4726 0084 DF91      		pop r29
 4727 0086 CF91      		pop r28
 4728 0088 1F91      		pop r17
 4729 008a 0F91      		pop r16
 4730 008c FF90      		pop r15
 4731 008e EF90      		pop r14
 4732 0090 DF90      		pop r13
 4733 0092 0895      		ret
 4734               	.LVL332:
 4735               	.L241:
 4736 0094 4F2D      		mov r20,r15
 4737 0096 50E0      		ldi r21,0
 4738 0098 E0E0      		ldi r30,lo8(channel)
 4739 009a F0E0      		ldi r31,hi8(channel)
 4740               	.LBB516:
 4741               	.LBB515:
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4742               		.loc 1 202 0
 4743 009c 80E0      		ldi r24,0
 4744 009e 90E0      		ldi r25,0
 4745               	.LBB514:
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 4746               		.loc 1 213 0
 4747 00a0 79E3      		ldi r23,lo8(57)
 4748 00a2 61E0      		ldi r22,lo8(1)
 4749               	.L246:
 4750               	.LVL333:
 211:../src/ir_comm.c **** 			channel[dir]->CTRLB &= ~USART_RXEN_bm;
 4751               		.loc 1 211 0
 4752 00a4 9A01      		movw r18,r20
 4753 00a6 082E      		mov r0,r24
 4754 00a8 00C0      		rjmp 2f
 4755               		1:
 4756 00aa 3595      		asr r19
 4757 00ac 2795      		ror r18
 4758               		2:
 4759 00ae 0A94      		dec r0
 4760 00b0 02F4      		brpl 1b
 4761 00b2 20FF      		sbrs r18,0
 4762 00b4 00C0      		rjmp .L245
 212:../src/ir_comm.c **** 			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
 4763               		.loc 1 212 0
 4764 00b6 A081      		ld r26,Z
 4765 00b8 B181      		ldd r27,Z+1
 4766 00ba 1496      		adiw r26,4
 4767 00bc 2C91      		ld r18,X
 4768 00be 1497      		sbiw r26,4
 4769 00c0 2F7E      		andi r18,lo8(-17)
 4770 00c2 1496      		adiw r26,4
 4771 00c4 2C93      		st X,r18
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 4772               		.loc 1 213 0
 4773 00c6 789F      		mul r23,r24
 4774 00c8 D001      		movw r26,r0
 4775 00ca 799F      		mul r23,r25
 4776 00cc B00D      		add r27,r0
 4777 00ce 1124      		clr __zero_reg__
 4778 00d0 A050      		subi r26,lo8(-(ir_rxtx))
 4779 00d2 B040      		sbci r27,hi8(-(ir_rxtx))
 4780 00d4 D896      		adiw r26,56
 4781 00d6 6C93      		st X,r22
 4782 00d8 D897      		sbiw r26,56
 215:../src/ir_comm.c **** 		}
 4783               		.loc 1 215 0
 4784 00da 1896      		adiw r26,8
 4785 00dc CD93      		st X+,r28
 4786 00de DC93      		st X,r29
 4787 00e0 1997      		sbiw r26,8+1
 4788               	.L245:
 4789               	.LVL334:
 4790 00e2 0196      		adiw r24,1
 4791               	.LVL335:
 4792 00e4 3296      		adiw r30,2
 210:../src/ir_comm.c **** 		if(dirs_to_go&(1<<dir)){		
 4793               		.loc 1 210 0
 4794 00e6 8630      		cpi r24,6
 4795 00e8 9105      		cpc r25,__zero_reg__
 4796 00ea 01F4      		brne .L246
 4797               	.LBE514:
 218:../src/ir_comm.c ****     return 1;
 4798               		.loc 1 218 0
 4799 00ec 20E0      		ldi r18,0
 4800 00ee 4E2D      		mov r20,r14
 4801 00f0 B801      		movw r22,r16
 4802 00f2 8F2D      		mov r24,r15
 4803               	.LVL336:
 4804 00f4 0E94 0000 		call send_msg
 4805               	.LVL337:
 219:../src/ir_comm.c **** }
 4806               		.loc 1 219 0
 4807 00f8 DD24      		clr r13
 4808 00fa D394      		inc r13
 4809 00fc 00C0      		rjmp .L240
 4810               	.LVL338:
 4811               	.L252:
 199:../src/ir_comm.c **** 		return 0;
 4812               		.loc 1 199 0
 4813 00fe 80E0      		ldi r24,lo8(__c.5348)
 4814 0100 90E0      		ldi r25,hi8(__c.5348)
 4815 0102 9F93      		push r25
 4816               	.LCFI162:
 4817               		.cfi_def_cfa_offset 11
 4818 0104 8F93      		push r24
 4819               	.LCFI163:
 4820               		.cfi_def_cfa_offset 12
 4821 0106 0E94 0000 		call printf_P
 4822               	.LVL339:
 4823 010a 0F90      		pop __tmp_reg__
 4824 010c 0F90      		pop __tmp_reg__
 4825               	.LCFI164:
 4826               		.cfi_def_cfa_offset 10
 200:../src/ir_comm.c **** 	}
 4827               		.loc 1 200 0
 4828 010e D12C      		mov r13,__zero_reg__
 4829 0110 00C0      		rjmp .L240
 4830               	.LBE515:
 4831               	.LBE516:
 4832               		.cfi_endproc
 4833               	.LFE70:
 4835               		.section	.text.ir_send,"ax",@progbits
 4836               	.global	ir_send
 4838               	ir_send:
 4839               	.LFB71:
 234:../src/ir_comm.c **** 	return all_ir_sends(dirs, data, data_length, 0, 0);
 4840               		.loc 1 234 0
 4841               		.cfi_startproc
 4842               	.LVL340:
 4843 0000 DF92      		push r13
 4844               	.LCFI165:
 4845               		.cfi_def_cfa_offset 4
 4846               		.cfi_offset 13, -3
 4847 0002 EF92      		push r14
 4848               	.LCFI166:
 4849               		.cfi_def_cfa_offset 5
 4850               		.cfi_offset 14, -4
 4851 0004 FF92      		push r15
 4852               	.LCFI167:
 4853               		.cfi_def_cfa_offset 6
 4854               		.cfi_offset 15, -5
 4855 0006 0F93      		push r16
 4856               	.LCFI168:
 4857               		.cfi_def_cfa_offset 7
 4858               		.cfi_offset 16, -6
 4859 0008 1F93      		push r17
 4860               	.LCFI169:
 4861               		.cfi_def_cfa_offset 8
 4862               		.cfi_offset 17, -7
 4863 000a CF93      		push r28
 4864               	.LCFI170:
 4865               		.cfi_def_cfa_offset 9
 4866               		.cfi_offset 28, -8
 4867 000c DF93      		push r29
 4868               	.LCFI171:
 4869               		.cfi_def_cfa_offset 10
 4870               		.cfi_offset 29, -9
 4871               	/* prologue: function */
 4872               	/* frame size = 0 */
 4873               	/* stack size = 7 */
 4874               	.L__stack_usage = 7
 4875 000e C82F      		mov r28,r24
 4876 0010 8B01      		movw r16,r22
 4877 0012 E42E      		mov r14,r20
 4878               	.LVL341:
 4879               	.LBB517:
 4880               	.LBB518:
 198:../src/ir_comm.c **** 		printf_P(PSTR("Normal send blocked by hp.\r\n"));
 4881               		.loc 1 198 0
 4882 0014 D090 0000 		lds r13,hp_ir_block_bm
 4883 0018 D110      		cpse r13,__zero_reg__
 4884 001a 00C0      		rjmp .L267
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4885               		.loc 1 202 0
 4886 001c 0E94 0000 		call ir_is_busy
 4887               	.LVL342:
 4888 0020 8230      		cpi r24,lo8(2)
 4889 0022 00F0      		brlo .L256
 203:../src/ir_comm.c **** 		for(uint8_t i=0;i<data_length;i++){
 4890               		.loc 1 203 0
 4891 0024 80E0      		ldi r24,lo8(__c.5350)
 4892 0026 90E0      		ldi r25,hi8(__c.5350)
 4893 0028 9F93      		push r25
 4894               	.LCFI172:
 4895               		.cfi_def_cfa_offset 11
 4896 002a 8F93      		push r24
 4897               	.LCFI173:
 4898               		.cfi_def_cfa_offset 12
 4899 002c 0E94 0000 		call printf_P
 4900               	.LVL343:
 4901               	.LBB519:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4902               		.loc 1 204 0
 4903 0030 0F90      		pop __tmp_reg__
 4904 0032 0F90      		pop __tmp_reg__
 4905               	.LCFI174:
 4906               		.cfi_def_cfa_offset 10
 4907 0034 EE20      		tst r14
 4908 0036 01F0      		breq .L259
 4909 0038 E801      		movw r28,r16
 4910               	.LVL344:
 4911 003a EA94      		dec r14
 4912               	.LVL345:
 4913 003c F12C      		mov r15,__zero_reg__
 4914 003e 8FEF      		ldi r24,-1
 4915 0040 E81A      		sub r14,r24
 4916 0042 F80A      		sbc r15,r24
 4917               	.LVL346:
 4918 0044 E00E      		add r14,r16
 4919 0046 F11E      		adc r15,r17
 205:../src/ir_comm.c **** 		}
 4920               		.loc 1 205 0
 4921 0048 00E0      		ldi r16,lo8(.LC1)
 4922 004a 10E0      		ldi r17,hi8(.LC1)
 4923               	.LVL347:
 4924               	.L258:
 4925 004c 8991      		ld r24,Y+
 4926               	.LVL348:
 4927 004e 282F      		mov r18,r24
 4928 0050 082E      		mov __tmp_reg__,r24
 4929 0052 000C      		lsl r0
 4930 0054 330B      		sbc r19,r19
 4931 0056 3F93      		push r19
 4932               	.LCFI175:
 4933               		.cfi_def_cfa_offset 11
 4934 0058 8F93      		push r24
 4935               	.LCFI176:
 4936               		.cfi_def_cfa_offset 12
 4937 005a 1F93      		push r17
 4938               	.LCFI177:
 4939               		.cfi_def_cfa_offset 13
 4940 005c 0F93      		push r16
 4941               	.LCFI178:
 4942               		.cfi_def_cfa_offset 14
 4943 005e 0E94 0000 		call printf
 4944               	.LVL349:
 204:../src/ir_comm.c **** 			printf("%02hX ",data[i]);
 4945               		.loc 1 204 0
 4946 0062 0F90      		pop __tmp_reg__
 4947 0064 0F90      		pop __tmp_reg__
 4948 0066 0F90      		pop __tmp_reg__
 4949 0068 0F90      		pop __tmp_reg__
 4950               	.LCFI179:
 4951               		.cfi_def_cfa_offset 10
 4952 006a CE15      		cp r28,r14
 4953 006c DF05      		cpc r29,r15
 4954 006e 01F4      		brne .L258
 4955               	.LVL350:
 4956               	.L259:
 4957               	.LBE519:
 207:../src/ir_comm.c ****         return 0;
 4958               		.loc 1 207 0
 4959 0070 80E0      		ldi r24,lo8(__c.5356)
 4960 0072 90E0      		ldi r25,hi8(__c.5356)
 4961 0074 9F93      		push r25
 4962               	.LCFI180:
 4963               		.cfi_def_cfa_offset 11
 4964 0076 8F93      		push r24
 4965               	.LCFI181:
 4966               		.cfi_def_cfa_offset 12
 4967 0078 0E94 0000 		call printf_P
 4968               	.LVL351:
 4969 007c 0F90      		pop __tmp_reg__
 4970 007e 0F90      		pop __tmp_reg__
 4971               	.LCFI182:
 4972               		.cfi_def_cfa_offset 10
 4973               	.L255:
 4974               	.LVL352:
 4975               	.LBE518:
 4976               	.LBE517:
 236:../src/ir_comm.c **** 
 4977               		.loc 1 236 0
 4978 0080 8D2D      		mov r24,r13
 4979               	/* epilogue start */
 4980 0082 DF91      		pop r29
 4981 0084 CF91      		pop r28
 4982 0086 1F91      		pop r17
 4983 0088 0F91      		pop r16
 4984 008a FF90      		pop r15
 4985 008c EF90      		pop r14
 4986 008e DF90      		pop r13
 4987 0090 0895      		ret
 4988               	.LVL353:
 4989               	.L256:
 4990 0092 4C2F      		mov r20,r28
 4991 0094 50E0      		ldi r21,0
 4992 0096 E0E0      		ldi r30,lo8(channel)
 4993 0098 F0E0      		ldi r31,hi8(channel)
 4994               	.LBB522:
 4995               	.LBB521:
 202:../src/ir_comm.c ****         printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
 4996               		.loc 1 202 0
 4997 009a 80E0      		ldi r24,0
 4998 009c 90E0      		ldi r25,0
 4999               	.LBB520:
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 5000               		.loc 1 213 0
 5001 009e 79E3      		ldi r23,lo8(57)
 5002 00a0 61E0      		ldi r22,lo8(1)
 5003               	.LVL354:
 5004               	.L261:
 211:../src/ir_comm.c **** 			channel[dir]->CTRLB &= ~USART_RXEN_bm;
 5005               		.loc 1 211 0
 5006 00a2 9A01      		movw r18,r20
 5007 00a4 082E      		mov r0,r24
 5008 00a6 00C0      		rjmp 2f
 5009               		1:
 5010 00a8 3595      		asr r19
 5011 00aa 2795      		ror r18
 5012               		2:
 5013 00ac 0A94      		dec r0
 5014 00ae 02F4      		brpl 1b
 5015 00b0 20FF      		sbrs r18,0
 5016 00b2 00C0      		rjmp .L260
 212:../src/ir_comm.c **** 			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
 5017               		.loc 1 212 0
 5018 00b4 A081      		ld r26,Z
 5019 00b6 B181      		ldd r27,Z+1
 5020 00b8 1496      		adiw r26,4
 5021 00ba 2C91      		ld r18,X
 5022 00bc 1497      		sbiw r26,4
 5023 00be 2F7E      		andi r18,lo8(-17)
 5024 00c0 1496      		adiw r26,4
 5025 00c2 2C93      		st X,r18
 213:../src/ir_comm.c **** 			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
 5026               		.loc 1 213 0
 5027 00c4 789F      		mul r23,r24
 5028 00c6 D001      		movw r26,r0
 5029 00c8 799F      		mul r23,r25
 5030 00ca B00D      		add r27,r0
 5031 00cc 1124      		clr __zero_reg__
 5032 00ce A050      		subi r26,lo8(-(ir_rxtx))
 5033 00d0 B040      		sbci r27,hi8(-(ir_rxtx))
 5034 00d2 D896      		adiw r26,56
 5035 00d4 6C93      		st X,r22
 5036 00d6 D897      		sbiw r26,56
 215:../src/ir_comm.c **** 		}
 5037               		.loc 1 215 0
 5038 00d8 1896      		adiw r26,8
 5039 00da 1D92      		st X+,__zero_reg__
 5040 00dc 1C92      		st X,__zero_reg__
 5041 00de 1997      		sbiw r26,8+1
 5042               	.L260:
 5043               	.LVL355:
 5044 00e0 0196      		adiw r24,1
 5045               	.LVL356:
 5046 00e2 3296      		adiw r30,2
 210:../src/ir_comm.c **** 		if(dirs_to_go&(1<<dir)){		
 5047               		.loc 1 210 0
 5048 00e4 8630      		cpi r24,6
 5049 00e6 9105      		cpc r25,__zero_reg__
 5050 00e8 01F4      		brne .L261
 5051               	.LBE520:
 218:../src/ir_comm.c ****     return 1;
 5052               		.loc 1 218 0
 5053 00ea 20E0      		ldi r18,0
 5054 00ec 4E2D      		mov r20,r14
 5055               	.LVL357:
 5056 00ee B801      		movw r22,r16
 5057 00f0 8C2F      		mov r24,r28
 5058               	.LVL358:
 5059 00f2 0E94 0000 		call send_msg
 5060               	.LVL359:
 219:../src/ir_comm.c **** }
 5061               		.loc 1 219 0
 5062 00f6 DD24      		clr r13
 5063 00f8 D394      		inc r13
 5064 00fa 00C0      		rjmp .L255
 5065               	.LVL360:
 5066               	.L267:
 199:../src/ir_comm.c **** 		return 0;
 5067               		.loc 1 199 0
 5068 00fc 80E0      		ldi r24,lo8(__c.5348)
 5069 00fe 90E0      		ldi r25,hi8(__c.5348)
 5070               	.LVL361:
 5071 0100 9F93      		push r25
 5072               	.LCFI183:
 5073               		.cfi_def_cfa_offset 11
 5074 0102 8F93      		push r24
 5075               	.LCFI184:
 5076               		.cfi_def_cfa_offset 12
 5077 0104 0E94 0000 		call printf_P
 5078               	.LVL362:
 5079 0108 0F90      		pop __tmp_reg__
 5080 010a 0F90      		pop __tmp_reg__
 5081               	.LCFI185:
 5082               		.cfi_def_cfa_offset 10
 200:../src/ir_comm.c **** 	}
 5083               		.loc 1 200 0
 5084 010c D12C      		mov r13,__zero_reg__
 5085 010e 00C0      		rjmp .L255
 5086               	.LBE521:
 5087               	.LBE522:
 5088               		.cfi_endproc
 5089               	.LFE71:
 5091               		.section	.text.__vector_25,"ax",@progbits
 5092               	.global	__vector_25
 5094               	__vector_25:
 5095               	.LFB83:
 576:../src/ir_comm.c **** 
 577:../src/ir_comm.c **** // ISRs for IR channel 0
 578:../src/ir_comm.c **** ISR( USARTC0_RXC_vect ) { ir_receive(0); }
 5096               		.loc 1 578 0
 5097               		.cfi_startproc
 5098 0000 1F92      		push r1
 5099               	.LCFI186:
 5100               		.cfi_def_cfa_offset 4
 5101               		.cfi_offset 1, -3
 5102 0002 0F92      		push r0
 5103               	.LCFI187:
 5104               		.cfi_def_cfa_offset 5
 5105               		.cfi_offset 0, -4
 5106 0004 0FB6      		in r0,__SREG__
 5107 0006 0F92      		push r0
 5108 0008 1124      		clr __zero_reg__
 5109 000a 0BB6      		in r0,__RAMPZ__
 5110 000c 0F92      		push r0
 5111 000e 2F93      		push r18
 5112               	.LCFI188:
 5113               		.cfi_def_cfa_offset 6
 5114               		.cfi_offset 18, -5
 5115 0010 3F93      		push r19
 5116               	.LCFI189:
 5117               		.cfi_def_cfa_offset 7
 5118               		.cfi_offset 19, -6
 5119 0012 4F93      		push r20
 5120               	.LCFI190:
 5121               		.cfi_def_cfa_offset 8
 5122               		.cfi_offset 20, -7
 5123 0014 5F93      		push r21
 5124               	.LCFI191:
 5125               		.cfi_def_cfa_offset 9
 5126               		.cfi_offset 21, -8
 5127 0016 6F93      		push r22
 5128               	.LCFI192:
 5129               		.cfi_def_cfa_offset 10
 5130               		.cfi_offset 22, -9
 5131 0018 7F93      		push r23
 5132               	.LCFI193:
 5133               		.cfi_def_cfa_offset 11
 5134               		.cfi_offset 23, -10
 5135 001a 8F93      		push r24
 5136               	.LCFI194:
 5137               		.cfi_def_cfa_offset 12
 5138               		.cfi_offset 24, -11
 5139 001c 9F93      		push r25
 5140               	.LCFI195:
 5141               		.cfi_def_cfa_offset 13
 5142               		.cfi_offset 25, -12
 5143 001e AF93      		push r26
 5144               	.LCFI196:
 5145               		.cfi_def_cfa_offset 14
 5146               		.cfi_offset 26, -13
 5147 0020 BF93      		push r27
 5148               	.LCFI197:
 5149               		.cfi_def_cfa_offset 15
 5150               		.cfi_offset 27, -14
 5151 0022 EF93      		push r30
 5152               	.LCFI198:
 5153               		.cfi_def_cfa_offset 16
 5154               		.cfi_offset 30, -15
 5155 0024 FF93      		push r31
 5156               	.LCFI199:
 5157               		.cfi_def_cfa_offset 17
 5158               		.cfi_offset 31, -16
 5159               	/* prologue: Signal */
 5160               	/* frame size = 0 */
 5161               	/* stack size = 16 */
 5162               	.L__stack_usage = 16
 5163               		.loc 1 578 0
 5164 0026 80E0      		ldi r24,0
 5165 0028 0E94 0000 		call ir_receive
 5166               	.LVL363:
 5167               	/* epilogue start */
 5168 002c FF91      		pop r31
 5169 002e EF91      		pop r30
 5170 0030 BF91      		pop r27
 5171 0032 AF91      		pop r26
 5172 0034 9F91      		pop r25
 5173 0036 8F91      		pop r24
 5174 0038 7F91      		pop r23
 5175 003a 6F91      		pop r22
 5176 003c 5F91      		pop r21
 5177 003e 4F91      		pop r20
 5178 0040 3F91      		pop r19
 5179 0042 2F91      		pop r18
 5180 0044 0F90      		pop r0
 5181 0046 0BBE      		out __RAMPZ__,r0
 5182 0048 0F90      		pop r0
 5183 004a 0FBE      		out __SREG__,r0
 5184 004c 0F90      		pop r0
 5185 004e 1F90      		pop r1
 5186 0050 1895      		reti
 5187               		.cfi_endproc
 5188               	.LFE83:
 5190               		.section	.text.__vector_27,"ax",@progbits
 5191               	.global	__vector_27
 5193               	__vector_27:
 5194               	.LFB84:
 579:../src/ir_comm.c **** ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
 5195               		.loc 1 579 0
 5196               		.cfi_startproc
 5197 0000 1F92      		push r1
 5198               	.LCFI200:
 5199               		.cfi_def_cfa_offset 4
 5200               		.cfi_offset 1, -3
 5201 0002 0F92      		push r0
 5202               	.LCFI201:
 5203               		.cfi_def_cfa_offset 5
 5204               		.cfi_offset 0, -4
 5205 0004 0FB6      		in r0,__SREG__
 5206 0006 0F92      		push r0
 5207 0008 1124      		clr __zero_reg__
 5208 000a 0BB6      		in r0,__RAMPZ__
 5209 000c 0F92      		push r0
 5210 000e 2F93      		push r18
 5211               	.LCFI202:
 5212               		.cfi_def_cfa_offset 6
 5213               		.cfi_offset 18, -5
 5214 0010 3F93      		push r19
 5215               	.LCFI203:
 5216               		.cfi_def_cfa_offset 7
 5217               		.cfi_offset 19, -6
 5218 0012 4F93      		push r20
 5219               	.LCFI204:
 5220               		.cfi_def_cfa_offset 8
 5221               		.cfi_offset 20, -7
 5222 0014 5F93      		push r21
 5223               	.LCFI205:
 5224               		.cfi_def_cfa_offset 9
 5225               		.cfi_offset 21, -8
 5226 0016 6F93      		push r22
 5227               	.LCFI206:
 5228               		.cfi_def_cfa_offset 10
 5229               		.cfi_offset 22, -9
 5230 0018 7F93      		push r23
 5231               	.LCFI207:
 5232               		.cfi_def_cfa_offset 11
 5233               		.cfi_offset 23, -10
 5234 001a 8F93      		push r24
 5235               	.LCFI208:
 5236               		.cfi_def_cfa_offset 12
 5237               		.cfi_offset 24, -11
 5238 001c 9F93      		push r25
 5239               	.LCFI209:
 5240               		.cfi_def_cfa_offset 13
 5241               		.cfi_offset 25, -12
 5242 001e AF93      		push r26
 5243               	.LCFI210:
 5244               		.cfi_def_cfa_offset 14
 5245               		.cfi_offset 26, -13
 5246 0020 BF93      		push r27
 5247               	.LCFI211:
 5248               		.cfi_def_cfa_offset 15
 5249               		.cfi_offset 27, -14
 5250 0022 EF93      		push r30
 5251               	.LCFI212:
 5252               		.cfi_def_cfa_offset 16
 5253               		.cfi_offset 30, -15
 5254 0024 FF93      		push r31
 5255               	.LCFI213:
 5256               		.cfi_def_cfa_offset 17
 5257               		.cfi_offset 31, -16
 5258               	/* prologue: Signal */
 5259               	/* frame size = 0 */
 5260               	/* stack size = 16 */
 5261               	.L__stack_usage = 16
 5262               		.loc 1 579 0
 5263 0026 80E0      		ldi r24,0
 5264 0028 0E94 0000 		call ir_transmit_complete
 5265               	.LVL364:
 5266               	/* epilogue start */
 5267 002c FF91      		pop r31
 5268 002e EF91      		pop r30
 5269 0030 BF91      		pop r27
 5270 0032 AF91      		pop r26
 5271 0034 9F91      		pop r25
 5272 0036 8F91      		pop r24
 5273 0038 7F91      		pop r23
 5274 003a 6F91      		pop r22
 5275 003c 5F91      		pop r21
 5276 003e 4F91      		pop r20
 5277 0040 3F91      		pop r19
 5278 0042 2F91      		pop r18
 5279 0044 0F90      		pop r0
 5280 0046 0BBE      		out __RAMPZ__,r0
 5281 0048 0F90      		pop r0
 5282 004a 0FBE      		out __SREG__,r0
 5283 004c 0F90      		pop r0
 5284 004e 1F90      		pop r1
 5285 0050 1895      		reti
 5286               		.cfi_endproc
 5287               	.LFE84:
 5289               		.section	.text.__vector_26,"ax",@progbits
 5290               	.global	__vector_26
 5292               	__vector_26:
 5293               	.LFB85:
 580:../src/ir_comm.c **** ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
 5294               		.loc 1 580 0
 5295               		.cfi_startproc
 5296 0000 1F92      		push r1
 5297               	.LCFI214:
 5298               		.cfi_def_cfa_offset 4
 5299               		.cfi_offset 1, -3
 5300 0002 0F92      		push r0
 5301               	.LCFI215:
 5302               		.cfi_def_cfa_offset 5
 5303               		.cfi_offset 0, -4
 5304 0004 0FB6      		in r0,__SREG__
 5305 0006 0F92      		push r0
 5306 0008 1124      		clr __zero_reg__
 5307 000a 0BB6      		in r0,__RAMPZ__
 5308 000c 0F92      		push r0
 5309 000e 2F93      		push r18
 5310               	.LCFI216:
 5311               		.cfi_def_cfa_offset 6
 5312               		.cfi_offset 18, -5
 5313 0010 3F93      		push r19
 5314               	.LCFI217:
 5315               		.cfi_def_cfa_offset 7
 5316               		.cfi_offset 19, -6
 5317 0012 4F93      		push r20
 5318               	.LCFI218:
 5319               		.cfi_def_cfa_offset 8
 5320               		.cfi_offset 20, -7
 5321 0014 5F93      		push r21
 5322               	.LCFI219:
 5323               		.cfi_def_cfa_offset 9
 5324               		.cfi_offset 21, -8
 5325 0016 6F93      		push r22
 5326               	.LCFI220:
 5327               		.cfi_def_cfa_offset 10
 5328               		.cfi_offset 22, -9
 5329 0018 7F93      		push r23
 5330               	.LCFI221:
 5331               		.cfi_def_cfa_offset 11
 5332               		.cfi_offset 23, -10
 5333 001a 8F93      		push r24
 5334               	.LCFI222:
 5335               		.cfi_def_cfa_offset 12
 5336               		.cfi_offset 24, -11
 5337 001c 9F93      		push r25
 5338               	.LCFI223:
 5339               		.cfi_def_cfa_offset 13
 5340               		.cfi_offset 25, -12
 5341 001e AF93      		push r26
 5342               	.LCFI224:
 5343               		.cfi_def_cfa_offset 14
 5344               		.cfi_offset 26, -13
 5345 0020 BF93      		push r27
 5346               	.LCFI225:
 5347               		.cfi_def_cfa_offset 15
 5348               		.cfi_offset 27, -14
 5349 0022 EF93      		push r30
 5350               	.LCFI226:
 5351               		.cfi_def_cfa_offset 16
 5352               		.cfi_offset 30, -15
 5353 0024 FF93      		push r31
 5354               	.LCFI227:
 5355               		.cfi_def_cfa_offset 17
 5356               		.cfi_offset 31, -16
 5357               	/* prologue: Signal */
 5358               	/* frame size = 0 */
 5359               	/* stack size = 16 */
 5360               	.L__stack_usage = 16
 5361               		.loc 1 580 0
 5362 0026 80E0      		ldi r24,0
 5363 0028 0E94 0000 		call ir_transmit
 5364               	.LVL365:
 5365               	/* epilogue start */
 5366 002c FF91      		pop r31
 5367 002e EF91      		pop r30
 5368 0030 BF91      		pop r27
 5369 0032 AF91      		pop r26
 5370 0034 9F91      		pop r25
 5371 0036 8F91      		pop r24
 5372 0038 7F91      		pop r23
 5373 003a 6F91      		pop r22
 5374 003c 5F91      		pop r21
 5375 003e 4F91      		pop r20
 5376 0040 3F91      		pop r19
 5377 0042 2F91      		pop r18
 5378 0044 0F90      		pop r0
 5379 0046 0BBE      		out __RAMPZ__,r0
 5380 0048 0F90      		pop r0
 5381 004a 0FBE      		out __SREG__,r0
 5382 004c 0F90      		pop r0
 5383 004e 1F90      		pop r1
 5384 0050 1895      		reti
 5385               		.cfi_endproc
 5386               	.LFE85:
 5388               		.section	.text.__vector_28,"ax",@progbits
 5389               	.global	__vector_28
 5391               	__vector_28:
 5392               	.LFB86:
 581:../src/ir_comm.c **** 
 582:../src/ir_comm.c **** // ISRs for IR channel 1
 583:../src/ir_comm.c **** ISR( USARTC1_RXC_vect ) { ir_receive(1); }
 5393               		.loc 1 583 0
 5394               		.cfi_startproc
 5395 0000 1F92      		push r1
 5396               	.LCFI228:
 5397               		.cfi_def_cfa_offset 4
 5398               		.cfi_offset 1, -3
 5399 0002 0F92      		push r0
 5400               	.LCFI229:
 5401               		.cfi_def_cfa_offset 5
 5402               		.cfi_offset 0, -4
 5403 0004 0FB6      		in r0,__SREG__
 5404 0006 0F92      		push r0
 5405 0008 1124      		clr __zero_reg__
 5406 000a 0BB6      		in r0,__RAMPZ__
 5407 000c 0F92      		push r0
 5408 000e 2F93      		push r18
 5409               	.LCFI230:
 5410               		.cfi_def_cfa_offset 6
 5411               		.cfi_offset 18, -5
 5412 0010 3F93      		push r19
 5413               	.LCFI231:
 5414               		.cfi_def_cfa_offset 7
 5415               		.cfi_offset 19, -6
 5416 0012 4F93      		push r20
 5417               	.LCFI232:
 5418               		.cfi_def_cfa_offset 8
 5419               		.cfi_offset 20, -7
 5420 0014 5F93      		push r21
 5421               	.LCFI233:
 5422               		.cfi_def_cfa_offset 9
 5423               		.cfi_offset 21, -8
 5424 0016 6F93      		push r22
 5425               	.LCFI234:
 5426               		.cfi_def_cfa_offset 10
 5427               		.cfi_offset 22, -9
 5428 0018 7F93      		push r23
 5429               	.LCFI235:
 5430               		.cfi_def_cfa_offset 11
 5431               		.cfi_offset 23, -10
 5432 001a 8F93      		push r24
 5433               	.LCFI236:
 5434               		.cfi_def_cfa_offset 12
 5435               		.cfi_offset 24, -11
 5436 001c 9F93      		push r25
 5437               	.LCFI237:
 5438               		.cfi_def_cfa_offset 13
 5439               		.cfi_offset 25, -12
 5440 001e AF93      		push r26
 5441               	.LCFI238:
 5442               		.cfi_def_cfa_offset 14
 5443               		.cfi_offset 26, -13
 5444 0020 BF93      		push r27
 5445               	.LCFI239:
 5446               		.cfi_def_cfa_offset 15
 5447               		.cfi_offset 27, -14
 5448 0022 EF93      		push r30
 5449               	.LCFI240:
 5450               		.cfi_def_cfa_offset 16
 5451               		.cfi_offset 30, -15
 5452 0024 FF93      		push r31
 5453               	.LCFI241:
 5454               		.cfi_def_cfa_offset 17
 5455               		.cfi_offset 31, -16
 5456               	/* prologue: Signal */
 5457               	/* frame size = 0 */
 5458               	/* stack size = 16 */
 5459               	.L__stack_usage = 16
 5460               		.loc 1 583 0
 5461 0026 81E0      		ldi r24,lo8(1)
 5462 0028 0E94 0000 		call ir_receive
 5463               	.LVL366:
 5464               	/* epilogue start */
 5465 002c FF91      		pop r31
 5466 002e EF91      		pop r30
 5467 0030 BF91      		pop r27
 5468 0032 AF91      		pop r26
 5469 0034 9F91      		pop r25
 5470 0036 8F91      		pop r24
 5471 0038 7F91      		pop r23
 5472 003a 6F91      		pop r22
 5473 003c 5F91      		pop r21
 5474 003e 4F91      		pop r20
 5475 0040 3F91      		pop r19
 5476 0042 2F91      		pop r18
 5477 0044 0F90      		pop r0
 5478 0046 0BBE      		out __RAMPZ__,r0
 5479 0048 0F90      		pop r0
 5480 004a 0FBE      		out __SREG__,r0
 5481 004c 0F90      		pop r0
 5482 004e 1F90      		pop r1
 5483 0050 1895      		reti
 5484               		.cfi_endproc
 5485               	.LFE86:
 5487               		.section	.text.__vector_30,"ax",@progbits
 5488               	.global	__vector_30
 5490               	__vector_30:
 5491               	.LFB87:
 584:../src/ir_comm.c **** ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
 5492               		.loc 1 584 0
 5493               		.cfi_startproc
 5494 0000 1F92      		push r1
 5495               	.LCFI242:
 5496               		.cfi_def_cfa_offset 4
 5497               		.cfi_offset 1, -3
 5498 0002 0F92      		push r0
 5499               	.LCFI243:
 5500               		.cfi_def_cfa_offset 5
 5501               		.cfi_offset 0, -4
 5502 0004 0FB6      		in r0,__SREG__
 5503 0006 0F92      		push r0
 5504 0008 1124      		clr __zero_reg__
 5505 000a 0BB6      		in r0,__RAMPZ__
 5506 000c 0F92      		push r0
 5507 000e 2F93      		push r18
 5508               	.LCFI244:
 5509               		.cfi_def_cfa_offset 6
 5510               		.cfi_offset 18, -5
 5511 0010 3F93      		push r19
 5512               	.LCFI245:
 5513               		.cfi_def_cfa_offset 7
 5514               		.cfi_offset 19, -6
 5515 0012 4F93      		push r20
 5516               	.LCFI246:
 5517               		.cfi_def_cfa_offset 8
 5518               		.cfi_offset 20, -7
 5519 0014 5F93      		push r21
 5520               	.LCFI247:
 5521               		.cfi_def_cfa_offset 9
 5522               		.cfi_offset 21, -8
 5523 0016 6F93      		push r22
 5524               	.LCFI248:
 5525               		.cfi_def_cfa_offset 10
 5526               		.cfi_offset 22, -9
 5527 0018 7F93      		push r23
 5528               	.LCFI249:
 5529               		.cfi_def_cfa_offset 11
 5530               		.cfi_offset 23, -10
 5531 001a 8F93      		push r24
 5532               	.LCFI250:
 5533               		.cfi_def_cfa_offset 12
 5534               		.cfi_offset 24, -11
 5535 001c 9F93      		push r25
 5536               	.LCFI251:
 5537               		.cfi_def_cfa_offset 13
 5538               		.cfi_offset 25, -12
 5539 001e AF93      		push r26
 5540               	.LCFI252:
 5541               		.cfi_def_cfa_offset 14
 5542               		.cfi_offset 26, -13
 5543 0020 BF93      		push r27
 5544               	.LCFI253:
 5545               		.cfi_def_cfa_offset 15
 5546               		.cfi_offset 27, -14
 5547 0022 EF93      		push r30
 5548               	.LCFI254:
 5549               		.cfi_def_cfa_offset 16
 5550               		.cfi_offset 30, -15
 5551 0024 FF93      		push r31
 5552               	.LCFI255:
 5553               		.cfi_def_cfa_offset 17
 5554               		.cfi_offset 31, -16
 5555               	/* prologue: Signal */
 5556               	/* frame size = 0 */
 5557               	/* stack size = 16 */
 5558               	.L__stack_usage = 16
 5559               		.loc 1 584 0
 5560 0026 81E0      		ldi r24,lo8(1)
 5561 0028 0E94 0000 		call ir_transmit_complete
 5562               	.LVL367:
 5563               	/* epilogue start */
 5564 002c FF91      		pop r31
 5565 002e EF91      		pop r30
 5566 0030 BF91      		pop r27
 5567 0032 AF91      		pop r26
 5568 0034 9F91      		pop r25
 5569 0036 8F91      		pop r24
 5570 0038 7F91      		pop r23
 5571 003a 6F91      		pop r22
 5572 003c 5F91      		pop r21
 5573 003e 4F91      		pop r20
 5574 0040 3F91      		pop r19
 5575 0042 2F91      		pop r18
 5576 0044 0F90      		pop r0
 5577 0046 0BBE      		out __RAMPZ__,r0
 5578 0048 0F90      		pop r0
 5579 004a 0FBE      		out __SREG__,r0
 5580 004c 0F90      		pop r0
 5581 004e 1F90      		pop r1
 5582 0050 1895      		reti
 5583               		.cfi_endproc
 5584               	.LFE87:
 5586               		.section	.text.__vector_29,"ax",@progbits
 5587               	.global	__vector_29
 5589               	__vector_29:
 5590               	.LFB88:
 585:../src/ir_comm.c **** ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
 5591               		.loc 1 585 0
 5592               		.cfi_startproc
 5593 0000 1F92      		push r1
 5594               	.LCFI256:
 5595               		.cfi_def_cfa_offset 4
 5596               		.cfi_offset 1, -3
 5597 0002 0F92      		push r0
 5598               	.LCFI257:
 5599               		.cfi_def_cfa_offset 5
 5600               		.cfi_offset 0, -4
 5601 0004 0FB6      		in r0,__SREG__
 5602 0006 0F92      		push r0
 5603 0008 1124      		clr __zero_reg__
 5604 000a 0BB6      		in r0,__RAMPZ__
 5605 000c 0F92      		push r0
 5606 000e 2F93      		push r18
 5607               	.LCFI258:
 5608               		.cfi_def_cfa_offset 6
 5609               		.cfi_offset 18, -5
 5610 0010 3F93      		push r19
 5611               	.LCFI259:
 5612               		.cfi_def_cfa_offset 7
 5613               		.cfi_offset 19, -6
 5614 0012 4F93      		push r20
 5615               	.LCFI260:
 5616               		.cfi_def_cfa_offset 8
 5617               		.cfi_offset 20, -7
 5618 0014 5F93      		push r21
 5619               	.LCFI261:
 5620               		.cfi_def_cfa_offset 9
 5621               		.cfi_offset 21, -8
 5622 0016 6F93      		push r22
 5623               	.LCFI262:
 5624               		.cfi_def_cfa_offset 10
 5625               		.cfi_offset 22, -9
 5626 0018 7F93      		push r23
 5627               	.LCFI263:
 5628               		.cfi_def_cfa_offset 11
 5629               		.cfi_offset 23, -10
 5630 001a 8F93      		push r24
 5631               	.LCFI264:
 5632               		.cfi_def_cfa_offset 12
 5633               		.cfi_offset 24, -11
 5634 001c 9F93      		push r25
 5635               	.LCFI265:
 5636               		.cfi_def_cfa_offset 13
 5637               		.cfi_offset 25, -12
 5638 001e AF93      		push r26
 5639               	.LCFI266:
 5640               		.cfi_def_cfa_offset 14
 5641               		.cfi_offset 26, -13
 5642 0020 BF93      		push r27
 5643               	.LCFI267:
 5644               		.cfi_def_cfa_offset 15
 5645               		.cfi_offset 27, -14
 5646 0022 EF93      		push r30
 5647               	.LCFI268:
 5648               		.cfi_def_cfa_offset 16
 5649               		.cfi_offset 30, -15
 5650 0024 FF93      		push r31
 5651               	.LCFI269:
 5652               		.cfi_def_cfa_offset 17
 5653               		.cfi_offset 31, -16
 5654               	/* prologue: Signal */
 5655               	/* frame size = 0 */
 5656               	/* stack size = 16 */
 5657               	.L__stack_usage = 16
 5658               		.loc 1 585 0
 5659 0026 81E0      		ldi r24,lo8(1)
 5660 0028 0E94 0000 		call ir_transmit
 5661               	.LVL368:
 5662               	/* epilogue start */
 5663 002c FF91      		pop r31
 5664 002e EF91      		pop r30
 5665 0030 BF91      		pop r27
 5666 0032 AF91      		pop r26
 5667 0034 9F91      		pop r25
 5668 0036 8F91      		pop r24
 5669 0038 7F91      		pop r23
 5670 003a 6F91      		pop r22
 5671 003c 5F91      		pop r21
 5672 003e 4F91      		pop r20
 5673 0040 3F91      		pop r19
 5674 0042 2F91      		pop r18
 5675 0044 0F90      		pop r0
 5676 0046 0BBE      		out __RAMPZ__,r0
 5677 0048 0F90      		pop r0
 5678 004a 0FBE      		out __SREG__,r0
 5679 004c 0F90      		pop r0
 5680 004e 1F90      		pop r1
 5681 0050 1895      		reti
 5682               		.cfi_endproc
 5683               	.LFE88:
 5685               		.section	.text.__vector_88,"ax",@progbits
 5686               	.global	__vector_88
 5688               	__vector_88:
 5689               	.LFB89:
 586:../src/ir_comm.c **** 
 587:../src/ir_comm.c **** // ISRs for IR channel 2
 588:../src/ir_comm.c **** ISR( USARTD0_RXC_vect ) { ir_receive(2); }
 5690               		.loc 1 588 0
 5691               		.cfi_startproc
 5692 0000 1F92      		push r1
 5693               	.LCFI270:
 5694               		.cfi_def_cfa_offset 4
 5695               		.cfi_offset 1, -3
 5696 0002 0F92      		push r0
 5697               	.LCFI271:
 5698               		.cfi_def_cfa_offset 5
 5699               		.cfi_offset 0, -4
 5700 0004 0FB6      		in r0,__SREG__
 5701 0006 0F92      		push r0
 5702 0008 1124      		clr __zero_reg__
 5703 000a 0BB6      		in r0,__RAMPZ__
 5704 000c 0F92      		push r0
 5705 000e 2F93      		push r18
 5706               	.LCFI272:
 5707               		.cfi_def_cfa_offset 6
 5708               		.cfi_offset 18, -5
 5709 0010 3F93      		push r19
 5710               	.LCFI273:
 5711               		.cfi_def_cfa_offset 7
 5712               		.cfi_offset 19, -6
 5713 0012 4F93      		push r20
 5714               	.LCFI274:
 5715               		.cfi_def_cfa_offset 8
 5716               		.cfi_offset 20, -7
 5717 0014 5F93      		push r21
 5718               	.LCFI275:
 5719               		.cfi_def_cfa_offset 9
 5720               		.cfi_offset 21, -8
 5721 0016 6F93      		push r22
 5722               	.LCFI276:
 5723               		.cfi_def_cfa_offset 10
 5724               		.cfi_offset 22, -9
 5725 0018 7F93      		push r23
 5726               	.LCFI277:
 5727               		.cfi_def_cfa_offset 11
 5728               		.cfi_offset 23, -10
 5729 001a 8F93      		push r24
 5730               	.LCFI278:
 5731               		.cfi_def_cfa_offset 12
 5732               		.cfi_offset 24, -11
 5733 001c 9F93      		push r25
 5734               	.LCFI279:
 5735               		.cfi_def_cfa_offset 13
 5736               		.cfi_offset 25, -12
 5737 001e AF93      		push r26
 5738               	.LCFI280:
 5739               		.cfi_def_cfa_offset 14
 5740               		.cfi_offset 26, -13
 5741 0020 BF93      		push r27
 5742               	.LCFI281:
 5743               		.cfi_def_cfa_offset 15
 5744               		.cfi_offset 27, -14
 5745 0022 EF93      		push r30
 5746               	.LCFI282:
 5747               		.cfi_def_cfa_offset 16
 5748               		.cfi_offset 30, -15
 5749 0024 FF93      		push r31
 5750               	.LCFI283:
 5751               		.cfi_def_cfa_offset 17
 5752               		.cfi_offset 31, -16
 5753               	/* prologue: Signal */
 5754               	/* frame size = 0 */
 5755               	/* stack size = 16 */
 5756               	.L__stack_usage = 16
 5757               		.loc 1 588 0
 5758 0026 82E0      		ldi r24,lo8(2)
 5759 0028 0E94 0000 		call ir_receive
 5760               	.LVL369:
 5761               	/* epilogue start */
 5762 002c FF91      		pop r31
 5763 002e EF91      		pop r30
 5764 0030 BF91      		pop r27
 5765 0032 AF91      		pop r26
 5766 0034 9F91      		pop r25
 5767 0036 8F91      		pop r24
 5768 0038 7F91      		pop r23
 5769 003a 6F91      		pop r22
 5770 003c 5F91      		pop r21
 5771 003e 4F91      		pop r20
 5772 0040 3F91      		pop r19
 5773 0042 2F91      		pop r18
 5774 0044 0F90      		pop r0
 5775 0046 0BBE      		out __RAMPZ__,r0
 5776 0048 0F90      		pop r0
 5777 004a 0FBE      		out __SREG__,r0
 5778 004c 0F90      		pop r0
 5779 004e 1F90      		pop r1
 5780 0050 1895      		reti
 5781               		.cfi_endproc
 5782               	.LFE89:
 5784               		.section	.text.__vector_90,"ax",@progbits
 5785               	.global	__vector_90
 5787               	__vector_90:
 5788               	.LFB90:
 589:../src/ir_comm.c **** ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
 5789               		.loc 1 589 0
 5790               		.cfi_startproc
 5791 0000 1F92      		push r1
 5792               	.LCFI284:
 5793               		.cfi_def_cfa_offset 4
 5794               		.cfi_offset 1, -3
 5795 0002 0F92      		push r0
 5796               	.LCFI285:
 5797               		.cfi_def_cfa_offset 5
 5798               		.cfi_offset 0, -4
 5799 0004 0FB6      		in r0,__SREG__
 5800 0006 0F92      		push r0
 5801 0008 1124      		clr __zero_reg__
 5802 000a 0BB6      		in r0,__RAMPZ__
 5803 000c 0F92      		push r0
 5804 000e 2F93      		push r18
 5805               	.LCFI286:
 5806               		.cfi_def_cfa_offset 6
 5807               		.cfi_offset 18, -5
 5808 0010 3F93      		push r19
 5809               	.LCFI287:
 5810               		.cfi_def_cfa_offset 7
 5811               		.cfi_offset 19, -6
 5812 0012 4F93      		push r20
 5813               	.LCFI288:
 5814               		.cfi_def_cfa_offset 8
 5815               		.cfi_offset 20, -7
 5816 0014 5F93      		push r21
 5817               	.LCFI289:
 5818               		.cfi_def_cfa_offset 9
 5819               		.cfi_offset 21, -8
 5820 0016 6F93      		push r22
 5821               	.LCFI290:
 5822               		.cfi_def_cfa_offset 10
 5823               		.cfi_offset 22, -9
 5824 0018 7F93      		push r23
 5825               	.LCFI291:
 5826               		.cfi_def_cfa_offset 11
 5827               		.cfi_offset 23, -10
 5828 001a 8F93      		push r24
 5829               	.LCFI292:
 5830               		.cfi_def_cfa_offset 12
 5831               		.cfi_offset 24, -11
 5832 001c 9F93      		push r25
 5833               	.LCFI293:
 5834               		.cfi_def_cfa_offset 13
 5835               		.cfi_offset 25, -12
 5836 001e AF93      		push r26
 5837               	.LCFI294:
 5838               		.cfi_def_cfa_offset 14
 5839               		.cfi_offset 26, -13
 5840 0020 BF93      		push r27
 5841               	.LCFI295:
 5842               		.cfi_def_cfa_offset 15
 5843               		.cfi_offset 27, -14
 5844 0022 EF93      		push r30
 5845               	.LCFI296:
 5846               		.cfi_def_cfa_offset 16
 5847               		.cfi_offset 30, -15
 5848 0024 FF93      		push r31
 5849               	.LCFI297:
 5850               		.cfi_def_cfa_offset 17
 5851               		.cfi_offset 31, -16
 5852               	/* prologue: Signal */
 5853               	/* frame size = 0 */
 5854               	/* stack size = 16 */
 5855               	.L__stack_usage = 16
 5856               		.loc 1 589 0
 5857 0026 82E0      		ldi r24,lo8(2)
 5858 0028 0E94 0000 		call ir_transmit_complete
 5859               	.LVL370:
 5860               	/* epilogue start */
 5861 002c FF91      		pop r31
 5862 002e EF91      		pop r30
 5863 0030 BF91      		pop r27
 5864 0032 AF91      		pop r26
 5865 0034 9F91      		pop r25
 5866 0036 8F91      		pop r24
 5867 0038 7F91      		pop r23
 5868 003a 6F91      		pop r22
 5869 003c 5F91      		pop r21
 5870 003e 4F91      		pop r20
 5871 0040 3F91      		pop r19
 5872 0042 2F91      		pop r18
 5873 0044 0F90      		pop r0
 5874 0046 0BBE      		out __RAMPZ__,r0
 5875 0048 0F90      		pop r0
 5876 004a 0FBE      		out __SREG__,r0
 5877 004c 0F90      		pop r0
 5878 004e 1F90      		pop r1
 5879 0050 1895      		reti
 5880               		.cfi_endproc
 5881               	.LFE90:
 5883               		.section	.text.__vector_89,"ax",@progbits
 5884               	.global	__vector_89
 5886               	__vector_89:
 5887               	.LFB91:
 590:../src/ir_comm.c **** ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
 5888               		.loc 1 590 0
 5889               		.cfi_startproc
 5890 0000 1F92      		push r1
 5891               	.LCFI298:
 5892               		.cfi_def_cfa_offset 4
 5893               		.cfi_offset 1, -3
 5894 0002 0F92      		push r0
 5895               	.LCFI299:
 5896               		.cfi_def_cfa_offset 5
 5897               		.cfi_offset 0, -4
 5898 0004 0FB6      		in r0,__SREG__
 5899 0006 0F92      		push r0
 5900 0008 1124      		clr __zero_reg__
 5901 000a 0BB6      		in r0,__RAMPZ__
 5902 000c 0F92      		push r0
 5903 000e 2F93      		push r18
 5904               	.LCFI300:
 5905               		.cfi_def_cfa_offset 6
 5906               		.cfi_offset 18, -5
 5907 0010 3F93      		push r19
 5908               	.LCFI301:
 5909               		.cfi_def_cfa_offset 7
 5910               		.cfi_offset 19, -6
 5911 0012 4F93      		push r20
 5912               	.LCFI302:
 5913               		.cfi_def_cfa_offset 8
 5914               		.cfi_offset 20, -7
 5915 0014 5F93      		push r21
 5916               	.LCFI303:
 5917               		.cfi_def_cfa_offset 9
 5918               		.cfi_offset 21, -8
 5919 0016 6F93      		push r22
 5920               	.LCFI304:
 5921               		.cfi_def_cfa_offset 10
 5922               		.cfi_offset 22, -9
 5923 0018 7F93      		push r23
 5924               	.LCFI305:
 5925               		.cfi_def_cfa_offset 11
 5926               		.cfi_offset 23, -10
 5927 001a 8F93      		push r24
 5928               	.LCFI306:
 5929               		.cfi_def_cfa_offset 12
 5930               		.cfi_offset 24, -11
 5931 001c 9F93      		push r25
 5932               	.LCFI307:
 5933               		.cfi_def_cfa_offset 13
 5934               		.cfi_offset 25, -12
 5935 001e AF93      		push r26
 5936               	.LCFI308:
 5937               		.cfi_def_cfa_offset 14
 5938               		.cfi_offset 26, -13
 5939 0020 BF93      		push r27
 5940               	.LCFI309:
 5941               		.cfi_def_cfa_offset 15
 5942               		.cfi_offset 27, -14
 5943 0022 EF93      		push r30
 5944               	.LCFI310:
 5945               		.cfi_def_cfa_offset 16
 5946               		.cfi_offset 30, -15
 5947 0024 FF93      		push r31
 5948               	.LCFI311:
 5949               		.cfi_def_cfa_offset 17
 5950               		.cfi_offset 31, -16
 5951               	/* prologue: Signal */
 5952               	/* frame size = 0 */
 5953               	/* stack size = 16 */
 5954               	.L__stack_usage = 16
 5955               		.loc 1 590 0
 5956 0026 82E0      		ldi r24,lo8(2)
 5957 0028 0E94 0000 		call ir_transmit
 5958               	.LVL371:
 5959               	/* epilogue start */
 5960 002c FF91      		pop r31
 5961 002e EF91      		pop r30
 5962 0030 BF91      		pop r27
 5963 0032 AF91      		pop r26
 5964 0034 9F91      		pop r25
 5965 0036 8F91      		pop r24
 5966 0038 7F91      		pop r23
 5967 003a 6F91      		pop r22
 5968 003c 5F91      		pop r21
 5969 003e 4F91      		pop r20
 5970 0040 3F91      		pop r19
 5971 0042 2F91      		pop r18
 5972 0044 0F90      		pop r0
 5973 0046 0BBE      		out __RAMPZ__,r0
 5974 0048 0F90      		pop r0
 5975 004a 0FBE      		out __SREG__,r0
 5976 004c 0F90      		pop r0
 5977 004e 1F90      		pop r1
 5978 0050 1895      		reti
 5979               		.cfi_endproc
 5980               	.LFE91:
 5982               		.section	.text.__vector_58,"ax",@progbits
 5983               	.global	__vector_58
 5985               	__vector_58:
 5986               	.LFB92:
 591:../src/ir_comm.c **** 
 592:../src/ir_comm.c **** // ISRs for IR channel 3
 593:../src/ir_comm.c **** ISR( USARTE0_RXC_vect ) { ir_receive(3); }
 5987               		.loc 1 593 0
 5988               		.cfi_startproc
 5989 0000 1F92      		push r1
 5990               	.LCFI312:
 5991               		.cfi_def_cfa_offset 4
 5992               		.cfi_offset 1, -3
 5993 0002 0F92      		push r0
 5994               	.LCFI313:
 5995               		.cfi_def_cfa_offset 5
 5996               		.cfi_offset 0, -4
 5997 0004 0FB6      		in r0,__SREG__
 5998 0006 0F92      		push r0
 5999 0008 1124      		clr __zero_reg__
 6000 000a 0BB6      		in r0,__RAMPZ__
 6001 000c 0F92      		push r0
 6002 000e 2F93      		push r18
 6003               	.LCFI314:
 6004               		.cfi_def_cfa_offset 6
 6005               		.cfi_offset 18, -5
 6006 0010 3F93      		push r19
 6007               	.LCFI315:
 6008               		.cfi_def_cfa_offset 7
 6009               		.cfi_offset 19, -6
 6010 0012 4F93      		push r20
 6011               	.LCFI316:
 6012               		.cfi_def_cfa_offset 8
 6013               		.cfi_offset 20, -7
 6014 0014 5F93      		push r21
 6015               	.LCFI317:
 6016               		.cfi_def_cfa_offset 9
 6017               		.cfi_offset 21, -8
 6018 0016 6F93      		push r22
 6019               	.LCFI318:
 6020               		.cfi_def_cfa_offset 10
 6021               		.cfi_offset 22, -9
 6022 0018 7F93      		push r23
 6023               	.LCFI319:
 6024               		.cfi_def_cfa_offset 11
 6025               		.cfi_offset 23, -10
 6026 001a 8F93      		push r24
 6027               	.LCFI320:
 6028               		.cfi_def_cfa_offset 12
 6029               		.cfi_offset 24, -11
 6030 001c 9F93      		push r25
 6031               	.LCFI321:
 6032               		.cfi_def_cfa_offset 13
 6033               		.cfi_offset 25, -12
 6034 001e AF93      		push r26
 6035               	.LCFI322:
 6036               		.cfi_def_cfa_offset 14
 6037               		.cfi_offset 26, -13
 6038 0020 BF93      		push r27
 6039               	.LCFI323:
 6040               		.cfi_def_cfa_offset 15
 6041               		.cfi_offset 27, -14
 6042 0022 EF93      		push r30
 6043               	.LCFI324:
 6044               		.cfi_def_cfa_offset 16
 6045               		.cfi_offset 30, -15
 6046 0024 FF93      		push r31
 6047               	.LCFI325:
 6048               		.cfi_def_cfa_offset 17
 6049               		.cfi_offset 31, -16
 6050               	/* prologue: Signal */
 6051               	/* frame size = 0 */
 6052               	/* stack size = 16 */
 6053               	.L__stack_usage = 16
 6054               		.loc 1 593 0
 6055 0026 83E0      		ldi r24,lo8(3)
 6056 0028 0E94 0000 		call ir_receive
 6057               	.LVL372:
 6058               	/* epilogue start */
 6059 002c FF91      		pop r31
 6060 002e EF91      		pop r30
 6061 0030 BF91      		pop r27
 6062 0032 AF91      		pop r26
 6063 0034 9F91      		pop r25
 6064 0036 8F91      		pop r24
 6065 0038 7F91      		pop r23
 6066 003a 6F91      		pop r22
 6067 003c 5F91      		pop r21
 6068 003e 4F91      		pop r20
 6069 0040 3F91      		pop r19
 6070 0042 2F91      		pop r18
 6071 0044 0F90      		pop r0
 6072 0046 0BBE      		out __RAMPZ__,r0
 6073 0048 0F90      		pop r0
 6074 004a 0FBE      		out __SREG__,r0
 6075 004c 0F90      		pop r0
 6076 004e 1F90      		pop r1
 6077 0050 1895      		reti
 6078               		.cfi_endproc
 6079               	.LFE92:
 6081               		.section	.text.__vector_60,"ax",@progbits
 6082               	.global	__vector_60
 6084               	__vector_60:
 6085               	.LFB93:
 594:../src/ir_comm.c **** ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
 6086               		.loc 1 594 0
 6087               		.cfi_startproc
 6088 0000 1F92      		push r1
 6089               	.LCFI326:
 6090               		.cfi_def_cfa_offset 4
 6091               		.cfi_offset 1, -3
 6092 0002 0F92      		push r0
 6093               	.LCFI327:
 6094               		.cfi_def_cfa_offset 5
 6095               		.cfi_offset 0, -4
 6096 0004 0FB6      		in r0,__SREG__
 6097 0006 0F92      		push r0
 6098 0008 1124      		clr __zero_reg__
 6099 000a 0BB6      		in r0,__RAMPZ__
 6100 000c 0F92      		push r0
 6101 000e 2F93      		push r18
 6102               	.LCFI328:
 6103               		.cfi_def_cfa_offset 6
 6104               		.cfi_offset 18, -5
 6105 0010 3F93      		push r19
 6106               	.LCFI329:
 6107               		.cfi_def_cfa_offset 7
 6108               		.cfi_offset 19, -6
 6109 0012 4F93      		push r20
 6110               	.LCFI330:
 6111               		.cfi_def_cfa_offset 8
 6112               		.cfi_offset 20, -7
 6113 0014 5F93      		push r21
 6114               	.LCFI331:
 6115               		.cfi_def_cfa_offset 9
 6116               		.cfi_offset 21, -8
 6117 0016 6F93      		push r22
 6118               	.LCFI332:
 6119               		.cfi_def_cfa_offset 10
 6120               		.cfi_offset 22, -9
 6121 0018 7F93      		push r23
 6122               	.LCFI333:
 6123               		.cfi_def_cfa_offset 11
 6124               		.cfi_offset 23, -10
 6125 001a 8F93      		push r24
 6126               	.LCFI334:
 6127               		.cfi_def_cfa_offset 12
 6128               		.cfi_offset 24, -11
 6129 001c 9F93      		push r25
 6130               	.LCFI335:
 6131               		.cfi_def_cfa_offset 13
 6132               		.cfi_offset 25, -12
 6133 001e AF93      		push r26
 6134               	.LCFI336:
 6135               		.cfi_def_cfa_offset 14
 6136               		.cfi_offset 26, -13
 6137 0020 BF93      		push r27
 6138               	.LCFI337:
 6139               		.cfi_def_cfa_offset 15
 6140               		.cfi_offset 27, -14
 6141 0022 EF93      		push r30
 6142               	.LCFI338:
 6143               		.cfi_def_cfa_offset 16
 6144               		.cfi_offset 30, -15
 6145 0024 FF93      		push r31
 6146               	.LCFI339:
 6147               		.cfi_def_cfa_offset 17
 6148               		.cfi_offset 31, -16
 6149               	/* prologue: Signal */
 6150               	/* frame size = 0 */
 6151               	/* stack size = 16 */
 6152               	.L__stack_usage = 16
 6153               		.loc 1 594 0
 6154 0026 83E0      		ldi r24,lo8(3)
 6155 0028 0E94 0000 		call ir_transmit_complete
 6156               	.LVL373:
 6157               	/* epilogue start */
 6158 002c FF91      		pop r31
 6159 002e EF91      		pop r30
 6160 0030 BF91      		pop r27
 6161 0032 AF91      		pop r26
 6162 0034 9F91      		pop r25
 6163 0036 8F91      		pop r24
 6164 0038 7F91      		pop r23
 6165 003a 6F91      		pop r22
 6166 003c 5F91      		pop r21
 6167 003e 4F91      		pop r20
 6168 0040 3F91      		pop r19
 6169 0042 2F91      		pop r18
 6170 0044 0F90      		pop r0
 6171 0046 0BBE      		out __RAMPZ__,r0
 6172 0048 0F90      		pop r0
 6173 004a 0FBE      		out __SREG__,r0
 6174 004c 0F90      		pop r0
 6175 004e 1F90      		pop r1
 6176 0050 1895      		reti
 6177               		.cfi_endproc
 6178               	.LFE93:
 6180               		.section	.text.__vector_59,"ax",@progbits
 6181               	.global	__vector_59
 6183               	__vector_59:
 6184               	.LFB94:
 595:../src/ir_comm.c **** ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
 6185               		.loc 1 595 0
 6186               		.cfi_startproc
 6187 0000 1F92      		push r1
 6188               	.LCFI340:
 6189               		.cfi_def_cfa_offset 4
 6190               		.cfi_offset 1, -3
 6191 0002 0F92      		push r0
 6192               	.LCFI341:
 6193               		.cfi_def_cfa_offset 5
 6194               		.cfi_offset 0, -4
 6195 0004 0FB6      		in r0,__SREG__
 6196 0006 0F92      		push r0
 6197 0008 1124      		clr __zero_reg__
 6198 000a 0BB6      		in r0,__RAMPZ__
 6199 000c 0F92      		push r0
 6200 000e 2F93      		push r18
 6201               	.LCFI342:
 6202               		.cfi_def_cfa_offset 6
 6203               		.cfi_offset 18, -5
 6204 0010 3F93      		push r19
 6205               	.LCFI343:
 6206               		.cfi_def_cfa_offset 7
 6207               		.cfi_offset 19, -6
 6208 0012 4F93      		push r20
 6209               	.LCFI344:
 6210               		.cfi_def_cfa_offset 8
 6211               		.cfi_offset 20, -7
 6212 0014 5F93      		push r21
 6213               	.LCFI345:
 6214               		.cfi_def_cfa_offset 9
 6215               		.cfi_offset 21, -8
 6216 0016 6F93      		push r22
 6217               	.LCFI346:
 6218               		.cfi_def_cfa_offset 10
 6219               		.cfi_offset 22, -9
 6220 0018 7F93      		push r23
 6221               	.LCFI347:
 6222               		.cfi_def_cfa_offset 11
 6223               		.cfi_offset 23, -10
 6224 001a 8F93      		push r24
 6225               	.LCFI348:
 6226               		.cfi_def_cfa_offset 12
 6227               		.cfi_offset 24, -11
 6228 001c 9F93      		push r25
 6229               	.LCFI349:
 6230               		.cfi_def_cfa_offset 13
 6231               		.cfi_offset 25, -12
 6232 001e AF93      		push r26
 6233               	.LCFI350:
 6234               		.cfi_def_cfa_offset 14
 6235               		.cfi_offset 26, -13
 6236 0020 BF93      		push r27
 6237               	.LCFI351:
 6238               		.cfi_def_cfa_offset 15
 6239               		.cfi_offset 27, -14
 6240 0022 EF93      		push r30
 6241               	.LCFI352:
 6242               		.cfi_def_cfa_offset 16
 6243               		.cfi_offset 30, -15
 6244 0024 FF93      		push r31
 6245               	.LCFI353:
 6246               		.cfi_def_cfa_offset 17
 6247               		.cfi_offset 31, -16
 6248               	/* prologue: Signal */
 6249               	/* frame size = 0 */
 6250               	/* stack size = 16 */
 6251               	.L__stack_usage = 16
 6252               		.loc 1 595 0
 6253 0026 83E0      		ldi r24,lo8(3)
 6254 0028 0E94 0000 		call ir_transmit
 6255               	.LVL374:
 6256               	/* epilogue start */
 6257 002c FF91      		pop r31
 6258 002e EF91      		pop r30
 6259 0030 BF91      		pop r27
 6260 0032 AF91      		pop r26
 6261 0034 9F91      		pop r25
 6262 0036 8F91      		pop r24
 6263 0038 7F91      		pop r23
 6264 003a 6F91      		pop r22
 6265 003c 5F91      		pop r21
 6266 003e 4F91      		pop r20
 6267 0040 3F91      		pop r19
 6268 0042 2F91      		pop r18
 6269 0044 0F90      		pop r0
 6270 0046 0BBE      		out __RAMPZ__,r0
 6271 0048 0F90      		pop r0
 6272 004a 0FBE      		out __SREG__,r0
 6273 004c 0F90      		pop r0
 6274 004e 1F90      		pop r1
 6275 0050 1895      		reti
 6276               		.cfi_endproc
 6277               	.LFE94:
 6279               		.section	.text.__vector_61,"ax",@progbits
 6280               	.global	__vector_61
 6282               	__vector_61:
 6283               	.LFB95:
 596:../src/ir_comm.c **** 
 597:../src/ir_comm.c **** // ISRs for IR channel 4
 598:../src/ir_comm.c **** ISR( USARTE1_RXC_vect ) { ir_receive(4); }
 6284               		.loc 1 598 0
 6285               		.cfi_startproc
 6286 0000 1F92      		push r1
 6287               	.LCFI354:
 6288               		.cfi_def_cfa_offset 4
 6289               		.cfi_offset 1, -3
 6290 0002 0F92      		push r0
 6291               	.LCFI355:
 6292               		.cfi_def_cfa_offset 5
 6293               		.cfi_offset 0, -4
 6294 0004 0FB6      		in r0,__SREG__
 6295 0006 0F92      		push r0
 6296 0008 1124      		clr __zero_reg__
 6297 000a 0BB6      		in r0,__RAMPZ__
 6298 000c 0F92      		push r0
 6299 000e 2F93      		push r18
 6300               	.LCFI356:
 6301               		.cfi_def_cfa_offset 6
 6302               		.cfi_offset 18, -5
 6303 0010 3F93      		push r19
 6304               	.LCFI357:
 6305               		.cfi_def_cfa_offset 7
 6306               		.cfi_offset 19, -6
 6307 0012 4F93      		push r20
 6308               	.LCFI358:
 6309               		.cfi_def_cfa_offset 8
 6310               		.cfi_offset 20, -7
 6311 0014 5F93      		push r21
 6312               	.LCFI359:
 6313               		.cfi_def_cfa_offset 9
 6314               		.cfi_offset 21, -8
 6315 0016 6F93      		push r22
 6316               	.LCFI360:
 6317               		.cfi_def_cfa_offset 10
 6318               		.cfi_offset 22, -9
 6319 0018 7F93      		push r23
 6320               	.LCFI361:
 6321               		.cfi_def_cfa_offset 11
 6322               		.cfi_offset 23, -10
 6323 001a 8F93      		push r24
 6324               	.LCFI362:
 6325               		.cfi_def_cfa_offset 12
 6326               		.cfi_offset 24, -11
 6327 001c 9F93      		push r25
 6328               	.LCFI363:
 6329               		.cfi_def_cfa_offset 13
 6330               		.cfi_offset 25, -12
 6331 001e AF93      		push r26
 6332               	.LCFI364:
 6333               		.cfi_def_cfa_offset 14
 6334               		.cfi_offset 26, -13
 6335 0020 BF93      		push r27
 6336               	.LCFI365:
 6337               		.cfi_def_cfa_offset 15
 6338               		.cfi_offset 27, -14
 6339 0022 EF93      		push r30
 6340               	.LCFI366:
 6341               		.cfi_def_cfa_offset 16
 6342               		.cfi_offset 30, -15
 6343 0024 FF93      		push r31
 6344               	.LCFI367:
 6345               		.cfi_def_cfa_offset 17
 6346               		.cfi_offset 31, -16
 6347               	/* prologue: Signal */
 6348               	/* frame size = 0 */
 6349               	/* stack size = 16 */
 6350               	.L__stack_usage = 16
 6351               		.loc 1 598 0
 6352 0026 84E0      		ldi r24,lo8(4)
 6353 0028 0E94 0000 		call ir_receive
 6354               	.LVL375:
 6355               	/* epilogue start */
 6356 002c FF91      		pop r31
 6357 002e EF91      		pop r30
 6358 0030 BF91      		pop r27
 6359 0032 AF91      		pop r26
 6360 0034 9F91      		pop r25
 6361 0036 8F91      		pop r24
 6362 0038 7F91      		pop r23
 6363 003a 6F91      		pop r22
 6364 003c 5F91      		pop r21
 6365 003e 4F91      		pop r20
 6366 0040 3F91      		pop r19
 6367 0042 2F91      		pop r18
 6368 0044 0F90      		pop r0
 6369 0046 0BBE      		out __RAMPZ__,r0
 6370 0048 0F90      		pop r0
 6371 004a 0FBE      		out __SREG__,r0
 6372 004c 0F90      		pop r0
 6373 004e 1F90      		pop r1
 6374 0050 1895      		reti
 6375               		.cfi_endproc
 6376               	.LFE95:
 6378               		.section	.text.__vector_63,"ax",@progbits
 6379               	.global	__vector_63
 6381               	__vector_63:
 6382               	.LFB96:
 599:../src/ir_comm.c **** ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
 6383               		.loc 1 599 0
 6384               		.cfi_startproc
 6385 0000 1F92      		push r1
 6386               	.LCFI368:
 6387               		.cfi_def_cfa_offset 4
 6388               		.cfi_offset 1, -3
 6389 0002 0F92      		push r0
 6390               	.LCFI369:
 6391               		.cfi_def_cfa_offset 5
 6392               		.cfi_offset 0, -4
 6393 0004 0FB6      		in r0,__SREG__
 6394 0006 0F92      		push r0
 6395 0008 1124      		clr __zero_reg__
 6396 000a 0BB6      		in r0,__RAMPZ__
 6397 000c 0F92      		push r0
 6398 000e 2F93      		push r18
 6399               	.LCFI370:
 6400               		.cfi_def_cfa_offset 6
 6401               		.cfi_offset 18, -5
 6402 0010 3F93      		push r19
 6403               	.LCFI371:
 6404               		.cfi_def_cfa_offset 7
 6405               		.cfi_offset 19, -6
 6406 0012 4F93      		push r20
 6407               	.LCFI372:
 6408               		.cfi_def_cfa_offset 8
 6409               		.cfi_offset 20, -7
 6410 0014 5F93      		push r21
 6411               	.LCFI373:
 6412               		.cfi_def_cfa_offset 9
 6413               		.cfi_offset 21, -8
 6414 0016 6F93      		push r22
 6415               	.LCFI374:
 6416               		.cfi_def_cfa_offset 10
 6417               		.cfi_offset 22, -9
 6418 0018 7F93      		push r23
 6419               	.LCFI375:
 6420               		.cfi_def_cfa_offset 11
 6421               		.cfi_offset 23, -10
 6422 001a 8F93      		push r24
 6423               	.LCFI376:
 6424               		.cfi_def_cfa_offset 12
 6425               		.cfi_offset 24, -11
 6426 001c 9F93      		push r25
 6427               	.LCFI377:
 6428               		.cfi_def_cfa_offset 13
 6429               		.cfi_offset 25, -12
 6430 001e AF93      		push r26
 6431               	.LCFI378:
 6432               		.cfi_def_cfa_offset 14
 6433               		.cfi_offset 26, -13
 6434 0020 BF93      		push r27
 6435               	.LCFI379:
 6436               		.cfi_def_cfa_offset 15
 6437               		.cfi_offset 27, -14
 6438 0022 EF93      		push r30
 6439               	.LCFI380:
 6440               		.cfi_def_cfa_offset 16
 6441               		.cfi_offset 30, -15
 6442 0024 FF93      		push r31
 6443               	.LCFI381:
 6444               		.cfi_def_cfa_offset 17
 6445               		.cfi_offset 31, -16
 6446               	/* prologue: Signal */
 6447               	/* frame size = 0 */
 6448               	/* stack size = 16 */
 6449               	.L__stack_usage = 16
 6450               		.loc 1 599 0
 6451 0026 84E0      		ldi r24,lo8(4)
 6452 0028 0E94 0000 		call ir_transmit_complete
 6453               	.LVL376:
 6454               	/* epilogue start */
 6455 002c FF91      		pop r31
 6456 002e EF91      		pop r30
 6457 0030 BF91      		pop r27
 6458 0032 AF91      		pop r26
 6459 0034 9F91      		pop r25
 6460 0036 8F91      		pop r24
 6461 0038 7F91      		pop r23
 6462 003a 6F91      		pop r22
 6463 003c 5F91      		pop r21
 6464 003e 4F91      		pop r20
 6465 0040 3F91      		pop r19
 6466 0042 2F91      		pop r18
 6467 0044 0F90      		pop r0
 6468 0046 0BBE      		out __RAMPZ__,r0
 6469 0048 0F90      		pop r0
 6470 004a 0FBE      		out __SREG__,r0
 6471 004c 0F90      		pop r0
 6472 004e 1F90      		pop r1
 6473 0050 1895      		reti
 6474               		.cfi_endproc
 6475               	.LFE96:
 6477               		.section	.text.__vector_62,"ax",@progbits
 6478               	.global	__vector_62
 6480               	__vector_62:
 6481               	.LFB97:
 600:../src/ir_comm.c **** ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
 6482               		.loc 1 600 0
 6483               		.cfi_startproc
 6484 0000 1F92      		push r1
 6485               	.LCFI382:
 6486               		.cfi_def_cfa_offset 4
 6487               		.cfi_offset 1, -3
 6488 0002 0F92      		push r0
 6489               	.LCFI383:
 6490               		.cfi_def_cfa_offset 5
 6491               		.cfi_offset 0, -4
 6492 0004 0FB6      		in r0,__SREG__
 6493 0006 0F92      		push r0
 6494 0008 1124      		clr __zero_reg__
 6495 000a 0BB6      		in r0,__RAMPZ__
 6496 000c 0F92      		push r0
 6497 000e 2F93      		push r18
 6498               	.LCFI384:
 6499               		.cfi_def_cfa_offset 6
 6500               		.cfi_offset 18, -5
 6501 0010 3F93      		push r19
 6502               	.LCFI385:
 6503               		.cfi_def_cfa_offset 7
 6504               		.cfi_offset 19, -6
 6505 0012 4F93      		push r20
 6506               	.LCFI386:
 6507               		.cfi_def_cfa_offset 8
 6508               		.cfi_offset 20, -7
 6509 0014 5F93      		push r21
 6510               	.LCFI387:
 6511               		.cfi_def_cfa_offset 9
 6512               		.cfi_offset 21, -8
 6513 0016 6F93      		push r22
 6514               	.LCFI388:
 6515               		.cfi_def_cfa_offset 10
 6516               		.cfi_offset 22, -9
 6517 0018 7F93      		push r23
 6518               	.LCFI389:
 6519               		.cfi_def_cfa_offset 11
 6520               		.cfi_offset 23, -10
 6521 001a 8F93      		push r24
 6522               	.LCFI390:
 6523               		.cfi_def_cfa_offset 12
 6524               		.cfi_offset 24, -11
 6525 001c 9F93      		push r25
 6526               	.LCFI391:
 6527               		.cfi_def_cfa_offset 13
 6528               		.cfi_offset 25, -12
 6529 001e AF93      		push r26
 6530               	.LCFI392:
 6531               		.cfi_def_cfa_offset 14
 6532               		.cfi_offset 26, -13
 6533 0020 BF93      		push r27
 6534               	.LCFI393:
 6535               		.cfi_def_cfa_offset 15
 6536               		.cfi_offset 27, -14
 6537 0022 EF93      		push r30
 6538               	.LCFI394:
 6539               		.cfi_def_cfa_offset 16
 6540               		.cfi_offset 30, -15
 6541 0024 FF93      		push r31
 6542               	.LCFI395:
 6543               		.cfi_def_cfa_offset 17
 6544               		.cfi_offset 31, -16
 6545               	/* prologue: Signal */
 6546               	/* frame size = 0 */
 6547               	/* stack size = 16 */
 6548               	.L__stack_usage = 16
 6549               		.loc 1 600 0
 6550 0026 84E0      		ldi r24,lo8(4)
 6551 0028 0E94 0000 		call ir_transmit
 6552               	.LVL377:
 6553               	/* epilogue start */
 6554 002c FF91      		pop r31
 6555 002e EF91      		pop r30
 6556 0030 BF91      		pop r27
 6557 0032 AF91      		pop r26
 6558 0034 9F91      		pop r25
 6559 0036 8F91      		pop r24
 6560 0038 7F91      		pop r23
 6561 003a 6F91      		pop r22
 6562 003c 5F91      		pop r21
 6563 003e 4F91      		pop r20
 6564 0040 3F91      		pop r19
 6565 0042 2F91      		pop r18
 6566 0044 0F90      		pop r0
 6567 0046 0BBE      		out __RAMPZ__,r0
 6568 0048 0F90      		pop r0
 6569 004a 0FBE      		out __SREG__,r0
 6570 004c 0F90      		pop r0
 6571 004e 1F90      		pop r1
 6572 0050 1895      		reti
 6573               		.cfi_endproc
 6574               	.LFE97:
 6576               		.section	.text.__vector_119,"ax",@progbits
 6577               	.global	__vector_119
 6579               	__vector_119:
 6580               	.LFB98:
 601:../src/ir_comm.c **** 
 602:../src/ir_comm.c **** // ISRs for IR channel 5
 603:../src/ir_comm.c **** ISR( USARTF0_RXC_vect ) { ir_receive(5); }
 6581               		.loc 1 603 0
 6582               		.cfi_startproc
 6583 0000 1F92      		push r1
 6584               	.LCFI396:
 6585               		.cfi_def_cfa_offset 4
 6586               		.cfi_offset 1, -3
 6587 0002 0F92      		push r0
 6588               	.LCFI397:
 6589               		.cfi_def_cfa_offset 5
 6590               		.cfi_offset 0, -4
 6591 0004 0FB6      		in r0,__SREG__
 6592 0006 0F92      		push r0
 6593 0008 1124      		clr __zero_reg__
 6594 000a 0BB6      		in r0,__RAMPZ__
 6595 000c 0F92      		push r0
 6596 000e 2F93      		push r18
 6597               	.LCFI398:
 6598               		.cfi_def_cfa_offset 6
 6599               		.cfi_offset 18, -5
 6600 0010 3F93      		push r19
 6601               	.LCFI399:
 6602               		.cfi_def_cfa_offset 7
 6603               		.cfi_offset 19, -6
 6604 0012 4F93      		push r20
 6605               	.LCFI400:
 6606               		.cfi_def_cfa_offset 8
 6607               		.cfi_offset 20, -7
 6608 0014 5F93      		push r21
 6609               	.LCFI401:
 6610               		.cfi_def_cfa_offset 9
 6611               		.cfi_offset 21, -8
 6612 0016 6F93      		push r22
 6613               	.LCFI402:
 6614               		.cfi_def_cfa_offset 10
 6615               		.cfi_offset 22, -9
 6616 0018 7F93      		push r23
 6617               	.LCFI403:
 6618               		.cfi_def_cfa_offset 11
 6619               		.cfi_offset 23, -10
 6620 001a 8F93      		push r24
 6621               	.LCFI404:
 6622               		.cfi_def_cfa_offset 12
 6623               		.cfi_offset 24, -11
 6624 001c 9F93      		push r25
 6625               	.LCFI405:
 6626               		.cfi_def_cfa_offset 13
 6627               		.cfi_offset 25, -12
 6628 001e AF93      		push r26
 6629               	.LCFI406:
 6630               		.cfi_def_cfa_offset 14
 6631               		.cfi_offset 26, -13
 6632 0020 BF93      		push r27
 6633               	.LCFI407:
 6634               		.cfi_def_cfa_offset 15
 6635               		.cfi_offset 27, -14
 6636 0022 EF93      		push r30
 6637               	.LCFI408:
 6638               		.cfi_def_cfa_offset 16
 6639               		.cfi_offset 30, -15
 6640 0024 FF93      		push r31
 6641               	.LCFI409:
 6642               		.cfi_def_cfa_offset 17
 6643               		.cfi_offset 31, -16
 6644               	/* prologue: Signal */
 6645               	/* frame size = 0 */
 6646               	/* stack size = 16 */
 6647               	.L__stack_usage = 16
 6648               		.loc 1 603 0
 6649 0026 85E0      		ldi r24,lo8(5)
 6650 0028 0E94 0000 		call ir_receive
 6651               	.LVL378:
 6652               	/* epilogue start */
 6653 002c FF91      		pop r31
 6654 002e EF91      		pop r30
 6655 0030 BF91      		pop r27
 6656 0032 AF91      		pop r26
 6657 0034 9F91      		pop r25
 6658 0036 8F91      		pop r24
 6659 0038 7F91      		pop r23
 6660 003a 6F91      		pop r22
 6661 003c 5F91      		pop r21
 6662 003e 4F91      		pop r20
 6663 0040 3F91      		pop r19
 6664 0042 2F91      		pop r18
 6665 0044 0F90      		pop r0
 6666 0046 0BBE      		out __RAMPZ__,r0
 6667 0048 0F90      		pop r0
 6668 004a 0FBE      		out __SREG__,r0
 6669 004c 0F90      		pop r0
 6670 004e 1F90      		pop r1
 6671 0050 1895      		reti
 6672               		.cfi_endproc
 6673               	.LFE98:
 6675               		.section	.text.__vector_121,"ax",@progbits
 6676               	.global	__vector_121
 6678               	__vector_121:
 6679               	.LFB99:
 604:../src/ir_comm.c **** ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
 6680               		.loc 1 604 0
 6681               		.cfi_startproc
 6682 0000 1F92      		push r1
 6683               	.LCFI410:
 6684               		.cfi_def_cfa_offset 4
 6685               		.cfi_offset 1, -3
 6686 0002 0F92      		push r0
 6687               	.LCFI411:
 6688               		.cfi_def_cfa_offset 5
 6689               		.cfi_offset 0, -4
 6690 0004 0FB6      		in r0,__SREG__
 6691 0006 0F92      		push r0
 6692 0008 1124      		clr __zero_reg__
 6693 000a 0BB6      		in r0,__RAMPZ__
 6694 000c 0F92      		push r0
 6695 000e 2F93      		push r18
 6696               	.LCFI412:
 6697               		.cfi_def_cfa_offset 6
 6698               		.cfi_offset 18, -5
 6699 0010 3F93      		push r19
 6700               	.LCFI413:
 6701               		.cfi_def_cfa_offset 7
 6702               		.cfi_offset 19, -6
 6703 0012 4F93      		push r20
 6704               	.LCFI414:
 6705               		.cfi_def_cfa_offset 8
 6706               		.cfi_offset 20, -7
 6707 0014 5F93      		push r21
 6708               	.LCFI415:
 6709               		.cfi_def_cfa_offset 9
 6710               		.cfi_offset 21, -8
 6711 0016 6F93      		push r22
 6712               	.LCFI416:
 6713               		.cfi_def_cfa_offset 10
 6714               		.cfi_offset 22, -9
 6715 0018 7F93      		push r23
 6716               	.LCFI417:
 6717               		.cfi_def_cfa_offset 11
 6718               		.cfi_offset 23, -10
 6719 001a 8F93      		push r24
 6720               	.LCFI418:
 6721               		.cfi_def_cfa_offset 12
 6722               		.cfi_offset 24, -11
 6723 001c 9F93      		push r25
 6724               	.LCFI419:
 6725               		.cfi_def_cfa_offset 13
 6726               		.cfi_offset 25, -12
 6727 001e AF93      		push r26
 6728               	.LCFI420:
 6729               		.cfi_def_cfa_offset 14
 6730               		.cfi_offset 26, -13
 6731 0020 BF93      		push r27
 6732               	.LCFI421:
 6733               		.cfi_def_cfa_offset 15
 6734               		.cfi_offset 27, -14
 6735 0022 EF93      		push r30
 6736               	.LCFI422:
 6737               		.cfi_def_cfa_offset 16
 6738               		.cfi_offset 30, -15
 6739 0024 FF93      		push r31
 6740               	.LCFI423:
 6741               		.cfi_def_cfa_offset 17
 6742               		.cfi_offset 31, -16
 6743               	/* prologue: Signal */
 6744               	/* frame size = 0 */
 6745               	/* stack size = 16 */
 6746               	.L__stack_usage = 16
 6747               		.loc 1 604 0
 6748 0026 85E0      		ldi r24,lo8(5)
 6749 0028 0E94 0000 		call ir_transmit_complete
 6750               	.LVL379:
 6751               	/* epilogue start */
 6752 002c FF91      		pop r31
 6753 002e EF91      		pop r30
 6754 0030 BF91      		pop r27
 6755 0032 AF91      		pop r26
 6756 0034 9F91      		pop r25
 6757 0036 8F91      		pop r24
 6758 0038 7F91      		pop r23
 6759 003a 6F91      		pop r22
 6760 003c 5F91      		pop r21
 6761 003e 4F91      		pop r20
 6762 0040 3F91      		pop r19
 6763 0042 2F91      		pop r18
 6764 0044 0F90      		pop r0
 6765 0046 0BBE      		out __RAMPZ__,r0
 6766 0048 0F90      		pop r0
 6767 004a 0FBE      		out __SREG__,r0
 6768 004c 0F90      		pop r0
 6769 004e 1F90      		pop r1
 6770 0050 1895      		reti
 6771               		.cfi_endproc
 6772               	.LFE99:
 6774               		.section	.text.__vector_120,"ax",@progbits
 6775               	.global	__vector_120
 6777               	__vector_120:
 6778               	.LFB100:
 605:../src/ir_comm.c **** ISR( USARTF0_DRE_vect ) { ir_transmit(5); }...
 6779               		.loc 1 605 0
 6780               		.cfi_startproc
 6781 0000 1F92      		push r1
 6782               	.LCFI424:
 6783               		.cfi_def_cfa_offset 4
 6784               		.cfi_offset 1, -3
 6785 0002 0F92      		push r0
 6786               	.LCFI425:
 6787               		.cfi_def_cfa_offset 5
 6788               		.cfi_offset 0, -4
 6789 0004 0FB6      		in r0,__SREG__
 6790 0006 0F92      		push r0
 6791 0008 1124      		clr __zero_reg__
 6792 000a 0BB6      		in r0,__RAMPZ__
 6793 000c 0F92      		push r0
 6794 000e 2F93      		push r18
 6795               	.LCFI426:
 6796               		.cfi_def_cfa_offset 6
 6797               		.cfi_offset 18, -5
 6798 0010 3F93      		push r19
 6799               	.LCFI427:
 6800               		.cfi_def_cfa_offset 7
 6801               		.cfi_offset 19, -6
 6802 0012 4F93      		push r20
 6803               	.LCFI428:
 6804               		.cfi_def_cfa_offset 8
 6805               		.cfi_offset 20, -7
 6806 0014 5F93      		push r21
 6807               	.LCFI429:
 6808               		.cfi_def_cfa_offset 9
 6809               		.cfi_offset 21, -8
 6810 0016 6F93      		push r22
 6811               	.LCFI430:
 6812               		.cfi_def_cfa_offset 10
 6813               		.cfi_offset 22, -9
 6814 0018 7F93      		push r23
 6815               	.LCFI431:
 6816               		.cfi_def_cfa_offset 11
 6817               		.cfi_offset 23, -10
 6818 001a 8F93      		push r24
 6819               	.LCFI432:
 6820               		.cfi_def_cfa_offset 12
 6821               		.cfi_offset 24, -11
 6822 001c 9F93      		push r25
 6823               	.LCFI433:
 6824               		.cfi_def_cfa_offset 13
 6825               		.cfi_offset 25, -12
 6826 001e AF93      		push r26
 6827               	.LCFI434:
 6828               		.cfi_def_cfa_offset 14
 6829               		.cfi_offset 26, -13
 6830 0020 BF93      		push r27
 6831               	.LCFI435:
 6832               		.cfi_def_cfa_offset 15
 6833               		.cfi_offset 27, -14
 6834 0022 EF93      		push r30
 6835               	.LCFI436:
 6836               		.cfi_def_cfa_offset 16
 6837               		.cfi_offset 30, -15
 6838 0024 FF93      		push r31
 6839               	.LCFI437:
 6840               		.cfi_def_cfa_offset 17
 6841               		.cfi_offset 31, -16
 6842               	/* prologue: Signal */
 6843               	/* frame size = 0 */
 6844               	/* stack size = 16 */
 6845               	.L__stack_usage = 16
 6846               		.loc 1 605 0
 6847 0026 85E0      		ldi r24,lo8(5)
 6848 0028 0E94 0000 		call ir_transmit
 6849               	.LVL380:
 6850               	/* epilogue start */
 6851 002c FF91      		pop r31
 6852 002e EF91      		pop r30
 6853 0030 BF91      		pop r27
 6854 0032 AF91      		pop r26
 6855 0034 9F91      		pop r25
 6856 0036 8F91      		pop r24
 6857 0038 7F91      		pop r23
 6858 003a 6F91      		pop r22
 6859 003c 5F91      		pop r21
 6860 003e 4F91      		pop r20
 6861 0040 3F91      		pop r19
 6862 0042 2F91      		pop r18
 6863 0044 0F90      		pop r0
 6864 0046 0BBE      		out __RAMPZ__,r0
 6865 0048 0F90      		pop r0
 6866 004a 0FBE      		out __SREG__,r0
 6867 004c 0F90      		pop r0
 6868 004e 1F90      		pop r1
 6869 0050 1895      		reti
 6870               		.cfi_endproc
 6871               	.LFE100:
 6873               		.section	.progmem.data.__c.5356,"a",@progbits
 6876               	__c.5356:
 6877 0000 0D0A 4368 		.string	"\r\nChannels are probably blocked by your previous message.\r\n"
 6877      616E 6E65 
 6877      6C73 2061 
 6877      7265 2070 
 6877      726F 6261 
 6878               		.section	.progmem.data.__c.5350,"a",@progbits
 6881               	__c.5350:
 6882 0000 4162 6F72 		.string	"Aborting IR send while trying:\r\n\t"
 6882      7469 6E67 
 6882      2049 5220 
 6882      7365 6E64 
 6882      2077 6869 
 6883               		.section	.progmem.data.__c.5348,"a",@progbits
 6886               	__c.5348:
 6887 0000 4E6F 726D 		.string	"Normal send blocked by hp.\r\n"
 6887      616C 2073 
 6887      656E 6420 
 6887      626C 6F63 
 6887      6B65 6420 
 6888               		.section	.progmem.data.__c.5322,"a",@progbits
 6891               	__c.5322:
 6892 0000 4552 524F 		.string	"ERROR: Message exceeds IR_BUFFER_SIZE.\r\n"
 6892      523A 204D 
 6892      6573 7361 
 6892      6765 2065 
 6892      7863 6565 
 6893               		.section	.progmem.data.__c.5308,"a",@progbits
 6896               	__c.5308:
 6897 0000 4552 524F 		.string	"ERROR! Message too long?\r\n"
 6897      5221 204D 
 6897      6573 7361 
 6897      6765 2074 
 6897      6F6F 206C 
 6898               		.section	.progmem.data.__c.5306,"a",@progbits
 6901               	__c.5306:
 6902 0000 4552 524F 		.string	"ERROR: Message length 0 in perform_ir_upkeep.\r\n"
 6902      523A 204D 
 6902      6573 7361 
 6902      6765 206C 
 6902      656E 6774 
 6903               		.section	.bss.next_byte,"aw",@nobits
 6906               	next_byte:
 6907 0000 00        		.zero	1
 6908               		.section	.rodata.ir_carrier_bm,"a",@progbits
 6911               	ir_carrier_bm:
 6912 0000 01        		.byte	1
 6913 0001 02        		.byte	2
 6914 0002 10        		.byte	16
 6915 0003 20        		.byte	32
 6916 0004 40        		.byte	64
 6917 0005 80        		.byte	-128
 6918               		.section	.bss.cmd_buffer,"aw",@nobits
 6921               	cmd_buffer:
 6922 0000 0000 0000 		.zero	64
 6922      0000 0000 
 6922      0000 0000 
 6922      0000 0000 
 6922      0000 0000 
 6923               		.section	.bss.cmd_length,"aw",@nobits
 6926               	cmd_length:
 6927 0000 0000      		.zero	2
 6928               		.section	.bss.processing_ffsync,"aw",@nobits
 6931               	processing_ffsync:
 6932 0000 00        		.zero	1
 6933               		.section	.bss.processing_cmd,"aw",@nobits
 6936               	processing_cmd:
 6937 0000 00        		.zero	1
 6938               		.comm	cmd_sender_dir,1,1
 6939               		.comm	cmd_arrival_dir,1,1
 6940               		.comm	cmd_sender_id,2,1
 6941               		.comm	cmd_arrival_time,4,1
 6942               		.comm	user_facing_messages_ovf,1,1
 6943               		.comm	num_waiting_msgs,1,1
 6944               		.comm	hp_ir_block_bm,1,1
 6945               		.comm	msg_node,294,1
 6946               		.comm	ir_rxtx,342,1
 6947               		.comm	obsStart,2,1
 6948               		.comm	mm_per_kilostep,16,1
 6949               		.comm	motor_adjusts,48,1
 6950               		.comm	rnbProcessingFlag,1,1
 6951               		.comm	rnbCmdSentTime,4,1
 6952               		.comm	rnbCmdID,2,1
 6953               		.comm	rnb_updated,1,1
 6954               		.comm	last_good_rnb,8,1
 6955               		.comm	curr_ir_power,2,1
 6956               		.comm	twi,2,1
 6957               		.comm	twiMaster,25,1
 6958               		.section	.bss.task_storage_arr,"aw",@nobits
 6961               	task_storage_arr:
 6962 0000 0000 0000 		.zero	140
 6962      0000 0000 
 6962      0000 0000 
 6962      0000 0000 
 6962      0000 0000 
 6963               		.comm	task_executing,1,1
 6964               		.comm	num_tasks,1,1
 6965               		.comm	task_list,2,1
 6966               		.comm	rtc_epoch,2,1
 6967               		.comm	droplet_ID,2,1
 6968               		.text
 6969               	.Letext0:
 6970               		.file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 6971               		.file 8 "C:/Program Files (x86)/Atmel/Studio/7.0/Packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 6972               		.file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 6973               		.file 10 "../include/scheduler.h"
 6974               		.file 11 "../include/i2c.h"
 6975               		.file 12 "../include/range_algs.h"
 6976               		.file 13 "../include/ir_comm.h"
 6977               		.file 14 "../include/ir_led.h"
 6978               		.file 15 "../include/motor.h"
 6979               		.file 16 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 6980               		.file 17 "../include/serial_handler.h"
 6981               		.file 18 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
DEFINED SYMBOLS
                            *ABS*:00000000 ir_comm.c
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:2      *ABS*:0000003e __SP_H__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:3      *ABS*:0000003d __SP_L__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:4      *ABS*:0000003f __SREG__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6      *ABS*:00000034 __CCP__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:8      *ABS*:00000001 __zero_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:14     .text.ir_transmit_complete:00000000 ir_transmit_complete
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6911   .rodata.ir_carrier_bm:00000000 ir_carrier_bm
                            *COM*:00000156 ir_rxtx
                            *COM*:00000001 hp_ir_block_bm
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:123    .text.perform_ir_upkeep:00000000 perform_ir_upkeep
                            *COM*:00000001 num_waiting_msgs
                            *COM*:00000001 user_facing_messages_ovf
                            *COM*:00000126 msg_node
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6901   .progmem.data.__c.5306:00000000 __c.5306
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6896   .progmem.data.__c.5308:00000000 __c.5308
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:610    .text.handle_cmd_wrapper:00000000 handle_cmd_wrapper
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6926   .bss.cmd_length:00000000 cmd_length
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6921   .bss.cmd_buffer:00000000 cmd_buffer
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6936   .bss.processing_cmd:00000000 processing_cmd
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:728    .text.ir_transmit:00000000 ir_transmit
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6906   .bss.next_byte:00000000 next_byte
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:1056   .text.ir_receive:00000000 ir_receive
                            *COM*:00000002 droplet_ID
                            *COM*:00000004 cmd_arrival_time
                            *COM*:00000002 cmd_sender_id
                            *COM*:00000001 cmd_arrival_dir
                            *COM*:00000001 cmd_sender_dir
                            *COM*:00000001 rnbProcessingFlag
                            *COM*:00000002 rnbCmdID
                            *COM*:00000004 rnbCmdSentTime
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6931   .bss.processing_ffsync:00000000 processing_ffsync
                            *COM*:00000002 obsStart
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:2658   .text.ir_comm_init:00000000 ir_comm_init
                            *COM*:00000002 curr_ir_power
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:2867   .text.send_msg:00000000 send_msg
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6891   .progmem.data.__c.5322:00000000 __c.5322
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:3353   .text.hp_ir_cmd:00000000 hp_ir_cmd
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:3579   .text.hp_ir_targeted_cmd:00000000 hp_ir_targeted_cmd
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:3812   .text.waitForTransmission:00000000 waitForTransmission
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:3898   .text.ir_is_busy:00000000 ir_is_busy
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:4074   .text.ir_targeted_cmd:00000000 ir_targeted_cmd
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6881   .progmem.data.__c.5350:00000000 __c.5350
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6876   .progmem.data.__c.5356:00000000 __c.5356
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6886   .progmem.data.__c.5348:00000000 __c.5348
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:4328   .text.ir_cmd:00000000 ir_cmd
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:4582   .text.ir_targeted_send:00000000 ir_targeted_send
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:4838   .text.ir_send:00000000 ir_send
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5094   .text.__vector_25:00000000 __vector_25
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5193   .text.__vector_27:00000000 __vector_27
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5292   .text.__vector_26:00000000 __vector_26
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5391   .text.__vector_28:00000000 __vector_28
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5490   .text.__vector_30:00000000 __vector_30
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5589   .text.__vector_29:00000000 __vector_29
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5688   .text.__vector_88:00000000 __vector_88
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5787   .text.__vector_90:00000000 __vector_90
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5886   .text.__vector_89:00000000 __vector_89
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:5985   .text.__vector_58:00000000 __vector_58
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6084   .text.__vector_60:00000000 __vector_60
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6183   .text.__vector_59:00000000 __vector_59
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6282   .text.__vector_61:00000000 __vector_61
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6381   .text.__vector_63:00000000 __vector_63
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6480   .text.__vector_62:00000000 __vector_62
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6579   .text.__vector_119:00000000 __vector_119
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6678   .text.__vector_121:00000000 __vector_121
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6777   .text.__vector_120:00000000 __vector_120
                            *COM*:00000010 mm_per_kilostep
                            *COM*:00000030 motor_adjusts
                            *COM*:00000001 rnb_updated
                            *COM*:00000008 last_good_rnb
                            *COM*:00000002 twi
                            *COM*:00000019 twiMaster
C:\Users\JOHNK~1\AppData\Local\Temp\ccyWDo6M.s:6961   .bss.task_storage_arr:00000000 task_storage_arr
                            *COM*:00000001 task_executing
                            *COM*:00000001 num_tasks
                            *COM*:00000002 task_list
                            *COM*:00000002 rtc_epoch

UNDEFINED SYMBOLS
channel
memcpy
printf_P
handle_serial_command
__tablejump2__
get_time
__floatsisf
__mulsf3
__fixunssfsi
printf
schedule_task
malloc
ir_range_meas
use_rnb_data
schedule_periodic_task
__do_copy_data
__do_clear_bss
