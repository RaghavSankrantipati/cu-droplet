
Droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fdfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000050a  00802000  0000fdfe  0000fe92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000054c  0080250a  0080250a  0001039c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000103f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000840  00000000  00000000  00010438  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001df68  00000000  00000000  00010c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007852  00000000  00000000  0002ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000899b  00000000  00000000  00036432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003688  00000000  00000000  0003edd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000079d9  00000000  00000000  00042458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012a02  00000000  00000000  00049e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001678  00000000  00000000  0005c833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__ctors_end>
       4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
       8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
       c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      10:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      14:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      18:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      1c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      20:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      24:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      28:	0c 94 dc 62 	jmp	0xc5b8	; 0xc5b8 <__vector_10>
      2c:	0c 94 f2 60 	jmp	0xc1e4	; 0xc1e4 <__vector_11>
      30:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      34:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      38:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      3c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      40:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      44:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      48:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      4c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      50:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      54:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      58:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      5c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      60:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      64:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <__vector_25>
      68:	0c 94 26 24 	jmp	0x484c	; 0x484c <__vector_26>
      6c:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <__vector_27>
      70:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__vector_28>
      74:	0c 94 a1 24 	jmp	0x4942	; 0x4942 <__vector_29>
      78:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <__vector_30>
      7c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      80:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      84:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      88:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      8c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      90:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      94:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      98:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      9c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      a0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      a4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      a8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      ac:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      b0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      b4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      b8:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__vector_46>
      bc:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__vector_47>
      c0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      c4:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__vector_49>
      c8:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__vector_50>
      cc:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      d0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      d4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      d8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      dc:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      e0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      e4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
      e8:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__vector_58>
      ec:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__vector_59>
      f0:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__vector_60>
      f4:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <__vector_61>
      f8:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <__vector_62>
      fc:	0c 94 e9 25 	jmp	0x4bd2	; 0x4bd2 <__vector_63>
     100:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     104:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     108:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     10c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     110:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     114:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     118:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     11c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     120:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     124:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     128:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     12c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     130:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     134:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     138:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     13c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     140:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     144:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     148:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     14c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     150:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     154:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     158:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     15c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     160:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__vector_88>
     164:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <__vector_89>
     168:	0c 94 f3 24 	jmp	0x49e6	; 0x49e6 <__vector_90>
     16c:	0c 94 15 4e 	jmp	0x9c2a	; 0x9c2a <__vector_91>
     170:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     174:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     178:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     17c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     180:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     184:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     188:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     18c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     190:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     194:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     198:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     19c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1a0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1a4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1a8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1ac:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1b0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1b4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1b8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1bc:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1c0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1c4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1c8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1cc:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1d0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1d4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1d8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1dc:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__vector_119>
     1e0:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__vector_120>
     1e4:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_121>
     1e8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1ec:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1f0:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1f4:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1f8:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__bad_interrupt>
     1fc:	38 1b       	sub	r19, r24
     1fe:	45 1b       	sub	r20, r21
     200:	52 1b       	sub	r21, r18
     202:	5f 1b       	sub	r21, r31
     204:	6c 1b       	sub	r22, r28
     206:	87 1b       	sub	r24, r23
     208:	1b 1b       	sub	r17, r27
     20a:	28 1b       	sub	r18, r24
     20c:	f2 1c       	adc	r15, r2
     20e:	ff 1c       	adc	r15, r15
     210:	0d 1d       	adc	r16, r13
     212:	1a 1d       	adc	r17, r10
     214:	28 1d       	adc	r18, r8
     216:	5c 1d       	adc	r21, r12
     218:	69 1d       	adc	r22, r9
     21a:	e8 1c       	adc	r14, r8
     21c:	08 4a       	sbci	r16, 0xA8	; 168
     21e:	d7 3b       	cpi	r29, 0xB7	; 183
     220:	3b ce       	rjmp	.-906    	; 0xfffffe98 <__eeprom_end+0xff7efe98>
     222:	01 6e       	ori	r16, 0xE1	; 225
     224:	84 bc       	out	0x24, r8	; 36
     226:	bf fd       	.word	0xfdbf	; ????
     228:	c1 2f       	mov	r28, r17
     22a:	3d 6c       	ori	r19, 0xCD	; 205
     22c:	74 31       	cpi	r23, 0x14	; 20
     22e:	9a bd       	out	0x2a, r25	; 42
     230:	56 83       	std	Z+6, r21	; 0x06
     232:	3d da       	rcall	.-2950   	; 0xfffff6ae <__eeprom_end+0xff7ef6ae>
     234:	3d 00       	.word	0x003d	; ????
     236:	c7 7f       	andi	r28, 0xF7	; 247
     238:	11 be       	out	0x31, r1	; 49
     23a:	d9 e4       	ldi	r29, 0x49	; 73
     23c:	bb 4c       	sbci	r27, 0xCB	; 203
     23e:	3e 91       	ld	r19, -X
     240:	6b aa       	std	Y+51, r6	; 0x33
     242:	aa be       	out	0x3a, r10	; 58
     244:	00 00       	nop
     246:	00 80       	ld	r0, Z
     248:	3f 07       	cpc	r19, r31
     24a:	63 42       	sbci	r22, 0x23	; 35
     24c:	36 b7       	in	r19, 0x36	; 54
     24e:	9b d8       	rcall	.-3786   	; 0xfffff386 <__eeprom_end+0xff7ef386>
     250:	a7 1a       	sub	r10, r23
     252:	39 68       	ori	r19, 0x89	; 137
     254:	56 18       	sub	r5, r6
     256:	ae ba       	out	0x1e, r10	; 30
     258:	ab 55       	subi	r26, 0x5B	; 91
     25a:	8c 1d       	adc	r24, r12
     25c:	3c b7       	in	r19, 0x3c	; 60
     25e:	cc 57       	subi	r28, 0x7C	; 124
     260:	63 bd       	out	0x23, r22	; 35
     262:	6d ed       	ldi	r22, 0xDD	; 221
     264:	fd 75       	andi	r31, 0x5D	; 93
     266:	3e f6       	brtc	.-114    	; 0x1f6 <__SREG__+0x1b7>
     268:	17 72       	andi	r17, 0x27	; 39
     26a:	31 bf       	out	0x31, r19	; 49
     26c:	00 00       	nop
     26e:	00 80       	ld	r0, Z
     270:	3f 07       	cpc	r19, r31
     272:	2c 7a       	andi	r18, 0xAC	; 172
     274:	a5 ba       	out	0x15, r10	; 21
     276:	6c c5       	rjmp	.+2776   	; 0xd50 <__c.4835+0x3d>
     278:	90 da       	rcall	.-2784   	; 0xfffff79a <__eeprom_end+0xff7ef79a>
     27a:	3b 93       	.word	0x933b	; ????
     27c:	65 fc       	sbrc	r6, 5
     27e:	8b bc       	out	0x2b, r8	; 43
     280:	53 f8       	bld	r5, 3
     282:	10 fd       	sbrc	r17, 0
     284:	3c 56       	subi	r19, 0x6C	; 108
     286:	92 83       	std	Z+2, r25	; 0x02
     288:	4d bd       	out	0x2d, r20	; 45
     28a:	87 9d       	mul	r24, r7
     28c:	3a b6       	in	r3, 0x3a	; 58
     28e:	3d cb       	rjmp	.-2438   	; 0xfffff90a <__eeprom_end+0xff7ef90a>
     290:	c9 bf       	out	0x39, r28	; 57
     292:	5b be       	out	0x3b, r5	; 59
     294:	73 da       	rcall	.-2842   	; 0xfffff77c <__eeprom_end+0xff7ef77c>
     296:	0f c9       	rjmp	.-3554   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b6>
     298:	3f 05       	cpc	r19, r15
     29a:	a8 4c       	sbci	r26, 0xC8	; 200
     29c:	cd b2       	in	r12, 0x1d	; 29
     29e:	d4 4e       	sbci	r29, 0xE4	; 228
     2a0:	b9 38       	cpi	r27, 0x89	; 137
     2a2:	36 a9       	ldd	r19, Z+54	; 0x36
     2a4:	02 0c       	add	r0, r2
     2a6:	50 b9       	out	0x00, r21	; 0
     2a8:	91 86       	std	Z+9, r9	; 0x09
     2aa:	88 08       	sbc	r8, r8
     2ac:	3c a6       	std	Y+44, r3	; 0x2c
     2ae:	aa aa       	std	Y+50, r10	; 0x32
     2b0:	2a be       	out	0x3a, r2	; 58
     2b2:	00 00       	nop
     2b4:	00 80       	ld	r0, Z
     2b6:	3f 08       	sbc	r3, r15
     2b8:	00 00       	nop
     2ba:	00 be       	out	0x30, r0	; 48
     2bc:	92 24       	eor	r9, r2
     2be:	49 12       	cpse	r4, r25
     2c0:	3e ab       	std	Y+54, r19	; 0x36
     2c2:	aa aa       	std	Y+50, r10	; 0x32
     2c4:	2a be       	out	0x3a, r2	; 58
     2c6:	cd cc       	rjmp	.-1638   	; 0xfffffc62 <__eeprom_end+0xff7efc62>
     2c8:	cc 4c       	sbci	r28, 0xCC	; 204
     2ca:	3e 00       	.word	0x003e	; ????
     2cc:	00 00       	nop
     2ce:	80 be       	out	0x30, r8	; 48
     2d0:	ab aa       	std	Y+51, r10	; 0x33
     2d2:	aa aa       	std	Y+50, r10	; 0x32
     2d4:	3e 00       	.word	0x003e	; ????
     2d6:	00 00       	nop
     2d8:	00 bf       	out	0x30, r16	; 48
     2da:	00 00       	nop
     2dc:	00 80       	ld	r0, Z
     2de:	3f 00       	.word	0x003f	; ????
     2e0:	00 00       	nop
     2e2:	00 00       	nop
     2e4:	08 41       	sbci	r16, 0x18	; 24
     2e6:	78 d3       	rcall	.+1776   	; 0x9d8 <matrix3mathEndStr+0x5>
     2e8:	bb 43       	sbci	r27, 0x3B	; 59
     2ea:	87 d1       	rcall	.+782    	; 0x5fa <__c.5430+0x3a>
     2ec:	13 3d       	cpi	r17, 0xD3	; 211
     2ee:	19 0e       	add	r1, r25
     2f0:	3c c3       	rjmp	.+1656   	; 0x96a <__c.5607+0xa>
     2f2:	bd 42       	sbci	r27, 0x2D	; 45
     2f4:	82 ad       	ldd	r24, Z+58	; 0x3a
     2f6:	2b 3e       	cpi	r18, 0xEB	; 235
     2f8:	68 ec       	ldi	r22, 0xC8	; 200
     2fa:	82 76       	andi	r24, 0x62	; 98
     2fc:	be d9       	rcall	.-3204   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     2fe:	8f e1       	ldi	r24, 0x1F	; 31
     300:	a9 3e       	cpi	r26, 0xE9	; 233
     302:	4c 80       	ldd	r4, Y+4	; 0x04
     304:	ef ff       	.word	0xffef	; ????
     306:	be 01       	movw	r22, r28
     308:	c4 ff       	sbrs	r28, 4
     30a:	7f 3f       	cpi	r23, 0xFF	; 255
     30c:	00 00       	nop
     30e:	00 00       	nop
     310:	00 00       	nop

00000312 <__trampolines_start>:
     312:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <ir_transmit+0x150>
     316:	0c 94 37 19 	jmp	0x326e	; 0x326e <perform_ir_upkeep>
     31a:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <sendPing>
     31e:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <handle_cmd_wrapper>
     322:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <ir_transmit+0xe2>
     326:	0c 94 8a 63 	jmp	0xc714	; 0xc714 <send_id>
     32a:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <ir_transmit+0xc8>
     32e:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <ir_receive+0x36e>
     332:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <ir_receive+0x2d0>
     336:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <ir_receive+0x286>
     33a:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <ir_receive+0x2ea>
     33e:	0c 94 18 29 	jmp	0x5230	; 0x5230 <update_ir_baselines>
     342:	0c 94 45 1b 	jmp	0x368a	; 0x368a <ir_transmit+0x11c>
     346:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <user_handle_command>
     34a:	0c 94 40 56 	jmp	0xac80	; 0xac80 <use_rnb_data>
     34e:	0c 94 a9 31 	jmp	0x6352	; 0x6352 <sendBotMeasMsg>
     352:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <ir_transmit+0x16a>
     356:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <ir_receive+0x2b4>
     35a:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <ir_receive+0x306>
     35e:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <nearBotsBearingCmp>
     362:	0c 94 87 1b 	jmp	0x370e	; 0x370e <ir_transmit+0x1a0>
     366:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <ir_receive+0x29a>
     36a:	0c 94 e8 4d 	jmp	0x9bd0	; 0x9bd0 <pc_comm_putchar>
     36e:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <processObsQueue>
     372:	0c 94 79 4a 	jmp	0x94f2	; 0x94f2 <stop_move>
     376:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <set_all_ir_powers>
     37a:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <ir_transmit+0x136>
     37e:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <ir_transmit+0x102>
     382:	0c 94 d7 59 	jmp	0xb3ae	; 0xb3ae <broadcast_rnb_data>
     386:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <sendBotPosMsg>
     38a:	0c 94 13 29 	jmp	0x5226	; 0x5226 <initialize_ir_baselines>
     38e:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <ir_receive+0x388>

00000392 <__trampolines_end>:
     392:	6e 61       	ori	r22, 0x1E	; 30
     394:	6e 00       	.word	0x006e	; ????

00000396 <__c.2332>:
     396:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     3a6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     3b6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     3c6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     3d6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3e6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3f6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     406:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     416:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     426:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     436:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     446:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     456:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     466:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     476:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     486:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000494 <__c.5760>:
     494:	62 61 6c 6c 5f 6b 69 6c 6c 00                       ball_kill.

0000049e <__c.5750>:
     49e:	6d 6f 64 65 00                                      mode.

000004a3 <__c.5742>:
     4a3:	62 61 6c 6c 00                                      ball.

000004a8 <__c.5704>:
     4a8:	25 68 75 20 62 79 74 65 20 6d 73 67 20 66 72 6f     %hu byte msg fro
     4b8:	6d 20 25 30 34 58 3a 0d 0a 09 00                    m %04X:....

000004c3 <__c.5614>:
     4c3:	09 42 61 6c 6c 20 49 44 3a 20 25 68 75 3b 20 72     .Ball ID: %hu; r
     4d3:	61 64 69 75 73 3a 20 25 68 75 3b 20 50 6f 73 3a     adius: %hu; Pos:
     4e3:	20 28 25 64 2c 20 25 64 29 20 40 20 76 65 6c 20      (%d, %d) @ vel 
     4f3:	28 25 68 64 2c 20 25 68 64 29 0d 0a 00              (%hd, %hd)...

00000500 <__c.5612>:
     500:	09 4d 79 20 50 6f 73 3a 20 7b 25 64 2c 20 25 64     .My Pos: {%d, %d
     510:	2c 20 25 64 7d 0d 0a 00                             , %d}...

00000518 <__c.5610>:
     518:	20 5d 00                                             ].

0000051b <__c.5603>:
     51b:	0a 49 44 3a 20 25 30 34 58 20 54 3a 20 25 6c 75     .ID: %04X T: %lu
     52b:	20 5b 20 00                                          [ .

0000052f <__c.5444>:
     52f:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     53f:	65 6e 67 74 68 20 30 20 66 6f 72 20 6d 73 67 5f     ength 0 for msg_
     54f:	6e 6f 64 65 2e 0d 0a 00                             node....

00000557 <__c.5440>:
     557:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     567:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     577:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     587:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     597:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     5a7:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     5b7:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000005c0 <__c.5430>:
     5c0:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     5d0:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     5e0:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     5f0:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     600:	65 2e 0d 0a 00                                      e....

00000605 <__c.4839>:
     605:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     615:	79 2e 0d 0a 00                                      y....

0000061a <__c.5356>:
     61a:	0d 0a 43 68 61 6e 6e 65 6c 73 20 61 72 65 20 70     ..Channels are p
     62a:	72 6f 62 61 62 6c 79 20 62 6c 6f 63 6b 65 64 20     robably blocked 
     63a:	62 79 20 79 6f 75 72 20 70 72 65 76 69 6f 75 73     by your previous
     64a:	20 6d 65 73 73 61 67 65 2e 0d 0a 00                  message....

00000656 <__c.5350>:
     656:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     666:	20 77 68 69 6c 65 20 74 72 79 69 6e 67 3a 0d 0a      while trying:..
     676:	09 00                                               ..

00000678 <__c.5348>:
     678:	4e 6f 72 6d 61 6c 20 73 65 6e 64 20 62 6c 6f 63     Normal send bloc
     688:	6b 65 64 20 62 79 20 68 70 2e 0d 0a 00              ked by hp....

00000695 <__c.5322>:
     695:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     6a5:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     6b5:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000006be <__c.5308>:
     6be:	45 52 52 4f 52 21 20 4d 65 73 73 61 67 65 20 74     ERROR! Message t
     6ce:	6f 6f 20 6c 6f 6e 67 3f 0d 0a 00                    oo long?...

000006d9 <__c.5306>:
     6d9:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     6e9:	65 6e 67 74 68 20 30 20 69 6e 20 70 65 72 66 6f     ength 0 in perfo
     6f9:	72 6d 5f 69 72 5f 75 70 6b 65 65 70 2e 0d 0a 00     rm_ir_upkeep....

00000709 <__c.4865>:
     709:	57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49 20     Waiting for TWI 
     719:	5b 25 63 5d 2e 2e 2e 0d 0a 00                       [%c]......

00000723 <__c.4863>:
     723:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 77 68 65     .TWI timeout whe
     733:	6e 20 73 65 74 74 69 6e 67 20 49 52 20 50 6f 77     n setting IR Pow
     743:	65 72 73 20 5b 25 63 5d 0d 0a 00                    ers [%c]...

0000074e <__c.4844>:
     74e:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     75e:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     76e:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     77e:	79 2e 0d 0a 00                                      y....

00000783 <__c.5308>:
     783:	49 52 20 48 61 72 64 77 61 72 65 20 62 75 73 79     IR Hardware busy
     793:	2c 20 70 72 6f 62 61 62 6c 79 20 73 65 6e 64 69     , probably sendi
     7a3:	6e 67 20 61 20 6d 65 73 73 61 67 65 3f 20 43 61     ng a message? Ca
     7b3:	6e 27 74 20 63 68 65 63 6b 20 63 6f 6c 6c 69 73     n't check collis
     7c3:	69 6f 6e 73 2e 0d 0a 00                             ions....

000007cb <__c.5522>:
     7cb:	09 4d 61 68 61 6c 61 6e 6f 62 69 73 20 44 69 73     .Mahalanobis Dis
     7db:	74 61 6e 63 65 3a 20 25 66 0d 0a 00                 tance: %f...

000007e7 <__c.5520>:
     7e7:	20 67 69 76 69 6e 67 20 70 6f 73 20 7b 25 64 2c      giving pos {%d,
     7f7:	20 25 64 2c 20 25 64 7d 2e 0d 0a 00                  %d, %d}....

00000803 <__c.5518>:
     803:	20 62 75 74 20 63 6f 76 61 72 20 75 6e 69 6f 6e      but covar union
     813:	20 72 65 73 75 6c 74 65 64 20 69 6e 20 6e 6f 6e      resulted in non
     823:	2d 70 6f 73 69 74 69 76 65 2d 64 65 66 69 6e 69     -positive-defini
     833:	74 65 20 50 2e 0d 0a 00                             te P....

0000083b <__c.5516>:
     83b:	20 62 75 74 20 74 68 65 20 6d 61 68 61 6c 61 6e      but the mahalan
     84b:	6f 62 69 73 20 64 69 73 74 61 6e 63 65 20 28 25     obis distance (%
     85b:	35 2e 32 66 29 20 69 73 20 74 6f 6f 20 6c 61 72     5.2f) is too lar
     86b:	67 65 2e 0d 0a 00                                   ge....

00000871 <__c.5509>:
     871:	74 68 69 6e 6b 73 20 49 27 6d 20 61 74 20 7b 25     thinks I'm at {%
     881:	64 2c 20 25 64 2c 20 25 64 7d 00                    d, %d, %d}.

0000088c <__c.5507>:
     88c:	20 73 65 6e 74 20 6d 65 20 61 6e 20 75 6e 64 65      sent me an unde
     89c:	66 69 6e 65 64 20 70 6f 73 69 74 69 6f 6e 2e 0d     fined position..
     8ac:	0a 00                                               ..

000008ae <__c.5647>:
     8ae:	25 30 34 58 20 00                                   %04X .

000008b4 <__c.5641>:
     8b4:	25 30 34 58 20 69 6e 69 74 69 61 6c 69 7a 65 64     %04X initialized
     8c4:	20 6d 65 20 74 6f 20 7b 25 64 2c 20 25 64 2c 20      me to {%d, %d, 
     8d4:	25 64 7d 2e 0d 0a 00                                %d}....

000008db <__c.5638>:
     8db:	25 30 34 58 20 73 65 6e 74 20 6d 65 20 61 6e 20     %04X sent me an 
     8eb:	75 6e 64 65 66 69 6e 65 64 20 70 6f 73 69 74 69     undefined positi
     8fb:	6f 6e 2e 0d 0a 00                                   on....

00000901 <__c.5632>:
     901:	47 69 76 69 6e 67 20 75 70 20 6f 6e 20 6d 73 67     Giving up on msg
     911:	20 74 6f 20 25 30 34 58 20 61 66 74 65 72 20 25      to %04X after %
     921:	68 75 20 74 72 69 65 73 2e 0d 0a 00                 hu tries....

0000092d <__c.5630>:
     92d:	25 30 34 58 20 73 65 6e 74 20 70 6f 73 20 6d 73     %04X sent pos ms
     93d:	67 20 69 6e 20 64 69 72 73 20 25 30 32 68 58 20     g in dirs %02hX 
     94d:	61 66 74 65 72 20 25 68 75 20 74 72 69 65 73 2e     after %hu tries.
     95d:	0d 0a 00                                            ...

00000960 <__c.5607>:
     960:	09 25 30 34 58 20 40 20 7b 25 36 2e 31 66 2c 20     .%04X @ {%6.1f, 
     970:	25 36 2e 31 66 2c 20 25 20 35 2e 30 66 7d 20 66     %6.1f, % 5.0f} f
     980:	72 6f 6d 20 7b 25 20 34 64 2c 20 25 20 34 64 2c     rom {% 4d, % 4d,
     990:	20 25 20 34 64 7d 0d 0a 00                           % 4d}...

00000999 <__c.5594>:
     999:	43 61 6e 27 74 20 61 64 6a 75 73 74 20 6f 74 68     Can't adjust oth
     9a9:	65 72 73 27 20 70 6f 73 69 74 69 6f 6e 73 20 75     ers' positions u
     9b9:	6e 74 69 6c 20 49 20 6b 6e 6f 77 20 77 68 65 72     ntil I know wher
     9c9:	65 20 49 20 61 6d 2e 0d 0a 00                       e I am....

000009d3 <matrix3mathEndStr>:
     9d3:	20 20 7b 25 39 2e 34 66 2c 20 25 39 2e 34 66 2c       {%9.4f, %9.4f,
     9e3:	20 25 39 2e 34 66 7d 0d 0a 7d 3b 0d 0a 00            %9.4f}..};...

000009f1 <matrix3mathStr>:
     9f1:	20 20 7b 25 39 2e 34 66 2c 20 25 39 2e 34 66 2c       {%9.4f, %9.4f,
     a01:	20 25 39 2e 34 66 7d 2c 0d 0a 00                     %9.4f},...

00000a0c <matrix3mathStartStr>:
     a0c:	7b 0d 0a 20 20 7b 25 39 2e 34 66 2c 20 25 39 2e     {..  {%9.4f, %9.
     a1c:	34 66 2c 20 25 39 2e 34 66 7d 2c 0d 0a 00           4f, %9.4f},...

00000a2a <__c.5009>:
     a2a:	09 25 68 75 09 25 75 0d 0a 00                       .%hu.%u...

00000a34 <__c.5006>:
     a34:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     a44:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

00000a4d <__c.4993>:
     a4d:	09 64 69 72 3a 20 25 68 75 09 00                    .dir: %hu..

00000a58 <__c.4990>:
     a58:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

00000a67 <__c.4945>:
     a67:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     a77:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     a87:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     a97:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

00000aa5 <__c.4941>:
     aa5:	45 72 72 6f 72 3a 20 44 6f 6e 27 74 20 68 61 76     Error: Don't hav
     ab5:	65 20 63 61 6c 69 62 72 61 74 65 64 20 76 61 6c     e calibrated val
     ac5:	75 65 73 20 66 6f 72 20 74 68 69 73 20 64 69 72     ues for this dir
     ad5:	65 63 74 69 6f 6e 2e 0d 0a 00                       ection....

00000adf <__c.4934>:
     adf:	45 72 72 6f 72 21 20 46 61 69 6c 65 64 20 74 6f     Error! Failed to
     aef:	20 73 63 68 65 64 75 6c 65 20 73 74 6f 70 5f 6d      schedule stop_m
     aff:	6f 76 65 20 74 61 73 6b 2e 00                       ove task..

00000b09 <__c.4927>:
     b09:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     b19:	66 66 73 65 74 3a 20 25 75 20 61 6e 64 20 74 6f     ffset: %u and to
     b29:	74 61 6c 5f 74 69 6d 65 3a 20 25 75 20 6e 6f 74     tal_time: %u not
     b39:	20 65 71 75 61 6c 21 0d 0a 00                        equal!...

00000b43 <__c.5261>:
     b43:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     b53:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     b63:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     b73:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     b83:	0d 0a 00                                            ...

00000b86 <__c.5414>:
     b86:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     b96:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     ba6:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     bb6:	09 21 21 21 0d 0a 00                                .!!!...

00000bbd <__c.4903>:
     bbd:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     bcd:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     bdd:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     bed:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

00000bfb <__c.4898>:
     bfb:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     c0b:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     c1b:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     c2b:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

00000c38 <__c.4884>:
     c38:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     c48:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     c58:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     c68:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

00000c73 <__c.4879>:
     c73:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     c83:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     c93:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     ca3:	61 72 72 61 79 2e 0d 0a 00                          array....

00000cac <__c.4863>:
     cac:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     cbc:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     ccc:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     cdc:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

00000cea <__c.4861>:
     cea:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 75 20     Task Queue (%hu 
     cfa:	74 61 73 6b 73 2c 20 25 68 75 20 65 78 65 63 75     tasks, %hu execu
     d0a:	74 69 6e 67 29 3a 0d 0a 00                          ting):...

00000d13 <__c.4835>:
     d13:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     d23:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     d33:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     d43:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
     d53:	00                                                  .

00000d54 <__c.4833>:
     d54:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     d64:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     d74:	6e 63 65 2e 0d 0a 00                                nce....

00000d7b <__c.4813>:
     d7b:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     d8b:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     d9b:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     dab:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     dbb:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     dcb:	61 72 72 61 79 2e 0d 0a 00                          array....

00000dd4 <__c.4811>:
     dd4:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     de4:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     df4:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     e04:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     e14:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     e24:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     e34:	61 73 6b 73 2e 0d 0a 00                             asks....

00000e3c <__c.4787>:
     e3c:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     e4c:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     e5c:	2e 0d 0a 09 49 66 20 79 6f 75 20 6f 6e 6c 79 20     ....If you only 
     e6c:	73 65 65 20 74 68 69 73 20 6d 65 73 73 61 67 65     see this message
     e7c:	20 72 61 72 65 6c 79 2c 20 64 6f 6e 27 74 20 77      rarely, don't w
     e8c:	6f 72 72 79 20 74 6f 6f 20 6d 75 63 68 2e 0d 0a     orry too much...
     e9c:	00                                                  .

00000e9d <__c.4762>:
     e9d:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     ead:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     ebd:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     ecd:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     edd:	2e 0d 0a 00                                         ....

00000ee1 <__c.5480>:
     ee1:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     ef1:	61 73 20 25 7a 20 63 68 61 72 73 2c 20 77 68 69     as %z chars, whi
     f01:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     f11:	61 78 69 6d 75 6d 20 6f 66 20 25 75 00              aximum of %u.

00000f1e <__c.5475>:
     f1e:	63 6f 6d 6d 61 6e 64 20 73 74 72 69 6e 67 3a 20     command string: 
     f2e:	25 73 2c 20 6c 65 6e 67 74 68 3a 20 25 7a 0d 0a     %s, length: %z..
     f3e:	00                                                  .

00000f3f <__c.5466>:
     f3f:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     f4f:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     f5f:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000f6b <__c.5458>:
     f6b:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
     f7b:	00                                                  .

00000f7c <__c.5450>:
     f7c:	09 20 22 73 65 74 5f 6c 65 64 20 62 67 72 20 35     . "set_led bgr 5
     f8c:	20 33 30 20 30 22 20 67 69 76 65 73 20 61 20 62      30 0" gives a b
     f9c:	6c 75 69 73 68 20 67 72 65 65 6e 2e 0d 0a 00        luish green....

00000fab <__c.5448>:
     fab:	09 20 6f 72 64 65 72 2c 20 69 6e 64 69 63 61 74     . order, indicat
     fbb:	69 6e 67 20 74 68 65 20 62 72 69 67 68 74 6e 65     ing the brightne
     fcb:	73 73 20 6f 66 20 74 68 65 20 61 73 73 6f 63 69     ss of the associ
     fdb:	61 74 65 64 20 4c 45 44 73 2e 20 45 78 61 6d 70     ated LEDs. Examp
     feb:	6c 65 3a 20 0d 0a 00                                le: ...

00000ff2 <__c.5446>:
     ff2:	09 20 4c 65 74 74 65 72 73 20 72 2c 67 2c 62 2c     . Letters r,g,b,
    1002:	20 69 6e 20 61 6e 79 20 6f 72 64 65 72 2c 20 66      in any order, f
    1012:	6f 6c 6c 6f 77 65 64 20 62 79 20 76 61 6c 75 65     ollowed by value
    1022:	73 20 30 2d 32 35 35 2c 20 69 6e 20 73 61 6d 65     s 0-255, in same
    1032:	20 0d 0a 00                                          ...

00001036 <__c.5444>:
    1036:	09 47 6f 74 20 63 6f 6d 6d 61 6e 64 20 73 65 74     .Got command set
    1046:	5f 6c 65 64 2c 20 62 75 74 20 61 72 67 75 6d 65     _led, but argume
    1056:	6e 74 73 20 28 25 73 29 20 77 65 72 65 20 69 6e     nts (%s) were in
    1066:	76 61 6c 69 64 2e 20 46 6f 72 6d 61 74 20 73 68     valid. Format sh
    1076:	6f 75 6c 64 20 62 65 3a 0d 0a 00                    ould be:...

00001081 <__c.5417>:
    1081:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
    1091:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
    10a1:	74 69 6f 6e 3a 20 25 68 75 2c 20 4e 65 77 20 53     tion: %hu, New S
    10b1:	65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25 64     ettings: (%d, %d
    10c1:	2c 20 25 64 29 0d 0a 00                             , %d)...

000010c9 <__c.5415>:
    10c9:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    10d9:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
    10e9:	6c 2e 0d 0a 00                                      l....

000010ee <__c.5413>:
    10ee:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    10fe:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
    110e:	61 6c 2e 0d 0a 00                                   al....

00001114 <__c.5411>:
    1114:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    1124:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
    1134:	6c 2e 0d 0a 00                                      l....

00001139 <__c.5409>:
    1139:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
    1149:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00001154 <__c.5406>:
    1154:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    1164:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
    1174:	6e 2e 0d 0a 00                                      n....

00001179 <__c.5396>:
    1179:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
    1189:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
    1199:	6e 3a 20 25 68 75 2c 20 76 61 6c 73 3a 20 28 25     n: %hu, vals: (%
    11a9:	64 2c 20 25 64 2c 20 25 64 29 0d 0a 00              d, %d, %d)...

000011b6 <__c.5394>:
    11b6:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    11c6:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
    11d6:	6c 2e 0d 0a 00                                      l....

000011db <__c.5392>:
    11db:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    11eb:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
    11fb:	61 6c 2e 0d 0a 00                                   al....

00001201 <__c.5390>:
    1201:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    1211:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
    1221:	6c 2e 0d 0a 00                                      l....

00001226 <__c.5388>:
    1226:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
    1236:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00001241 <__c.5385>:
    1241:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
    1251:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
    1261:	6e 2e 0d 0a 00                                      n....

00001266 <__c.5366>:
    1266:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
    1276:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

0000127f <__c.5351>:
    127f:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
    128f:	68 75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75     hu, num_steps %u
    129f:	0d 0a 00                                            ...

000012a2 <__c.5333>:
    12a2:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
    12b2:	69 6e 67 73 00                                      ings.

000012b7 <__c.5331>:
    12b7:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
    12c7:	69 6e 67 73 00                                      ings.

000012cc <__c.5329>:
    12cc:	72 65 73 65 74 00                                   reset.

000012d2 <__c.5327>:
    12d2:	74 61 73 6b 73 00                                   tasks.

000012d8 <__c.5325>:
    12d8:	74 67 74 00                                         tgt.

000012dc <__c.5323>:
    12dc:	6d 73 67 5f 74 73 74 00                             msg_tst.

000012e4 <__c.5321>:
    12e4:	6d 73 67 00                                         msg.

000012e8 <__c.5319>:
    12e8:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

000012f0 <__c.5317>:
    12f0:	63 6d 64 00                                         cmd.

000012f4 <__c.5315>:
    12f4:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00001301 <__c.5313>:
    1301:	67 65 74 5f 69 64 00                                get_id.

00001308 <__c.5311>:
    1308:	73 65 74 5f 6c 65 64 00                             set_led.

00001310 <__c.5309>:
    1310:	72 6e 62 5f 62 00                                   rnb_b.

00001316 <__c.5307>:
    1316:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
    1326:	70 00                                               p.

00001328 <__c.5305>:
    1328:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00001333 <__c.5303>:
    1333:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

0000133e <__c.5301>:
    133e:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00001348 <__c.5299>:
    1348:	63 6f 6c 6c 00                                      coll.

0000134d <__c.5297>:
    134d:	73 65 74 5f 69 72 00                                set_ir.

00001354 <__c.5295>:
    1354:	67 65 74 5f 72 67 62 00                             get_rgb.

0000135c <__c.5293>:
    135c:	77 61 6c 6b 00                                      walk.

00001361 <__c.5291>:
    1361:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

0000136c <CMD_NOT_RECOGNIZED_STR>:
    136c:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
    137c:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
    138c:	0a 00                                               ..

0000138e <__c.2529>:
    138e:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
    139e:	47 00                                               G.

000013a0 <pstr_an>:
    13a0:	61 6e 00                                            an.

000013a3 <pstr_nfinity>:
    13a3:	6e 66 69 6e 69 74 79 00                             nfinity.

000013ab <pwr_m10>:
    13ab:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    13bb:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000013c3 <pwr_p10>:
    13c3:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    13d3:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000013dc <__ctors_end>:
    13dc:	11 24       	eor	r1, r1
    13de:	1f be       	out	0x3f, r1	; 63
    13e0:	cf ef       	ldi	r28, 0xFF	; 255
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	df e3       	ldi	r29, 0x3F	; 63
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	0c bf       	out	0x3c, r16	; 60

000013ec <__do_copy_data>:
    13ec:	15 e2       	ldi	r17, 0x25	; 37
    13ee:	a0 e0       	ldi	r26, 0x00	; 0
    13f0:	b0 e2       	ldi	r27, 0x20	; 32
    13f2:	ee ef       	ldi	r30, 0xFE	; 254
    13f4:	fd ef       	ldi	r31, 0xFD	; 253
    13f6:	00 e0       	ldi	r16, 0x00	; 0
    13f8:	0b bf       	out	0x3b, r16	; 59
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <__do_copy_data+0x14>
    13fc:	07 90       	elpm	r0, Z+
    13fe:	0d 92       	st	X+, r0
    1400:	aa 30       	cpi	r26, 0x0A	; 10
    1402:	b1 07       	cpc	r27, r17
    1404:	d9 f7       	brne	.-10     	; 0x13fc <__do_copy_data+0x10>

00001406 <__do_clear_bss>:
    1406:	2a e2       	ldi	r18, 0x2A	; 42
    1408:	aa e0       	ldi	r26, 0x0A	; 10
    140a:	b5 e2       	ldi	r27, 0x25	; 37
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <.do_clear_bss_start>

0000140e <.do_clear_bss_loop>:
    140e:	1d 92       	st	X+, r1

00001410 <.do_clear_bss_start>:
    1410:	a6 35       	cpi	r26, 0x56	; 86
    1412:	b2 07       	cpc	r27, r18
    1414:	e1 f7       	brne	.-8      	; 0x140e <.do_clear_bss_loop>
    1416:	0e 94 3f 14 	call	0x287e	; 0x287e <main>
    141a:	0c 94 fd 7e 	jmp	0xfdfa	; 0xfdfa <_exit>

0000141e <__bad_interrupt>:
    141e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001422 <get_time>:

.extern rtc_epoch
; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0,_SFR_IO_ADDR(SREG)		; Save the state of the status register
    1422:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    1424:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    1426:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
	lds		r23, RTC_CNT+1
    142a:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	lds		r24, rtc_epoch				; epoch 16-bit high word
    142e:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
	lds		r25, rtc_epoch+1
    1432:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    1436:	0f be       	out	0x3f, r0	; 63
	ret
    1438:	08 95       	ret

0000143a <nearBotsBearingCmp>:
void cleanOtherBot(OtherBot* other){
	if(other==NULL) return;
	other->pos.x = UNDF;
	other->pos.y = UNDF;
	other->pos.o = UNDF;
	other->id = 0;
    143a:	4f 92       	push	r4
    143c:	5f 92       	push	r5
    143e:	6f 92       	push	r6
    1440:	7f 92       	push	r7
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	7c 01       	movw	r14, r24
    145c:	8b 01       	movw	r16, r22
    145e:	a0 90 34 2a 	lds	r10, 0x2A34	; 0x802a34 <myPos>
    1462:	b0 90 35 2a 	lds	r11, 0x2A35	; 0x802a35 <myPos+0x1>
    1466:	c0 91 36 2a 	lds	r28, 0x2A36	; 0x802a36 <myPos+0x2>
    146a:	d0 91 37 2a 	lds	r29, 0x2A37	; 0x802a37 <myPos+0x3>
    146e:	fc 01       	movw	r30, r24
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	6a 19       	sub	r22, r10
    1476:	7b 09       	sbc	r23, r11
    1478:	07 2e       	mov	r0, r23
    147a:	00 0c       	add	r0, r0
    147c:	88 0b       	sbc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    1484:	2b 01       	movw	r4, r22
    1486:	3c 01       	movw	r6, r24
    1488:	f7 01       	movw	r30, r14
    148a:	62 81       	ldd	r22, Z+2	; 0x02
    148c:	73 81       	ldd	r23, Z+3	; 0x03
    148e:	6c 1b       	sub	r22, r28
    1490:	7d 0b       	sbc	r23, r29
    1492:	07 2e       	mov	r0, r23
    1494:	00 0c       	add	r0, r0
    1496:	88 0b       	sbc	r24, r24
    1498:	99 0b       	sbc	r25, r25
    149a:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    149e:	a3 01       	movw	r20, r6
    14a0:	92 01       	movw	r18, r4
    14a2:	0e 94 c7 71 	call	0xe38e	; 0xe38e <atan2>
    14a6:	6b 01       	movw	r12, r22
    14a8:	7c 01       	movw	r14, r24
    14aa:	f8 01       	movw	r30, r16
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	6a 19       	sub	r22, r10
    14b2:	7b 09       	sbc	r23, r11
    14b4:	07 2e       	mov	r0, r23
    14b6:	00 0c       	add	r0, r0
    14b8:	88 0b       	sbc	r24, r24
    14ba:	99 0b       	sbc	r25, r25
    14bc:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    14c0:	4b 01       	movw	r8, r22
    14c2:	5c 01       	movw	r10, r24
    14c4:	f8 01       	movw	r30, r16
    14c6:	62 81       	ldd	r22, Z+2	; 0x02
    14c8:	73 81       	ldd	r23, Z+3	; 0x03
    14ca:	6c 1b       	sub	r22, r28
    14cc:	7d 0b       	sbc	r23, r29
    14ce:	07 2e       	mov	r0, r23
    14d0:	00 0c       	add	r0, r0
    14d2:	88 0b       	sbc	r24, r24
    14d4:	99 0b       	sbc	r25, r25
    14d6:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    14da:	a5 01       	movw	r20, r10
    14dc:	94 01       	movw	r18, r8
    14de:	0e 94 c7 71 	call	0xe38e	; 0xe38e <atan2>
    14e2:	4b 01       	movw	r8, r22
    14e4:	5c 01       	movw	r10, r24
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	c7 01       	movw	r24, r14
    14ec:	b6 01       	movw	r22, r12
    14ee:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    14f2:	87 fd       	sbrc	r24, 7
    14f4:	1f c0       	rjmp	.+62     	; 0x1534 <nearBotsBearingCmp+0xfa>
    14f6:	d1 e0       	ldi	r29, 0x01	; 1
    14f8:	c0 e0       	ldi	r28, 0x00	; 0
    14fa:	a5 01       	movw	r20, r10
    14fc:	94 01       	movw	r18, r8
    14fe:	c7 01       	movw	r24, r14
    1500:	b6 01       	movw	r22, r12
    1502:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    1506:	18 16       	cp	r1, r24
    1508:	9c f4       	brge	.+38     	; 0x1530 <nearBotsBearingCmp+0xf6>
    150a:	8d 2f       	mov	r24, r29
    150c:	9c 2f       	mov	r25, r28
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	9f 90       	pop	r9
    1524:	8f 90       	pop	r8
    1526:	7f 90       	pop	r7
    1528:	6f 90       	pop	r6
    152a:	5f 90       	pop	r5
    152c:	4f 90       	pop	r4
    152e:	08 95       	ret
    1530:	d0 e0       	ldi	r29, 0x00	; 0
    1532:	eb cf       	rjmp	.-42     	; 0x150a <nearBotsBearingCmp+0xd0>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	ea cf       	rjmp	.-44     	; 0x150e <nearBotsBearingCmp+0xd4>

0000153a <sendBotPosMsg>:
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	27 97       	sbiw	r28, 0x07	; 7
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	e4 e3       	ldi	r30, 0x34	; 52
    154a:	fa e2       	ldi	r31, 0x2A	; 42
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	8b 83       	std	Y+3, r24	; 0x03
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	84 81       	ldd	r24, Z+4	; 0x04
    155e:	95 81       	ldd	r25, Z+5	; 0x05
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	80 e5       	ldi	r24, 0x50	; 80
    1566:	8f 83       	std	Y+7, r24	; 0x07
    1568:	47 e0       	ldi	r20, 0x07	; 7
    156a:	be 01       	movw	r22, r28
    156c:	6f 5f       	subi	r22, 0xFF	; 255
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	8f e3       	ldi	r24, 0x3F	; 63
    1572:	0e 94 4c 23 	call	0x4698	; 0x4698 <ir_send>
    1576:	27 96       	adiw	r28, 0x07	; 7
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <updateBall.part.1>:
    1582:	2f 92       	push	r2
    1584:	3f 92       	push	r3
    1586:	4f 92       	push	r4
    1588:	5f 92       	push	r5
    158a:	6f 92       	push	r6
    158c:	7f 92       	push	r7
    158e:	8f 92       	push	r8
    1590:	9f 92       	push	r9
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	67 97       	sbiw	r28, 0x17	; 23
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    15b4:	6b 01       	movw	r12, r22
    15b6:	7c 01       	movw	r14, r24
    15b8:	20 91 34 2a 	lds	r18, 0x2A34	; 0x802a34 <myPos>
    15bc:	30 91 35 2a 	lds	r19, 0x2A35	; 0x802a35 <myPos+0x1>
    15c0:	2a 83       	std	Y+2, r18	; 0x02
    15c2:	3b 83       	std	Y+3, r19	; 0x03
    15c4:	21 15       	cp	r18, r1
    15c6:	30 48       	sbci	r19, 0x80	; 128
    15c8:	09 f4       	brne	.+2      	; 0x15cc <updateBall.part.1+0x4a>
    15ca:	2d c2       	rjmp	.+1114   	; 0x1a26 <updateBall.part.1+0x4a4>
    15cc:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <myPos+0x2>
    15d0:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <myPos+0x3>
    15d4:	88 87       	std	Y+8, r24	; 0x08
    15d6:	99 87       	std	Y+9, r25	; 0x09
    15d8:	81 15       	cp	r24, r1
    15da:	90 48       	sbci	r25, 0x80	; 128
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <updateBall.part.1+0x5e>
    15de:	23 c2       	rjmp	.+1094   	; 0x1a26 <updateBall.part.1+0x4a4>
    15e0:	80 91 38 2a 	lds	r24, 0x2A38	; 0x802a38 <myPos+0x4>
    15e4:	90 91 39 2a 	lds	r25, 0x2A39	; 0x802a39 <myPos+0x5>
    15e8:	81 15       	cp	r24, r1
    15ea:	90 48       	sbci	r25, 0x80	; 128
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <updateBall.part.1+0x6e>
    15ee:	1b c2       	rjmp	.+1078   	; 0x1a26 <updateBall.part.1+0x4a4>
    15f0:	00 91 3e 2a 	lds	r16, 0x2A3E	; 0x802a3e <theBall+0x4>
    15f4:	10 91 3f 2a 	lds	r17, 0x2A3F	; 0x802a3f <theBall+0x5>
    15f8:	01 15       	cp	r16, r1
    15fa:	20 e8       	ldi	r18, 0x80	; 128
    15fc:	12 07       	cpc	r17, r18
    15fe:	09 f4       	brne	.+2      	; 0x1602 <updateBall.part.1+0x80>
    1600:	12 c2       	rjmp	.+1060   	; 0x1a26 <updateBall.part.1+0x4a4>
    1602:	a0 90 40 2a 	lds	r10, 0x2A40	; 0x802a40 <theBall+0x6>
    1606:	b0 90 41 2a 	lds	r11, 0x2A41	; 0x802a41 <theBall+0x7>
    160a:	a1 14       	cp	r10, r1
    160c:	30 e8       	ldi	r19, 0x80	; 128
    160e:	b3 06       	cpc	r11, r19
    1610:	09 f4       	brne	.+2      	; 0x1614 <updateBall.part.1+0x92>
    1612:	09 c2       	rjmp	.+1042   	; 0x1a26 <updateBall.part.1+0x4a4>
    1614:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <theBall>
    1618:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <theBall+0x1>
    161c:	a0 91 3c 2a 	lds	r26, 0x2A3C	; 0x802a3c <theBall+0x2>
    1620:	b0 91 3d 2a 	lds	r27, 0x2A3D	; 0x802a3d <theBall+0x3>
    1624:	26 01       	movw	r4, r12
    1626:	37 01       	movw	r6, r14
    1628:	48 1a       	sub	r4, r24
    162a:	59 0a       	sbc	r5, r25
    162c:	6a 0a       	sbc	r6, r26
    162e:	7b 0a       	sbc	r7, r27
    1630:	60 91 42 2a 	lds	r22, 0x2A42	; 0x802a42 <theBall+0x8>
    1634:	6d 8b       	std	Y+21, r22	; 0x15
    1636:	a6 2f       	mov	r26, r22
    1638:	66 0f       	add	r22, r22
    163a:	bb 0b       	sbc	r27, r27
    163c:	a3 01       	movw	r20, r6
    163e:	92 01       	movw	r18, r4
    1640:	0e 94 74 77 	call	0xeee8	; 0xeee8 <__mulshisi3>
    1644:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    1654:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    1658:	6a 8b       	std	Y+18, r22	; 0x12
    165a:	7b 8b       	std	Y+19, r23	; 0x13
    165c:	f8 01       	movw	r30, r16
    165e:	e6 0f       	add	r30, r22
    1660:	f7 1f       	adc	r31, r23
    1662:	ec 83       	std	Y+4, r30	; 0x04
    1664:	fd 83       	std	Y+5, r31	; 0x05
    1666:	e0 93 3e 2a 	sts	0x2A3E, r30	; 0x802a3e <theBall+0x4>
    166a:	f0 93 3f 2a 	sts	0x2A3F, r31	; 0x802a3f <theBall+0x5>
    166e:	f0 91 43 2a 	lds	r31, 0x2A43	; 0x802a43 <theBall+0x9>
    1672:	fc 8b       	std	Y+20, r31	; 0x14
    1674:	af 2f       	mov	r26, r31
    1676:	ff 0f       	add	r31, r31
    1678:	bb 0b       	sbc	r27, r27
    167a:	a3 01       	movw	r20, r6
    167c:	92 01       	movw	r18, r4
    167e:	0e 94 74 77 	call	0xeee8	; 0xeee8 <__mulshisi3>
    1682:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e7       	ldi	r20, 0x7A	; 122
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    1692:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    1696:	8b 01       	movw	r16, r22
    1698:	95 01       	movw	r18, r10
    169a:	26 0f       	add	r18, r22
    169c:	37 1f       	adc	r19, r23
    169e:	2e 83       	std	Y+6, r18	; 0x06
    16a0:	3f 83       	std	Y+7, r19	; 0x07
    16a2:	20 93 40 2a 	sts	0x2A40, r18	; 0x802a40 <theBall+0x6>
    16a6:	30 93 41 2a 	sts	0x2A41, r19	; 0x802a41 <theBall+0x7>
    16aa:	c0 92 3a 2a 	sts	0x2A3A, r12	; 0x802a3a <theBall>
    16ae:	d0 92 3b 2a 	sts	0x2A3B, r13	; 0x802a3b <theBall+0x1>
    16b2:	e0 92 3c 2a 	sts	0x2A3C, r14	; 0x802a3c <theBall+0x2>
    16b6:	f0 92 3d 2a 	sts	0x2A3D, r15	; 0x802a3d <theBall+0x3>
    16ba:	e0 90 7b 28 	lds	r14, 0x287B	; 0x80287b <hardBotsList>
    16be:	f0 90 7c 28 	lds	r15, 0x287C	; 0x80287c <hardBotsList+0x1>
    16c2:	68 85       	ldd	r22, Y+8	; 0x08
    16c4:	79 85       	ldd	r23, Y+9	; 0x09
    16c6:	62 1b       	sub	r22, r18
    16c8:	73 0b       	sbc	r23, r19
    16ca:	07 2e       	mov	r0, r23
    16cc:	00 0c       	add	r0, r0
    16ce:	88 0b       	sbc	r24, r24
    16d0:	99 0b       	sbc	r25, r25
    16d2:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    16d6:	4b 01       	movw	r8, r22
    16d8:	5c 01       	movw	r10, r24
    16da:	6a 81       	ldd	r22, Y+2	; 0x02
    16dc:	7b 81       	ldd	r23, Y+3	; 0x03
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	68 1b       	sub	r22, r24
    16e4:	79 0b       	sbc	r23, r25
    16e6:	07 2e       	mov	r0, r23
    16e8:	00 0c       	add	r0, r0
    16ea:	88 0b       	sbc	r24, r24
    16ec:	99 0b       	sbc	r25, r25
    16ee:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    16f2:	a5 01       	movw	r20, r10
    16f4:	94 01       	movw	r18, r8
    16f6:	0e 94 bf 74 	call	0xe97e	; 0xe97e <hypot>
    16fa:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    16fe:	6a 87       	std	Y+10, r22	; 0x0a
    1700:	7b 87       	std	Y+11, r23	; 0x0b
    1702:	60 93 dc 27 	sts	0x27DC, r22	; 0x8027dc <myDist>
    1706:	70 93 dd 27 	sts	0x27DD, r23	; 0x8027dd <myDist+0x1>
    170a:	e1 14       	cp	r14, r1
    170c:	f1 04       	cpc	r15, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <updateBall.part.1+0x190>
    1710:	67 c1       	rjmp	.+718    	; 0x19e0 <updateBall.part.1+0x45e>
    1712:	ee 81       	ldd	r30, Y+6	; 0x06
    1714:	ff 81       	ldd	r31, Y+7	; 0x07
    1716:	28 85       	ldd	r18, Y+8	; 0x08
    1718:	39 85       	ldd	r19, Y+9	; 0x09
    171a:	e2 1b       	sub	r30, r18
    171c:	f3 0b       	sbc	r31, r19
    171e:	ec 87       	std	Y+12, r30	; 0x0c
    1720:	fd 87       	std	Y+13, r31	; 0x0d
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	ea 81       	ldd	r30, Y+2	; 0x02
    1728:	fb 81       	ldd	r31, Y+3	; 0x03
    172a:	8e 1b       	sub	r24, r30
    172c:	9f 0b       	sbc	r25, r31
    172e:	8e 87       	std	Y+14, r24	; 0x0e
    1730:	9f 87       	std	Y+15, r25	; 0x0f
    1732:	2e 81       	ldd	r18, Y+6	; 0x06
    1734:	3f 81       	ldd	r19, Y+7	; 0x07
    1736:	02 0f       	add	r16, r18
    1738:	13 1f       	adc	r17, r19
    173a:	c8 01       	movw	r24, r16
    173c:	e8 85       	ldd	r30, Y+8	; 0x08
    173e:	f9 85       	ldd	r31, Y+9	; 0x09
    1740:	8e 1b       	sub	r24, r30
    1742:	9f 0b       	sbc	r25, r31
    1744:	88 8b       	std	Y+16, r24	; 0x10
    1746:	99 8b       	std	Y+17, r25	; 0x11
    1748:	2a 89       	ldd	r18, Y+18	; 0x12
    174a:	3b 89       	ldd	r19, Y+19	; 0x13
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	28 0f       	add	r18, r24
    1752:	39 1f       	adc	r19, r25
    1754:	ea 81       	ldd	r30, Y+2	; 0x02
    1756:	fb 81       	ldd	r31, Y+3	; 0x03
    1758:	2e 1b       	sub	r18, r30
    175a:	3f 0b       	sbc	r19, r31
    175c:	2a 8b       	std	Y+18, r18	; 0x12
    175e:	3b 8b       	std	Y+19, r19	; 0x13
    1760:	f7 01       	movw	r30, r14
    1762:	20 81       	ld	r18, Z
    1764:	31 81       	ldd	r19, Z+1	; 0x01
    1766:	e0 ef       	ldi	r30, 0xF0	; 240
    1768:	f7 e2       	ldi	r31, 0x27	; 39
    176a:	1e 8a       	std	Y+22, r1	; 0x16
    176c:	1f 8a       	std	Y+23, r1	; 0x17
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	28 17       	cp	r18, r24
    1774:	39 07       	cpc	r19, r25
    1776:	09 f4       	brne	.+2      	; 0x177a <updateBall.part.1+0x1f8>
    1778:	82 c1       	rjmp	.+772    	; 0x1a7e <updateBall.part.1+0x4fc>
    177a:	8e 89       	ldd	r24, Y+22	; 0x16
    177c:	9f 89       	ldd	r25, Y+23	; 0x17
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	8e 8b       	std	Y+22, r24	; 0x16
    1782:	9f 8b       	std	Y+23, r25	; 0x17
    1784:	38 96       	adiw	r30, 0x08	; 8
    1786:	0c 97       	sbiw	r24, 0x0c	; 12
    1788:	91 f7       	brne	.-28     	; 0x176e <updateBall.part.1+0x1ec>
    178a:	1e 8a       	std	Y+22, r1	; 0x16
    178c:	1f 8a       	std	Y+23, r1	; 0x17
    178e:	ee 89       	ldd	r30, Y+22	; 0x16
    1790:	ff 89       	ldd	r31, Y+23	; 0x17
    1792:	22 80       	ldd	r2, Z+2	; 0x02
    1794:	33 80       	ldd	r3, Z+3	; 0x03
    1796:	00 81       	ld	r16, Z
    1798:	11 81       	ldd	r17, Z+1	; 0x01
    179a:	b1 01       	movw	r22, r2
    179c:	2e 81       	ldd	r18, Y+6	; 0x06
    179e:	3f 81       	ldd	r19, Y+7	; 0x07
    17a0:	62 1b       	sub	r22, r18
    17a2:	73 0b       	sbc	r23, r19
    17a4:	07 2e       	mov	r0, r23
    17a6:	00 0c       	add	r0, r0
    17a8:	88 0b       	sbc	r24, r24
    17aa:	99 0b       	sbc	r25, r25
    17ac:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    17b0:	4b 01       	movw	r8, r22
    17b2:	5c 01       	movw	r10, r24
    17b4:	b8 01       	movw	r22, r16
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	68 1b       	sub	r22, r24
    17bc:	79 0b       	sbc	r23, r25
    17be:	07 2e       	mov	r0, r23
    17c0:	00 0c       	add	r0, r0
    17c2:	88 0b       	sbc	r24, r24
    17c4:	99 0b       	sbc	r25, r25
    17c6:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    17ca:	a5 01       	movw	r20, r10
    17cc:	94 01       	movw	r18, r8
    17ce:	0e 94 bf 74 	call	0xe97e	; 0xe97e <hypot>
    17d2:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    17d6:	6b 01       	movw	r12, r22
    17d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    17da:	fb 85       	ldd	r31, Y+11	; 0x0b
    17dc:	e6 17       	cp	r30, r22
    17de:	f7 07       	cpc	r31, r23
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <updateBall.part.1+0x262>
    17e2:	41 c1       	rjmp	.+642    	; 0x1a66 <updateBall.part.1+0x4e4>
    17e4:	48 01       	movw	r8, r16
    17e6:	2a 81       	ldd	r18, Y+2	; 0x02
    17e8:	3b 81       	ldd	r19, Y+3	; 0x03
    17ea:	82 1a       	sub	r8, r18
    17ec:	93 0a       	sbc	r9, r19
    17ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17f2:	88 9d       	mul	r24, r8
    17f4:	b0 01       	movw	r22, r0
    17f6:	89 9d       	mul	r24, r9
    17f8:	70 0d       	add	r23, r0
    17fa:	98 9d       	mul	r25, r8
    17fc:	70 0d       	add	r23, r0
    17fe:	11 24       	eor	r1, r1
    1800:	51 01       	movw	r10, r2
    1802:	e8 85       	ldd	r30, Y+8	; 0x08
    1804:	f9 85       	ldd	r31, Y+9	; 0x09
    1806:	ae 1a       	sub	r10, r30
    1808:	bf 0a       	sbc	r11, r31
    180a:	2e 85       	ldd	r18, Y+14	; 0x0e
    180c:	3f 85       	ldd	r19, Y+15	; 0x0f
    180e:	2a 9d       	mul	r18, r10
    1810:	c0 01       	movw	r24, r0
    1812:	2b 9d       	mul	r18, r11
    1814:	90 0d       	add	r25, r0
    1816:	3a 9d       	mul	r19, r10
    1818:	90 0d       	add	r25, r0
    181a:	11 24       	eor	r1, r1
    181c:	68 1b       	sub	r22, r24
    181e:	79 0b       	sbc	r23, r25
    1820:	07 2e       	mov	r0, r23
    1822:	00 0c       	add	r0, r0
    1824:	88 0b       	sbc	r24, r24
    1826:	99 0b       	sbc	r25, r25
    1828:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    182c:	2b 01       	movw	r4, r22
    182e:	3c 01       	movw	r6, r24
    1830:	88 89       	ldd	r24, Y+16	; 0x10
    1832:	99 89       	ldd	r25, Y+17	; 0x11
    1834:	88 9d       	mul	r24, r8
    1836:	b0 01       	movw	r22, r0
    1838:	89 9d       	mul	r24, r9
    183a:	70 0d       	add	r23, r0
    183c:	98 9d       	mul	r25, r8
    183e:	70 0d       	add	r23, r0
    1840:	11 24       	eor	r1, r1
    1842:	ea 89       	ldd	r30, Y+18	; 0x12
    1844:	fb 89       	ldd	r31, Y+19	; 0x13
    1846:	ea 9d       	mul	r30, r10
    1848:	c0 01       	movw	r24, r0
    184a:	eb 9d       	mul	r30, r11
    184c:	90 0d       	add	r25, r0
    184e:	fa 9d       	mul	r31, r10
    1850:	90 0d       	add	r25, r0
    1852:	11 24       	eor	r1, r1
    1854:	68 1b       	sub	r22, r24
    1856:	79 0b       	sbc	r23, r25
    1858:	07 2e       	mov	r0, r23
    185a:	00 0c       	add	r0, r0
    185c:	88 0b       	sbc	r24, r24
    185e:	99 0b       	sbc	r25, r25
    1860:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    1864:	4b 01       	movw	r8, r22
    1866:	5c 01       	movw	r10, r24
    1868:	f1 e0       	ldi	r31, 0x01	; 1
    186a:	f9 83       	std	Y+1, r31	; 0x01
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	c3 01       	movw	r24, r6
    1874:	b2 01       	movw	r22, r4
    1876:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    187a:	18 16       	cp	r1, r24
    187c:	0c f0       	brlt	.+2      	; 0x1880 <updateBall.part.1+0x2fe>
    187e:	0e c1       	rjmp	.+540    	; 0x1a9c <updateBall.part.1+0x51a>
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	c3 01       	movw	r24, r6
    1888:	b2 01       	movw	r22, r4
    188a:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    188e:	88 1f       	adc	r24, r24
    1890:	88 27       	eor	r24, r24
    1892:	88 1f       	adc	r24, r24
    1894:	69 80       	ldd	r6, Y+1	; 0x01
    1896:	68 1a       	sub	r6, r24
    1898:	77 24       	eor	r7, r7
    189a:	73 94       	inc	r7
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	c5 01       	movw	r24, r10
    18a4:	b4 01       	movw	r22, r8
    18a6:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	0c f0       	brlt	.+2      	; 0x18b0 <updateBall.part.1+0x32e>
    18ae:	f4 c0       	rjmp	.+488    	; 0x1a98 <updateBall.part.1+0x516>
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	c5 01       	movw	r24, r10
    18b8:	b4 01       	movw	r22, r8
    18ba:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    18be:	88 1f       	adc	r24, r24
    18c0:	88 27       	eor	r24, r24
    18c2:	88 1f       	adc	r24, r24
    18c4:	78 1a       	sub	r7, r24
    18c6:	67 14       	cp	r6, r7
    18c8:	09 f4       	brne	.+2      	; 0x18cc <updateBall.part.1+0x34a>
    18ca:	cd c0       	rjmp	.+410    	; 0x1a66 <updateBall.part.1+0x4e4>
    18cc:	8e 89       	ldd	r24, Y+22	; 0x16
    18ce:	9f 89       	ldd	r25, Y+23	; 0x17
    18d0:	8e 83       	std	Y+6, r24	; 0x06
    18d2:	9f 83       	std	Y+7, r25	; 0x07
    18d4:	c0 92 77 28 	sts	0x2877, r12	; 0x802877 <otherDist>
    18d8:	d0 92 78 28 	sts	0x2878, r13	; 0x802878 <otherDist+0x1>
    18dc:	80 91 e4 27 	lds	r24, 0x27E4	; 0x8027e4 <gameMode>
    18e0:	81 11       	cpse	r24, r1
    18e2:	3c c0       	rjmp	.+120    	; 0x195c <updateBall.part.1+0x3da>
    18e4:	80 91 b4 26 	lds	r24, 0x26B4	; 0x8026b4 <myState>
    18e8:	80 ff       	sbrs	r24, 0
    18ea:	38 c0       	rjmp	.+112    	; 0x195c <updateBall.part.1+0x3da>
    18ec:	98 2f       	mov	r25, r24
    18ee:	92 71       	andi	r25, 0x12	; 18
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <updateBall.part.1+0x372>
    18f2:	d6 c0       	rjmp	.+428    	; 0x1aa0 <updateBall.part.1+0x51e>
    18f4:	2c 89       	ldd	r18, Y+20	; 0x14
    18f6:	12 16       	cp	r1, r18
    18f8:	14 f4       	brge	.+4      	; 0x18fe <updateBall.part.1+0x37c>
    18fa:	81 71       	andi	r24, 0x11	; 17
    18fc:	79 f1       	breq	.+94     	; 0x195c <updateBall.part.1+0x3da>
    18fe:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <isCovered>
    1902:	81 11       	cpse	r24, r1
    1904:	2b c0       	rjmp	.+86     	; 0x195c <updateBall.part.1+0x3da>
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    1910:	8f e0       	ldi	r24, 0x0F	; 15
    1912:	80 93 44 2a 	sts	0x2A44, r24	; 0x802a44 <theBall+0xa>
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    1920:	60 91 42 2a 	lds	r22, 0x2A42	; 0x802a42 <theBall+0x8>
    1924:	6d 8b       	std	Y+21, r22	; 0x15
    1926:	80 91 43 2a 	lds	r24, 0x2A43	; 0x802a43 <theBall+0x9>
    192a:	8c 8b       	std	Y+20, r24	; 0x14
    192c:	e0 91 36 2a 	lds	r30, 0x2A36	; 0x802a36 <myPos+0x2>
    1930:	f0 91 37 2a 	lds	r31, 0x2A37	; 0x802a37 <myPos+0x3>
    1934:	e8 87       	std	Y+8, r30	; 0x08
    1936:	f9 87       	std	Y+9, r31	; 0x09
    1938:	20 91 34 2a 	lds	r18, 0x2A34	; 0x802a34 <myPos>
    193c:	30 91 35 2a 	lds	r19, 0x2A35	; 0x802a35 <myPos+0x1>
    1940:	2a 83       	std	Y+2, r18	; 0x02
    1942:	3b 83       	std	Y+3, r19	; 0x03
    1944:	80 91 3e 2a 	lds	r24, 0x2A3E	; 0x802a3e <theBall+0x4>
    1948:	90 91 3f 2a 	lds	r25, 0x2A3F	; 0x802a3f <theBall+0x5>
    194c:	8c 83       	std	Y+4, r24	; 0x04
    194e:	9d 83       	std	Y+5, r25	; 0x05
    1950:	ee 81       	ldd	r30, Y+6	; 0x06
    1952:	ff 81       	ldd	r31, Y+7	; 0x07
    1954:	22 80       	ldd	r2, Z+2	; 0x02
    1956:	33 80       	ldd	r3, Z+3	; 0x03
    1958:	00 81       	ld	r16, Z
    195a:	11 81       	ldd	r17, Z+1	; 0x01
    195c:	48 85       	ldd	r20, Y+8	; 0x08
    195e:	59 85       	ldd	r21, Y+9	; 0x09
    1960:	42 19       	sub	r20, r2
    1962:	53 09       	sbc	r21, r3
    1964:	2a 81       	ldd	r18, Y+2	; 0x02
    1966:	3b 81       	ldd	r19, Y+3	; 0x03
    1968:	02 1b       	sub	r16, r18
    196a:	13 0b       	sbc	r17, r19
    196c:	44 9f       	mul	r20, r20
    196e:	90 01       	movw	r18, r0
    1970:	45 9f       	mul	r20, r21
    1972:	30 0d       	add	r19, r0
    1974:	30 0d       	add	r19, r0
    1976:	11 24       	eor	r1, r1
    1978:	00 9f       	mul	r16, r16
    197a:	c0 01       	movw	r24, r0
    197c:	01 9f       	mul	r16, r17
    197e:	90 0d       	add	r25, r0
    1980:	90 0d       	add	r25, r0
    1982:	11 24       	eor	r1, r1
    1984:	28 0f       	add	r18, r24
    1986:	39 1f       	adc	r19, r25
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	64 03       	mulsu	r22, r20
    198c:	f0 01       	movw	r30, r0
    198e:	65 9f       	mul	r22, r21
    1990:	f0 0d       	add	r31, r0
    1992:	11 24       	eor	r1, r1
    1994:	6c 89       	ldd	r22, Y+20	; 0x14
    1996:	60 03       	mulsu	r22, r16
    1998:	c0 01       	movw	r24, r0
    199a:	61 9f       	mul	r22, r17
    199c:	90 0d       	add	r25, r0
    199e:	11 24       	eor	r1, r1
    19a0:	e8 0f       	add	r30, r24
    19a2:	f9 1f       	adc	r31, r25
    19a4:	4e 9f       	mul	r20, r30
    19a6:	c0 01       	movw	r24, r0
    19a8:	4f 9f       	mul	r20, r31
    19aa:	90 0d       	add	r25, r0
    19ac:	5e 9f       	mul	r21, r30
    19ae:	90 0d       	add	r25, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	b9 01       	movw	r22, r18
    19b4:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    19b8:	66 0f       	add	r22, r22
    19ba:	8d 89       	ldd	r24, Y+21	; 0x15
    19bc:	86 1b       	sub	r24, r22
    19be:	80 93 42 2a 	sts	0x2A42, r24	; 0x802a42 <theBall+0x8>
    19c2:	0e 9f       	mul	r16, r30
    19c4:	c0 01       	movw	r24, r0
    19c6:	0f 9f       	mul	r16, r31
    19c8:	90 0d       	add	r25, r0
    19ca:	1e 9f       	mul	r17, r30
    19cc:	90 0d       	add	r25, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	b9 01       	movw	r22, r18
    19d2:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    19d6:	66 0f       	add	r22, r22
    19d8:	8c 89       	ldd	r24, Y+20	; 0x14
    19da:	86 1b       	sub	r24, r22
    19dc:	80 93 43 2a 	sts	0x2A43, r24	; 0x802a43 <theBall+0x9>
    19e0:	0c 81       	ldd	r16, Y+4	; 0x04
    19e2:	1d 81       	ldd	r17, Y+5	; 0x05
    19e4:	0a 56       	subi	r16, 0x6A	; 106
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	0d 32       	cpi	r16, 0x2D	; 45
    19ea:	11 40       	sbci	r17, 0x01	; 1
    19ec:	48 f4       	brcc	.+18     	; 0x1a00 <updateBall.part.1+0x47e>
    19ee:	80 91 40 2a 	lds	r24, 0x2A40	; 0x802a40 <theBall+0x6>
    19f2:	90 91 41 2a 	lds	r25, 0x2A41	; 0x802a41 <theBall+0x7>
    19f6:	8a 56       	subi	r24, 0x6A	; 106
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    19fa:	8d 32       	cpi	r24, 0x2D	; 45
    19fc:	91 40       	sbci	r25, 0x01	; 1
    19fe:	e8 f0       	brcs	.+58     	; 0x1a3a <updateBall.part.1+0x4b8>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e8       	ldi	r25, 0x80	; 128
    1a04:	80 93 3e 2a 	sts	0x2A3E, r24	; 0x802a3e <theBall+0x4>
    1a08:	90 93 3f 2a 	sts	0x2A3F, r25	; 0x802a3f <theBall+0x5>
    1a0c:	80 93 40 2a 	sts	0x2A40, r24	; 0x802a40 <theBall+0x6>
    1a10:	90 93 41 2a 	sts	0x2A41, r25	; 0x802a41 <theBall+0x7>
    1a14:	80 93 dc 27 	sts	0x27DC, r24	; 0x8027dc <myDist>
    1a18:	90 93 dd 27 	sts	0x27DD, r25	; 0x8027dd <myDist+0x1>
    1a1c:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <otherDist>
    1a20:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <otherDist+0x1>
    1a24:	0a c0       	rjmp	.+20     	; 0x1a3a <updateBall.part.1+0x4b8>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e8       	ldi	r25, 0x80	; 128
    1a2a:	80 93 dc 27 	sts	0x27DC, r24	; 0x8027dc <myDist>
    1a2e:	90 93 dd 27 	sts	0x27DD, r25	; 0x8027dd <myDist+0x1>
    1a32:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <otherDist>
    1a36:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <otherDist+0x1>
    1a3a:	67 96       	adiw	r28, 0x17	; 23
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	6f 90       	pop	r6
    1a5c:	5f 90       	pop	r5
    1a5e:	4f 90       	pop	r4
    1a60:	3f 90       	pop	r3
    1a62:	2f 90       	pop	r2
    1a64:	08 95       	ret
    1a66:	f7 01       	movw	r30, r14
    1a68:	e2 80       	ldd	r14, Z+2	; 0x02
    1a6a:	f3 80       	ldd	r15, Z+3	; 0x03
    1a6c:	e1 14       	cp	r14, r1
    1a6e:	f1 04       	cpc	r15, r1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <updateBall.part.1+0x4f2>
    1a72:	76 ce       	rjmp	.-788    	; 0x1760 <updateBall.part.1+0x1de>
    1a74:	c0 92 77 28 	sts	0x2877, r12	; 0x802877 <otherDist>
    1a78:	d0 92 78 28 	sts	0x2878, r13	; 0x802878 <otherDist+0x1>
    1a7c:	b1 cf       	rjmp	.-158    	; 0x19e0 <updateBall.part.1+0x45e>
    1a7e:	2e 89       	ldd	r18, Y+22	; 0x16
    1a80:	3f 89       	ldd	r19, Y+23	; 0x17
    1a82:	22 0f       	add	r18, r18
    1a84:	33 1f       	adc	r19, r19
    1a86:	22 0f       	add	r18, r18
    1a88:	33 1f       	adc	r19, r19
    1a8a:	22 0f       	add	r18, r18
    1a8c:	33 1f       	adc	r19, r19
    1a8e:	26 51       	subi	r18, 0x16	; 22
    1a90:	38 4d       	sbci	r19, 0xD8	; 216
    1a92:	2e 8b       	std	Y+22, r18	; 0x16
    1a94:	3f 8b       	std	Y+23, r19	; 0x17
    1a96:	7b ce       	rjmp	.-778    	; 0x178e <updateBall.part.1+0x20c>
    1a98:	71 2c       	mov	r7, r1
    1a9a:	0a cf       	rjmp	.-492    	; 0x18b0 <updateBall.part.1+0x32e>
    1a9c:	19 82       	std	Y+1, r1	; 0x01
    1a9e:	f0 ce       	rjmp	.-544    	; 0x1880 <updateBall.part.1+0x2fe>
    1aa0:	81 71       	andi	r24, 0x11	; 17
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <updateBall.part.1+0x524>
    1aa4:	5b cf       	rjmp	.-330    	; 0x195c <updateBall.part.1+0x3da>
    1aa6:	3c 89       	ldd	r19, Y+20	; 0x14
    1aa8:	37 fd       	sbrc	r19, 7
    1aaa:	58 cf       	rjmp	.-336    	; 0x195c <updateBall.part.1+0x3da>
    1aac:	28 cf       	rjmp	.-432    	; 0x18fe <updateBall.part.1+0x37c>

00001aae <init>:
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	80 93 e5 27 	sts	0x27E5, r24	; 0x8027e5 <loopID>
    1ab6:	90 93 e6 27 	sts	0x27E6, r25	; 0x8027e6 <loopID+0x1>
    1aba:	10 92 7e 28 	sts	0x287E, r1	; 0x80287e <frameCount>
    1abe:	10 92 7f 28 	sts	0x287F, r1	; 0x80287f <frameCount+0x1>
    1ac2:	10 92 80 28 	sts	0x2880, r1	; 0x802880 <frameCount+0x2>
    1ac6:	10 92 81 28 	sts	0x2881, r1	; 0x802881 <frameCount+0x3>
    1aca:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    1ace:	60 93 6b 28 	sts	0x286B, r22	; 0x80286b <frameStart>
    1ad2:	70 93 6c 28 	sts	0x286C, r23	; 0x80286c <frameStart+0x1>
    1ad6:	80 93 6d 28 	sts	0x286D, r24	; 0x80286d <frameStart+0x2>
    1ada:	90 93 6e 28 	sts	0x286E, r25	; 0x80286e <frameStart+0x3>
    1ade:	40 91 99 26 	lds	r20, 0x2699	; 0x802699 <droplet_ID>
    1ae2:	50 91 9a 26 	lds	r21, 0x269A	; 0x80269a <droplet_ID+0x1>
    1ae6:	9a 01       	movw	r18, r20
    1ae8:	ad ea       	ldi	r26, 0xAD	; 173
    1aea:	bb e1       	ldi	r27, 0x1B	; 27
    1aec:	0e 94 65 77 	call	0xeeca	; 0xeeca <__umulhisi3>
    1af0:	96 95       	lsr	r25
    1af2:	87 95       	ror	r24
    1af4:	96 95       	lsr	r25
    1af6:	87 95       	ror	r24
    1af8:	65 e2       	ldi	r22, 0x25	; 37
    1afa:	68 9f       	mul	r22, r24
    1afc:	90 01       	movw	r18, r0
    1afe:	69 9f       	mul	r22, r25
    1b00:	30 0d       	add	r19, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	ca 01       	movw	r24, r20
    1b06:	82 1b       	sub	r24, r18
    1b08:	93 0b       	sbc	r25, r19
    1b0a:	80 93 e2 27 	sts	0x27E2, r24	; 0x8027e2 <mySlot>
    1b0e:	90 93 e3 27 	sts	0x27E3, r25	; 0x8027e3 <mySlot+0x1>
    1b12:	ea ee       	ldi	r30, 0xEA	; 234
    1b14:	f7 e2       	ldi	r31, 0x27	; 39
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e8       	ldi	r19, 0x80	; 128
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e8       	ldi	r21, 0x80	; 128
    1b1e:	20 83       	st	Z, r18
    1b20:	31 83       	std	Z+1, r19	; 0x01
    1b22:	22 83       	std	Z+2, r18	; 0x02
    1b24:	33 83       	std	Z+3, r19	; 0x03
    1b26:	24 83       	std	Z+4, r18	; 0x04
    1b28:	35 83       	std	Z+5, r19	; 0x05
    1b2a:	16 82       	std	Z+6, r1	; 0x06
    1b2c:	17 82       	std	Z+7, r1	; 0x07
    1b2e:	38 96       	adiw	r30, 0x08	; 8
    1b30:	68 e2       	ldi	r22, 0x28	; 40
    1b32:	e2 35       	cpi	r30, 0x52	; 82
    1b34:	f6 07       	cpc	r31, r22
    1b36:	89 f7       	brne	.-30     	; 0x1b1a <init+0x6c>
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	20 93 b4 26 	sts	0x26B4, r18	; 0x8026b4 <myState>
    1b3e:	10 92 f2 29 	sts	0x29F2, r1	; 0x8029f2 <colorMode>
    1b42:	20 93 e4 27 	sts	0x27E4, r18	; 0x8027e4 <gameMode>
    1b46:	10 92 e9 27 	sts	0x27E9, r1	; 0x8027e9 <lastBallID>
    1b4a:	10 92 28 2a 	sts	0x2A28, r1	; 0x802a28 <lastBallMsg>
    1b4e:	10 92 29 2a 	sts	0x2A29, r1	; 0x802a29 <lastBallMsg+0x1>
    1b52:	10 92 2a 2a 	sts	0x2A2A, r1	; 0x802a2a <lastBallMsg+0x2>
    1b56:	10 92 2b 2a 	sts	0x2A2B, r1	; 0x802a2b <lastBallMsg+0x3>
    1b5a:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <lastPaddleMsg>
    1b5e:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <lastPaddleMsg+0x1>
    1b62:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <lastPaddleMsg+0x2>
    1b66:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <lastPaddleMsg+0x3>
    1b6a:	10 92 7b 28 	sts	0x287B, r1	; 0x80287b <hardBotsList>
    1b6e:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <hardBotsList+0x1>
    1b72:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <theBall>
    1b76:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <theBall+0x1>
    1b7a:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <theBall+0x2>
    1b7e:	10 92 3d 2a 	sts	0x2A3D, r1	; 0x802a3d <theBall+0x3>
    1b82:	40 93 3e 2a 	sts	0x2A3E, r20	; 0x802a3e <theBall+0x4>
    1b86:	50 93 3f 2a 	sts	0x2A3F, r21	; 0x802a3f <theBall+0x5>
    1b8a:	40 93 40 2a 	sts	0x2A40, r20	; 0x802a40 <theBall+0x6>
    1b8e:	50 93 41 2a 	sts	0x2A41, r21	; 0x802a41 <theBall+0x7>
    1b92:	10 92 42 2a 	sts	0x2A42, r1	; 0x802a42 <theBall+0x8>
    1b96:	10 92 43 2a 	sts	0x2A43, r1	; 0x802a43 <theBall+0x9>
    1b9a:	10 92 44 2a 	sts	0x2A44, r1	; 0x802a44 <theBall+0xa>
    1b9e:	10 92 45 2a 	sts	0x2A45, r1	; 0x802a45 <theBall+0xb>
    1ba2:	1f 92       	push	r1
    1ba4:	1f 92       	push	r1
    1ba6:	2a e3       	ldi	r18, 0x3A	; 58
    1ba8:	2f 93       	push	r18
    1baa:	2e ee       	ldi	r18, 0xEE	; 238
    1bac:	2f 93       	push	r18
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	80 ef       	ldi	r24, 0xF0	; 240
    1bb4:	90 e2       	ldi	r25, 0x20	; 32
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    1bbe:	8d b7       	in	r24, 0x3d	; 61
    1bc0:	9e b7       	in	r25, 0x3e	; 62
    1bc2:	08 96       	adiw	r24, 0x08	; 8
    1bc4:	8d bf       	out	0x3d, r24	; 61
    1bc6:	9e bf       	out	0x3e, r25	; 62
    1bc8:	88 ec       	ldi	r24, 0xC8	; 200
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <set_all_ir_powers>

00001bd0 <getBallCoverage>:
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	cf 93       	push	r28
    1bda:	20 91 dc 27 	lds	r18, 0x27DC	; 0x8027dc <myDist>
    1bde:	30 91 dd 27 	lds	r19, 0x27DD	; 0x8027dd <myDist+0x1>
    1be2:	21 15       	cp	r18, r1
    1be4:	80 e8       	ldi	r24, 0x80	; 128
    1be6:	38 07       	cpc	r19, r24
    1be8:	b1 f1       	breq	.+108    	; 0x1c56 <getBallCoverage+0x86>
    1bea:	c0 91 45 2a 	lds	r28, 0x2A45	; 0x802a45 <theBall+0xb>
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	4a 5e       	subi	r20, 0xEA	; 234
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	24 17       	cp	r18, r20
    1bfa:	35 07       	cpc	r19, r21
    1bfc:	60 f5       	brcc	.+88     	; 0x1c56 <getBallCoverage+0x86>
    1bfe:	40 91 44 2a 	lds	r20, 0x2A44	; 0x802a44 <theBall+0xa>
    1c02:	4f 30       	cpi	r20, 0x0F	; 15
    1c04:	41 f1       	breq	.+80     	; 0x1c56 <getBallCoverage+0x86>
    1c06:	c6 31       	cpi	r28, 0x16	; 22
    1c08:	78 f5       	brcc	.+94     	; 0x1c68 <getBallCoverage+0x98>
    1c0a:	46 e1       	ldi	r20, 0x16	; 22
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	48 1b       	sub	r20, r24
    1c10:	59 0b       	sbc	r21, r25
    1c12:	24 17       	cp	r18, r20
    1c14:	35 07       	cpc	r19, r21
    1c16:	08 f4       	brcc	.+2      	; 0x1c1a <getBallCoverage+0x4a>
    1c18:	42 c0       	rjmp	.+132    	; 0x1c9e <getBallCoverage+0xce>
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	62 1b       	sub	r22, r18
    1c1e:	73 0b       	sbc	r23, r19
    1c20:	6a 5e       	subi	r22, 0xEA	; 234
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    1c2c:	6b 01       	movw	r12, r22
    1c2e:	7c 01       	movw	r14, r24
    1c30:	6c 2f       	mov	r22, r28
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	42 e7       	ldi	r20, 0x72	; 114
    1c42:	54 e4       	ldi	r21, 0x44	; 68
    1c44:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    1c48:	9b 01       	movw	r18, r22
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	c7 01       	movw	r24, r14
    1c4e:	b6 01       	movw	r22, r12
    1c50:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <getBallCoverage+0x8c>
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	cf 91       	pop	r28
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	08 95       	ret
    1c68:	ac 01       	movw	r20, r24
    1c6a:	46 51       	subi	r20, 0x16	; 22
    1c6c:	51 09       	sbc	r21, r1
    1c6e:	24 17       	cp	r18, r20
    1c70:	35 07       	cpc	r19, r21
    1c72:	a8 f0       	brcs	.+42     	; 0x1c9e <getBallCoverage+0xce>
    1c74:	bc 01       	movw	r22, r24
    1c76:	62 1b       	sub	r22, r18
    1c78:	73 0b       	sbc	r23, r19
    1c7a:	6a 5e       	subi	r22, 0xEA	; 234
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    1c86:	2c e8       	ldi	r18, 0x8C	; 140
    1c88:	3e e2       	ldi	r19, 0x2E	; 46
    1c8a:	4a eb       	ldi	r20, 0xBA	; 186
    1c8c:	5c e3       	ldi	r21, 0x3C	; 60
    1c8e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    1c92:	cf 91       	pop	r28
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	cf 90       	pop	r12
    1c9c:	08 95       	ret
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	80 e8       	ldi	r24, 0x80	; 128
    1ca4:	9f e3       	ldi	r25, 0x3F	; 63
    1ca6:	cf 91       	pop	r28
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	08 95       	ret

00001cb2 <getPaddleCoverage>:
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	80 91 e4 27 	lds	r24, 0x27E4	; 0x8027e4 <gameMode>
    1cc6:	81 11       	cpse	r24, r1
    1cc8:	3d c0       	rjmp	.+122    	; 0x1d44 <getPaddleCoverage+0x92>
    1cca:	80 91 b4 26 	lds	r24, 0x26B4	; 0x8026b4 <myState>
    1cce:	80 ff       	sbrs	r24, 0
    1cd0:	39 c0       	rjmp	.+114    	; 0x1d44 <getPaddleCoverage+0x92>
    1cd2:	83 71       	andi	r24, 0x13	; 19
    1cd4:	b9 f1       	breq	.+110    	; 0x1d44 <getPaddleCoverage+0x92>
    1cd6:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPos>
    1cda:	90 91 35 2a 	lds	r25, 0x2A35	; 0x802a35 <myPos+0x1>
    1cde:	8c 01       	movw	r16, r24
    1ce0:	0a 5e       	subi	r16, 0xEA	; 234
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	20 91 b1 26 	lds	r18, 0x26B1	; 0x8026b1 <paddleStart>
    1ce8:	30 91 b2 26 	lds	r19, 0x26B2	; 0x8026b2 <paddleStart+0x1>
    1cec:	20 17       	cp	r18, r16
    1cee:	31 07       	cpc	r19, r17
    1cf0:	4c f5       	brge	.+82     	; 0x1d44 <getPaddleCoverage+0x92>
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	66 97       	sbiw	r28, 0x16	; 22
    1cf6:	60 91 ae 26 	lds	r22, 0x26AE	; 0x8026ae <paddleEnd>
    1cfa:	70 91 af 26 	lds	r23, 0x26AF	; 0x8026af <paddleEnd+0x1>
    1cfe:	c6 17       	cp	r28, r22
    1d00:	d7 07       	cpc	r29, r23
    1d02:	04 f5       	brge	.+64     	; 0x1d44 <getPaddleCoverage+0x92>
    1d04:	60 17       	cp	r22, r16
    1d06:	71 07       	cpc	r23, r17
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <getPaddleCoverage+0xaa>
    1d0a:	2c 17       	cp	r18, r28
    1d0c:	3d 07       	cpc	r19, r29
    1d0e:	5c f1       	brlt	.+86     	; 0x1d66 <getPaddleCoverage+0xb4>
    1d10:	62 1b       	sub	r22, r18
    1d12:	73 0b       	sbc	r23, r19
    1d14:	07 2e       	mov	r0, r23
    1d16:	00 0c       	add	r0, r0
    1d18:	88 0b       	sbc	r24, r24
    1d1a:	99 0b       	sbc	r25, r25
    1d1c:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    1d20:	6b 01       	movw	r12, r22
    1d22:	7c 01       	movw	r14, r24
    1d24:	b8 01       	movw	r22, r16
    1d26:	6c 1b       	sub	r22, r28
    1d28:	7d 0b       	sbc	r23, r29
    1d2a:	07 2e       	mov	r0, r23
    1d2c:	00 0c       	add	r0, r0
    1d2e:	88 0b       	sbc	r24, r24
    1d30:	99 0b       	sbc	r25, r25
    1d32:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    1d36:	9b 01       	movw	r18, r22
    1d38:	ac 01       	movw	r20, r24
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <getPaddleCoverage+0x98>
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	cb 01       	movw	r24, r22
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	08 95       	ret
    1d5c:	2c 17       	cp	r18, r28
    1d5e:	3d 07       	cpc	r19, r29
    1d60:	2c f0       	brlt	.+10     	; 0x1d6c <getPaddleCoverage+0xba>
    1d62:	b8 01       	movw	r22, r16
    1d64:	d5 cf       	rjmp	.-86     	; 0x1d10 <getPaddleCoverage+0x5e>
    1d66:	6c 1b       	sub	r22, r28
    1d68:	7d 0b       	sbc	r23, r29
    1d6a:	d4 cf       	rjmp	.-88     	; 0x1d14 <getPaddleCoverage+0x62>
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	9f e3       	ldi	r25, 0x3F	; 63
    1d74:	ea cf       	rjmp	.-44     	; 0x1d4a <getPaddleCoverage+0x98>

00001d76 <updateColor>:
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <updateColor+0xe>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	1b 82       	std	Y+3, r1	; 0x03
    1d8a:	1a 82       	std	Y+2, r1	; 0x02
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	80 91 f2 29 	lds	r24, 0x29F2	; 0x8029f2 <colorMode>
    1d92:	88 23       	and	r24, r24
    1d94:	71 f1       	breq	.+92     	; 0x1df2 <updateColor+0x7c>
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	79 f0       	breq	.+30     	; 0x1db8 <updateColor+0x42>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    1da4:	23 96       	adiw	r28, 0x03	; 3
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret
    1db8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <getBallCoverage>
    1dbc:	6b 01       	movw	r12, r22
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <getPaddleCoverage>
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b6 01       	movw	r22, r12
    1dcc:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    1dd0:	6b 01       	movw	r12, r22
    1dd2:	7c 01       	movw	r14, r24
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	ac f4       	brge	.+42     	; 0x1e0e <updateColor+0x98>
    1de4:	4f ef       	ldi	r20, 0xFF	; 255
    1de6:	4b 83       	std	Y+3, r20	; 0x03
    1de8:	4a 83       	std	Y+2, r20	; 0x02
    1dea:	49 83       	std	Y+1, r20	; 0x01
    1dec:	84 2f       	mov	r24, r20
    1dee:	64 2f       	mov	r22, r20
    1df0:	d7 cf       	rjmp	.-82     	; 0x1da0 <updateColor+0x2a>
    1df2:	ae 01       	movw	r20, r28
    1df4:	4f 5f       	subi	r20, 0xFF	; 255
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	be 01       	movw	r22, r28
    1dfa:	6e 5f       	subi	r22, 0xFE	; 254
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	ce 01       	movw	r24, r28
    1e00:	03 96       	adiw	r24, 0x03	; 3
    1e02:	0e 94 22 39 	call	0x7244	; 0x7244 <getPosColor>
    1e06:	49 81       	ldd	r20, Y+1	; 0x01
    1e08:	6a 81       	ldd	r22, Y+2	; 0x02
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	c9 cf       	rjmp	.-110    	; 0x1da0 <updateColor+0x2a>
    1e0e:	2a e0       	ldi	r18, 0x0A	; 10
    1e10:	37 ed       	ldi	r19, 0xD7	; 215
    1e12:	43 e2       	ldi	r20, 0x23	; 35
    1e14:	5c e3       	ldi	r21, 0x3C	; 60
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	14 f0       	brlt	.+4      	; 0x1e26 <updateColor+0xb0>
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	e0 cf       	rjmp	.-64     	; 0x1de6 <updateColor+0x70>
    1e26:	a7 01       	movw	r20, r14
    1e28:	96 01       	movw	r18, r12
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	8c e4       	ldi	r24, 0x4C	; 76
    1e30:	92 e4       	ldi	r25, 0x42	; 66
    1e32:	0e 94 51 76 	call	0xeca2	; 0xeca2 <pow>
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 ea       	ldi	r20, 0xA0	; 160
    1e3c:	50 e4       	ldi	r21, 0x40	; 64
    1e3e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    1e42:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    1e46:	77 27       	eor	r23, r23
    1e48:	46 2f       	mov	r20, r22
    1e4a:	cd cf       	rjmp	.-102    	; 0x1de6 <updateColor+0x70>

00001e4c <checkLightLevel>:
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <checkLightLevel+0x12>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <checkLightLevel+0x14>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	ae 01       	movw	r20, r28
    1e66:	4f 5f       	subi	r20, 0xFF	; 255
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	be 01       	movw	r22, r28
    1e6c:	6d 5f       	subi	r22, 0xFD	; 253
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	ce 01       	movw	r24, r28
    1e72:	05 96       	adiw	r24, 0x05	; 5
    1e74:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <get_rgb>
    1e78:	0d 81       	ldd	r16, Y+5	; 0x05
    1e7a:	1e 81       	ldd	r17, Y+6	; 0x06
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	08 0f       	add	r16, r24
    1e82:	19 1f       	adc	r17, r25
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	08 0f       	add	r16, r24
    1e8a:	19 1f       	adc	r17, r25
    1e8c:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    1e90:	6b 01       	movw	r12, r22
    1e92:	7c 01       	movw	r14, r24
    1e94:	0a 31       	cpi	r16, 0x1A	; 26
    1e96:	11 05       	cpc	r17, r1
    1e98:	0c f0       	brlt	.+2      	; 0x1e9c <checkLightLevel+0x50>
    1e9a:	43 c0       	rjmp	.+134    	; 0x1f22 <checkLightLevel+0xd6>
    1e9c:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <lastLightCheck>
    1ea0:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <lastLightCheck+0x1>
    1ea4:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <lastLightCheck+0x2>
    1ea8:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <lastLightCheck+0x3>
    1eac:	a7 01       	movw	r20, r14
    1eae:	96 01       	movw	r18, r12
    1eb0:	28 1b       	sub	r18, r24
    1eb2:	39 0b       	sbc	r19, r25
    1eb4:	4a 0b       	sbc	r20, r26
    1eb6:	5b 0b       	sbc	r21, r27
    1eb8:	ca 01       	movw	r24, r20
    1eba:	b9 01       	movw	r22, r18
    1ebc:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    1ec0:	2a e9       	ldi	r18, 0x9A	; 154
    1ec2:	39 e9       	ldi	r19, 0x99	; 153
    1ec4:	49 e9       	ldi	r20, 0x99	; 153
    1ec6:	5e e3       	ldi	r21, 0x3E	; 62
    1ec8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    1ecc:	9b 01       	movw	r18, r22
    1ece:	ac 01       	movw	r20, r24
    1ed0:	60 91 23 2a 	lds	r22, 0x2A23	; 0x802a23 <paddleChange>
    1ed4:	70 91 24 2a 	lds	r23, 0x2A24	; 0x802a24 <paddleChange+0x1>
    1ed8:	80 91 25 2a 	lds	r24, 0x2A25	; 0x802a25 <paddleChange+0x2>
    1edc:	90 91 26 2a 	lds	r25, 0x2A26	; 0x802a26 <paddleChange+0x3>
    1ee0:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    1ee4:	60 93 23 2a 	sts	0x2A23, r22	; 0x802a23 <paddleChange>
    1ee8:	70 93 24 2a 	sts	0x2A24, r23	; 0x802a24 <paddleChange+0x1>
    1eec:	80 93 25 2a 	sts	0x2A25, r24	; 0x802a25 <paddleChange+0x2>
    1ef0:	90 93 26 2a 	sts	0x2A26, r25	; 0x802a26 <paddleChange+0x3>
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <isCovered>
    1efa:	c0 92 9c 26 	sts	0x269C, r12	; 0x80269c <lastLightCheck>
    1efe:	d0 92 9d 26 	sts	0x269D, r13	; 0x80269d <lastLightCheck+0x1>
    1f02:	e0 92 9e 26 	sts	0x269E, r14	; 0x80269e <lastLightCheck+0x2>
    1f06:	f0 92 9f 26 	sts	0x269F, r15	; 0x80269f <lastLightCheck+0x3>
    1f0a:	26 96       	adiw	r28, 0x06	; 6
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	08 95       	ret
    1f22:	09 32       	cpi	r16, 0x29	; 41
    1f24:	11 05       	cpc	r17, r1
    1f26:	bc f4       	brge	.+46     	; 0x1f56 <checkLightLevel+0x10a>
    1f28:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <lastLightCheck>
    1f2c:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <lastLightCheck+0x1>
    1f30:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <lastLightCheck+0x2>
    1f34:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <lastLightCheck+0x3>
    1f38:	a7 01       	movw	r20, r14
    1f3a:	96 01       	movw	r18, r12
    1f3c:	28 1b       	sub	r18, r24
    1f3e:	39 0b       	sbc	r19, r25
    1f40:	4a 0b       	sbc	r20, r26
    1f42:	5b 0b       	sbc	r21, r27
    1f44:	ca 01       	movw	r24, r20
    1f46:	b9 01       	movw	r22, r18
    1f48:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    1f4c:	2d ec       	ldi	r18, 0xCD	; 205
    1f4e:	3c ec       	ldi	r19, 0xCC	; 204
    1f50:	4c e4       	ldi	r20, 0x4C	; 76
    1f52:	5e e3       	ldi	r21, 0x3E	; 62
    1f54:	b9 cf       	rjmp	.-142    	; 0x1ec8 <checkLightLevel+0x7c>
    1f56:	0d 33       	cpi	r16, 0x3D	; 61
    1f58:	11 05       	cpc	r17, r1
    1f5a:	bc f4       	brge	.+46     	; 0x1f8a <checkLightLevel+0x13e>
    1f5c:	80 91 9c 26 	lds	r24, 0x269C	; 0x80269c <lastLightCheck>
    1f60:	90 91 9d 26 	lds	r25, 0x269D	; 0x80269d <lastLightCheck+0x1>
    1f64:	a0 91 9e 26 	lds	r26, 0x269E	; 0x80269e <lastLightCheck+0x2>
    1f68:	b0 91 9f 26 	lds	r27, 0x269F	; 0x80269f <lastLightCheck+0x3>
    1f6c:	a7 01       	movw	r20, r14
    1f6e:	96 01       	movw	r18, r12
    1f70:	28 1b       	sub	r18, r24
    1f72:	39 0b       	sbc	r19, r25
    1f74:	4a 0b       	sbc	r20, r26
    1f76:	5b 0b       	sbc	r21, r27
    1f78:	ca 01       	movw	r24, r20
    1f7a:	b9 01       	movw	r22, r18
    1f7c:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    1f80:	2d ec       	ldi	r18, 0xCD	; 205
    1f82:	3c ec       	ldi	r19, 0xCC	; 204
    1f84:	4c ec       	ldi	r20, 0xCC	; 204
    1f86:	5d e3       	ldi	r21, 0x3D	; 61
    1f88:	9f cf       	rjmp	.-194    	; 0x1ec8 <checkLightLevel+0x7c>
    1f8a:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <isCovered>
    1f8e:	b5 cf       	rjmp	.-150    	; 0x1efa <checkLightLevel+0xae>

00001f90 <loop>:
    1f90:	0f 93       	push	r16
    1f92:	1f 93       	push	r17
    1f94:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    1f98:	00 91 6b 28 	lds	r16, 0x286B	; 0x80286b <frameStart>
    1f9c:	10 91 6c 28 	lds	r17, 0x286C	; 0x80286c <frameStart+0x1>
    1fa0:	20 91 6d 28 	lds	r18, 0x286D	; 0x80286d <frameStart+0x2>
    1fa4:	30 91 6e 28 	lds	r19, 0x286E	; 0x80286e <frameStart+0x3>
    1fa8:	60 1b       	sub	r22, r16
    1faa:	71 0b       	sbc	r23, r17
    1fac:	82 0b       	sbc	r24, r18
    1fae:	93 0b       	sbc	r25, r19
    1fb0:	6f 3e       	cpi	r22, 0xEF	; 239
    1fb2:	4a e3       	ldi	r20, 0x3A	; 58
    1fb4:	74 07       	cpc	r23, r20
    1fb6:	81 05       	cpc	r24, r1
    1fb8:	91 05       	cpc	r25, r1
    1fba:	20 f1       	brcs	.+72     	; 0x2004 <loop+0x74>
    1fbc:	6e 5e       	subi	r22, 0xEE	; 238
    1fbe:	7a 43       	sbci	r23, 0x3A	; 58
    1fc0:	81 09       	sbc	r24, r1
    1fc2:	91 09       	sbc	r25, r1
    1fc4:	02 51       	subi	r16, 0x12	; 18
    1fc6:	15 4c       	sbci	r17, 0xC5	; 197
    1fc8:	2f 4f       	sbci	r18, 0xFF	; 255
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	00 93 6b 28 	sts	0x286B, r16	; 0x80286b <frameStart>
    1fd0:	10 93 6c 28 	sts	0x286C, r17	; 0x80286c <frameStart+0x1>
    1fd4:	20 93 6d 28 	sts	0x286D, r18	; 0x80286d <frameStart+0x2>
    1fd8:	30 93 6e 28 	sts	0x286E, r19	; 0x80286e <frameStart+0x3>
    1fdc:	00 91 7e 28 	lds	r16, 0x287E	; 0x80287e <frameCount>
    1fe0:	10 91 7f 28 	lds	r17, 0x287F	; 0x80287f <frameCount+0x1>
    1fe4:	20 91 80 28 	lds	r18, 0x2880	; 0x802880 <frameCount+0x2>
    1fe8:	30 91 81 28 	lds	r19, 0x2881	; 0x802881 <frameCount+0x3>
    1fec:	0f 5f       	subi	r16, 0xFF	; 255
    1fee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff0:	2f 4f       	sbci	r18, 0xFF	; 255
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	00 93 7e 28 	sts	0x287E, r16	; 0x80287e <frameCount>
    1ff8:	10 93 7f 28 	sts	0x287F, r17	; 0x80287f <frameCount+0x1>
    1ffc:	20 93 80 28 	sts	0x2880, r18	; 0x802880 <frameCount+0x2>
    2000:	30 93 81 28 	sts	0x2881, r19	; 0x802881 <frameCount+0x3>
    2004:	2d e8       	ldi	r18, 0x8D	; 141
    2006:	31 e0       	ldi	r19, 0x01	; 1
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	0e 94 3b 77 	call	0xee76	; 0xee76 <__udivmodsi4>
    2010:	80 91 e5 27 	lds	r24, 0x27E5	; 0x8027e5 <loopID>
    2014:	90 91 e6 27 	lds	r25, 0x27E6	; 0x8027e6 <loopID+0x1>
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	82 17       	cp	r24, r18
    201e:	93 07       	cpc	r25, r19
    2020:	a4 07       	cpc	r26, r20
    2022:	b5 07       	cpc	r27, r21
    2024:	e9 f0       	breq	.+58     	; 0x2060 <loop+0xd0>
    2026:	c9 01       	movw	r24, r18
    2028:	20 93 e5 27 	sts	0x27E5, r18	; 0x8027e5 <loopID>
    202c:	30 93 e6 27 	sts	0x27E6, r19	; 0x8027e6 <loopID+0x1>
    2030:	20 91 e2 27 	lds	r18, 0x27E2	; 0x8027e2 <mySlot>
    2034:	30 91 e3 27 	lds	r19, 0x27E3	; 0x8027e3 <mySlot+0x1>
    2038:	82 17       	cp	r24, r18
    203a:	93 07       	cpc	r25, r19
    203c:	d9 f1       	breq	.+118    	; 0x20b4 <loop+0x124>
    203e:	85 97       	sbiw	r24, 0x25	; 37
    2040:	09 f4       	brne	.+2      	; 0x2044 <loop+0xb4>
    2042:	45 c0       	rjmp	.+138    	; 0x20ce <loop+0x13e>
    2044:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <theBall>
    2048:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <theBall+0x1>
    204c:	a0 91 3c 2a 	lds	r26, 0x2A3C	; 0x802a3c <theBall+0x2>
    2050:	b0 91 3d 2a 	lds	r27, 0x2A3D	; 0x802a3d <theBall+0x3>
    2054:	89 2b       	or	r24, r25
    2056:	8a 2b       	or	r24, r26
    2058:	8b 2b       	or	r24, r27
    205a:	49 f5       	brne	.+82     	; 0x20ae <loop+0x11e>
    205c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <updateColor>
    2060:	80 91 b4 26 	lds	r24, 0x26B4	; 0x8026b4 <myState>
    2064:	80 ff       	sbrs	r24, 0
    2066:	02 c0       	rjmp	.+4      	; 0x206c <loop+0xdc>
    2068:	83 71       	andi	r24, 0x13	; 19
    206a:	f1 f4       	brne	.+60     	; 0x20a8 <loop+0x118>
    206c:	80 91 7a 28 	lds	r24, 0x287A	; 0x80287a <rnb_updated>
    2070:	88 23       	and	r24, r24
    2072:	a1 f0       	breq	.+40     	; 0x209c <loop+0x10c>
    2074:	20 91 73 28 	lds	r18, 0x2873	; 0x802873 <last_good_rnb+0x4>
    2078:	30 91 74 28 	lds	r19, 0x2874	; 0x802874 <last_good_rnb+0x5>
    207c:	40 91 71 28 	lds	r20, 0x2871	; 0x802871 <last_good_rnb+0x2>
    2080:	50 91 72 28 	lds	r21, 0x2872	; 0x802872 <last_good_rnb+0x3>
    2084:	60 91 6f 28 	lds	r22, 0x286F	; 0x80286f <last_good_rnb>
    2088:	70 91 70 28 	lds	r23, 0x2870	; 0x802870 <last_good_rnb+0x1>
    208c:	80 91 75 28 	lds	r24, 0x2875	; 0x802875 <last_good_rnb+0x6>
    2090:	90 91 76 28 	lds	r25, 0x2876	; 0x802876 <last_good_rnb+0x7>
    2094:	0e 94 17 34 	call	0x682e	; 0x682e <useRNBmeas>
    2098:	10 92 7a 28 	sts	0x287A, r1	; 0x80287a <rnb_updated>
    209c:	81 e1       	ldi	r24, 0x11	; 17
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <delay_ms>
    20a8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <checkLightLevel>
    20ac:	df cf       	rjmp	.-66     	; 0x206c <loop+0xdc>
    20ae:	0e 94 c1 0a 	call	0x1582	; 0x1582 <updateBall.part.1>
    20b2:	d4 cf       	rjmp	.-88     	; 0x205c <loop+0xcc>
    20b4:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <broadcast_rnb_data>
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4d e9       	ldi	r20, 0x9D	; 157
    20be:	5a e0       	ldi	r21, 0x0A	; 10
    20c0:	60 ef       	ldi	r22, 0xF0	; 240
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    20cc:	bb cf       	rjmp	.-138    	; 0x2044 <loop+0xb4>
    20ce:	2d e1       	ldi	r18, 0x1D	; 29
    20d0:	3a e0       	ldi	r19, 0x0A	; 10
    20d2:	48 e0       	ldi	r20, 0x08	; 8
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	6d e0       	ldi	r22, 0x0D	; 13
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	8a ee       	ldi	r24, 0xEA	; 234
    20dc:	97 e2       	ldi	r25, 0x27	; 39
    20de:	0e 94 ef 78 	call	0xf1de	; 0xf1de <qsort>
    20e2:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    20e6:	9f 93       	push	r25
    20e8:	8f 93       	push	r24
    20ea:	7f 93       	push	r23
    20ec:	6f 93       	push	r22
    20ee:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <droplet_ID+0x1>
    20f2:	8f 93       	push	r24
    20f4:	80 91 99 26 	lds	r24, 0x2699	; 0x802699 <droplet_ID>
    20f8:	8f 93       	push	r24
    20fa:	8b e1       	ldi	r24, 0x1B	; 27
    20fc:	95 e0       	ldi	r25, 0x05	; 5
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    2106:	8d b7       	in	r24, 0x3d	; 61
    2108:	9e b7       	in	r25, 0x3e	; 62
    210a:	08 96       	adiw	r24, 0x08	; 8
    210c:	8d bf       	out	0x3d, r24	; 61
    210e:	9e bf       	out	0x3e, r25	; 62
    2110:	80 91 b4 26 	lds	r24, 0x26B4	; 0x8026b4 <myState>
    2114:	81 31       	cpi	r24, 0x11	; 17
    2116:	09 f4       	brne	.+2      	; 0x211a <loop+0x18a>
    2118:	92 c0       	rjmp	.+292    	; 0x223e <loop+0x2ae>
    211a:	83 31       	cpi	r24, 0x13	; 19
    211c:	09 f4       	brne	.+2      	; 0x2120 <loop+0x190>
    211e:	81 c0       	rjmp	.+258    	; 0x2222 <loop+0x292>
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	09 f4       	brne	.+2      	; 0x2126 <loop+0x196>
    2124:	95 c0       	rjmp	.+298    	; 0x2250 <loop+0x2c0>
    2126:	8a e2       	ldi	r24, 0x2A	; 42
    2128:	91 e2       	ldi	r25, 0x21	; 33
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	88 e1       	ldi	r24, 0x18	; 24
    2138:	95 e0       	ldi	r25, 0x05	; 5
    213a:	9f 93       	push	r25
    213c:	8f 93       	push	r24
    213e:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    2142:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPos>
    2146:	90 91 35 2a 	lds	r25, 0x2A35	; 0x802a35 <myPos+0x1>
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	81 15       	cp	r24, r1
    2150:	20 e8       	ldi	r18, 0x80	; 128
    2152:	92 07       	cpc	r25, r18
    2154:	09 f4       	brne	.+2      	; 0x2158 <loop+0x1c8>
    2156:	6e c0       	rjmp	.+220    	; 0x2234 <loop+0x2a4>
    2158:	20 91 36 2a 	lds	r18, 0x2A36	; 0x802a36 <myPos+0x2>
    215c:	30 91 37 2a 	lds	r19, 0x2A37	; 0x802a37 <myPos+0x3>
    2160:	21 15       	cp	r18, r1
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	34 07       	cpc	r19, r20
    2166:	09 f4       	brne	.+2      	; 0x216a <loop+0x1da>
    2168:	65 c0       	rjmp	.+202    	; 0x2234 <loop+0x2a4>
    216a:	40 91 38 2a 	lds	r20, 0x2A38	; 0x802a38 <myPos+0x4>
    216e:	50 91 39 2a 	lds	r21, 0x2A39	; 0x802a39 <myPos+0x5>
    2172:	41 15       	cp	r20, r1
    2174:	60 e8       	ldi	r22, 0x80	; 128
    2176:	56 07       	cpc	r21, r22
    2178:	09 f4       	brne	.+2      	; 0x217c <loop+0x1ec>
    217a:	5c c0       	rjmp	.+184    	; 0x2234 <loop+0x2a4>
    217c:	5f 93       	push	r21
    217e:	4f 93       	push	r20
    2180:	3f 93       	push	r19
    2182:	2f 93       	push	r18
    2184:	9f 93       	push	r25
    2186:	8f 93       	push	r24
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	95 e0       	ldi	r25, 0x05	; 5
    218c:	9f 93       	push	r25
    218e:	8f 93       	push	r24
    2190:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    2194:	82 ea       	ldi	r24, 0xA2	; 162
    2196:	96 e2       	ldi	r25, 0x26	; 38
    2198:	0e 94 b9 39 	call	0x7372	; 0x7372 <printPosCovar>
    219c:	80 e3       	ldi	r24, 0x30	; 48
    219e:	91 e2       	ldi	r25, 0x21	; 33
    21a0:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
    21a4:	8d b7       	in	r24, 0x3d	; 61
    21a6:	9e b7       	in	r25, 0x3e	; 62
    21a8:	08 96       	adiw	r24, 0x08	; 8
    21aa:	8d bf       	out	0x3d, r24	; 61
    21ac:	9e bf       	out	0x3e, r25	; 62
    21ae:	80 91 3e 2a 	lds	r24, 0x2A3E	; 0x802a3e <theBall+0x4>
    21b2:	90 91 3f 2a 	lds	r25, 0x2A3F	; 0x802a3f <theBall+0x5>
    21b6:	81 15       	cp	r24, r1
    21b8:	20 e8       	ldi	r18, 0x80	; 128
    21ba:	92 07       	cpc	r25, r18
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <loop+0x230>
    21be:	42 cf       	rjmp	.-380    	; 0x2044 <loop+0xb4>
    21c0:	20 91 40 2a 	lds	r18, 0x2A40	; 0x802a40 <theBall+0x6>
    21c4:	30 91 41 2a 	lds	r19, 0x2A41	; 0x802a41 <theBall+0x7>
    21c8:	21 15       	cp	r18, r1
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	34 07       	cpc	r19, r20
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <loop+0x242>
    21d0:	39 cf       	rjmp	.-398    	; 0x2044 <loop+0xb4>
    21d2:	40 91 43 2a 	lds	r20, 0x2A43	; 0x802a43 <theBall+0x9>
    21d6:	64 2f       	mov	r22, r20
    21d8:	04 2e       	mov	r0, r20
    21da:	00 0c       	add	r0, r0
    21dc:	77 0b       	sbc	r23, r23
    21de:	7f 93       	push	r23
    21e0:	4f 93       	push	r20
    21e2:	40 91 42 2a 	lds	r20, 0x2A42	; 0x802a42 <theBall+0x8>
    21e6:	64 2f       	mov	r22, r20
    21e8:	04 2e       	mov	r0, r20
    21ea:	00 0c       	add	r0, r0
    21ec:	77 0b       	sbc	r23, r23
    21ee:	7f 93       	push	r23
    21f0:	4f 93       	push	r20
    21f2:	3f 93       	push	r19
    21f4:	2f 93       	push	r18
    21f6:	9f 93       	push	r25
    21f8:	8f 93       	push	r24
    21fa:	80 91 45 2a 	lds	r24, 0x2A45	; 0x802a45 <theBall+0xb>
    21fe:	1f 92       	push	r1
    2200:	8f 93       	push	r24
    2202:	80 91 44 2a 	lds	r24, 0x2A44	; 0x802a44 <theBall+0xa>
    2206:	1f 92       	push	r1
    2208:	8f 93       	push	r24
    220a:	83 ec       	ldi	r24, 0xC3	; 195
    220c:	94 e0       	ldi	r25, 0x04	; 4
    220e:	9f 93       	push	r25
    2210:	8f 93       	push	r24
    2212:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    2216:	8d b7       	in	r24, 0x3d	; 61
    2218:	9e b7       	in	r25, 0x3e	; 62
    221a:	0e 96       	adiw	r24, 0x0e	; 14
    221c:	8d bf       	out	0x3d, r24	; 61
    221e:	9e bf       	out	0x3e, r25	; 62
    2220:	11 cf       	rjmp	.-478    	; 0x2044 <loop+0xb4>
    2222:	8e e1       	ldi	r24, 0x1E	; 30
    2224:	91 e2       	ldi	r25, 0x21	; 33
    2226:	9f 93       	push	r25
    2228:	8f 93       	push	r24
    222a:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	81 cf       	rjmp	.-254    	; 0x2136 <loop+0x1a6>
    2234:	8e e2       	ldi	r24, 0x2E	; 46
    2236:	91 e2       	ldi	r25, 0x21	; 33
    2238:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
    223c:	b8 cf       	rjmp	.-144    	; 0x21ae <loop+0x21e>
    223e:	82 e1       	ldi	r24, 0x12	; 18
    2240:	91 e2       	ldi	r25, 0x21	; 33
    2242:	9f 93       	push	r25
    2244:	8f 93       	push	r24
    2246:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	73 cf       	rjmp	.-282    	; 0x2136 <loop+0x1a6>
    2250:	88 e1       	ldi	r24, 0x18	; 24
    2252:	91 e2       	ldi	r25, 0x21	; 33
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	6a cf       	rjmp	.-300    	; 0x2136 <loop+0x1a6>

00002262 <handleBallMsg>:
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	bf 92       	push	r11
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	6c 01       	movw	r12, r24
    227a:	4a 01       	movw	r8, r20
    227c:	5b 01       	movw	r10, r22
    227e:	fc 01       	movw	r30, r24
    2280:	83 81       	ldd	r24, Z+3	; 0x03
    2282:	08 2f       	mov	r16, r24
    2284:	05 95       	asr	r16
    2286:	05 95       	asr	r16
    2288:	05 95       	asr	r16
    228a:	05 95       	asr	r16
    228c:	05 95       	asr	r16
    228e:	00 2e       	mov	r0, r16
    2290:	00 0c       	add	r0, r0
    2292:	11 0b       	sbc	r17, r17
    2294:	10 2f       	mov	r17, r16
    2296:	00 27       	eor	r16, r16
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	09 2b       	or	r16, r25
    229c:	f8 e0       	ldi	r31, 0x08	; 8
    229e:	8f 02       	muls	r24, r31
    22a0:	70 01       	movw	r14, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	f5 94       	asr	r15
    22a6:	e7 94       	ror	r14
    22a8:	f5 94       	asr	r15
    22aa:	e7 94       	ror	r14
    22ac:	f5 94       	asr	r15
    22ae:	e7 94       	ror	r14
    22b0:	f5 94       	asr	r15
    22b2:	e7 94       	ror	r14
    22b4:	f5 94       	asr	r15
    22b6:	e7 94       	ror	r14
    22b8:	fe 2c       	mov	r15, r14
    22ba:	ee 24       	eor	r14, r14
    22bc:	f6 01       	movw	r30, r12
    22be:	92 81       	ldd	r25, Z+2	; 0x02
    22c0:	e9 2a       	or	r14, r25
    22c2:	c6 81       	ldd	r28, Z+6	; 0x06
    22c4:	c3 70       	andi	r28, 0x03	; 3
    22c6:	cc 0f       	add	r28, r28
    22c8:	cc 0f       	add	r28, r28
    22ca:	83 70       	andi	r24, 0x03	; 3
    22cc:	c8 2b       	or	r28, r24
    22ce:	cf 30       	cpi	r28, 0x0F	; 15
    22d0:	91 f1       	breq	.+100    	; 0x2336 <handleBallMsg+0xd4>
    22d2:	80 91 e9 27 	lds	r24, 0x27E9	; 0x8027e9 <lastBallID>
    22d6:	c8 17       	cp	r28, r24
    22d8:	d1 f1       	breq	.+116    	; 0x234e <handleBallMsg+0xec>
    22da:	00 93 3e 2a 	sts	0x2A3E, r16	; 0x802a3e <theBall+0x4>
    22de:	10 93 3f 2a 	sts	0x2A3F, r17	; 0x802a3f <theBall+0x5>
    22e2:	e0 92 40 2a 	sts	0x2A40, r14	; 0x802a40 <theBall+0x6>
    22e6:	f0 92 41 2a 	sts	0x2A41, r15	; 0x802a41 <theBall+0x7>
    22ea:	c0 93 44 2a 	sts	0x2A44, r28	; 0x802a44 <theBall+0xa>
    22ee:	f6 01       	movw	r30, r12
    22f0:	84 81       	ldd	r24, Z+4	; 0x04
    22f2:	80 93 42 2a 	sts	0x2A42, r24	; 0x802a42 <theBall+0x8>
    22f6:	85 81       	ldd	r24, Z+5	; 0x05
    22f8:	80 93 43 2a 	sts	0x2A43, r24	; 0x802a43 <theBall+0x9>
    22fc:	86 81       	ldd	r24, Z+6	; 0x06
    22fe:	8c 7f       	andi	r24, 0xFC	; 252
    2300:	80 93 45 2a 	sts	0x2A45, r24	; 0x802a45 <theBall+0xb>
    2304:	f4 e0       	ldi	r31, 0x04	; 4
    2306:	8f 1a       	sub	r8, r31
    2308:	91 08       	sbc	r9, r1
    230a:	a1 08       	sbc	r10, r1
    230c:	b1 08       	sbc	r11, r1
    230e:	80 92 3a 2a 	sts	0x2A3A, r8	; 0x802a3a <theBall>
    2312:	90 92 3b 2a 	sts	0x2A3B, r9	; 0x802a3b <theBall+0x1>
    2316:	a0 92 3c 2a 	sts	0x2A3C, r10	; 0x802a3c <theBall+0x2>
    231a:	b0 92 3d 2a 	sts	0x2A3D, r11	; 0x802a3d <theBall+0x3>
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	df 90       	pop	r13
    232a:	cf 90       	pop	r12
    232c:	bf 90       	pop	r11
    232e:	af 90       	pop	r10
    2330:	9f 90       	pop	r9
    2332:	8f 90       	pop	r8
    2334:	08 95       	ret
    2336:	80 91 44 2a 	lds	r24, 0x2A44	; 0x802a44 <theBall+0xa>
    233a:	8f 30       	cpi	r24, 0x0F	; 15
    233c:	69 f0       	breq	.+26     	; 0x2358 <handleBallMsg+0xf6>
    233e:	80 93 e9 27 	sts	0x27E9, r24	; 0x8027e9 <lastBallID>
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    234c:	c6 cf       	rjmp	.-116    	; 0x22da <handleBallMsg+0x78>
    234e:	80 91 44 2a 	lds	r24, 0x2A44	; 0x802a44 <theBall+0xa>
    2352:	8f 30       	cpi	r24, 0x0F	; 15
    2354:	11 f6       	brne	.-124    	; 0x22da <handleBallMsg+0x78>
    2356:	e3 cf       	rjmp	.-58     	; 0x231e <handleBallMsg+0xbc>
    2358:	80 91 e9 27 	lds	r24, 0x27E9	; 0x8027e9 <lastBallID>
    235c:	c8 13       	cpse	r28, r24
    235e:	bd cf       	rjmp	.-134    	; 0x22da <handleBallMsg+0x78>
    2360:	de cf       	rjmp	.-68     	; 0x231e <handleBallMsg+0xbc>

00002362 <handle_msg>:
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	dc 01       	movw	r26, r24
    236e:	16 96       	adiw	r26, 0x06	; 6
    2370:	ed 91       	ld	r30, X+
    2372:	fc 91       	ld	r31, X
    2374:	17 97       	sbiw	r26, 0x07	; 7
    2376:	20 81       	ld	r18, Z
    2378:	22 34       	cpi	r18, 0x42	; 66
    237a:	09 f4       	brne	.+2      	; 0x237e <handle_msg+0x1c>
    237c:	76 c0       	rjmp	.+236    	; 0x246a <handle_msg+0x108>
    237e:	19 96       	adiw	r26, 0x09	; 9
    2380:	2c 91       	ld	r18, X
    2382:	19 97       	sbiw	r26, 0x09	; 9
    2384:	32 89       	ldd	r19, Z+18	; 0x12
    2386:	38 35       	cpi	r19, 0x58	; 88
    2388:	09 f4       	brne	.+2      	; 0x238c <handle_msg+0x2a>
    238a:	81 c0       	rjmp	.+258    	; 0x248e <handle_msg+0x12c>
    238c:	8d 01       	movw	r16, r26
    238e:	86 81       	ldd	r24, Z+6	; 0x06
    2390:	80 35       	cpi	r24, 0x50	; 80
    2392:	09 f4       	brne	.+2      	; 0x2396 <handle_msg+0x34>
    2394:	43 c0       	rjmp	.+134    	; 0x241c <handle_msg+0xba>
    2396:	d8 01       	movw	r26, r16
    2398:	15 96       	adiw	r26, 0x05	; 5
    239a:	8c 91       	ld	r24, X
    239c:	15 97       	sbiw	r26, 0x05	; 5
    239e:	8f 93       	push	r24
    23a0:	14 96       	adiw	r26, 0x04	; 4
    23a2:	8c 91       	ld	r24, X
    23a4:	8f 93       	push	r24
    23a6:	1f 92       	push	r1
    23a8:	2f 93       	push	r18
    23aa:	88 ea       	ldi	r24, 0xA8	; 168
    23ac:	94 e0       	ldi	r25, 0x04	; 4
    23ae:	9f 93       	push	r25
    23b0:	8f 93       	push	r24
    23b2:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	f8 01       	movw	r30, r16
    23c4:	81 85       	ldd	r24, Z+9	; 0x09
    23c6:	88 23       	and	r24, r24
    23c8:	01 f1       	breq	.+64     	; 0x240a <handle_msg+0xa8>
    23ca:	c0 e0       	ldi	r28, 0x00	; 0
    23cc:	8c e4       	ldi	r24, 0x4C	; 76
    23ce:	e8 2e       	mov	r14, r24
    23d0:	81 e2       	ldi	r24, 0x21	; 33
    23d2:	f8 2e       	mov	r15, r24
    23d4:	d8 01       	movw	r26, r16
    23d6:	16 96       	adiw	r26, 0x06	; 6
    23d8:	ed 91       	ld	r30, X+
    23da:	fc 91       	ld	r31, X
    23dc:	17 97       	sbiw	r26, 0x07	; 7
    23de:	ec 0f       	add	r30, r28
    23e0:	f1 1d       	adc	r31, r1
    23e2:	90 81       	ld	r25, Z
    23e4:	29 2f       	mov	r18, r25
    23e6:	09 2e       	mov	r0, r25
    23e8:	00 0c       	add	r0, r0
    23ea:	33 0b       	sbc	r19, r19
    23ec:	3f 93       	push	r19
    23ee:	9f 93       	push	r25
    23f0:	ff 92       	push	r15
    23f2:	ef 92       	push	r14
    23f4:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    23f8:	cf 5f       	subi	r28, 0xFF	; 255
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	f8 01       	movw	r30, r16
    2404:	81 85       	ldd	r24, Z+9	; 0x09
    2406:	c8 17       	cp	r28, r24
    2408:	28 f3       	brcs	.-54     	; 0x23d4 <handle_msg+0x72>
    240a:	80 e3       	ldi	r24, 0x30	; 48
    240c:	91 e2       	ldi	r25, 0x21	; 33
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	0c 94 1a 7e 	jmp	0xfc34	; 0xfc34 <puts>
    241c:	27 30       	cpi	r18, 0x07	; 7
    241e:	09 f0       	breq	.+2      	; 0x2422 <handle_msg+0xc0>
    2420:	ba cf       	rjmp	.-140    	; 0x2396 <handle_msg+0x34>
    2422:	85 81       	ldd	r24, Z+5	; 0x05
    2424:	8f 93       	push	r24
    2426:	84 81       	ldd	r24, Z+4	; 0x04
    2428:	8f 93       	push	r24
    242a:	83 81       	ldd	r24, Z+3	; 0x03
    242c:	8f 93       	push	r24
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	8f 93       	push	r24
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	8f 93       	push	r24
    2436:	80 81       	ld	r24, Z
    2438:	8f 93       	push	r24
    243a:	15 96       	adiw	r26, 0x05	; 5
    243c:	8c 91       	ld	r24, X
    243e:	15 97       	sbiw	r26, 0x05	; 5
    2440:	8f 93       	push	r24
    2442:	14 96       	adiw	r26, 0x04	; 4
    2444:	8c 91       	ld	r24, X
    2446:	8f 93       	push	r24
    2448:	82 e3       	ldi	r24, 0x32	; 50
    244a:	91 e2       	ldi	r25, 0x21	; 33
    244c:	9f 93       	push	r25
    244e:	8f 93       	push	r24
    2450:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    2454:	8d b7       	in	r24, 0x3d	; 61
    2456:	9e b7       	in	r25, 0x3e	; 62
    2458:	0a 96       	adiw	r24, 0x0a	; 10
    245a:	8d bf       	out	0x3d, r24	; 61
    245c:	9e bf       	out	0x3e, r25	; 62
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	08 95       	ret
    246a:	19 96       	adiw	r26, 0x09	; 9
    246c:	2c 91       	ld	r18, X
    246e:	19 97       	sbiw	r26, 0x09	; 9
    2470:	27 30       	cpi	r18, 0x07	; 7
    2472:	09 f0       	breq	.+2      	; 0x2476 <handle_msg+0x114>
    2474:	87 cf       	rjmp	.-242    	; 0x2384 <handle_msg+0x22>
    2476:	4d 91       	ld	r20, X+
    2478:	5d 91       	ld	r21, X+
    247a:	6d 91       	ld	r22, X+
    247c:	7c 91       	ld	r23, X
    247e:	cf 01       	movw	r24, r30
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <handleBallMsg>
    248e:	23 31       	cpi	r18, 0x13	; 19
    2490:	09 f0       	breq	.+2      	; 0x2494 <handle_msg+0x132>
    2492:	7c cf       	rjmp	.-264    	; 0x238c <handle_msg+0x2a>
    2494:	14 96       	adiw	r26, 0x04	; 4
    2496:	6d 91       	ld	r22, X+
    2498:	7c 91       	ld	r23, X
    249a:	15 97       	sbiw	r26, 0x05	; 5
    249c:	cf 01       	movw	r24, r30
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	0c 94 7b 38 	jmp	0x70f6	; 0x70f6 <handleBotMeasMsg>

000024ac <user_handle_command>:

/*
 *	the function below is optional - commenting it in can be useful for debugging if you want to query
 *	user variables over a serial connection.
 */
uint8_t user_handle_command(char* command_word, char* command_args){
    24ac:	4f 92       	push	r4
    24ae:	5f 92       	push	r5
    24b0:	6f 92       	push	r6
    24b2:	7f 92       	push	r7
    24b4:	8f 92       	push	r8
    24b6:	9f 92       	push	r9
    24b8:	af 92       	push	r10
    24ba:	bf 92       	push	r11
    24bc:	cf 92       	push	r12
    24be:	df 92       	push	r13
    24c0:	ef 92       	push	r14
    24c2:	ff 92       	push	r15
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	1f 92       	push	r1
    24ce:	1f 92       	push	r1
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	8c 01       	movw	r16, r24
    24d6:	7b 01       	movw	r14, r22
	if(strcmp_P(command_word,PSTR("ball"))==0){
    24d8:	63 ea       	ldi	r22, 0xA3	; 163
    24da:	74 e0       	ldi	r23, 0x04	; 4
    24dc:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    24e0:	89 2b       	or	r24, r25
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <user_handle_command+0x3a>
    24e4:	d7 c0       	rjmp	.+430    	; 0x2694 <user_handle_command+0x1e8>
		if(POS_DEFINED(&myPos)){
    24e6:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPos>
    24ea:	90 91 35 2a 	lds	r25, 0x2A35	; 0x802a35 <myPos+0x1>
    24ee:	81 15       	cp	r24, r1
    24f0:	90 48       	sbci	r25, 0x80	; 128
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <user_handle_command+0x4a>
    24f4:	f5 c0       	rjmp	.+490    	; 0x26e0 <user_handle_command+0x234>
    24f6:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <myPos+0x2>
    24fa:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <myPos+0x3>
    24fe:	81 15       	cp	r24, r1
    2500:	90 48       	sbci	r25, 0x80	; 128
    2502:	09 f4       	brne	.+2      	; 0x2506 <user_handle_command+0x5a>
    2504:	ed c0       	rjmp	.+474    	; 0x26e0 <user_handle_command+0x234>
    2506:	80 91 38 2a 	lds	r24, 0x2A38	; 0x802a38 <myPos+0x4>
    250a:	90 91 39 2a 	lds	r25, 0x2A39	; 0x802a39 <myPos+0x5>
    250e:	81 15       	cp	r24, r1
    2510:	90 48       	sbci	r25, 0x80	; 128
    2512:	09 f4       	brne	.+2      	; 0x2516 <user_handle_command+0x6a>
    2514:	e5 c0       	rjmp	.+458    	; 0x26e0 <user_handle_command+0x234>
			const char delim[2] = " ";
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	9a 83       	std	Y+2, r25	; 0x02
			char* token = strtok(command_args, delim);
    251e:	be 01       	movw	r22, r28
    2520:	6f 5f       	subi	r22, 0xFF	; 255
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	c7 01       	movw	r24, r14
    2526:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
			int8_t vel = (token!=NULL) ? (int8_t)atoi(token) : 10;
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	09 f4       	brne	.+2      	; 0x2530 <user_handle_command+0x84>
    252e:	22 c1       	rjmp	.+580    	; 0x2774 <user_handle_command+0x2c8>
    2530:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    2534:	d8 2e       	mov	r13, r24
    2536:	e8 2e       	mov	r14, r24
    2538:	88 0f       	add	r24, r24
    253a:	ff 08       	sbc	r15, r15
			token = strtok(NULL, delim);
    253c:	be 01       	movw	r22, r28
    253e:	6f 5f       	subi	r22, 0xFF	; 255
    2540:	7f 4f       	sbci	r23, 0xFF	; 255
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
			uint8_t size = (token!=NULL) ? (uint8_t)atoi(token) : 60;
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	09 f4       	brne	.+2      	; 0x2550 <user_handle_command+0xa4>
    254e:	18 c1       	rjmp	.+560    	; 0x2780 <user_handle_command+0x2d4>
    2550:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    2554:	8c 7f       	andi	r24, 0xFC	; 252
    2556:	c8 2e       	mov	r12, r24
			theBall.xPos = myPos.x;
    2558:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPos>
    255c:	90 91 35 2a 	lds	r25, 0x2A35	; 0x802a35 <myPos+0x1>
    2560:	80 93 3e 2a 	sts	0x2A3E, r24	; 0x802a3e <theBall+0x4>
    2564:	90 93 3f 2a 	sts	0x2A3F, r25	; 0x802a3f <theBall+0x5>
			theBall.yPos = myPos.y;
    2568:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <myPos+0x2>
    256c:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <myPos+0x3>
    2570:	80 93 40 2a 	sts	0x2A40, r24	; 0x802a40 <theBall+0x6>
    2574:	90 93 41 2a 	sts	0x2A41, r25	; 0x802a41 <theBall+0x7>
			int16_t randomdir = rand_short()%360;
    2578:	0e 94 6d 4f 	call	0x9eda	; 0x9eda <rand_short>
    257c:	8c 01       	movw	r16, r24
			theBall.xVel = vel*cos(deg_to_rad(randomdir));
    257e:	6d 2d       	mov	r22, r13
    2580:	dd 0c       	add	r13, r13
    2582:	77 0b       	sbc	r23, r23
    2584:	88 0b       	sbc	r24, r24
    2586:	99 0b       	sbc	r25, r25
    2588:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    258c:	4b 01       	movw	r8, r22
    258e:	5c 01       	movw	r10, r24
inline float rad_to_deg(float rad){
	return (pretty_angle(rad) / M_PI) * 180;
}

inline float deg_to_rad(float deg){
	return pretty_angle( (deg / 180) * M_PI );
    2590:	98 01       	movw	r18, r16
    2592:	a3 e8       	ldi	r26, 0x83	; 131
    2594:	bd e2       	ldi	r27, 0x2D	; 45
    2596:	0e 94 65 77 	call	0xeeca	; 0xeeca <__umulhisi3>
    259a:	00 24       	eor	r0, r0
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	00 1c       	adc	r0, r0
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	00 1c       	adc	r0, r0
    25a8:	89 2f       	mov	r24, r25
    25aa:	90 2d       	mov	r25, r0
    25ac:	48 e6       	ldi	r20, 0x68	; 104
    25ae:	51 e0       	ldi	r21, 0x01	; 1
    25b0:	84 9f       	mul	r24, r20
    25b2:	90 01       	movw	r18, r0
    25b4:	85 9f       	mul	r24, r21
    25b6:	30 0d       	add	r19, r0
    25b8:	94 9f       	mul	r25, r20
    25ba:	30 0d       	add	r19, r0
    25bc:	11 24       	eor	r1, r1
    25be:	b8 01       	movw	r22, r16
    25c0:	62 1b       	sub	r22, r18
    25c2:	73 0b       	sbc	r23, r19
    25c4:	07 2e       	mov	r0, r23
    25c6:	00 0c       	add	r0, r0
    25c8:	88 0b       	sbc	r24, r24
    25ca:	99 0b       	sbc	r25, r25
    25cc:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	44 e3       	ldi	r20, 0x34	; 52
    25d6:	53 e4       	ldi	r21, 0x43	; 67
    25d8:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    25dc:	2b ed       	ldi	r18, 0xDB	; 219
    25de:	3f e0       	ldi	r19, 0x0F	; 15
    25e0:	49 e4       	ldi	r20, 0x49	; 73
    25e2:	50 e4       	ldi	r21, 0x40	; 64
    25e4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    25e8:	2b 01       	movw	r4, r22
    25ea:	3c 01       	movw	r6, r24
inline int16_t pretty_angle_deg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float pretty_angle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	a9 01       	movw	r20, r18
    25f2:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    25f6:	2b ed       	ldi	r18, 0xDB	; 219
    25f8:	3f e0       	ldi	r19, 0x0F	; 15
    25fa:	49 e4       	ldi	r20, 0x49	; 73
    25fc:	50 e4       	ldi	r21, 0x40	; 64
    25fe:	87 fd       	sbrc	r24, 7
    2600:	a8 c0       	rjmp	.+336    	; 0x2752 <user_handle_command+0x2a6>
    2602:	c3 01       	movw	r24, r6
    2604:	b2 01       	movw	r22, r4
    2606:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    260a:	2b ed       	ldi	r18, 0xDB	; 219
    260c:	3f e0       	ldi	r19, 0x0F	; 15
    260e:	49 ec       	ldi	r20, 0xC9	; 201
    2610:	50 e4       	ldi	r21, 0x40	; 64
    2612:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    2616:	2b ed       	ldi	r18, 0xDB	; 219
    2618:	3f e0       	ldi	r19, 0x0F	; 15
    261a:	49 e4       	ldi	r20, 0x49	; 73
    261c:	50 e4       	ldi	r21, 0x40	; 64
    261e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    2622:	2b 01       	movw	r4, r22
    2624:	3c 01       	movw	r6, r24
    2626:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    262a:	9b 01       	movw	r18, r22
    262c:	ac 01       	movw	r20, r24
    262e:	c5 01       	movw	r24, r10
    2630:	b4 01       	movw	r22, r8
    2632:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    2636:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    263a:	60 93 42 2a 	sts	0x2A42, r22	; 0x802a42 <theBall+0x8>
			theBall.yVel = vel*sin(deg_to_rad(randomdir));
    263e:	c3 01       	movw	r24, r6
    2640:	b2 01       	movw	r22, r4
    2642:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    2646:	9b 01       	movw	r18, r22
    2648:	ac 01       	movw	r20, r24
    264a:	c5 01       	movw	r24, r10
    264c:	b4 01       	movw	r22, r8
    264e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    2652:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    2656:	60 93 43 2a 	sts	0x2A43, r22	; 0x802a43 <theBall+0x9>
			theBall.id = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 44 2a 	sts	0x2A44, r24	; 0x802a44 <theBall+0xa>
			theBall.radius = size&0xfc;
    2660:	c0 92 45 2a 	sts	0x2A45, r12	; 0x802a45 <theBall+0xb>
			theBall.lastUpdate = get_time();
    2664:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    2668:	60 93 3a 2a 	sts	0x2A3A, r22	; 0x802a3a <theBall>
    266c:	70 93 3b 2a 	sts	0x2A3B, r23	; 0x802a3b <theBall+0x1>
    2670:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <theBall+0x2>
    2674:	90 93 3d 2a 	sts	0x2A3D, r25	; 0x802a3d <theBall+0x3>
			printf("got ball command. velocity: %hd\r\n", vel);
    2678:	ff 92       	push	r15
    267a:	ef 92       	push	r14
    267c:	83 e5       	ldi	r24, 0x53	; 83
    267e:	91 e2       	ldi	r25, 0x21	; 33
    2680:	9f 93       	push	r25
    2682:	8f 93       	push	r24
    2684:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
 *	the function below is optional - commenting it in can be useful for debugging if you want to query
 *	user variables over a serial connection.
 */
uint8_t user_handle_command(char* command_word, char* command_args){
	if(strcmp_P(command_word,PSTR("ball"))==0){
		if(POS_DEFINED(&myPos)){
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
			uint8_t r = get_red_led();
			set_red_led(255);
			printf("got ball command, but i don't know where i am yet.\r\n");
			set_red_led(r);
		}
		return 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
 *	the function below is optional - commenting it in can be useful for debugging if you want to query
 *	user variables over a serial connection.
 */
uint8_t user_handle_command(char* command_word, char* command_args){
	if(strcmp_P(command_word,PSTR("ball"))==0){
		if(POS_DEFINED(&myPos)){
    2692:	3a c0       	rjmp	.+116    	; 0x2708 <user_handle_command+0x25c>
			set_red_led(255);
			printf("got ball command, but i don't know where i am yet.\r\n");
			set_red_led(r);
		}
		return 1;
	}else if(strcmp_P(command_word,PSTR("mode"))==0){
    2694:	6e e9       	ldi	r22, 0x9E	; 158
    2696:	74 e0       	ldi	r23, 0x04	; 4
    2698:	c8 01       	movw	r24, r16
    269a:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    269e:	89 2b       	or	r24, r25
    26a0:	b1 f4       	brne	.+44     	; 0x26ce <user_handle_command+0x222>
		switch(command_args[0]){
    26a2:	f7 01       	movw	r30, r14
    26a4:	80 81       	ld	r24, Z
    26a6:	87 36       	cpi	r24, 0x67	; 103
    26a8:	09 f4       	brne	.+2      	; 0x26ac <user_handle_command+0x200>
    26aa:	4b c0       	rjmp	.+150    	; 0x2742 <user_handle_command+0x296>
    26ac:	80 37       	cpi	r24, 0x70	; 112
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <user_handle_command+0x206>
    26b0:	48 c0       	rjmp	.+144    	; 0x2742 <user_handle_command+0x296>
			case 'p': colorMode = POS;		break;
    26b2:	10 92 f2 29 	sts	0x29F2, r1	; 0x8029f2 <colorMode>
			case 'g': colorMode = GAME;		break;
			default:  colorMode = GAME;		break;
		}
		switch(command_args[1]){
    26b6:	f7 01       	movw	r30, r14
    26b8:	81 81       	ldd	r24, Z+1	; 0x01
    26ba:	82 36       	cpi	r24, 0x62	; 98
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <user_handle_command+0x214>
    26be:	45 c0       	rjmp	.+138    	; 0x274a <user_handle_command+0x29e>
    26c0:	80 37       	cpi	r24, 0x70	; 112
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <user_handle_command+0x21a>
    26c4:	42 c0       	rjmp	.+132    	; 0x274a <user_handle_command+0x29e>
			case 'p': gameMode = PONG;		break;
    26c6:	10 92 e4 27 	sts	0x27E4, r1	; 0x8027e4 <gameMode>
			case 'b': gameMode = BOUNCE;	break;
			default:  gameMode = BOUNCE;	break;
		}
		return 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
			case 'p': colorMode = POS;		break;
			case 'g': colorMode = GAME;		break;
			default:  colorMode = GAME;		break;
		}
		switch(command_args[1]){
			case 'p': gameMode = PONG;		break;
    26cc:	1d c0       	rjmp	.+58     	; 0x2708 <user_handle_command+0x25c>
			case 'b': gameMode = BOUNCE;	break;
			default:  gameMode = BOUNCE;	break;
		}
		return 1;
	}else if(strcmp_P(command_word, PSTR("ball_kill"))==0){
    26ce:	64 e9       	ldi	r22, 0x94	; 148
    26d0:	74 e0       	ldi	r23, 0x04	; 4
    26d2:	c8 01       	movw	r24, r16
    26d4:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    26d8:	89 2b       	or	r24, r25
    26da:	49 f1       	breq	.+82     	; 0x272e <user_handle_command+0x282>
		killBall();
		return 1;
	}
	return 0;
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <user_handle_command+0x25c>
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
    26e0:	00 91 7a 0a 	lds	r16, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    26e4:	10 91 7b 0a 	lds	r17, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    26f0:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
			theBall.lastUpdate = get_time();
			printf("got ball command. velocity: %hd\r\n", vel);
		}else{
			uint8_t r = get_red_led();
			set_red_led(255);
			printf("got ball command, but i don't know where i am yet.\r\n");
    26f4:	85 e7       	ldi	r24, 0x75	; 117
    26f6:	91 e2       	ldi	r25, 0x21	; 33
    26f8:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
    26fc:	11 27       	eor	r17, r17
    26fe:	00 93 7a 0a 	sts	0x0A7A, r16	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    2702:	10 93 7b 0a 	sts	0x0A7B, r17	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
			set_red_led(r);
		}
		return 1;
    2706:	81 e0       	ldi	r24, 0x01	; 1
	}else if(strcmp_P(command_word, PSTR("ball_kill"))==0){
		killBall();
		return 1;
	}
	return 0;
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	7f 90       	pop	r7
    2726:	6f 90       	pop	r6
    2728:	5f 90       	pop	r5
    272a:	4f 90       	pop	r4
    272c:	08 95       	ret
		return 0;
	}
}

inline static void killBall(void){
	set_rgb(255,0,0);
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	8f ef       	ldi	r24, 0xFF	; 255
    2734:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
	theBall.id = 0x0F;
    2738:	8f e0       	ldi	r24, 0x0F	; 15
    273a:	80 93 44 2a 	sts	0x2A44, r24	; 0x802a44 <theBall+0xa>
			default:  gameMode = BOUNCE;	break;
		}
		return 1;
	}else if(strcmp_P(command_word, PSTR("ball_kill"))==0){
		killBall();
		return 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	e3 cf       	rjmp	.-58     	; 0x2708 <user_handle_command+0x25c>
		return 1;
	}else if(strcmp_P(command_word,PSTR("mode"))==0){
		switch(command_args[0]){
			case 'p': colorMode = POS;		break;
			case 'g': colorMode = GAME;		break;
			default:  colorMode = GAME;		break;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	80 93 f2 29 	sts	0x29F2, r24	; 0x8029f2 <colorMode>
    2748:	b6 cf       	rjmp	.-148    	; 0x26b6 <user_handle_command+0x20a>
		}
		switch(command_args[1]){
			case 'p': gameMode = PONG;		break;
			case 'b': gameMode = BOUNCE;	break;
			default:  gameMode = BOUNCE;	break;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	80 93 e4 27 	sts	0x27E4, r24	; 0x8027e4 <gameMode>
    2750:	db cf       	rjmp	.-74     	; 0x2708 <user_handle_command+0x25c>
    2752:	c3 01       	movw	r24, r6
    2754:	b2 01       	movw	r22, r4
    2756:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    275a:	2b ed       	ldi	r18, 0xDB	; 219
    275c:	3f e0       	ldi	r19, 0x0F	; 15
    275e:	49 ec       	ldi	r20, 0xC9	; 201
    2760:	50 e4       	ldi	r21, 0x40	; 64
    2762:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    2766:	2b ed       	ldi	r18, 0xDB	; 219
    2768:	3f e0       	ldi	r19, 0x0F	; 15
    276a:	49 e4       	ldi	r20, 0x49	; 73
    276c:	50 e4       	ldi	r21, 0x40	; 64
    276e:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    2772:	57 cf       	rjmp	.-338    	; 0x2622 <user_handle_command+0x176>
    2774:	4a e0       	ldi	r20, 0x0A	; 10
    2776:	e4 2e       	mov	r14, r20
    2778:	f1 2c       	mov	r15, r1
uint8_t user_handle_command(char* command_word, char* command_args){
	if(strcmp_P(command_word,PSTR("ball"))==0){
		if(POS_DEFINED(&myPos)){
			const char delim[2] = " ";
			char* token = strtok(command_args, delim);
			int8_t vel = (token!=NULL) ? (int8_t)atoi(token) : 10;
    277a:	5a e0       	ldi	r21, 0x0A	; 10
    277c:	d5 2e       	mov	r13, r21
    277e:	de ce       	rjmp	.-580    	; 0x253c <user_handle_command+0x90>
    2780:	3c e3       	ldi	r19, 0x3C	; 60
    2782:	c3 2e       	mov	r12, r19
    2784:	e9 ce       	rjmp	.-558    	; 0x2558 <user_handle_command+0xac>

00002786 <delay_ms>:
#include "droplet_base.h"

void delay_ms(uint16_t ms){
    2786:	cf 92       	push	r12
    2788:	df 92       	push	r13
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    2790:	f8 94       	cli
    2792:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    2796:	78 94       	sei
	end_time = cur_time + ms;
    2798:	9b 01       	movw	r18, r22
    279a:	ac 01       	movw	r20, r24
    279c:	2e 0d       	add	r18, r14
    279e:	3f 1d       	adc	r19, r15
    27a0:	41 1d       	adc	r20, r1
    27a2:	51 1d       	adc	r21, r1
    27a4:	69 01       	movw	r12, r18
    27a6:	7a 01       	movw	r14, r20
    27a8:	05 c0       	rjmp	.+10     	; 0x27b4 <delay_ms+0x2e>
		cli();
		if (get_time() >= end_time){
			sei();
			return;
		}
		sei();
    27aa:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27ac:	3a e6       	ldi	r19, 0x6A	; 106
    27ae:	3a 95       	dec	r19
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <delay_ms+0x28>
    27b2:	00 c0       	rjmp	.+0      	; 0x27b4 <delay_ms+0x2e>
void delay_ms(uint16_t ms){
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
	end_time = cur_time + ms;
	while (1){
		cli();
    27b4:	f8 94       	cli
		if (get_time() >= end_time){
    27b6:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    27ba:	6c 15       	cp	r22, r12
    27bc:	7d 05       	cpc	r23, r13
    27be:	8e 05       	cpc	r24, r14
    27c0:	9f 05       	cpc	r25, r15
    27c2:	98 f3       	brcs	.-26     	; 0x27aa <delay_ms+0x24>
			sei();
    27c4:	78 94       	sei
			return;
		}
		sei();
		delay_us(10);
	}
}
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	08 95       	ret

000027d0 <startup_light_sequence>:
	PMIC.CTRL |= PMIC_RREN_bm;
	sei();
}

void startup_light_sequence(){
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	84 e6       	ldi	r24, 0x64	; 100
    27d6:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    27da:	84 e6       	ldi	r24, 0x64	; 100
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	64 e6       	ldi	r22, 0x64	; 100
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    27ec:	84 e6       	ldi	r24, 0x64	; 100
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    27f4:	44 e6       	ldi	r20, 0x64	; 100
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    27fe:	84 e6       	ldi	r24, 0x64	; 100
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    2806:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	84 e6       	ldi	r24, 0x64	; 100
    2810:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    2814:	84 e6       	ldi	r24, 0x64	; 100
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	64 e6       	ldi	r22, 0x64	; 100
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    2826:	84 e6       	ldi	r24, 0x64	; 100
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    282e:	44 e6       	ldi	r20, 0x64	; 100
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    2838:	84 e6       	ldi	r24, 0x64	; 100
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    2840:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	84 e6       	ldi	r24, 0x64	; 100
    284a:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    284e:	84 e6       	ldi	r24, 0x64	; 100
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	64 e6       	ldi	r22, 0x64	; 100
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    2860:	84 e6       	ldi	r24, 0x64	; 100
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    2868:	44 e6       	ldi	r20, 0x64	; 100
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    2872:	84 e6       	ldi	r24, 0x64	; 100
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    287a:	0c 94 3f 5a 	jmp	0xb47e	; 0xb47e <led_off>

0000287e <main>:
	startup_light_sequence();
	
	ir_comm_init();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
}

int main(void){
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	cb 54       	subi	r28, 0x4B	; 75
    2888:	d1 09       	sbc	r29, r1
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	de bf       	out	0x3e, r29	; 62
/**
 * \brief Initializes all the subsystems for this Droplet. This function MUST be called
 * by the user before using any other functions in the API.
 */ 
static void init_all_systems(void){
	cli();
    288e:	f8 94       	cli
	}
}

inline void Config32MHzClock(void){
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    2890:	88 ed       	ldi	r24, 0xD8	; 216
    2892:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    289a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    289e:	81 ff       	sbrs	r24, 1
    28a0:	fc cf       	rjmp	.-8      	; 0x289a <main+0x1c>
	CCP = CCP_IOREG_gc;
    28a2:	88 ed       	ldi	r24, 0xD8	; 216
    28a4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    28ac:	85 e0       	ldi	r24, 0x05	; 5
    28ae:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    28b2:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    28b6:	80 fd       	sbrc	r24, 0
    28b8:	fc cf       	rjmp	.-8      	; 0x28b2 <main+0x34>
	
	RTC.PER = 0xFFFF;		//(2^16)-1 milliseconds is 65.535 seconds
    28ba:	8f ef       	ldi	r24, 0xFF	; 255
    28bc:	9f ef       	ldi	r25, 0xFF	; 255
    28be:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    28c2:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    28cc:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    28d0:	80 fd       	sbrc	r24, 0
    28d2:	fc cf       	rjmp	.-8      	; 0x28cc <main+0x4e>
	RTC.CNT = 0;
    28d4:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    28d8:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    28e2:	80 e4       	ldi	r24, 0x40	; 64
    28e4:	e0 e2       	ldi	r30, 0x20	; 32
    28e6:	f0 e2       	ldi	r31, 0x20	; 32
    28e8:	9e 01       	movw	r18, r28
    28ea:	2f 5f       	subi	r18, 0xFF	; 255
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	59 01       	movw	r10, r18
    28f0:	d9 01       	movw	r26, r18
    28f2:	01 90       	ld	r0, Z+
    28f4:	0d 92       	st	X+, r0
    28f6:	8a 95       	dec	r24
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <main+0x74>
    28fa:	d9 01       	movw	r26, r18
    28fc:	8e 01       	movw	r16, r28
    28fe:	0f 5b       	subi	r16, 0xBF	; 191
    2900:	1f 4f       	sbci	r17, 0xFF	; 255

static void calculate_id_number(void){
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
		pgm_bytes = pgm_read_word_far(addrs[i]);
    2906:	4d 91       	ld	r20, X+
    2908:	5d 91       	ld	r21, X+
    290a:	6d 91       	ld	r22, X+
    290c:	7d 91       	ld	r23, X+
    290e:	6b bf       	out	0x3b, r22	; 59
    2910:	fa 01       	movw	r30, r20
    2912:	47 91       	elpm	r20, Z+
    2914:	56 91       	elpm	r21, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    2916:	84 27       	eor	r24, r20
    2918:	48 2f       	mov	r20, r24
    291a:	42 95       	swap	r20
    291c:	48 27       	eor	r20, r24
    291e:	04 2e       	mov	r0, r20
    2920:	46 95       	lsr	r20
    2922:	46 95       	lsr	r20
    2924:	40 25       	eor	r20, r0
    2926:	04 2e       	mov	r0, r20
    2928:	46 95       	lsr	r20
    292a:	40 25       	eor	r20, r0
    292c:	47 70       	andi	r20, 0x07	; 7
    292e:	08 2e       	mov	r0, r24
    2930:	89 2f       	mov	r24, r25
    2932:	46 95       	lsr	r20
    2934:	07 94       	ror	r0
    2936:	47 95       	ror	r20
    2938:	90 2d       	mov	r25, r0
    293a:	84 27       	eor	r24, r20
    293c:	06 94       	lsr	r0
    293e:	47 95       	ror	r20
    2940:	90 25       	eor	r25, r0
    2942:	84 27       	eor	r24, r20
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
    2944:	a0 17       	cp	r26, r16
    2946:	b1 07       	cpc	r27, r17
    2948:	f1 f6       	brne	.-68     	; 0x2906 <main+0x88>
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    294a:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	droplet_ID = crc;
    294e:	80 93 99 26 	sts	0x2699, r24	; 0x802699 <droplet_ID>
    2952:	90 93 9a 26 	sts	0x269A, r25	; 0x80269a <droplet_ID+0x1>
	cli();
	Config32MHzClock();
	
	calculate_id_number();
	
	scheduler_init();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    2956:	0e 94 00 5e 	call	0xbc00	; 0xbc00 <scheduler_init>
	pc_comm_init();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    295a:	0e 94 f1 4d 	call	0x9be2	; 0x9be2 <pc_comm_init>
	rgb_led_init();				INIT_DEBUG_PRINT("LED INIT\r\n");
    295e:	0e 94 21 5a 	call	0xb442	; 0xb442 <rgb_led_init>
	power_init();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    2962:	0e 94 e1 4e 	call	0x9dc2	; 0x9dc2 <power_init>
	i2c_init();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    2966:	0e 94 17 18 	call	0x302e	; 0x302e <i2c_init>

	droplet_ID = crc;
}

static void enable_interrupts(void){
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    296a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    296e:	81 60       	ori	r24, 0x01	; 1
    2970:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    2974:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2978:	82 60       	ori	r24, 0x02	; 2
    297a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    297e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2982:	84 60       	ori	r24, 0x04	; 4
    2984:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_RREN_bm;
    2988:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    298c:	80 68       	ori	r24, 0x80	; 128
    298e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    2992:	78 94       	sei
	power_init();				INIT_DEBUG_PRINT("POWER INIT\r\n");
	i2c_init();					INIT_DEBUG_PRINT("I2C INIT\r\n");
	
	enable_interrupts();	
	
	range_algs_init();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    2994:	0e 94 f9 4f 	call	0x9ff2	; 0x9ff2 <range_algs_init>
	rgb_sensor_init();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    2998:	0e 94 37 5d 	call	0xba6e	; 0xba6e <rgb_sensor_init>
	ir_led_init();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    299c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <ir_led_init>
	ir_sensor_init();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    29a0:	0e 94 20 28 	call	0x5040	; 0x5040 <ir_sensor_init>
	#ifdef AUDIO_DROPLET
		speaker_init();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		mic_init();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motor_init();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    29a4:	0e 94 df 4c 	call	0x99be	; 0x99be <motor_init>
	random_init();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    29a8:	0e 94 02 4f 	call	0x9e04	; 0x9e04 <random_init>
	localization_init();		INIT_DEBUG_PRINT("LOCALIZATION INIT\r\n"); 
    29ac:	0e 94 a4 33 	call	0x6748	; 0x6748 <localization_init>
	
	#ifdef SYNCHRONIZED
		firefly_sync_init();
    29b0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <firefly_sync_init>
	#endif


	set_all_ir_powers(256);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <set_all_ir_powers>

	startup_light_sequence();
    29bc:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <startup_light_sequence>
	
	ir_comm_init();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    29c0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <ir_comm_init>
}

int main(void){
	init_all_systems();
	init();
    29c4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <init>
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
	uint8_t i;
	
	if(user_facing_messages_ovf){
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
    29c8:	86 e0       	ldi	r24, 0x06	; 6
    29ca:	38 2e       	mov	r3, r24
		user_facing_messages_ovf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    29cc:	97 e5       	ldi	r25, 0x57	; 87
    29ce:	89 2e       	mov	r8, r25
    29d0:	95 e0       	ldi	r25, 0x05	; 5
    29d2:	99 2e       	mov	r9, r25
	while(num_waiting_msgs>0){
		i=num_waiting_msgs-1;
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(msg_node[i].msg_length==0){
    29d4:	21 e3       	ldi	r18, 0x31	; 49
    29d6:	52 2e       	mov	r5, r18
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    29d8:	3f e2       	ldi	r19, 0x2F	; 47
    29da:	c3 2e       	mov	r12, r19
    29dc:	35 e0       	ldi	r19, 0x05	; 5
    29de:	d3 2e       	mov	r13, r19
	init();
	while(1){
		loop();
		check_messages();
		if(task_list_check()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    29e0:	40 ec       	ldi	r20, 0xC0	; 192
    29e2:	64 2e       	mov	r6, r20
    29e4:	45 e0       	ldi	r20, 0x05	; 5
    29e6:	74 2e       	mov	r7, r20

int main(void){
	init_all_systems();
	init();
	while(1){
		loop();
    29e8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <loop>
static void check_messages(void){
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
    29ec:	d8 01       	movw	r26, r16
    29ee:	16 96       	adiw	r26, 0x06	; 6
    29f0:	ad 92       	st	X+, r10
    29f2:	bc 92       	st	X, r11
    29f4:	17 97       	sbiw	r26, 0x07	; 7
	uint8_t i;
	
	if(user_facing_messages_ovf){
    29f6:	80 91 9b 26 	lds	r24, 0x269B	; 0x80269b <user_facing_messages_ovf>
    29fa:	88 23       	and	r24, r24
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <main+0x182>
    29fe:	44 c0       	rjmp	.+136    	; 0x2a88 <main+0x20a>
    2a00:	67 c0       	rjmp	.+206    	; 0x2ad0 <main+0x252>
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(msg_node[i].msg_length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
			}
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
    2a02:	5e 9c       	mul	r5, r14
    2a04:	b0 01       	movw	r22, r0
    2a06:	5f 9c       	mul	r5, r15
    2a08:	70 0d       	add	r23, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	fb 01       	movw	r30, r22
    2a0e:	eb 54       	subi	r30, 0x4B	; 75
    2a10:	f9 4d       	sbci	r31, 0xD9	; 217
    2a12:	7f 01       	movw	r14, r30
    2a14:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	65 54       	subi	r22, 0x45	; 69
    2a1a:	79 4d       	sbci	r23, 0xD9	; 217
    2a1c:	d8 01       	movw	r26, r16
    2a1e:	16 96       	adiw	r26, 0x06	; 6
    2a20:	8d 91       	ld	r24, X+
    2a22:	9c 91       	ld	r25, X
    2a24:	17 97       	sbiw	r26, 0x07	; 7
    2a26:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <memcpy>
			msg_struct->arrival_time					= msg_node[i].arrival_time;
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	a2 81       	ldd	r26, Z+2	; 0x02
    2a32:	b3 81       	ldd	r27, Z+3	; 0x03
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	a2 83       	std	Z+2, r26	; 0x02
    2a3c:	b3 83       	std	Z+3, r27	; 0x03
			msg_struct->sender_ID						= msg_node[i].sender_ID;
    2a3e:	d7 01       	movw	r26, r14
    2a40:	14 96       	adiw	r26, 0x04	; 4
    2a42:	8d 91       	ld	r24, X+
    2a44:	9c 91       	ld	r25, X
    2a46:	15 97       	sbiw	r26, 0x05	; 5
    2a48:	84 83       	std	Z+4, r24	; 0x04
    2a4a:	95 83       	std	Z+5, r25	; 0x05
			msg_struct->dir_received					= msg_node[i].arrival_dir;
    2a4c:	9e 96       	adiw	r26, 0x2e	; 46
    2a4e:	8c 91       	ld	r24, X
    2a50:	9e 97       	sbiw	r26, 0x2e	; 46
    2a52:	80 87       	std	Z+8, r24	; 0x08
			msg_struct->length							= msg_node[i].msg_length;
    2a54:	9f 96       	adiw	r26, 0x2f	; 47
    2a56:	8c 91       	ld	r24, X
    2a58:	9f 97       	sbiw	r26, 0x2f	; 47
    2a5a:	81 87       	std	Z+9, r24	; 0x09
			msg_struct->wasTargeted						= msg_node[i].wasTargeted;
    2a5c:	d0 96       	adiw	r26, 0x30	; 48
    2a5e:	8c 91       	ld	r24, X
    2a60:	82 87       	std	Z+10, r24	; 0x0a
			num_waiting_msgs--;
    2a62:	80 91 e0 27 	lds	r24, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    2a66:	81 50       	subi	r24, 0x01	; 1
    2a68:	80 93 e0 27 	sts	0x27E0, r24	; 0x8027e0 <num_waiting_msgs>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a6c:	4f be       	out	0x3f, r4	; 63
		}			
		msg_struct->msg[msg_node[i].msg_length]	= '\0';		
    2a6e:	f7 01       	movw	r30, r14
    2a70:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a72:	d8 01       	movw	r26, r16
    2a74:	16 96       	adiw	r26, 0x06	; 6
    2a76:	ed 91       	ld	r30, X+
    2a78:	fc 91       	ld	r31, X
    2a7a:	17 97       	sbiw	r26, 0x07	; 7
    2a7c:	e8 0f       	add	r30, r24
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	10 82       	st	Z, r1



		handle_msg(msg_struct);
    2a82:	c8 01       	movw	r24, r16
    2a84:	0e 94 b1 11 	call	0x2362	; 0x2362 <handle_msg>
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		user_facing_messages_ovf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0){
    2a88:	80 91 e0 27 	lds	r24, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    2a8c:	88 23       	and	r24, r24
    2a8e:	b9 f0       	breq	.+46     	; 0x2abe <main+0x240>
		i=num_waiting_msgs-1;
    2a90:	e0 90 e0 27 	lds	r14, 0x27E0	; 0x8027e0 <num_waiting_msgs>
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2a94:	4f b6       	in	r4, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a96:	f8 94       	cli
			if(msg_node[i].msg_length==0){
    2a98:	ea 94       	dec	r14
    2a9a:	f1 2c       	mov	r15, r1
    2a9c:	5e 9c       	mul	r5, r14
    2a9e:	f0 01       	movw	r30, r0
    2aa0:	5f 9c       	mul	r5, r15
    2aa2:	f0 0d       	add	r31, r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	eb 54       	subi	r30, 0x4B	; 75
    2aa8:	f9 4d       	sbci	r31, 0xD9	; 217
    2aaa:	87 a5       	ldd	r24, Z+47	; 0x2f
    2aac:	81 11       	cpse	r24, r1
    2aae:	a9 cf       	rjmp	.-174    	; 0x2a02 <main+0x184>
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    2ab0:	df 92       	push	r13
    2ab2:	cf 92       	push	r12
    2ab4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	a2 cf       	rjmp	.-188    	; 0x2a02 <main+0x184>
void remove_task(volatile Task_t*); // Removes a task from the queue
void print_task_queue(void);

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t task_list_check(void){ 
	if(task_executing)	return 0;
    2abe:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <task_executing>
    2ac2:	88 23       	and	r24, r24
    2ac4:	81 f0       	breq	.+32     	; 0x2ae6 <main+0x268>
		check_messages();
		if(task_list_check()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
			task_list_cleanup();
		}
		delay_ms(1);	
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
	}
    2ace:	8c cf       	rjmp	.-232    	; 0x29e8 <main+0x16a>
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
	uint8_t i;
	
	if(user_facing_messages_ovf){
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
    2ad0:	30 92 e0 27 	sts	0x27E0, r3	; 0x8027e0 <num_waiting_msgs>
		user_facing_messages_ovf=0;
    2ad4:	10 92 9b 26 	sts	0x269B, r1	; 0x80269b <user_facing_messages_ovf>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    2ad8:	9f 92       	push	r9
    2ada:	8f 92       	push	r8
    2adc:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	d1 cf       	rjmp	.-94     	; 0x2a88 <main+0x20a>
	else				return (((int32_t)(get_time()-(task_list->scheduled_time)))>3000); 
    2ae6:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    2aea:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    2aee:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    2af2:	20 81       	ld	r18, Z
    2af4:	31 81       	ldd	r19, Z+1	; 0x01
    2af6:	42 81       	ldd	r20, Z+2	; 0x02
    2af8:	53 81       	ldd	r21, Z+3	; 0x03
	init_all_systems();
	init();
	while(1){
		loop();
		check_messages();
		if(task_list_check()){
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	82 1b       	sub	r24, r18
    2b00:	93 0b       	sbc	r25, r19
    2b02:	a4 0b       	sbc	r26, r20
    2b04:	b5 0b       	sbc	r27, r21
    2b06:	89 3b       	cpi	r24, 0xB9	; 185
    2b08:	9b 40       	sbci	r25, 0x0B	; 11
    2b0a:	a1 05       	cpc	r26, r1
    2b0c:	b1 05       	cpc	r27, r1
    2b0e:	dc f2       	brlt	.-74     	; 0x2ac6 <main+0x248>
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    2b10:	7f 92       	push	r7
    2b12:	6f 92       	push	r6
    2b14:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
			task_list_cleanup();
    2b18:	0e 94 42 5e 	call	0xbc84	; 0xbc84 <task_list_cleanup>
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	d2 cf       	rjmp	.-92     	; 0x2ac6 <main+0x248>

00002b22 <EEPROM_read_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    2b22:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    2b26:	27 fd       	sbrc	r18, 7
    2b28:	fc cf       	rjmp	.-8      	; 0x2b22 <EEPROM_read_byte>

uint8_t EEPROM_read_byte(uint16_t addr)
{
        wait_for_nvm();
        
        NVM.ADDR0 = addr & 0xFF;
    2b2a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    2b2e:	9f 71       	andi	r25, 0x1F	; 31
    2b30:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    2b34:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    2b38:	86 e0       	ldi	r24, 0x06	; 6
    2b3a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    2b3e:	eb ec       	ldi	r30, 0xCB	; 203
    2b40:	f1 e0       	ldi	r31, 0x01	; 1
    2b42:	21 e0       	ldi	r18, 0x01	; 1
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	88 ed       	ldi	r24, 0xD8	; 216
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	84 bf       	out	0x34, r24	; 52
    2b4c:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    2b4e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
}
    2b52:	08 95       	ret

00002b54 <EEPROM_write_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    2b54:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    2b58:	27 fd       	sbrc	r18, 7
    2b5a:	fc cf       	rjmp	.-8      	; 0x2b54 <EEPROM_write_byte>

void flush_buffer(void)
{
        wait_for_nvm();
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    2b5c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    2b60:	21 ff       	sbrs	r18, 1
    2b62:	0b c0       	rjmp	.+22     	; 0x2b7a <EEPROM_write_byte+0x26>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    2b64:	26 e3       	ldi	r18, 0x36	; 54
    2b66:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    2b6a:	eb ec       	ldi	r30, 0xCB	; 203
    2b6c:	f1 e0       	ldi	r31, 0x01	; 1
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	28 ed       	ldi	r18, 0xD8	; 216
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	24 bf       	out	0x34, r18	; 52
    2b78:	40 83       	st	Z, r20


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
        flush_buffer();
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2b7a:	23 e3       	ldi	r18, 0x33	; 51
    2b7c:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
        
        NVM.ADDR0 = addr & 0xFF;
    2b80:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    2b84:	9f 71       	andi	r25, 0x1F	; 31
    2b86:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    2b8a:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.DATA0 = byte;
    2b8e:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2b92:	85 e3       	ldi	r24, 0x35	; 53
    2b94:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    2b98:	eb ec       	ldi	r30, 0xCB	; 203
    2b9a:	f1 e0       	ldi	r31, 0x01	; 1
    2b9c:	21 e0       	ldi	r18, 0x01	; 1
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	88 ed       	ldi	r24, 0xD8	; 216
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	84 bf       	out	0x34, r24	; 52
    2ba6:	20 83       	st	Z, r18
    2ba8:	08 95       	ret

00002baa <processObsQueue>:
}

void disable_sync_blink(){
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;
	TCE0.CCA = 0;
	TCE0.CCB = 0;
    2baa:	bf 92       	push	r11
    2bac:	cf 92       	push	r12
    2bae:	df 92       	push	r13
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	e0 91 e7 27 	lds	r30, 0x27E7	; 0x8027e7 <obsStart>
    2bc0:	f0 91 e8 27 	lds	r31, 0x27E8	; 0x8027e8 <obsStart+0x1>
    2bc4:	c2 81       	ldd	r28, Z+2	; 0x02
    2bc6:	d3 81       	ldd	r29, Z+3	; 0x03
    2bc8:	ec 17       	cp	r30, r28
    2bca:	fd 07       	cpc	r31, r29
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <processObsQueue+0x26>
    2bce:	6f c0       	rjmp	.+222    	; 0x2cae <processObsQueue+0x104>
    2bd0:	c1 2c       	mov	r12, r1
    2bd2:	d1 2c       	mov	r13, r1
    2bd4:	76 01       	movw	r14, r12
    2bd6:	68 81       	ld	r22, Y
    2bd8:	79 81       	ldd	r23, Y+1	; 0x01
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    2be2:	a7 01       	movw	r20, r14
    2be4:	96 01       	movw	r18, r12
    2be6:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e7       	ldi	r20, 0x70	; 112
    2bf0:	52 e4       	ldi	r21, 0x42	; 66
    2bf2:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    2bf6:	9b 01       	movw	r18, r22
    2bf8:	ac 01       	movw	r20, r24
    2bfa:	c7 01       	movw	r24, r14
    2bfc:	b6 01       	movw	r22, r12
    2bfe:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    2c02:	6b 01       	movw	r12, r22
    2c04:	7c 01       	movw	r14, r24
    2c06:	0a 81       	ldd	r16, Y+2	; 0x02
    2c08:	1b 81       	ldd	r17, Y+3	; 0x03
    2c0a:	bf b6       	in	r11, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	ce 01       	movw	r24, r28
    2c10:	0e 94 1f 78 	call	0xf03e	; 0xf03e <free>
    2c14:	bf be       	out	0x3f, r11	; 63
    2c16:	e8 01       	movw	r28, r16
    2c18:	80 91 e7 27 	lds	r24, 0x27E7	; 0x8027e7 <obsStart>
    2c1c:	90 91 e8 27 	lds	r25, 0x27E8	; 0x8027e8 <obsStart+0x1>
    2c20:	80 17       	cp	r24, r16
    2c22:	91 07       	cpc	r25, r17
    2c24:	c1 f6       	brne	.-80     	; 0x2bd6 <processObsQueue+0x2c>
    2c26:	c7 01       	movw	r24, r14
    2c28:	b6 01       	movw	r22, r12
    2c2a:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    2c2e:	f8 01       	movw	r30, r16
    2c30:	02 83       	std	Z+2, r16	; 0x02
    2c32:	13 83       	std	Z+3, r17	; 0x03
    2c34:	04 83       	std	Z+4, r16	; 0x04
    2c36:	15 83       	std	Z+5, r17	; 0x05
    2c38:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2c3c:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    2c40:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    2c44:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    2c48:	c8 17       	cp	r28, r24
    2c4a:	d9 07       	cpc	r29, r25
    2c4c:	a0 f0       	brcs	.+40     	; 0x2c76 <processObsQueue+0xcc>
    2c4e:	c6 0f       	add	r28, r22
    2c50:	d7 1f       	adc	r29, r23
    2c52:	c1 34       	cpi	r28, 0x41	; 65
    2c54:	fd e9       	ldi	r31, 0x9D	; 157
    2c56:	df 07       	cpc	r29, r31
    2c58:	18 f5       	brcc	.+70     	; 0x2ca0 <processObsQueue+0xf6>
    2c5a:	c0 93 20 0a 	sts	0x0A20, r28	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2c5e:	d0 93 21 0a 	sts	0x0A21, r29	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
    2c72:	bf 90       	pop	r11
    2c74:	08 95       	ret
    2c76:	c6 0f       	add	r28, r22
    2c78:	d7 1f       	adc	r29, r23
    2c7a:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    2c7e:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    2c82:	8c 17       	cp	r24, r28
    2c84:	9d 07       	cpc	r25, r29
    2c86:	28 f7       	brcc	.-54     	; 0x2c52 <processObsQueue+0xa8>
    2c88:	40 91 0e 25 	lds	r20, 0x250E	; 0x80250e <ffsync_blink_prev_b>
    2c8c:	60 91 0f 25 	lds	r22, 0x250F	; 0x80250f <ffsync_blink_prev_g>
    2c90:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <ffsync_blink_prev_r>
    2c94:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    2c98:	c1 34       	cpi	r28, 0x41	; 65
    2c9a:	fd e9       	ldi	r31, 0x9D	; 157
    2c9c:	df 07       	cpc	r29, r31
    2c9e:	e8 f2       	brcs	.-70     	; 0x2c5a <processObsQueue+0xb0>
    2ca0:	80 e4       	ldi	r24, 0x40	; 64
    2ca2:	9d e9       	ldi	r25, 0x9D	; 157
    2ca4:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2ca8:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    2cac:	da cf       	rjmp	.-76     	; 0x2c62 <processObsQueue+0xb8>
    2cae:	8f 01       	movw	r16, r30
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	70 e0       	ldi	r23, 0x00	; 0
    2cb4:	bc cf       	rjmp	.-136    	; 0x2c2e <processObsQueue+0x84>

00002cb6 <sendPing>:
    2cb6:	9c 01       	movw	r18, r24
    2cb8:	40 e4       	ldi	r20, 0x40	; 64
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	8f e3       	ldi	r24, 0x3F	; 63
    2cc0:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <hp_ir_targeted_cmd>
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	45 ed       	ldi	r20, 0xD5	; 213
    2cca:	55 e1       	ldi	r21, 0x15	; 21
    2ccc:	68 ec       	ldi	r22, 0xC8	; 200
    2cce:	70 e0       	ldi	r23, 0x00	; 0
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    2cd8:	08 95       	ret

00002cda <__vector_49>:
}


ISR(TCE0_CCA_vect){
    2cda:	1f 92       	push	r1
    2cdc:	0f 92       	push	r0
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	0f 92       	push	r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	0b b6       	in	r0, 0x3b	; 59
    2ce6:	0f 92       	push	r0
    2ce8:	2f 93       	push	r18
    2cea:	3f 93       	push	r19
    2cec:	4f 93       	push	r20
    2cee:	5f 93       	push	r21
    2cf0:	6f 93       	push	r22
    2cf2:	7f 93       	push	r23
    2cf4:	8f 93       	push	r24
    2cf6:	9f 93       	push	r25
    2cf8:	af 93       	push	r26
    2cfa:	bf 93       	push	r27
    2cfc:	ef 93       	push	r30
    2cfe:	ff 93       	push	r31
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
    2d00:	e0 e4       	ldi	r30, 0x40	; 64
    2d02:	fa e0       	ldi	r31, 0x0A	; 10
    2d04:	82 ad       	ldd	r24, Z+58	; 0x3a
    2d06:	93 ad       	ldd	r25, Z+59	; 0x3b
	ffsync_blink_prev_r = get_red_led();
    2d08:	80 93 10 25 	sts	0x2510, r24	; 0x802510 <ffsync_blink_prev_r>
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
    2d0c:	80 ad       	ldd	r24, Z+56	; 0x38
    2d0e:	91 ad       	ldd	r25, Z+57	; 0x39
	ffsync_blink_prev_g = get_green_led();
    2d10:	80 93 0f 25 	sts	0x250F, r24	; 0x80250f <ffsync_blink_prev_g>
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led(void){ return TCD1.CCABUF; }
    2d14:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    2d18:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	ffsync_blink_prev_b = get_blue_led();
    2d1c:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <ffsync_blink_prev_b>
	set_rgb(ffsync_blink_r,ffsync_blink_g,ffsync_blink_b);
    2d20:	40 91 11 25 	lds	r20, 0x2511	; 0x802511 <ffsync_blink_b>
    2d24:	60 91 12 25 	lds	r22, 0x2512	; 0x802512 <ffsync_blink_g>
    2d28:	80 91 13 25 	lds	r24, 0x2513	; 0x802513 <ffsync_blink_r>
    2d2c:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
}
    2d30:	ff 91       	pop	r31
    2d32:	ef 91       	pop	r30
    2d34:	bf 91       	pop	r27
    2d36:	af 91       	pop	r26
    2d38:	9f 91       	pop	r25
    2d3a:	8f 91       	pop	r24
    2d3c:	7f 91       	pop	r23
    2d3e:	6f 91       	pop	r22
    2d40:	5f 91       	pop	r21
    2d42:	4f 91       	pop	r20
    2d44:	3f 91       	pop	r19
    2d46:	2f 91       	pop	r18
    2d48:	0f 90       	pop	r0
    2d4a:	0b be       	out	0x3b, r0	; 59
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	0f 90       	pop	r0
    2d52:	1f 90       	pop	r1
    2d54:	18 95       	reti

00002d56 <__vector_50>:

ISR(TCE0_CCB_vect){
    2d56:	1f 92       	push	r1
    2d58:	0f 92       	push	r0
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	0f 92       	push	r0
    2d5e:	11 24       	eor	r1, r1
    2d60:	0b b6       	in	r0, 0x3b	; 59
    2d62:	0f 92       	push	r0
    2d64:	2f 93       	push	r18
    2d66:	3f 93       	push	r19
    2d68:	4f 93       	push	r20
    2d6a:	5f 93       	push	r21
    2d6c:	6f 93       	push	r22
    2d6e:	7f 93       	push	r23
    2d70:	8f 93       	push	r24
    2d72:	9f 93       	push	r25
    2d74:	af 93       	push	r26
    2d76:	bf 93       	push	r27
    2d78:	ef 93       	push	r30
    2d7a:	ff 93       	push	r31
	set_rgb(ffsync_blink_prev_r, ffsync_blink_prev_g, ffsync_blink_prev_b);	
    2d7c:	40 91 0e 25 	lds	r20, 0x250E	; 0x80250e <ffsync_blink_prev_b>
    2d80:	60 91 0f 25 	lds	r22, 0x250F	; 0x80250f <ffsync_blink_prev_g>
    2d84:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <ffsync_blink_prev_r>
    2d88:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
}
    2d8c:	ff 91       	pop	r31
    2d8e:	ef 91       	pop	r30
    2d90:	bf 91       	pop	r27
    2d92:	af 91       	pop	r26
    2d94:	9f 91       	pop	r25
    2d96:	8f 91       	pop	r24
    2d98:	7f 91       	pop	r23
    2d9a:	6f 91       	pop	r22
    2d9c:	5f 91       	pop	r21
    2d9e:	4f 91       	pop	r20
    2da0:	3f 91       	pop	r19
    2da2:	2f 91       	pop	r18
    2da4:	0f 90       	pop	r0
    2da6:	0b be       	out	0x3b, r0	; 59
    2da8:	0f 90       	pop	r0
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	0f 90       	pop	r0
    2dae:	1f 90       	pop	r1
    2db0:	18 95       	reti

00002db2 <firefly_sync_init>:

void firefly_sync_init()
{
    2db2:	cf 93       	push	r28
	ffsync_blink_r = 255;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	80 93 13 25 	sts	0x2513, r24	; 0x802513 <ffsync_blink_r>
	ffsync_blink_g = 255;
    2dba:	80 93 12 25 	sts	0x2512, r24	; 0x802512 <ffsync_blink_g>
	ffsync_blink_b = 255;
    2dbe:	80 93 11 25 	sts	0x2511, r24	; 0x802511 <ffsync_blink_b>
	ffsync_blink_dur = 200;
    2dc2:	88 ec       	ldi	r24, 0xC8	; 200
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	80 93 0c 25 	sts	0x250C, r24	; 0x80250c <ffsync_blink_dur>
    2dca:	90 93 0d 25 	sts	0x250D, r25	; 0x80250d <ffsync_blink_dur+0x1>
	
	ffsync_blink_phase_offset_ms = 0;

	EVSYS.CH0MUX = EVSYS_CHMUX_PRESCALER_4096_gc;
    2dce:	8c e8       	ldi	r24, 0x8C	; 140
    2dd0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCE0.CTRLA = TC_CLKSEL_EVCH0_gc;
    2dd4:	e0 e0       	ldi	r30, 0x00	; 0
    2dd6:	fa e0       	ldi	r31, 0x0A	; 10
    2dd8:	88 e0       	ldi	r24, 0x08	; 8
    2dda:	80 83       	st	Z, r24
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;
    2ddc:	11 82       	std	Z+1, r1	; 0x01

	TCE0.PER =  FFSYNC_FULL_PERIOD;
    2dde:	81 e4       	ldi	r24, 0x41	; 65
    2de0:	9d e9       	ldi	r25, 0x9D	; 157
    2de2:	86 a3       	std	Z+38, r24	; 0x26
    2de4:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    2de6:	83 e0       	ldi	r24, 0x03	; 3
    2de8:	86 83       	std	Z+6, r24	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;	
    2dea:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    2dec:	10 a2       	std	Z+32, r1	; 0x20
    2dee:	11 a2       	std	Z+33, r1	; 0x21
		TCE0.CCA = 0;
    2df0:	10 a6       	std	Z+40, r1	; 0x28
    2df2:	11 a6       	std	Z+41, r1	; 0x29
		TCE0.CCB = 0;
    2df4:	12 a6       	std	Z+42, r1	; 0x2a
    2df6:	13 a6       	std	Z+43, r1	; 0x2b
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2df8:	cf b7       	in	r28, 0x3f	; 63
    2dfa:	f8 94       	cli
		tmp = malloc(size);
    2dfc:	86 e0       	ldi	r24, 0x06	; 6
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 87 77 	call	0xef0e	; 0xef0e <malloc>
    2e04:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e06:	cf bf       	out	0x3f, r28	; 63
	
	obsStart = (ObsQueue*)myMalloc(sizeof(ObsQueue));
    2e08:	80 93 e7 27 	sts	0x27E7, r24	; 0x8027e7 <obsStart>
    2e0c:	90 93 e8 27 	sts	0x27E8, r25	; 0x8027e8 <obsStart+0x1>
	obsStart->obs = 0;
    2e10:	10 82       	st	Z, r1
    2e12:	11 82       	std	Z+1, r1	; 0x01
	obsStart->next = obsStart;
    2e14:	82 83       	std	Z+2, r24	; 0x02
    2e16:	93 83       	std	Z+3, r25	; 0x03
	obsStart->prev = obsStart;
    2e18:	84 83       	std	Z+4, r24	; 0x04
    2e1a:	95 83       	std	Z+5, r25	; 0x05
}
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <__vector_47>:

ISR(TCE0_OVF_vect){
    2e20:	1f 92       	push	r1
    2e22:	0f 92       	push	r0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	0f 92       	push	r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	0b b6       	in	r0, 0x3b	; 59
    2e2c:	0f 92       	push	r0
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	2f 93       	push	r18
    2e3c:	3f 93       	push	r19
    2e3e:	4f 93       	push	r20
    2e40:	5f 93       	push	r21
    2e42:	6f 93       	push	r22
    2e44:	7f 93       	push	r23
    2e46:	8f 93       	push	r24
    2e48:	9f 93       	push	r25
    2e4a:	af 93       	push	r26
    2e4c:	bf 93       	push	r27
    2e4e:	cf 93       	push	r28
    2e50:	ef 93       	push	r30
    2e52:	ff 93       	push	r31
	schedule_task(rand_short()%FFSYNC_D, (arg_func_t)sendPing, (void*)((uint16_t)(get_time()&0xFFFF)));
    2e54:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    2e58:	6b 01       	movw	r12, r22
    2e5a:	7c 01       	movw	r14, r24
    2e5c:	0e 94 6d 4f 	call	0x9eda	; 0x9eda <rand_short>
    2e60:	ac 01       	movw	r20, r24
    2e62:	9c 01       	movw	r18, r24
    2e64:	ad ec       	ldi	r26, 0xCD	; 205
    2e66:	bc ec       	ldi	r27, 0xCC	; 204
    2e68:	0e 94 65 77 	call	0xeeca	; 0xeeca <__umulhisi3>
    2e6c:	88 0f       	add	r24, r24
    2e6e:	89 2f       	mov	r24, r25
    2e70:	88 1f       	adc	r24, r24
    2e72:	99 0b       	sbc	r25, r25
    2e74:	91 95       	neg	r25
    2e76:	60 ea       	ldi	r22, 0xA0	; 160
    2e78:	68 9f       	mul	r22, r24
    2e7a:	90 01       	movw	r18, r0
    2e7c:	69 9f       	mul	r22, r25
    2e7e:	30 0d       	add	r19, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	ba 01       	movw	r22, r20
    2e84:	62 1b       	sub	r22, r18
    2e86:	73 0b       	sbc	r23, r19
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	96 01       	movw	r18, r12
    2e8e:	4b e5       	ldi	r20, 0x5B	; 91
    2e90:	56 e1       	ldi	r21, 0x16	; 22
    2e92:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
}

static void updateRTC(void){
	int16_t change;
	uint16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2e96:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e98:	f8 94       	cli
	{
		uint32_t currTime = get_time();
    2e9a:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    2e9e:	6b 01       	movw	r12, r22
    2ea0:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    2ea2:	21 e2       	ldi	r18, 0x21	; 33
    2ea4:	34 e1       	ldi	r19, 0x14	; 20
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	0e 94 3b 77 	call	0xee76	; 0xee76 <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    2eae:	61 31       	cpi	r22, 0x11	; 17
    2eb0:	2a e0       	ldi	r18, 0x0A	; 10
    2eb2:	72 07       	cpc	r23, r18
    2eb4:	08 f4       	brcc	.+2      	; 0x2eb8 <__vector_47+0x98>
    2eb6:	53 c0       	rjmp	.+166    	; 0x2f5e <__vector_47+0x13e>
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
    2eb8:	21 e2       	ldi	r18, 0x21	; 33
    2eba:	34 e1       	ldi	r19, 0x14	; 20
    2ebc:	26 1b       	sub	r18, r22
    2ebe:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    2ec0:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    2ec4:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    2ec8:	82 1b       	sub	r24, r18
    2eca:	93 0b       	sbc	r25, r19
    2ecc:	8c 15       	cp	r24, r12
    2ece:	9d 05       	cpc	r25, r13
    2ed0:	48 f4       	brcc	.+18     	; 0x2ee4 <__vector_47+0xc4>
    2ed2:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
    2ed6:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    2eda:	01 96       	adiw	r24, 0x01	; 1
    2edc:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <rtc_epoch>
    2ee0:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <rtc_epoch+0x1>
		}else{
			change = -(int16_t)remainder;
			if(theCount<remainder) rtc_epoch--;
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    2ee4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    2ee8:	80 fd       	sbrc	r24, 0
    2eea:	fc cf       	rjmp	.-8      	; 0x2ee4 <__vector_47+0xc4>
		RTC.CNT =  (theCount+change);
    2eec:	c2 0e       	add	r12, r18
    2eee:	d3 1e       	adc	r13, r19
    2ef0:	c0 92 08 04 	sts	0x0408, r12	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    2ef4:	d0 92 09 04 	sts	0x0409, r13	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
		RTC.COMP = (RTC.COMP+change);
    2ef8:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    2efc:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    2f00:	82 0f       	add	r24, r18
    2f02:	93 1f       	adc	r25, r19
    2f04:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    2f08:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f0c:	cf bf       	out	0x3f, r28	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    2f0e:	c9 01       	movw	r24, r18
    2f10:	37 fd       	sbrc	r19, 7
    2f12:	37 c0       	rjmp	.+110    	; 0x2f82 <__vector_47+0x162>
    2f14:	81 39       	cpi	r24, 0x91	; 145
    2f16:	91 05       	cpc	r25, r1
    2f18:	44 f4       	brge	.+16     	; 0x2f2a <__vector_47+0x10a>
		if(change>0) OSC.RC32KCAL++;
    2f1a:	12 16       	cp	r1, r18
    2f1c:	13 06       	cpc	r1, r19
    2f1e:	b4 f5       	brge	.+108    	; 0x2f8c <__vector_47+0x16c>
    2f20:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    2f24:	8f 5f       	subi	r24, 0xFF	; 255
    2f26:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
ISR(TCE0_OVF_vect){
	schedule_task(rand_short()%FFSYNC_D, (arg_func_t)sendPing, (void*)((uint16_t)(get_time()&0xFFFF)));
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
	//printf("ovf @ %lu\r\n",get_time());
}
    2f2a:	ff 91       	pop	r31
    2f2c:	ef 91       	pop	r30
    2f2e:	cf 91       	pop	r28
    2f30:	bf 91       	pop	r27
    2f32:	af 91       	pop	r26
    2f34:	9f 91       	pop	r25
    2f36:	8f 91       	pop	r24
    2f38:	7f 91       	pop	r23
    2f3a:	6f 91       	pop	r22
    2f3c:	5f 91       	pop	r21
    2f3e:	4f 91       	pop	r20
    2f40:	3f 91       	pop	r19
    2f42:	2f 91       	pop	r18
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	df 90       	pop	r13
    2f4e:	cf 90       	pop	r12
    2f50:	0f 90       	pop	r0
    2f52:	0b be       	out	0x3b, r0	; 59
    2f54:	0f 90       	pop	r0
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	0f 90       	pop	r0
    2f5a:	1f 90       	pop	r1
    2f5c:	18 95       	reti
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
		}else{
			change = -(int16_t)remainder;
    2f5e:	22 27       	eor	r18, r18
    2f60:	33 27       	eor	r19, r19
    2f62:	26 1b       	sub	r18, r22
    2f64:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    2f66:	c6 16       	cp	r12, r22
    2f68:	d7 06       	cpc	r13, r23
    2f6a:	08 f0       	brcs	.+2      	; 0x2f6e <__vector_47+0x14e>
    2f6c:	bb cf       	rjmp	.-138    	; 0x2ee4 <__vector_47+0xc4>
    2f6e:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
    2f72:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <rtc_epoch>
    2f7c:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <rtc_epoch+0x1>
    2f80:	b1 cf       	rjmp	.-158    	; 0x2ee4 <__vector_47+0xc4>
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    2f82:	88 27       	eor	r24, r24
    2f84:	99 27       	eor	r25, r25
    2f86:	82 1b       	sub	r24, r18
    2f88:	93 0b       	sbc	r25, r19
    2f8a:	c4 cf       	rjmp	.-120    	; 0x2f14 <__vector_47+0xf4>
		if(change>0) OSC.RC32KCAL++;
		else if(abs(change)<FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    2f8c:	4d 97       	sbiw	r24, 0x1d	; 29
    2f8e:	6c f6       	brge	.-102    	; 0x2f2a <__vector_47+0x10a>
    2f90:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    2f94:	81 50       	subi	r24, 0x01	; 1
    2f96:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
ISR(TCE0_OVF_vect){
	schedule_task(rand_short()%FFSYNC_D, (arg_func_t)sendPing, (void*)((uint16_t)(get_time()&0xFFFF)));
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
	//printf("ovf @ %lu\r\n",get_time());
}
    2f9a:	c7 cf       	rjmp	.-114    	; 0x2f2a <__vector_47+0x10a>

00002f9c <TWI_MasterWriteRead.part.0>:
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	e0 91 46 2a 	lds	r30, 0x2A46	; 0x802a46 <twi>
    2fa4:	f0 91 47 2a 	lds	r31, 0x2A47	; 0x802a47 <twi+0x1>
    2fa8:	97 89       	ldd	r25, Z+23	; 0x17
    2faa:	91 11       	cpse	r25, r1
    2fac:	30 c0       	rjmp	.+96     	; 0x300e <TWI_MasterWriteRead.part.0+0x72>
    2fae:	91 e0       	ldi	r25, 0x01	; 1
    2fb0:	97 8b       	std	Z+23, r25	; 0x17
    2fb2:	10 8e       	std	Z+24, r1	; 0x18
    2fb4:	88 0f       	add	r24, r24
    2fb6:	82 83       	std	Z+2, r24	; 0x02
    2fb8:	44 23       	and	r20, r20
    2fba:	59 f0       	breq	.+22     	; 0x2fd2 <TWI_MasterWriteRead.part.0+0x36>
    2fbc:	db 01       	movw	r26, r22
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	3d 91       	ld	r19, X+
    2fc4:	ef 01       	movw	r28, r30
    2fc6:	c8 0f       	add	r28, r24
    2fc8:	d9 1f       	adc	r29, r25
    2fca:	3b 83       	std	Y+3, r19	; 0x03
    2fcc:	01 96       	adiw	r24, 0x01	; 1
    2fce:	84 17       	cp	r24, r20
    2fd0:	c0 f3       	brcs	.-16     	; 0x2fc2 <TWI_MasterWriteRead.part.0+0x26>
    2fd2:	43 8b       	std	Z+19, r20	; 0x13
    2fd4:	24 8b       	std	Z+20, r18	; 0x14
    2fd6:	15 8a       	std	Z+21, r1	; 0x15
    2fd8:	16 8a       	std	Z+22, r1	; 0x16
    2fda:	83 89       	ldd	r24, Z+19	; 0x13
    2fdc:	81 11       	cpse	r24, r1
    2fde:	0d c0       	rjmp	.+26     	; 0x2ffa <TWI_MasterWriteRead.part.0+0x5e>
    2fe0:	84 89       	ldd	r24, Z+20	; 0x14
    2fe2:	88 23       	and	r24, r24
    2fe4:	01 f1       	breq	.+64     	; 0x3026 <TWI_MasterWriteRead.part.0+0x8a>
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	81 60       	ori	r24, 0x01	; 1
    2fea:	01 90       	ld	r0, Z+
    2fec:	f0 81       	ld	r31, Z
    2fee:	e0 2d       	mov	r30, r0
    2ff0:	86 83       	std	Z+6, r24	; 0x06
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	08 95       	ret
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	8e 7f       	andi	r24, 0xFE	; 254
    2ffe:	01 90       	ld	r0, Z+
    3000:	f0 81       	ld	r31, Z
    3002:	e0 2d       	mov	r30, r0
    3004:	86 83       	std	Z+6, r24	; 0x06
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	08 95       	ret
    300e:	85 e0       	ldi	r24, 0x05	; 5
    3010:	96 e0       	ldi	r25, 0x06	; 6
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	08 95       	ret
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	08 95       	ret

0000302e <i2c_init>:
    302e:	e0 e2       	ldi	r30, 0x20	; 32
    3030:	f6 e0       	ldi	r31, 0x06	; 6
    3032:	80 e2       	ldi	r24, 0x20	; 32
    3034:	82 83       	std	Z+2, r24	; 0x02
    3036:	85 8b       	std	Z+21, r24	; 0x15
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    303e:	a2 e5       	ldi	r26, 0x52	; 82
    3040:	b8 e2       	ldi	r27, 0x28	; 40
    3042:	a0 93 46 2a 	sts	0x2A46, r26	; 0x802a46 <twi>
    3046:	b0 93 47 2a 	sts	0x2A47, r27	; 0x802a47 <twi+0x1>
    304a:	e0 ea       	ldi	r30, 0xA0	; 160
    304c:	f4 e0       	ldi	r31, 0x04	; 4
    304e:	ed 93       	st	X+, r30
    3050:	fc 93       	st	X, r31
    3052:	88 ef       	ldi	r24, 0xF8	; 248
    3054:	81 83       	std	Z+1, r24	; 0x01
    3056:	8b e9       	ldi	r24, 0x9B	; 155
    3058:	85 83       	std	Z+5, r24	; 0x05
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	84 83       	std	Z+4, r24	; 0x04
    305e:	08 95       	ret

00003060 <TWI_MasterWrite>:
    3060:	49 30       	cpi	r20, 0x09	; 9
    3062:	10 f0       	brcs	.+4      	; 0x3068 <TWI_MasterWrite+0x8>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	08 95       	ret
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <TWI_MasterWriteRead.part.0>

0000306e <TWI_MasterWriteHandler>:
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	e0 91 46 2a 	lds	r30, 0x2A46	; 0x802a46 <twi>
    3076:	f0 91 47 2a 	lds	r31, 0x2A47	; 0x802a47 <twi+0x1>
    307a:	93 89       	ldd	r25, Z+19	; 0x13
    307c:	24 89       	ldd	r18, Z+20	; 0x14
    307e:	a0 81       	ld	r26, Z
    3080:	b1 81       	ldd	r27, Z+1	; 0x01
    3082:	14 96       	adiw	r26, 0x04	; 4
    3084:	8c 91       	ld	r24, X
    3086:	14 97       	sbiw	r26, 0x04	; 4
    3088:	84 fd       	sbrc	r24, 4
    308a:	1c c0       	rjmp	.+56     	; 0x30c4 <TWI_MasterWriteHandler+0x56>
    308c:	85 89       	ldd	r24, Z+21	; 0x15
    308e:	89 17       	cp	r24, r25
    3090:	60 f0       	brcs	.+24     	; 0x30aa <TWI_MasterWriteHandler+0x3c>
    3092:	86 89       	ldd	r24, Z+22	; 0x16
    3094:	82 17       	cp	r24, r18
    3096:	f8 f0       	brcs	.+62     	; 0x30d6 <TWI_MasterWriteHandler+0x68>
    3098:	83 e0       	ldi	r24, 0x03	; 3
    309a:	13 96       	adiw	r26, 0x03	; 3
    309c:	8c 93       	st	X, r24
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	80 8f       	std	Z+24, r24	; 0x18
    30a2:	17 8a       	std	Z+23, r1	; 0x17
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret
    30aa:	85 89       	ldd	r24, Z+21	; 0x15
    30ac:	ef 01       	movw	r28, r30
    30ae:	c8 0f       	add	r28, r24
    30b0:	d1 1d       	adc	r29, r1
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	17 96       	adiw	r26, 0x07	; 7
    30b6:	8c 93       	st	X, r24
    30b8:	85 89       	ldd	r24, Z+21	; 0x15
    30ba:	8f 5f       	subi	r24, 0xFF	; 255
    30bc:	85 8b       	std	Z+21, r24	; 0x15
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	13 96       	adiw	r26, 0x03	; 3
    30c8:	8c 93       	st	X, r24
    30ca:	85 e0       	ldi	r24, 0x05	; 5
    30cc:	80 8f       	std	Z+24, r24	; 0x18
    30ce:	17 8a       	std	Z+23, r1	; 0x17
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	08 95       	ret
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	81 60       	ori	r24, 0x01	; 1
    30da:	16 96       	adiw	r26, 0x06	; 6
    30dc:	8c 93       	st	X, r24
    30de:	df 91       	pop	r29
    30e0:	cf 91       	pop	r28
    30e2:	08 95       	ret

000030e4 <TWI_MasterReadHandler>:
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	e0 91 46 2a 	lds	r30, 0x2A46	; 0x802a46 <twi>
    30ec:	f0 91 47 2a 	lds	r31, 0x2A47	; 0x802a47 <twi+0x1>
    30f0:	86 89       	ldd	r24, Z+22	; 0x16
    30f2:	a0 81       	ld	r26, Z
    30f4:	b1 81       	ldd	r27, Z+1	; 0x01
    30f6:	88 30       	cpi	r24, 0x08	; 8
    30f8:	c0 f4       	brcc	.+48     	; 0x312a <TWI_MasterReadHandler+0x46>
    30fa:	17 96       	adiw	r26, 0x07	; 7
    30fc:	8c 91       	ld	r24, X
    30fe:	17 97       	sbiw	r26, 0x07	; 7
    3100:	96 89       	ldd	r25, Z+22	; 0x16
    3102:	ef 01       	movw	r28, r30
    3104:	c9 0f       	add	r28, r25
    3106:	d1 1d       	adc	r29, r1
    3108:	8b 87       	std	Y+11, r24	; 0x0b
    310a:	86 89       	ldd	r24, Z+22	; 0x16
    310c:	8f 5f       	subi	r24, 0xFF	; 255
    310e:	86 8b       	std	Z+22, r24	; 0x16
    3110:	94 89       	ldd	r25, Z+20	; 0x14
    3112:	86 89       	ldd	r24, Z+22	; 0x16
    3114:	89 17       	cp	r24, r25
    3116:	a8 f0       	brcs	.+42     	; 0x3142 <TWI_MasterReadHandler+0x5e>
    3118:	87 e0       	ldi	r24, 0x07	; 7
    311a:	13 96       	adiw	r26, 0x03	; 3
    311c:	8c 93       	st	X, r24
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	80 8f       	std	Z+24, r24	; 0x18
    3122:	17 8a       	std	Z+23, r1	; 0x17
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	08 95       	ret
    312a:	83 e0       	ldi	r24, 0x03	; 3
    312c:	13 96       	adiw	r26, 0x03	; 3
    312e:	8c 93       	st	X, r24
    3130:	82 e0       	ldi	r24, 0x02	; 2
    3132:	80 8f       	std	Z+24, r24	; 0x18
    3134:	17 8a       	std	Z+23, r1	; 0x17
    3136:	a0 81       	ld	r26, Z
    3138:	b1 81       	ldd	r27, Z+1	; 0x01
    313a:	94 89       	ldd	r25, Z+20	; 0x14
    313c:	86 89       	ldd	r24, Z+22	; 0x16
    313e:	89 17       	cp	r24, r25
    3140:	58 f7       	brcc	.-42     	; 0x3118 <TWI_MasterReadHandler+0x34>
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	13 96       	adiw	r26, 0x03	; 3
    3146:	8c 93       	st	X, r24
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	08 95       	ret

0000314e <TWI_MasterInterruptHandler>:
    314e:	e0 91 46 2a 	lds	r30, 0x2A46	; 0x802a46 <twi>
    3152:	f0 91 47 2a 	lds	r31, 0x2A47	; 0x802a47 <twi+0x1>
    3156:	a0 81       	ld	r26, Z
    3158:	b1 81       	ldd	r27, Z+1	; 0x01
    315a:	14 96       	adiw	r26, 0x04	; 4
    315c:	8c 91       	ld	r24, X
    315e:	14 97       	sbiw	r26, 0x04	; 4
    3160:	98 2f       	mov	r25, r24
    3162:	9c 70       	andi	r25, 0x0C	; 12
    3164:	41 f4       	brne	.+16     	; 0x3176 <TWI_MasterInterruptHandler+0x28>
    3166:	86 fd       	sbrc	r24, 6
    3168:	19 c0       	rjmp	.+50     	; 0x319c <TWI_MasterInterruptHandler+0x4e>
    316a:	87 fd       	sbrc	r24, 7
    316c:	19 c0       	rjmp	.+50     	; 0x31a0 <TWI_MasterInterruptHandler+0x52>
    316e:	86 e0       	ldi	r24, 0x06	; 6
    3170:	80 8f       	std	Z+24, r24	; 0x18
    3172:	17 8a       	std	Z+23, r1	; 0x17
    3174:	08 95       	ret
    3176:	14 96       	adiw	r26, 0x04	; 4
    3178:	8c 91       	ld	r24, X
    317a:	14 97       	sbiw	r26, 0x04	; 4
    317c:	82 fd       	sbrc	r24, 2
    317e:	07 c0       	rjmp	.+14     	; 0x318e <TWI_MasterInterruptHandler+0x40>
    3180:	93 e0       	ldi	r25, 0x03	; 3
    3182:	90 8f       	std	Z+24, r25	; 0x18
    3184:	88 60       	ori	r24, 0x08	; 8
    3186:	14 96       	adiw	r26, 0x04	; 4
    3188:	8c 93       	st	X, r24
    318a:	17 8a       	std	Z+23, r1	; 0x17
    318c:	08 95       	ret
    318e:	94 e0       	ldi	r25, 0x04	; 4
    3190:	90 8f       	std	Z+24, r25	; 0x18
    3192:	88 60       	ori	r24, 0x08	; 8
    3194:	14 96       	adiw	r26, 0x04	; 4
    3196:	8c 93       	st	X, r24
    3198:	17 8a       	std	Z+23, r1	; 0x17
    319a:	08 95       	ret
    319c:	0c 94 37 18 	jmp	0x306e	; 0x306e <TWI_MasterWriteHandler>
    31a0:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <TWI_MasterReadHandler>

000031a4 <__vector_46>:
}

ISR(TWIE_TWIM_vect)
{
    31a4:	1f 92       	push	r1
    31a6:	0f 92       	push	r0
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	0f 92       	push	r0
    31ac:	11 24       	eor	r1, r1
    31ae:	0b b6       	in	r0, 0x3b	; 59
    31b0:	0f 92       	push	r0
    31b2:	2f 93       	push	r18
    31b4:	3f 93       	push	r19
    31b6:	4f 93       	push	r20
    31b8:	5f 93       	push	r21
    31ba:	6f 93       	push	r22
    31bc:	7f 93       	push	r23
    31be:	8f 93       	push	r24
    31c0:	9f 93       	push	r25
    31c2:	af 93       	push	r26
    31c4:	bf 93       	push	r27
    31c6:	ef 93       	push	r30
    31c8:	ff 93       	push	r31
	TWI_MasterInterruptHandler();
    31ca:	0e 94 a7 18 	call	0x314e	; 0x314e <TWI_MasterInterruptHandler>
    31ce:	ff 91       	pop	r31
    31d0:	ef 91       	pop	r30
    31d2:	bf 91       	pop	r27
    31d4:	af 91       	pop	r26
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	7f 91       	pop	r23
    31dc:	6f 91       	pop	r22
    31de:	5f 91       	pop	r21
    31e0:	4f 91       	pop	r20
    31e2:	3f 91       	pop	r19
    31e4:	2f 91       	pop	r18
    31e6:	0f 90       	pop	r0
    31e8:	0b be       	out	0x3b, r0	; 59
    31ea:	0f 90       	pop	r0
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	0f 90       	pop	r0
    31f0:	1f 90       	pop	r1
    31f2:	18 95       	reti

000031f4 <ir_transmit_complete>:
				   }
			   }
		   }
		   delay_us(100);
	   } while (busy);
}
    31f4:	5f b7       	in	r21, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	e0 e0       	ldi	r30, 0x00	; 0
    31fa:	fb e0       	ldi	r31, 0x0B	; 11
    31fc:	41 81       	ldd	r20, Z+1	; 0x01
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	d9 01       	movw	r26, r18
    3204:	ac 54       	subi	r26, 0x4C	; 76
    3206:	be 4d       	sbci	r27, 0xDE	; 222
    3208:	9c 91       	ld	r25, X
    320a:	90 95       	com	r25
    320c:	94 23       	and	r25, r20
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	99 e3       	ldi	r25, 0x39	; 57
    3212:	92 9f       	mul	r25, r18
    3214:	f0 01       	movw	r30, r0
    3216:	93 9f       	mul	r25, r19
    3218:	f0 0d       	add	r31, r0
    321a:	11 24       	eor	r1, r1
    321c:	e5 56       	subi	r30, 0x65	; 101
    321e:	f7 4d       	sbci	r31, 0xD7	; 215
    3220:	10 ae       	std	Z+56, r1	; 0x38
    3222:	16 aa       	std	Z+54, r1	; 0x36
    3224:	12 86       	std	Z+10, r1	; 0x0a
    3226:	13 86       	std	Z+11, r1	; 0x0b
    3228:	10 86       	std	Z+8, r1	; 0x08
    322a:	11 86       	std	Z+9, r1	; 0x09
    322c:	16 82       	std	Z+6, r1	; 0x06
    322e:	17 82       	std	Z+7, r1	; 0x07
    3230:	22 0f       	add	r18, r18
    3232:	33 1f       	adc	r19, r19
    3234:	f9 01       	movw	r30, r18
    3236:	ea 5f       	subi	r30, 0xFA	; 250
    3238:	ff 4d       	sbci	r31, 0xDF	; 223
    323a:	01 90       	ld	r0, Z+
    323c:	f0 81       	ld	r31, Z
    323e:	e0 2d       	mov	r30, r0
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	90 64       	ori	r25, 0x40	; 64
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	94 81       	ldd	r25, Z+4	; 0x04
    3248:	90 61       	ori	r25, 0x10	; 16
    324a:	94 83       	std	Z+4, r25	; 0x04
    324c:	40 91 27 2a 	lds	r20, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    3250:	21 e0       	ldi	r18, 0x01	; 1
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	b9 01       	movw	r22, r18
    3256:	02 c0       	rjmp	.+4      	; 0x325c <ir_transmit_complete+0x68>
    3258:	66 0f       	add	r22, r22
    325a:	77 1f       	adc	r23, r23
    325c:	8a 95       	dec	r24
    325e:	e2 f7       	brpl	.-8      	; 0x3258 <ir_transmit_complete+0x64>
    3260:	cb 01       	movw	r24, r22
    3262:	80 95       	com	r24
    3264:	84 23       	and	r24, r20
    3266:	80 93 27 2a 	sts	0x2A27, r24	; 0x802a27 <hp_ir_block_bm>
    326a:	5f bf       	out	0x3f, r21	; 63
    326c:	08 95       	ret

0000326e <perform_ir_upkeep>:
    326e:	2f 92       	push	r2
    3270:	3f 92       	push	r3
    3272:	4f 92       	push	r4
    3274:	5f 92       	push	r5
    3276:	6f 92       	push	r6
    3278:	7f 92       	push	r7
    327a:	8f 92       	push	r8
    327c:	9f 92       	push	r9
    327e:	af 92       	push	r10
    3280:	bf 92       	push	r11
    3282:	cf 92       	push	r12
    3284:	df 92       	push	r13
    3286:	ef 92       	push	r14
    3288:	ff 92       	push	r15
    328a:	0f 93       	push	r16
    328c:	1f 93       	push	r17
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	2d 97       	sbiw	r28, 0x0d	; 13
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	ce 01       	movw	r24, r28
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	6c 01       	movw	r12, r24
    32a2:	8c e0       	ldi	r24, 0x0C	; 12
    32a4:	d6 01       	movw	r26, r12
    32a6:	1d 92       	st	X+, r1
    32a8:	8a 95       	dec	r24
    32aa:	e9 f7       	brne	.-6      	; 0x32a6 <perform_ir_upkeep+0x38>
    32ac:	86 e0       	ldi	r24, 0x06	; 6
    32ae:	a8 2e       	mov	r10, r24
    32b0:	80 e2       	ldi	r24, 0x20	; 32
    32b2:	b8 2e       	mov	r11, r24
    32b4:	99 ea       	ldi	r25, 0xA9	; 169
    32b6:	89 2e       	mov	r8, r25
    32b8:	98 e2       	ldi	r25, 0x28	; 40
    32ba:	99 2e       	mov	r9, r25
    32bc:	36 01       	movw	r6, r12
    32be:	bf ef       	ldi	r27, 0xFF	; 255
    32c0:	bd 87       	std	Y+13, r27	; 0x0d
    32c2:	e1 2c       	mov	r14, r1
    32c4:	f1 2c       	mov	r15, r1
    32c6:	31 2c       	mov	r3, r1
    32c8:	29 e3       	ldi	r18, 0x39	; 57
    32ca:	42 2e       	mov	r4, r18
    32cc:	31 e3       	ldi	r19, 0x31	; 49
    32ce:	53 2e       	mov	r5, r19
    32d0:	4e 9c       	mul	r4, r14
    32d2:	d0 01       	movw	r26, r0
    32d4:	4f 9c       	mul	r4, r15
    32d6:	b0 0d       	add	r27, r0
    32d8:	11 24       	eor	r1, r1
    32da:	a5 56       	subi	r26, 0x65	; 101
    32dc:	b7 4d       	sbci	r27, 0xD7	; 215
    32de:	d8 96       	adiw	r26, 0x38	; 56
    32e0:	8c 91       	ld	r24, X
    32e2:	d8 97       	sbiw	r26, 0x38	; 56
    32e4:	81 ff       	sbrs	r24, 1
    32e6:	3b c0       	rjmp	.+118    	; 0x335e <perform_ir_upkeep+0xf0>
    32e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ea:	8f 3f       	cpi	r24, 0xFF	; 255
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <perform_ir_upkeep+0x82>
    32ee:	60 c0       	rjmp	.+192    	; 0x33b0 <perform_ir_upkeep+0x142>
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	14 96       	adiw	r26, 0x04	; 4
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <perform_ir_upkeep+0x8c>
    32f6:	81 50       	subi	r24, 0x01	; 1
    32f8:	80 f0       	brcs	.+32     	; 0x331a <perform_ir_upkeep+0xac>
    32fa:	2d 91       	ld	r18, X+
    32fc:	3c 91       	ld	r19, X
    32fe:	11 97       	sbiw	r26, 0x01	; 1
    3300:	e8 2f       	mov	r30, r24
    3302:	ee 0f       	add	r30, r30
    3304:	ff 0b       	sbc	r31, r31
    3306:	ec 0d       	add	r30, r12
    3308:	fd 1d       	adc	r31, r13
    330a:	40 81       	ld	r20, Z
    330c:	51 81       	ldd	r21, Z+1	; 0x01
    330e:	42 17       	cp	r20, r18
    3310:	53 07       	cpc	r21, r19
    3312:	89 f7       	brne	.-30     	; 0x32f6 <perform_ir_upkeep+0x88>
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	81 50       	subi	r24, 0x01	; 1
    3318:	80 f7       	brcc	.-32     	; 0x32fa <perform_ir_upkeep+0x8c>
    331a:	4e 9c       	mul	r4, r14
    331c:	f0 01       	movw	r30, r0
    331e:	4f 9c       	mul	r4, r15
    3320:	f0 0d       	add	r31, r0
    3322:	11 24       	eor	r1, r1
    3324:	e5 56       	subi	r30, 0x65	; 101
    3326:	f7 4d       	sbci	r31, 0xD7	; 215
    3328:	24 81       	ldd	r18, Z+4	; 0x04
    332a:	35 81       	ldd	r19, Z+5	; 0x05
    332c:	d3 01       	movw	r26, r6
    332e:	2d 93       	st	X+, r18
    3330:	3c 93       	st	X, r19
    3332:	99 23       	and	r25, r25
    3334:	09 f4       	brne	.+2      	; 0x3338 <perform_ir_upkeep+0xca>
    3336:	43 c0       	rjmp	.+134    	; 0x33be <perform_ir_upkeep+0x150>
    3338:	14 82       	std	Z+4, r1	; 0x04
    333a:	15 82       	std	Z+5, r1	; 0x05
    333c:	16 82       	std	Z+6, r1	; 0x06
    333e:	17 82       	std	Z+7, r1	; 0x07
    3340:	10 86       	std	Z+8, r1	; 0x08
    3342:	11 86       	std	Z+9, r1	; 0x09
    3344:	12 86       	std	Z+10, r1	; 0x0a
    3346:	13 86       	std	Z+11, r1	; 0x0b
    3348:	14 86       	std	Z+12, r1	; 0x0c
    334a:	15 86       	std	Z+13, r1	; 0x0d
    334c:	16 aa       	std	Z+54, r1	; 0x36
    334e:	17 aa       	std	Z+55, r1	; 0x37
    3350:	10 ae       	std	Z+56, r1	; 0x38
    3352:	d5 01       	movw	r26, r10
    3354:	ed 91       	ld	r30, X+
    3356:	fc 91       	ld	r31, X
    3358:	84 81       	ldd	r24, Z+4	; 0x04
    335a:	80 61       	ori	r24, 0x10	; 16
    335c:	84 83       	std	Z+4, r24	; 0x04
    335e:	33 94       	inc	r3
    3360:	bf ef       	ldi	r27, 0xFF	; 255
    3362:	eb 1a       	sub	r14, r27
    3364:	fb 0a       	sbc	r15, r27
    3366:	e2 e0       	ldi	r30, 0x02	; 2
    3368:	ae 0e       	add	r10, r30
    336a:	b1 1c       	adc	r11, r1
    336c:	f9 e3       	ldi	r31, 0x39	; 57
    336e:	8f 0e       	add	r8, r31
    3370:	91 1c       	adc	r9, r1
    3372:	22 e0       	ldi	r18, 0x02	; 2
    3374:	62 0e       	add	r6, r18
    3376:	71 1c       	adc	r7, r1
    3378:	8d 85       	ldd	r24, Y+13	; 0x0d
    337a:	8f 5f       	subi	r24, 0xFF	; 255
    337c:	8d 87       	std	Y+13, r24	; 0x0d
    337e:	96 e0       	ldi	r25, 0x06	; 6
    3380:	39 12       	cpse	r3, r25
    3382:	a6 cf       	rjmp	.-180    	; 0x32d0 <perform_ir_upkeep+0x62>
    3384:	2d 96       	adiw	r28, 0x0d	; 13
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	ff 90       	pop	r15
    3394:	ef 90       	pop	r14
    3396:	df 90       	pop	r13
    3398:	cf 90       	pop	r12
    339a:	bf 90       	pop	r11
    339c:	af 90       	pop	r10
    339e:	9f 90       	pop	r9
    33a0:	8f 90       	pop	r8
    33a2:	7f 90       	pop	r7
    33a4:	6f 90       	pop	r6
    33a6:	5f 90       	pop	r5
    33a8:	4f 90       	pop	r4
    33aa:	3f 90       	pop	r3
    33ac:	2f 90       	pop	r2
    33ae:	08 95       	ret
    33b0:	14 96       	adiw	r26, 0x04	; 4
    33b2:	8d 91       	ld	r24, X+
    33b4:	9c 91       	ld	r25, X
    33b6:	15 97       	sbiw	r26, 0x05	; 5
    33b8:	d3 01       	movw	r26, r6
    33ba:	8d 93       	st	X+, r24
    33bc:	9c 93       	st	X, r25
    33be:	80 91 e0 27 	lds	r24, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    33c2:	86 30       	cpi	r24, 0x06	; 6
    33c4:	28 f0       	brcs	.+10     	; 0x33d0 <perform_ir_upkeep+0x162>
    33c6:	b1 e0       	ldi	r27, 0x01	; 1
    33c8:	b0 93 9b 26 	sts	0x269B, r27	; 0x80269b <user_facing_messages_ovf>
    33cc:	10 92 e0 27 	sts	0x27E0, r1	; 0x8027e0 <num_waiting_msgs>
    33d0:	2f b6       	in	r2, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	4e 9c       	mul	r4, r14
    33d6:	f0 01       	movw	r30, r0
    33d8:	4f 9c       	mul	r4, r15
    33da:	f0 0d       	add	r31, r0
    33dc:	11 24       	eor	r1, r1
    33de:	e5 56       	subi	r30, 0x65	; 101
    33e0:	f7 4d       	sbci	r31, 0xD7	; 215
    33e2:	86 a9       	ldd	r24, Z+54	; 0x36
    33e4:	88 23       	and	r24, r24
    33e6:	09 f4       	brne	.+2      	; 0x33ea <perform_ir_upkeep+0x17c>
    33e8:	78 c0       	rjmp	.+240    	; 0x34da <perform_ir_upkeep+0x26c>
    33ea:	4e 9c       	mul	r4, r14
    33ec:	80 01       	movw	r16, r0
    33ee:	4f 9c       	mul	r4, r15
    33f0:	10 0d       	add	r17, r0
    33f2:	11 24       	eor	r1, r1
    33f4:	05 56       	subi	r16, 0x65	; 101
    33f6:	17 4d       	sbci	r17, 0xD7	; 215
    33f8:	d8 01       	movw	r26, r16
    33fa:	d6 96       	adiw	r26, 0x36	; 54
    33fc:	4c 91       	ld	r20, X
    33fe:	80 91 e0 27 	lds	r24, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3402:	58 9e       	mul	r5, r24
    3404:	c0 01       	movw	r24, r0
    3406:	11 24       	eor	r1, r1
    3408:	50 e0       	ldi	r21, 0x00	; 0
    340a:	b4 01       	movw	r22, r8
    340c:	85 54       	subi	r24, 0x45	; 69
    340e:	99 4d       	sbci	r25, 0xD9	; 217
    3410:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <memcpy>
    3414:	e0 91 e0 27 	lds	r30, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3418:	d8 01       	movw	r26, r16
    341a:	d6 96       	adiw	r26, 0x36	; 54
    341c:	8c 91       	ld	r24, X
    341e:	d6 97       	sbiw	r26, 0x36	; 54
    3420:	5e 9e       	mul	r5, r30
    3422:	f0 01       	movw	r30, r0
    3424:	11 24       	eor	r1, r1
    3426:	eb 54       	subi	r30, 0x4B	; 75
    3428:	f9 4d       	sbci	r31, 0xD9	; 217
    342a:	e8 0f       	add	r30, r24
    342c:	f1 1d       	adc	r31, r1
    342e:	16 82       	std	Z+6, r1	; 0x06
    3430:	20 91 e0 27 	lds	r18, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3434:	8d 91       	ld	r24, X+
    3436:	9d 91       	ld	r25, X+
    3438:	0d 90       	ld	r0, X+
    343a:	bc 91       	ld	r27, X
    343c:	a0 2d       	mov	r26, r0
    343e:	52 9e       	mul	r5, r18
    3440:	f0 01       	movw	r30, r0
    3442:	11 24       	eor	r1, r1
    3444:	eb 54       	subi	r30, 0x4B	; 75
    3446:	f9 4d       	sbci	r31, 0xD9	; 217
    3448:	80 83       	st	Z, r24
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	a2 83       	std	Z+2, r26	; 0x02
    344e:	b3 83       	std	Z+3, r27	; 0x03
    3450:	e0 91 e0 27 	lds	r30, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3454:	5e 9e       	mul	r5, r30
    3456:	f0 01       	movw	r30, r0
    3458:	11 24       	eor	r1, r1
    345a:	eb 54       	subi	r30, 0x4B	; 75
    345c:	f9 4d       	sbci	r31, 0xD9	; 217
    345e:	36 a6       	std	Z+46, r3	; 0x2e
    3460:	e0 91 e0 27 	lds	r30, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3464:	d8 01       	movw	r26, r16
    3466:	16 96       	adiw	r26, 0x06	; 6
    3468:	8d 91       	ld	r24, X+
    346a:	9c 91       	ld	r25, X
    346c:	17 97       	sbiw	r26, 0x07	; 7
    346e:	5e 9e       	mul	r5, r30
    3470:	f0 01       	movw	r30, r0
    3472:	11 24       	eor	r1, r1
    3474:	eb 54       	subi	r30, 0x4B	; 75
    3476:	f9 4d       	sbci	r31, 0xD9	; 217
    3478:	84 83       	std	Z+4, r24	; 0x04
    347a:	95 83       	std	Z+5, r25	; 0x05
    347c:	e0 91 e0 27 	lds	r30, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3480:	d6 96       	adiw	r26, 0x36	; 54
    3482:	8c 91       	ld	r24, X
    3484:	d6 97       	sbiw	r26, 0x36	; 54
    3486:	5e 9e       	mul	r5, r30
    3488:	f0 01       	movw	r30, r0
    348a:	11 24       	eor	r1, r1
    348c:	eb 54       	subi	r30, 0x4B	; 75
    348e:	f9 4d       	sbci	r31, 0xD9	; 217
    3490:	87 a7       	std	Z+47, r24	; 0x2f
    3492:	e0 91 e0 27 	lds	r30, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    3496:	d8 96       	adiw	r26, 0x38	; 56
    3498:	8c 91       	ld	r24, X
    349a:	82 95       	swap	r24
    349c:	81 70       	andi	r24, 0x01	; 1
    349e:	5e 9e       	mul	r5, r30
    34a0:	f0 01       	movw	r30, r0
    34a2:	11 24       	eor	r1, r1
    34a4:	eb 54       	subi	r30, 0x4B	; 75
    34a6:	f9 4d       	sbci	r31, 0xD9	; 217
    34a8:	80 ab       	std	Z+48, r24	; 0x30
    34aa:	e0 91 e0 27 	lds	r30, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    34ae:	5e 9e       	mul	r5, r30
    34b0:	f0 01       	movw	r30, r0
    34b2:	11 24       	eor	r1, r1
    34b4:	eb 54       	subi	r30, 0x4B	; 75
    34b6:	f9 4d       	sbci	r31, 0xD9	; 217
    34b8:	87 a5       	ldd	r24, Z+47	; 0x2f
    34ba:	89 32       	cpi	r24, 0x29	; 41
    34bc:	b8 f4       	brcc	.+46     	; 0x34ec <perform_ir_upkeep+0x27e>
    34be:	80 91 e0 27 	lds	r24, 0x27E0	; 0x8027e0 <num_waiting_msgs>
    34c2:	8f 5f       	subi	r24, 0xFF	; 255
    34c4:	80 93 e0 27 	sts	0x27E0, r24	; 0x8027e0 <num_waiting_msgs>
    34c8:	2f be       	out	0x3f, r2	; 63
    34ca:	4e 9c       	mul	r4, r14
    34cc:	f0 01       	movw	r30, r0
    34ce:	4f 9c       	mul	r4, r15
    34d0:	f0 0d       	add	r31, r0
    34d2:	11 24       	eor	r1, r1
    34d4:	e5 56       	subi	r30, 0x65	; 101
    34d6:	f7 4d       	sbci	r31, 0xD7	; 215
    34d8:	2f cf       	rjmp	.-418    	; 0x3338 <perform_ir_upkeep+0xca>
    34da:	e9 ed       	ldi	r30, 0xD9	; 217
    34dc:	f6 e0       	ldi	r31, 0x06	; 6
    34de:	ff 93       	push	r31
    34e0:	ef 93       	push	r30
    34e2:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	7f cf       	rjmp	.-258    	; 0x33ea <perform_ir_upkeep+0x17c>
    34ec:	ee eb       	ldi	r30, 0xBE	; 190
    34ee:	f6 e0       	ldi	r31, 0x06	; 6
    34f0:	ff 93       	push	r31
    34f2:	ef 93       	push	r30
    34f4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	e0 cf       	rjmp	.-64     	; 0x34be <perform_ir_upkeep+0x250>

000034fe <handle_cmd_wrapper>:
    34fe:	ef 92       	push	r14
    3500:	ff 92       	push	r15
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	cf 93       	push	r28
    3508:	df 93       	push	r29
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	0d b7       	in	r16, 0x3d	; 61
    3510:	1e b7       	in	r17, 0x3e	; 62
    3512:	80 91 55 25 	lds	r24, 0x2555	; 0x802555 <cmd_length>
    3516:	90 91 56 25 	lds	r25, 0x2556	; 0x802556 <cmd_length+0x1>
    351a:	01 96       	adiw	r24, 0x01	; 1
    351c:	2d b7       	in	r18, 0x3d	; 61
    351e:	3e b7       	in	r19, 0x3e	; 62
    3520:	28 1b       	sub	r18, r24
    3522:	39 0b       	sbc	r19, r25
    3524:	2d bf       	out	0x3d, r18	; 61
    3526:	3e bf       	out	0x3e, r19	; 62
    3528:	8d b7       	in	r24, 0x3d	; 61
    352a:	9e b7       	in	r25, 0x3e	; 62
    352c:	01 96       	adiw	r24, 0x01	; 1
    352e:	7c 01       	movw	r14, r24
    3530:	40 91 55 25 	lds	r20, 0x2555	; 0x802555 <cmd_length>
    3534:	50 91 56 25 	lds	r21, 0x2556	; 0x802556 <cmd_length+0x1>
    3538:	4f 5f       	subi	r20, 0xFF	; 255
    353a:	5f 4f       	sbci	r21, 0xFF	; 255
    353c:	65 e1       	ldi	r22, 0x15	; 21
    353e:	75 e2       	ldi	r23, 0x25	; 37
    3540:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <memcpy>
    3544:	60 91 55 25 	lds	r22, 0x2555	; 0x802555 <cmd_length>
    3548:	70 91 56 25 	lds	r23, 0x2556	; 0x802556 <cmd_length+0x1>
    354c:	c7 01       	movw	r24, r14
    354e:	0e 94 b7 63 	call	0xc76e	; 0xc76e <handle_serial_command>
    3552:	8f b7       	in	r24, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	10 92 58 25 	sts	0x2558, r1	; 0x802558 <processing_cmd>
    355a:	8f bf       	out	0x3f, r24	; 63
    355c:	0d bf       	out	0x3d, r16	; 61
    355e:	1e bf       	out	0x3e, r17	; 62
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	ff 90       	pop	r15
    356a:	ef 90       	pop	r14
    356c:	08 95       	ret

0000356e <ir_transmit>:
    356e:	0f 93       	push	r16
    3570:	1f 93       	push	r17
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	98 2f       	mov	r25, r24
    3578:	c8 2f       	mov	r28, r24
    357a:	d0 e0       	ldi	r29, 0x00	; 0
    357c:	89 e3       	ldi	r24, 0x39	; 57
    357e:	98 9f       	mul	r25, r24
    3580:	d0 01       	movw	r26, r0
    3582:	11 24       	eor	r1, r1
    3584:	a5 56       	subi	r26, 0x65	; 101
    3586:	b7 4d       	sbci	r27, 0xD7	; 215
    3588:	1a 96       	adiw	r26, 0x0a	; 10
    358a:	ed 91       	ld	r30, X+
    358c:	fc 91       	ld	r31, X
    358e:	1b 97       	sbiw	r26, 0x0b	; 11
    3590:	e8 30       	cpi	r30, 0x08	; 8
    3592:	f1 05       	cpc	r31, r1
    3594:	08 f4       	brcc	.+2      	; 0x3598 <ir_transmit+0x2a>
    3596:	49 c0       	rjmp	.+146    	; 0x362a <ir_transmit+0xbc>
    3598:	1a 96       	adiw	r26, 0x0a	; 10
    359a:	8d 91       	ld	r24, X+
    359c:	9c 91       	ld	r25, X
    359e:	1b 97       	sbiw	r26, 0x0b	; 11
    35a0:	08 97       	sbiw	r24, 0x08	; 8
    35a2:	a8 0f       	add	r26, r24
    35a4:	b9 1f       	adc	r27, r25
    35a6:	1e 96       	adiw	r26, 0x0e	; 14
    35a8:	8c 91       	ld	r24, X
    35aa:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    35ae:	fe 01       	movw	r30, r28
    35b0:	ee 0f       	add	r30, r30
    35b2:	ff 1f       	adc	r31, r31
    35b4:	ea 5f       	subi	r30, 0xFA	; 250
    35b6:	ff 4d       	sbci	r31, 0xDF	; 223
    35b8:	a0 81       	ld	r26, Z
    35ba:	b1 81       	ldd	r27, Z+1	; 0x01
    35bc:	80 91 14 25 	lds	r24, 0x2514	; 0x802514 <next_byte>
    35c0:	8c 93       	st	X, r24
    35c2:	89 e3       	ldi	r24, 0x39	; 57
    35c4:	8c 9f       	mul	r24, r28
    35c6:	f0 01       	movw	r30, r0
    35c8:	8d 9f       	mul	r24, r29
    35ca:	f0 0d       	add	r31, r0
    35cc:	11 24       	eor	r1, r1
    35ce:	e5 56       	subi	r30, 0x65	; 101
    35d0:	f7 4d       	sbci	r31, 0xD7	; 215
    35d2:	82 85       	ldd	r24, Z+10	; 0x0a
    35d4:	93 85       	ldd	r25, Z+11	; 0x0b
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	82 87       	std	Z+10, r24	; 0x0a
    35da:	93 87       	std	Z+11, r25	; 0x0b
    35dc:	22 85       	ldd	r18, Z+10	; 0x0a
    35de:	33 85       	ldd	r19, Z+11	; 0x0b
    35e0:	86 a9       	ldd	r24, Z+54	; 0x36
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	08 96       	adiw	r24, 0x08	; 8
    35e6:	28 17       	cp	r18, r24
    35e8:	39 07       	cpc	r19, r25
    35ea:	d0 f0       	brcs	.+52     	; 0x3620 <ir_transmit+0xb2>
    35ec:	14 82       	std	Z+4, r1	; 0x04
    35ee:	15 82       	std	Z+5, r1	; 0x05
    35f0:	16 82       	std	Z+6, r1	; 0x06
    35f2:	17 82       	std	Z+7, r1	; 0x07
    35f4:	10 86       	std	Z+8, r1	; 0x08
    35f6:	11 86       	std	Z+9, r1	; 0x09
    35f8:	12 86       	std	Z+10, r1	; 0x0a
    35fa:	13 86       	std	Z+11, r1	; 0x0b
    35fc:	14 86       	std	Z+12, r1	; 0x0c
    35fe:	15 86       	std	Z+13, r1	; 0x0d
    3600:	16 aa       	std	Z+54, r1	; 0x36
    3602:	17 aa       	std	Z+55, r1	; 0x37
    3604:	10 ae       	std	Z+56, r1	; 0x38
    3606:	14 96       	adiw	r26, 0x04	; 4
    3608:	8c 91       	ld	r24, X
    360a:	14 97       	sbiw	r26, 0x04	; 4
    360c:	80 61       	ori	r24, 0x10	; 16
    360e:	14 96       	adiw	r26, 0x04	; 4
    3610:	8c 93       	st	X, r24
    3612:	14 97       	sbiw	r26, 0x04	; 4
    3614:	13 96       	adiw	r26, 0x03	; 3
    3616:	8c 91       	ld	r24, X
    3618:	13 97       	sbiw	r26, 0x03	; 3
    361a:	8c 7f       	andi	r24, 0xFC	; 252
    361c:	13 96       	adiw	r26, 0x03	; 3
    361e:	8c 93       	st	X, r24
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	08 95       	ret
    362a:	88 27       	eor	r24, r24
    362c:	e2 50       	subi	r30, 0x02	; 2
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	8f 4f       	sbci	r24, 0xFF	; 255
    3632:	0c 94 5d 77 	jmp	0xeeba	; 0xeeba <__tablejump2__>
    3636:	89 e3       	ldi	r24, 0x39	; 57
    3638:	8c 9f       	mul	r24, r28
    363a:	f0 01       	movw	r30, r0
    363c:	8d 9f       	mul	r24, r29
    363e:	f0 0d       	add	r31, r0
    3640:	11 24       	eor	r1, r1
    3642:	e5 56       	subi	r30, 0x65	; 101
    3644:	f7 4d       	sbci	r31, 0xD7	; 215
    3646:	80 85       	ldd	r24, Z+8	; 0x08
    3648:	91 85       	ldd	r25, Z+9	; 0x09
    364a:	90 93 14 25 	sts	0x2514, r25	; 0x802514 <next_byte>
    364e:	af cf       	rjmp	.-162    	; 0x35ae <ir_transmit+0x40>
    3650:	89 e3       	ldi	r24, 0x39	; 57
    3652:	8c 9f       	mul	r24, r28
    3654:	80 01       	movw	r16, r0
    3656:	8d 9f       	mul	r24, r29
    3658:	10 0d       	add	r17, r0
    365a:	11 24       	eor	r1, r1
    365c:	05 56       	subi	r16, 0x65	; 101
    365e:	17 4d       	sbci	r17, 0xD7	; 215
    3660:	f8 01       	movw	r30, r16
    3662:	80 ad       	ldd	r24, Z+56	; 0x38
    3664:	86 fd       	sbrc	r24, 6
    3666:	60 c0       	rjmp	.+192    	; 0x3728 <ir_transmit+0x1ba>
    3668:	98 6f       	ori	r25, 0xF8	; 248
    366a:	90 93 14 25 	sts	0x2514, r25	; 0x802514 <next_byte>
    366e:	9f cf       	rjmp	.-194    	; 0x35ae <ir_transmit+0x40>
    3670:	89 e3       	ldi	r24, 0x39	; 57
    3672:	8c 9f       	mul	r24, r28
    3674:	f0 01       	movw	r30, r0
    3676:	8d 9f       	mul	r24, r29
    3678:	f0 0d       	add	r31, r0
    367a:	11 24       	eor	r1, r1
    367c:	e5 56       	subi	r30, 0x65	; 101
    367e:	f7 4d       	sbci	r31, 0xD7	; 215
    3680:	86 81       	ldd	r24, Z+6	; 0x06
    3682:	97 81       	ldd	r25, Z+7	; 0x07
    3684:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    3688:	92 cf       	rjmp	.-220    	; 0x35ae <ir_transmit+0x40>
    368a:	89 e3       	ldi	r24, 0x39	; 57
    368c:	8c 9f       	mul	r24, r28
    368e:	f0 01       	movw	r30, r0
    3690:	8d 9f       	mul	r24, r29
    3692:	f0 0d       	add	r31, r0
    3694:	11 24       	eor	r1, r1
    3696:	e5 56       	subi	r30, 0x65	; 101
    3698:	f7 4d       	sbci	r31, 0xD7	; 215
    369a:	86 81       	ldd	r24, Z+6	; 0x06
    369c:	97 81       	ldd	r25, Z+7	; 0x07
    369e:	90 93 14 25 	sts	0x2514, r25	; 0x802514 <next_byte>
    36a2:	85 cf       	rjmp	.-246    	; 0x35ae <ir_transmit+0x40>
    36a4:	89 e3       	ldi	r24, 0x39	; 57
    36a6:	8c 9f       	mul	r24, r28
    36a8:	f0 01       	movw	r30, r0
    36aa:	8d 9f       	mul	r24, r29
    36ac:	f0 0d       	add	r31, r0
    36ae:	11 24       	eor	r1, r1
    36b0:	e5 56       	subi	r30, 0x65	; 101
    36b2:	f7 4d       	sbci	r31, 0xD7	; 215
    36b4:	84 81       	ldd	r24, Z+4	; 0x04
    36b6:	95 81       	ldd	r25, Z+5	; 0x05
    36b8:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    36bc:	78 cf       	rjmp	.-272    	; 0x35ae <ir_transmit+0x40>
    36be:	89 e3       	ldi	r24, 0x39	; 57
    36c0:	8c 9f       	mul	r24, r28
    36c2:	f0 01       	movw	r30, r0
    36c4:	8d 9f       	mul	r24, r29
    36c6:	f0 0d       	add	r31, r0
    36c8:	11 24       	eor	r1, r1
    36ca:	e5 56       	subi	r30, 0x65	; 101
    36cc:	f7 4d       	sbci	r31, 0xD7	; 215
    36ce:	84 81       	ldd	r24, Z+4	; 0x04
    36d0:	95 81       	ldd	r25, Z+5	; 0x05
    36d2:	90 93 14 25 	sts	0x2514, r25	; 0x802514 <next_byte>
    36d6:	6b cf       	rjmp	.-298    	; 0x35ae <ir_transmit+0x40>
    36d8:	89 e3       	ldi	r24, 0x39	; 57
    36da:	8c 9f       	mul	r24, r28
    36dc:	f0 01       	movw	r30, r0
    36de:	8d 9f       	mul	r24, r29
    36e0:	f0 0d       	add	r31, r0
    36e2:	11 24       	eor	r1, r1
    36e4:	e5 56       	subi	r30, 0x65	; 101
    36e6:	f7 4d       	sbci	r31, 0xD7	; 215
    36e8:	86 a9       	ldd	r24, Z+54	; 0x36
    36ea:	8f 73       	andi	r24, 0x3F	; 63
    36ec:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    36f0:	80 ad       	ldd	r24, Z+56	; 0x38
    36f2:	90 91 14 25 	lds	r25, 0x2514	; 0x802514 <next_byte>
    36f6:	80 78       	andi	r24, 0x80	; 128
    36f8:	89 2b       	or	r24, r25
    36fa:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    36fe:	80 ad       	ldd	r24, Z+56	; 0x38
    3700:	90 91 14 25 	lds	r25, 0x2514	; 0x802514 <next_byte>
    3704:	80 74       	andi	r24, 0x40	; 64
    3706:	89 2b       	or	r24, r25
    3708:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    370c:	50 cf       	rjmp	.-352    	; 0x35ae <ir_transmit+0x40>
    370e:	89 e3       	ldi	r24, 0x39	; 57
    3710:	8c 9f       	mul	r24, r28
    3712:	f0 01       	movw	r30, r0
    3714:	8d 9f       	mul	r24, r29
    3716:	f0 0d       	add	r31, r0
    3718:	11 24       	eor	r1, r1
    371a:	e5 56       	subi	r30, 0x65	; 101
    371c:	f7 4d       	sbci	r31, 0xD7	; 215
    371e:	80 85       	ldd	r24, Z+8	; 0x08
    3720:	91 85       	ldd	r25, Z+9	; 0x09
    3722:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    3726:	43 cf       	rjmp	.-378    	; 0x35ae <ir_transmit+0x40>
    3728:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    372c:	f8 01       	movw	r30, r16
    372e:	20 85       	ldd	r18, Z+8	; 0x08
    3730:	31 85       	ldd	r19, Z+9	; 0x09
    3732:	62 1b       	sub	r22, r18
    3734:	73 0b       	sbc	r23, r19
    3736:	6f 3f       	cpi	r22, 0xFF	; 255
    3738:	71 05       	cpc	r23, r1
    373a:	18 f4       	brcc	.+6      	; 0x3742 <ir_transmit+0x1d4>
    373c:	60 93 14 25 	sts	0x2514, r22	; 0x802514 <next_byte>
    3740:	36 cf       	rjmp	.-404    	; 0x35ae <ir_transmit+0x40>
    3742:	8f ef       	ldi	r24, 0xFF	; 255
    3744:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <next_byte>
    3748:	32 cf       	rjmp	.-412    	; 0x35ae <ir_transmit+0x40>

0000374a <ir_receive>:
    374a:	4f 92       	push	r4
    374c:	5f 92       	push	r5
    374e:	6f 92       	push	r6
    3750:	7f 92       	push	r7
    3752:	af 92       	push	r10
    3754:	bf 92       	push	r11
    3756:	cf 92       	push	r12
    3758:	df 92       	push	r13
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	f8 2e       	mov	r15, r24
    3768:	c8 2f       	mov	r28, r24
    376a:	d0 e0       	ldi	r29, 0x00	; 0
    376c:	8e 01       	movw	r16, r28
    376e:	00 0f       	add	r16, r16
    3770:	11 1f       	adc	r17, r17
    3772:	98 01       	movw	r18, r16
    3774:	2a 5f       	subi	r18, 0xFA	; 250
    3776:	3f 4d       	sbci	r19, 0xDF	; 223
    3778:	69 01       	movw	r12, r18
    377a:	d9 01       	movw	r26, r18
    377c:	ed 91       	ld	r30, X+
    377e:	fc 91       	ld	r31, X
    3780:	e0 80       	ld	r14, Z
    3782:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    3786:	29 e3       	ldi	r18, 0x39	; 57
    3788:	2c 9f       	mul	r18, r28
    378a:	f0 01       	movw	r30, r0
    378c:	2d 9f       	mul	r18, r29
    378e:	f0 0d       	add	r31, r0
    3790:	11 24       	eor	r1, r1
    3792:	e5 56       	subi	r30, 0x65	; 101
    3794:	f7 4d       	sbci	r31, 0xD7	; 215
    3796:	40 80       	ld	r4, Z
    3798:	51 80       	ldd	r5, Z+1	; 0x01
    379a:	62 80       	ldd	r6, Z+2	; 0x02
    379c:	73 80       	ldd	r7, Z+3	; 0x03
    379e:	9b 01       	movw	r18, r22
    37a0:	ac 01       	movw	r20, r24
    37a2:	24 19       	sub	r18, r4
    37a4:	35 09       	sbc	r19, r5
    37a6:	46 09       	sbc	r20, r6
    37a8:	57 09       	sbc	r21, r7
    37aa:	29 01       	movw	r4, r18
    37ac:	3a 01       	movw	r6, r20
    37ae:	31 e1       	ldi	r19, 0x11	; 17
    37b0:	43 16       	cp	r4, r19
    37b2:	51 04       	cpc	r5, r1
    37b4:	61 04       	cpc	r6, r1
    37b6:	71 04       	cpc	r7, r1
    37b8:	98 f0       	brcs	.+38     	; 0x37e0 <ir_receive+0x96>
    37ba:	14 82       	std	Z+4, r1	; 0x04
    37bc:	15 82       	std	Z+5, r1	; 0x05
    37be:	16 82       	std	Z+6, r1	; 0x06
    37c0:	17 82       	std	Z+7, r1	; 0x07
    37c2:	10 86       	std	Z+8, r1	; 0x08
    37c4:	11 86       	std	Z+9, r1	; 0x09
    37c6:	12 86       	std	Z+10, r1	; 0x0a
    37c8:	13 86       	std	Z+11, r1	; 0x0b
    37ca:	14 86       	std	Z+12, r1	; 0x0c
    37cc:	15 86       	std	Z+13, r1	; 0x0d
    37ce:	16 aa       	std	Z+54, r1	; 0x36
    37d0:	17 aa       	std	Z+55, r1	; 0x37
    37d2:	10 ae       	std	Z+56, r1	; 0x38
    37d4:	d6 01       	movw	r26, r12
    37d6:	ed 91       	ld	r30, X+
    37d8:	fc 91       	ld	r31, X
    37da:	24 81       	ldd	r18, Z+4	; 0x04
    37dc:	20 61       	ori	r18, 0x10	; 16
    37de:	24 83       	std	Z+4, r18	; 0x04
    37e0:	29 e3       	ldi	r18, 0x39	; 57
    37e2:	2c 9f       	mul	r18, r28
    37e4:	d0 01       	movw	r26, r0
    37e6:	2d 9f       	mul	r18, r29
    37e8:	b0 0d       	add	r27, r0
    37ea:	11 24       	eor	r1, r1
    37ec:	a5 56       	subi	r26, 0x65	; 101
    37ee:	b7 4d       	sbci	r27, 0xD7	; 215
    37f0:	6d 93       	st	X+, r22
    37f2:	7d 93       	st	X+, r23
    37f4:	8d 93       	st	X+, r24
    37f6:	9c 93       	st	X, r25
    37f8:	13 97       	sbiw	r26, 0x03	; 3
    37fa:	1a 96       	adiw	r26, 0x0a	; 10
    37fc:	ed 91       	ld	r30, X+
    37fe:	fc 91       	ld	r31, X
    3800:	1b 97       	sbiw	r26, 0x0b	; 11
    3802:	e8 30       	cpi	r30, 0x08	; 8
    3804:	f1 05       	cpc	r31, r1
    3806:	08 f4       	brcc	.+2      	; 0x380a <ir_receive+0xc0>
    3808:	95 c0       	rjmp	.+298    	; 0x3934 <ir_receive+0x1ea>
    380a:	1a 96       	adiw	r26, 0x0a	; 10
    380c:	ed 91       	ld	r30, X+
    380e:	fc 91       	ld	r31, X
    3810:	1b 97       	sbiw	r26, 0x0b	; 11
    3812:	38 97       	sbiw	r30, 0x08	; 8
    3814:	ea 0f       	add	r30, r26
    3816:	fb 1f       	adc	r31, r27
    3818:	e6 86       	std	Z+14, r14	; 0x0e
    381a:	1c 96       	adiw	r26, 0x0c	; 12
    381c:	8d 91       	ld	r24, X+
    381e:	9c 91       	ld	r25, X
    3820:	1d 97       	sbiw	r26, 0x0d	; 13
    3822:	8e 25       	eor	r24, r14
    3824:	28 2f       	mov	r18, r24
    3826:	22 95       	swap	r18
    3828:	28 27       	eor	r18, r24
    382a:	02 2e       	mov	r0, r18
    382c:	26 95       	lsr	r18
    382e:	26 95       	lsr	r18
    3830:	20 25       	eor	r18, r0
    3832:	02 2e       	mov	r0, r18
    3834:	26 95       	lsr	r18
    3836:	20 25       	eor	r18, r0
    3838:	27 70       	andi	r18, 0x07	; 7
    383a:	08 2e       	mov	r0, r24
    383c:	89 2f       	mov	r24, r25
    383e:	26 95       	lsr	r18
    3840:	07 94       	ror	r0
    3842:	27 95       	ror	r18
    3844:	90 2d       	mov	r25, r0
    3846:	82 27       	eor	r24, r18
    3848:	06 94       	lsr	r0
    384a:	27 95       	ror	r18
    384c:	90 25       	eor	r25, r0
    384e:	82 27       	eor	r24, r18
    3850:	1c 96       	adiw	r26, 0x0c	; 12
    3852:	8d 93       	st	X+, r24
    3854:	9c 93       	st	X, r25
    3856:	1d 97       	sbiw	r26, 0x0d	; 13
    3858:	89 e3       	ldi	r24, 0x39	; 57
    385a:	8c 9f       	mul	r24, r28
    385c:	f0 01       	movw	r30, r0
    385e:	8d 9f       	mul	r24, r29
    3860:	f0 0d       	add	r31, r0
    3862:	11 24       	eor	r1, r1
    3864:	e5 56       	subi	r30, 0x65	; 101
    3866:	f7 4d       	sbci	r31, 0xD7	; 215
    3868:	82 85       	ldd	r24, Z+10	; 0x0a
    386a:	93 85       	ldd	r25, Z+11	; 0x0b
    386c:	01 96       	adiw	r24, 0x01	; 1
    386e:	82 87       	std	Z+10, r24	; 0x0a
    3870:	93 87       	std	Z+11, r25	; 0x0b
    3872:	22 85       	ldd	r18, Z+10	; 0x0a
    3874:	33 85       	ldd	r19, Z+11	; 0x0b
    3876:	86 a9       	ldd	r24, Z+54	; 0x36
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	08 96       	adiw	r24, 0x08	; 8
    387c:	28 17       	cp	r18, r24
    387e:	39 07       	cpc	r19, r25
    3880:	08 f4       	brcc	.+2      	; 0x3884 <ir_receive+0x13a>
    3882:	49 c0       	rjmp	.+146    	; 0x3916 <ir_receive+0x1cc>
    3884:	80 85       	ldd	r24, Z+8	; 0x08
    3886:	91 85       	ldd	r25, Z+9	; 0x09
    3888:	89 2b       	or	r24, r25
    388a:	09 f0       	breq	.+2      	; 0x388e <ir_receive+0x144>
    388c:	59 c0       	rjmp	.+178    	; 0x3940 <ir_receive+0x1f6>
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	99 e3       	ldi	r25, 0x39	; 57
    3892:	9c 9f       	mul	r25, r28
    3894:	f0 01       	movw	r30, r0
    3896:	9d 9f       	mul	r25, r29
    3898:	f0 0d       	add	r31, r0
    389a:	11 24       	eor	r1, r1
    389c:	e5 56       	subi	r30, 0x65	; 101
    389e:	f7 4d       	sbci	r31, 0xD7	; 215
    38a0:	90 ad       	ldd	r25, Z+56	; 0x38
    38a2:	89 2b       	or	r24, r25
    38a4:	80 af       	std	Z+56, r24	; 0x38
    38a6:	24 85       	ldd	r18, Z+12	; 0x0c
    38a8:	35 85       	ldd	r19, Z+13	; 0x0d
    38aa:	84 81       	ldd	r24, Z+4	; 0x04
    38ac:	95 81       	ldd	r25, Z+5	; 0x05
    38ae:	64 85       	ldd	r22, Z+12	; 0x0c
    38b0:	75 85       	ldd	r23, Z+13	; 0x0d
    38b2:	46 80       	ldd	r4, Z+6	; 0x06
    38b4:	57 80       	ldd	r5, Z+7	; 0x07
    38b6:	40 91 99 26 	lds	r20, 0x2699	; 0x802699 <droplet_ID>
    38ba:	50 91 9a 26 	lds	r21, 0x269A	; 0x80269a <droplet_ID+0x1>
    38be:	e0 ac       	ldd	r14, Z+56	; 0x38
    38c0:	be 2d       	mov	r27, r14
    38c2:	b0 74       	andi	r27, 0x40	; 64
    38c4:	7b 2e       	mov	r7, r27
    38c6:	e6 fc       	sbrc	r14, 6
    38c8:	04 c0       	rjmp	.+8      	; 0x38d2 <ir_receive+0x188>
    38ca:	c0 84       	ldd	r12, Z+8	; 0x08
    38cc:	d1 84       	ldd	r13, Z+9	; 0x09
    38ce:	cd 28       	or	r12, r13
    38d0:	c9 f5       	brne	.+114    	; 0x3944 <ir_receive+0x1fa>
    38d2:	e0 e0       	ldi	r30, 0x00	; 0
    38d4:	28 17       	cp	r18, r24
    38d6:	39 07       	cpc	r19, r25
    38d8:	f1 f1       	breq	.+124    	; 0x3956 <ir_receive+0x20c>
    38da:	89 e3       	ldi	r24, 0x39	; 57
    38dc:	8c 9f       	mul	r24, r28
    38de:	f0 01       	movw	r30, r0
    38e0:	8d 9f       	mul	r24, r29
    38e2:	f0 0d       	add	r31, r0
    38e4:	11 24       	eor	r1, r1
    38e6:	e5 56       	subi	r30, 0x65	; 101
    38e8:	f7 4d       	sbci	r31, 0xD7	; 215
    38ea:	14 82       	std	Z+4, r1	; 0x04
    38ec:	15 82       	std	Z+5, r1	; 0x05
    38ee:	16 82       	std	Z+6, r1	; 0x06
    38f0:	17 82       	std	Z+7, r1	; 0x07
    38f2:	10 86       	std	Z+8, r1	; 0x08
    38f4:	11 86       	std	Z+9, r1	; 0x09
    38f6:	12 86       	std	Z+10, r1	; 0x0a
    38f8:	13 86       	std	Z+11, r1	; 0x0b
    38fa:	14 86       	std	Z+12, r1	; 0x0c
    38fc:	15 86       	std	Z+13, r1	; 0x0d
    38fe:	16 aa       	std	Z+54, r1	; 0x36
    3900:	17 aa       	std	Z+55, r1	; 0x37
    3902:	10 ae       	std	Z+56, r1	; 0x38
    3904:	f8 01       	movw	r30, r16
    3906:	ea 5f       	subi	r30, 0xFA	; 250
    3908:	ff 4d       	sbci	r31, 0xDF	; 223
    390a:	01 90       	ld	r0, Z+
    390c:	f0 81       	ld	r31, Z
    390e:	e0 2d       	mov	r30, r0
    3910:	84 81       	ldd	r24, Z+4	; 0x04
    3912:	80 61       	ori	r24, 0x10	; 16
    3914:	84 83       	std	Z+4, r24	; 0x04
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	df 90       	pop	r13
    3924:	cf 90       	pop	r12
    3926:	bf 90       	pop	r11
    3928:	af 90       	pop	r10
    392a:	7f 90       	pop	r7
    392c:	6f 90       	pop	r6
    392e:	5f 90       	pop	r5
    3930:	4f 90       	pop	r4
    3932:	08 95       	ret
    3934:	88 27       	eor	r24, r24
    3936:	ea 5f       	subi	r30, 0xFA	; 250
    3938:	fe 4f       	sbci	r31, 0xFE	; 254
    393a:	8f 4f       	sbci	r24, 0xFF	; 255
    393c:	0c 94 5d 77 	jmp	0xeeba	; 0xeeba <__tablejump2__>
    3940:	80 e1       	ldi	r24, 0x10	; 16
    3942:	a6 cf       	rjmp	.-180    	; 0x3890 <ir_receive+0x146>
    3944:	c0 84       	ldd	r12, Z+8	; 0x08
    3946:	d1 84       	ldd	r13, Z+9	; 0x09
    3948:	e1 e0       	ldi	r30, 0x01	; 1
    394a:	c4 16       	cp	r12, r20
    394c:	d5 06       	cpc	r13, r21
    394e:	09 f2       	breq	.-126    	; 0x38d2 <ir_receive+0x188>
    3950:	28 17       	cp	r18, r24
    3952:	39 07       	cpc	r19, r25
    3954:	11 f6       	brne	.-124    	; 0x38da <ir_receive+0x190>
    3956:	67 2b       	or	r22, r23
    3958:	09 f4       	brne	.+2      	; 0x395c <ir_receive+0x212>
    395a:	bf cf       	rjmp	.-130    	; 0x38da <ir_receive+0x190>
    395c:	44 16       	cp	r4, r20
    395e:	55 06       	cpc	r5, r21
    3960:	09 f4       	brne	.+2      	; 0x3964 <ir_receive+0x21a>
    3962:	bb cf       	rjmp	.-138    	; 0x38da <ir_receive+0x190>
    3964:	e1 11       	cpse	r30, r1
    3966:	b9 cf       	rjmp	.-142    	; 0x38da <ir_receive+0x190>
    3968:	89 e3       	ldi	r24, 0x39	; 57
    396a:	71 10       	cpse	r7, r1
    396c:	5f c1       	rjmp	.+702    	; 0x3c2c <ir_receive+0x4e2>
    396e:	8c 9f       	mul	r24, r28
    3970:	b0 01       	movw	r22, r0
    3972:	8d 9f       	mul	r24, r29
    3974:	70 0d       	add	r23, r0
    3976:	11 24       	eor	r1, r1
    3978:	fb 01       	movw	r30, r22
    397a:	e5 56       	subi	r30, 0x65	; 101
    397c:	f7 4d       	sbci	r31, 0xD7	; 215
    397e:	6f 01       	movw	r12, r30
    3980:	87 a9       	ldd	r24, Z+55	; 0x37
    3982:	87 70       	andi	r24, 0x07	; 7
    3984:	87 ab       	std	Z+55, r24	; 0x37
    3986:	80 ad       	ldd	r24, Z+56	; 0x38
    3988:	87 fd       	sbrc	r24, 7
    398a:	e2 c0       	rjmp	.+452    	; 0x3b50 <ir_receive+0x406>
    398c:	ef b6       	in	r14, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	89 e3       	ldi	r24, 0x39	; 57
    3992:	8c 9f       	mul	r24, r28
    3994:	f0 01       	movw	r30, r0
    3996:	8d 9f       	mul	r24, r29
    3998:	f0 0d       	add	r31, r0
    399a:	11 24       	eor	r1, r1
    399c:	e5 56       	subi	r30, 0x65	; 101
    399e:	f7 4d       	sbci	r31, 0xD7	; 215
    39a0:	80 ad       	ldd	r24, Z+56	; 0x38
    39a2:	82 60       	ori	r24, 0x02	; 2
    39a4:	80 af       	std	Z+56, r24	; 0x38
    39a6:	80 ad       	ldd	r24, Z+56	; 0x38
    39a8:	81 60       	ori	r24, 0x01	; 1
    39aa:	80 af       	std	Z+56, r24	; 0x38
    39ac:	d8 01       	movw	r26, r16
    39ae:	aa 5f       	subi	r26, 0xFA	; 250
    39b0:	bf 4d       	sbci	r27, 0xDF	; 223
    39b2:	0d 90       	ld	r0, X+
    39b4:	bc 91       	ld	r27, X
    39b6:	a0 2d       	mov	r26, r0
    39b8:	14 96       	adiw	r26, 0x04	; 4
    39ba:	8c 91       	ld	r24, X
    39bc:	14 97       	sbiw	r26, 0x04	; 4
    39be:	8f 7e       	andi	r24, 0xEF	; 239
    39c0:	14 96       	adiw	r26, 0x04	; 4
    39c2:	8c 93       	st	X, r24
    39c4:	86 a9       	ldd	r24, Z+54	; 0x36
    39c6:	86 31       	cpi	r24, 0x16	; 22
    39c8:	09 f4       	brne	.+2      	; 0x39cc <ir_receive+0x282>
    39ca:	ae c0       	rjmp	.+348    	; 0x3b28 <ir_receive+0x3de>
    39cc:	ef be       	out	0x3f, r14	; 63
    39ce:	a3 cf       	rjmp	.-186    	; 0x3916 <ir_receive+0x1cc>
    39d0:	89 e3       	ldi	r24, 0x39	; 57
    39d2:	8c 9f       	mul	r24, r28
    39d4:	f0 01       	movw	r30, r0
    39d6:	8d 9f       	mul	r24, r29
    39d8:	f0 0d       	add	r31, r0
    39da:	11 24       	eor	r1, r1
    39dc:	e5 56       	subi	r30, 0x65	; 101
    39de:	f7 4d       	sbci	r31, 0xD7	; 215
    39e0:	e7 aa       	std	Z+55, r14	; 0x37
    39e2:	3a cf       	rjmp	.-396    	; 0x3858 <ir_receive+0x10e>
    39e4:	8e 2d       	mov	r24, r14
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	29 e3       	ldi	r18, 0x39	; 57
    39ea:	2c 9f       	mul	r18, r28
    39ec:	f0 01       	movw	r30, r0
    39ee:	2d 9f       	mul	r18, r29
    39f0:	f0 0d       	add	r31, r0
    39f2:	11 24       	eor	r1, r1
    39f4:	e5 56       	subi	r30, 0x65	; 101
    39f6:	f7 4d       	sbci	r31, 0xD7	; 215
    39f8:	86 83       	std	Z+6, r24	; 0x06
    39fa:	97 83       	std	Z+7, r25	; 0x07
    39fc:	2d cf       	rjmp	.-422    	; 0x3858 <ir_receive+0x10e>
    39fe:	89 e3       	ldi	r24, 0x39	; 57
    3a00:	8c 9f       	mul	r24, r28
    3a02:	f0 01       	movw	r30, r0
    3a04:	8d 9f       	mul	r24, r29
    3a06:	f0 0d       	add	r31, r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	e5 56       	subi	r30, 0x65	; 101
    3a0c:	f7 4d       	sbci	r31, 0xD7	; 215
    3a0e:	86 81       	ldd	r24, Z+6	; 0x06
    3a10:	97 81       	ldd	r25, Z+7	; 0x07
    3a12:	9e 29       	or	r25, r14
    3a14:	86 83       	std	Z+6, r24	; 0x06
    3a16:	97 83       	std	Z+7, r25	; 0x07
    3a18:	1f cf       	rjmp	.-450    	; 0x3858 <ir_receive+0x10e>
    3a1a:	8e 2d       	mov	r24, r14
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	29 e3       	ldi	r18, 0x39	; 57
    3a20:	2c 9f       	mul	r18, r28
    3a22:	f0 01       	movw	r30, r0
    3a24:	2d 9f       	mul	r18, r29
    3a26:	f0 0d       	add	r31, r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	e5 56       	subi	r30, 0x65	; 101
    3a2c:	f7 4d       	sbci	r31, 0xD7	; 215
    3a2e:	84 83       	std	Z+4, r24	; 0x04
    3a30:	95 83       	std	Z+5, r25	; 0x05
    3a32:	12 cf       	rjmp	.-476    	; 0x3858 <ir_receive+0x10e>
    3a34:	89 e3       	ldi	r24, 0x39	; 57
    3a36:	8c 9f       	mul	r24, r28
    3a38:	f0 01       	movw	r30, r0
    3a3a:	8d 9f       	mul	r24, r29
    3a3c:	f0 0d       	add	r31, r0
    3a3e:	11 24       	eor	r1, r1
    3a40:	e5 56       	subi	r30, 0x65	; 101
    3a42:	f7 4d       	sbci	r31, 0xD7	; 215
    3a44:	84 81       	ldd	r24, Z+4	; 0x04
    3a46:	95 81       	ldd	r25, Z+5	; 0x05
    3a48:	9e 29       	or	r25, r14
    3a4a:	84 83       	std	Z+4, r24	; 0x04
    3a4c:	95 83       	std	Z+5, r25	; 0x05
    3a4e:	04 cf       	rjmp	.-504    	; 0x3858 <ir_receive+0x10e>
    3a50:	89 e3       	ldi	r24, 0x39	; 57
    3a52:	8c 9f       	mul	r24, r28
    3a54:	f0 01       	movw	r30, r0
    3a56:	8d 9f       	mul	r24, r29
    3a58:	f0 0d       	add	r31, r0
    3a5a:	11 24       	eor	r1, r1
    3a5c:	e5 56       	subi	r30, 0x65	; 101
    3a5e:	f7 4d       	sbci	r31, 0xD7	; 215
    3a60:	80 ad       	ldd	r24, Z+56	; 0x38
    3a62:	9e 2d       	mov	r25, r14
    3a64:	90 7c       	andi	r25, 0xC0	; 192
    3a66:	89 2b       	or	r24, r25
    3a68:	80 af       	std	Z+56, r24	; 0x38
    3a6a:	20 ad       	ldd	r18, Z+56	; 0x38
    3a6c:	86 81       	ldd	r24, Z+6	; 0x06
    3a6e:	97 81       	ldd	r25, Z+7	; 0x07
    3a70:	20 7c       	andi	r18, 0xC0	; 192
    3a72:	82 27       	eor	r24, r18
    3a74:	28 2f       	mov	r18, r24
    3a76:	22 95       	swap	r18
    3a78:	28 27       	eor	r18, r24
    3a7a:	02 2e       	mov	r0, r18
    3a7c:	26 95       	lsr	r18
    3a7e:	26 95       	lsr	r18
    3a80:	20 25       	eor	r18, r0
    3a82:	02 2e       	mov	r0, r18
    3a84:	26 95       	lsr	r18
    3a86:	20 25       	eor	r18, r0
    3a88:	27 70       	andi	r18, 0x07	; 7
    3a8a:	08 2e       	mov	r0, r24
    3a8c:	89 2f       	mov	r24, r25
    3a8e:	26 95       	lsr	r18
    3a90:	07 94       	ror	r0
    3a92:	27 95       	ror	r18
    3a94:	90 2d       	mov	r25, r0
    3a96:	82 27       	eor	r24, r18
    3a98:	06 94       	lsr	r0
    3a9a:	27 95       	ror	r18
    3a9c:	90 25       	eor	r25, r0
    3a9e:	82 27       	eor	r24, r18
    3aa0:	84 87       	std	Z+12, r24	; 0x0c
    3aa2:	95 87       	std	Z+13, r25	; 0x0d
    3aa4:	8e 2d       	mov	r24, r14
    3aa6:	8f 73       	andi	r24, 0x3F	; 63
    3aa8:	86 ab       	std	Z+54, r24	; 0x36
    3aaa:	86 a9       	ldd	r24, Z+54	; 0x36
    3aac:	89 32       	cpi	r24, 0x29	; 41
    3aae:	08 f4       	brcc	.+2      	; 0x3ab2 <ir_receive+0x368>
    3ab0:	d3 ce       	rjmp	.-602    	; 0x3858 <ir_receive+0x10e>
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	86 ab       	std	Z+54, r24	; 0x36
    3ab6:	d0 ce       	rjmp	.-608    	; 0x3858 <ir_receive+0x10e>
    3ab8:	8e 2d       	mov	r24, r14
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	29 e3       	ldi	r18, 0x39	; 57
    3abe:	2c 9f       	mul	r18, r28
    3ac0:	f0 01       	movw	r30, r0
    3ac2:	2d 9f       	mul	r18, r29
    3ac4:	f0 0d       	add	r31, r0
    3ac6:	11 24       	eor	r1, r1
    3ac8:	e5 56       	subi	r30, 0x65	; 101
    3aca:	f7 4d       	sbci	r31, 0xD7	; 215
    3acc:	80 87       	std	Z+8, r24	; 0x08
    3ace:	91 87       	std	Z+9, r25	; 0x09
    3ad0:	c3 ce       	rjmp	.-634    	; 0x3858 <ir_receive+0x10e>
    3ad2:	89 e3       	ldi	r24, 0x39	; 57
    3ad4:	8c 9f       	mul	r24, r28
    3ad6:	f0 01       	movw	r30, r0
    3ad8:	8d 9f       	mul	r24, r29
    3ada:	f0 0d       	add	r31, r0
    3adc:	11 24       	eor	r1, r1
    3ade:	e5 56       	subi	r30, 0x65	; 101
    3ae0:	f7 4d       	sbci	r31, 0xD7	; 215
    3ae2:	80 85       	ldd	r24, Z+8	; 0x08
    3ae4:	91 85       	ldd	r25, Z+9	; 0x09
    3ae6:	9e 29       	or	r25, r14
    3ae8:	80 87       	std	Z+8, r24	; 0x08
    3aea:	91 87       	std	Z+9, r25	; 0x09
    3aec:	20 85       	ldd	r18, Z+8	; 0x08
    3aee:	31 85       	ldd	r19, Z+9	; 0x09
    3af0:	84 85       	ldd	r24, Z+12	; 0x0c
    3af2:	95 85       	ldd	r25, Z+13	; 0x0d
    3af4:	82 27       	eor	r24, r18
    3af6:	28 2f       	mov	r18, r24
    3af8:	22 95       	swap	r18
    3afa:	28 27       	eor	r18, r24
    3afc:	02 2e       	mov	r0, r18
    3afe:	26 95       	lsr	r18
    3b00:	26 95       	lsr	r18
    3b02:	20 25       	eor	r18, r0
    3b04:	02 2e       	mov	r0, r18
    3b06:	26 95       	lsr	r18
    3b08:	20 25       	eor	r18, r0
    3b0a:	27 70       	andi	r18, 0x07	; 7
    3b0c:	08 2e       	mov	r0, r24
    3b0e:	89 2f       	mov	r24, r25
    3b10:	26 95       	lsr	r18
    3b12:	07 94       	ror	r0
    3b14:	27 95       	ror	r18
    3b16:	90 2d       	mov	r25, r0
    3b18:	82 27       	eor	r24, r18
    3b1a:	06 94       	lsr	r0
    3b1c:	27 95       	ror	r18
    3b1e:	90 25       	eor	r25, r0
    3b20:	82 27       	eor	r24, r18
    3b22:	84 87       	std	Z+12, r24	; 0x0c
    3b24:	95 87       	std	Z+13, r25	; 0x0d
    3b26:	98 ce       	rjmp	.-720    	; 0x3858 <ir_receive+0x10e>
    3b28:	86 81       	ldd	r24, Z+6	; 0x06
    3b2a:	97 81       	ldd	r25, Z+7	; 0x07
    3b2c:	9f 93       	push	r25
    3b2e:	8f 93       	push	r24
    3b30:	1f 92       	push	r1
    3b32:	ff 92       	push	r15
    3b34:	89 ea       	ldi	r24, 0xA9	; 169
    3b36:	91 e2       	ldi	r25, 0x21	; 33
    3b38:	9f 93       	push	r25
    3b3a:	8f 93       	push	r24
    3b3c:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	ef be       	out	0x3f, r14	; 63
    3b4e:	e3 ce       	rjmp	.-570    	; 0x3916 <ir_receive+0x1cc>
    3b50:	cf b7       	in	r28, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	80 91 58 25 	lds	r24, 0x2558	; 0x802558 <processing_cmd>
    3b58:	81 11       	cpse	r24, r1
    3b5a:	76 c1       	rjmp	.+748    	; 0x3e48 <ir_receive+0x6fe>
    3b5c:	46 a9       	ldd	r20, Z+54	; 0x36
    3b5e:	50 e0       	ldi	r21, 0x00	; 0
    3b60:	67 55       	subi	r22, 0x57	; 87
    3b62:	77 4d       	sbci	r23, 0xD7	; 215
    3b64:	85 e1       	ldi	r24, 0x15	; 21
    3b66:	95 e2       	ldi	r25, 0x25	; 37
    3b68:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <memcpy>
    3b6c:	d6 01       	movw	r26, r12
    3b6e:	d6 96       	adiw	r26, 0x36	; 54
    3b70:	ec 91       	ld	r30, X
    3b72:	d6 97       	sbiw	r26, 0x36	; 54
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	eb 5e       	subi	r30, 0xEB	; 235
    3b78:	fa 4d       	sbci	r31, 0xDA	; 218
    3b7a:	10 82       	st	Z, r1
    3b7c:	d6 96       	adiw	r26, 0x36	; 54
    3b7e:	8c 91       	ld	r24, X
    3b80:	d6 97       	sbiw	r26, 0x36	; 54
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	80 93 55 25 	sts	0x2555, r24	; 0x802555 <cmd_length>
    3b88:	90 93 56 25 	sts	0x2556, r25	; 0x802556 <cmd_length+0x1>
    3b8c:	8d 91       	ld	r24, X+
    3b8e:	9d 91       	ld	r25, X+
    3b90:	0d 90       	ld	r0, X+
    3b92:	bc 91       	ld	r27, X
    3b94:	a0 2d       	mov	r26, r0
    3b96:	80 93 2e 2a 	sts	0x2A2E, r24	; 0x802a2e <cmd_arrival_time>
    3b9a:	90 93 2f 2a 	sts	0x2A2F, r25	; 0x802a2f <cmd_arrival_time+0x1>
    3b9e:	a0 93 30 2a 	sts	0x2A30, r26	; 0x802a30 <cmd_arrival_time+0x2>
    3ba2:	b0 93 31 2a 	sts	0x2A31, r27	; 0x802a31 <cmd_arrival_time+0x3>
    3ba6:	f6 01       	movw	r30, r12
    3ba8:	86 81       	ldd	r24, Z+6	; 0x06
    3baa:	97 81       	ldd	r25, Z+7	; 0x07
    3bac:	80 93 de 27 	sts	0x27DE, r24	; 0x8027de <cmd_sender_id>
    3bb0:	90 93 df 27 	sts	0x27DF, r25	; 0x8027df <cmd_sender_id+0x1>
    3bb4:	f0 92 b0 26 	sts	0x26B0, r15	; 0x8026b0 <cmd_arrival_dir>
    3bb8:	87 a9       	ldd	r24, Z+55	; 0x37
    3bba:	80 93 b3 26 	sts	0x26B3, r24	; 0x8026b3 <cmd_sender_dir>
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	80 93 58 25 	sts	0x2558, r24	; 0x802558 <processing_cmd>
    3bc4:	cf bf       	out	0x3f, r28	; 63
    3bc6:	88 23       	and	r24, r24
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <ir_receive+0x482>
    3bca:	a5 ce       	rjmp	.-694    	; 0x3916 <ir_receive+0x1cc>
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	4f e7       	ldi	r20, 0x7F	; 127
    3bd2:	5a e1       	ldi	r21, 0x1A	; 26
    3bd4:	65 e0       	ldi	r22, 0x05	; 5
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    3be0:	4f b7       	in	r20, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	a6 e0       	ldi	r26, 0x06	; 6
    3be6:	b0 e2       	ldi	r27, 0x20	; 32
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	39 e3       	ldi	r19, 0x39	; 57
    3bee:	38 9f       	mul	r19, r24
    3bf0:	f0 01       	movw	r30, r0
    3bf2:	39 9f       	mul	r19, r25
    3bf4:	f0 0d       	add	r31, r0
    3bf6:	11 24       	eor	r1, r1
    3bf8:	e5 56       	subi	r30, 0x65	; 101
    3bfa:	f7 4d       	sbci	r31, 0xD7	; 215
    3bfc:	14 82       	std	Z+4, r1	; 0x04
    3bfe:	15 82       	std	Z+5, r1	; 0x05
    3c00:	16 82       	std	Z+6, r1	; 0x06
    3c02:	17 82       	std	Z+7, r1	; 0x07
    3c04:	10 86       	std	Z+8, r1	; 0x08
    3c06:	11 86       	std	Z+9, r1	; 0x09
    3c08:	12 86       	std	Z+10, r1	; 0x0a
    3c0a:	13 86       	std	Z+11, r1	; 0x0b
    3c0c:	14 86       	std	Z+12, r1	; 0x0c
    3c0e:	15 86       	std	Z+13, r1	; 0x0d
    3c10:	16 aa       	std	Z+54, r1	; 0x36
    3c12:	17 aa       	std	Z+55, r1	; 0x37
    3c14:	10 ae       	std	Z+56, r1	; 0x38
    3c16:	ed 91       	ld	r30, X+
    3c18:	fd 91       	ld	r31, X+
    3c1a:	24 81       	ldd	r18, Z+4	; 0x04
    3c1c:	20 61       	ori	r18, 0x10	; 16
    3c1e:	24 83       	std	Z+4, r18	; 0x04
    3c20:	01 96       	adiw	r24, 0x01	; 1
    3c22:	86 30       	cpi	r24, 0x06	; 6
    3c24:	91 05       	cpc	r25, r1
    3c26:	19 f7       	brne	.-58     	; 0x3bee <ir_receive+0x4a4>
    3c28:	4f bf       	out	0x3f, r20	; 63
    3c2a:	75 ce       	rjmp	.-790    	; 0x3916 <ir_receive+0x1cc>
    3c2c:	8c 9f       	mul	r24, r28
    3c2e:	f0 01       	movw	r30, r0
    3c30:	8d 9f       	mul	r24, r29
    3c32:	f0 0d       	add	r31, r0
    3c34:	11 24       	eor	r1, r1
    3c36:	e5 56       	subi	r30, 0x65	; 101
    3c38:	f7 4d       	sbci	r31, 0xD7	; 215
    3c3a:	80 ad       	ldd	r24, Z+56	; 0x38
    3c3c:	87 ff       	sbrs	r24, 7
    3c3e:	a6 ce       	rjmp	.-692    	; 0x398c <ir_receive+0x242>
    3c40:	86 a9       	ldd	r24, Z+54	; 0x36
    3c42:	88 23       	and	r24, r24
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <ir_receive+0x4fe>
    3c46:	6c c0       	rjmp	.+216    	; 0x3d20 <ir_receive+0x5d6>
    3c48:	81 30       	cpi	r24, 0x01	; 1
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <ir_receive+0x504>
    3c4c:	64 ce       	rjmp	.-824    	; 0x3916 <ir_receive+0x1cc>
    3c4e:	40 81       	ld	r20, Z
    3c50:	51 81       	ldd	r21, Z+1	; 0x01
    3c52:	62 81       	ldd	r22, Z+2	; 0x02
    3c54:	73 81       	ldd	r23, Z+3	; 0x03
    3c56:	26 81       	ldd	r18, Z+6	; 0x06
    3c58:	37 81       	ldd	r19, Z+7	; 0x07
    3c5a:	c7 a9       	ldd	r28, Z+55	; 0x37
    3c5c:	ef b7       	in	r30, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	80 91 79 28 	lds	r24, 0x2879	; 0x802879 <rnbProcessingFlag>
    3c64:	81 11       	cpse	r24, r1
    3c66:	ec c0       	rjmp	.+472    	; 0x3e40 <ir_receive+0x6f6>
    3c68:	80 91 27 2a 	lds	r24, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	e8 c0       	rjmp	.+464    	; 0x3e40 <ir_receive+0x6f6>
    3c70:	cf 3f       	cpi	r28, 0xFF	; 255
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <ir_receive+0x52c>
    3c74:	e5 c0       	rjmp	.+458    	; 0x3e40 <ir_receive+0x6f6>
    3c76:	20 93 2c 2a 	sts	0x2A2C, r18	; 0x802a2c <rnbCmdID>
    3c7a:	30 93 2d 2a 	sts	0x2A2D, r19	; 0x802a2d <rnbCmdID+0x1>
    3c7e:	c5 30       	cpi	r28, 0x05	; 5
    3c80:	18 f4       	brcc	.+6      	; 0x3c88 <ir_receive+0x53e>
    3c82:	84 e1       	ldi	r24, 0x14	; 20
    3c84:	8c 1b       	sub	r24, r28
    3c86:	c8 2f       	mov	r28, r24
    3c88:	8c 2f       	mov	r24, r28
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	05 96       	adiw	r24, 0x05	; 5
    3c8e:	09 2e       	mov	r0, r25
    3c90:	00 0c       	add	r0, r0
    3c92:	aa 0b       	sbc	r26, r26
    3c94:	bb 0b       	sbc	r27, r27
    3c96:	48 1b       	sub	r20, r24
    3c98:	59 0b       	sbc	r21, r25
    3c9a:	6a 0b       	sbc	r22, r26
    3c9c:	7b 0b       	sbc	r23, r27
    3c9e:	40 93 87 28 	sts	0x2887, r20	; 0x802887 <rnbCmdSentTime>
    3ca2:	50 93 88 28 	sts	0x2888, r21	; 0x802888 <rnbCmdSentTime+0x1>
    3ca6:	60 93 89 28 	sts	0x2889, r22	; 0x802889 <rnbCmdSentTime+0x2>
    3caa:	70 93 8a 28 	sts	0x288A, r23	; 0x80288a <rnbCmdSentTime+0x3>
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <rnbProcessingFlag>
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	80 93 27 2a 	sts	0x2A27, r24	; 0x802a27 <hp_ir_block_bm>
    3cba:	41 e0       	ldi	r20, 0x01	; 1
    3cbc:	ef bf       	out	0x3f, r30	; 63
    3cbe:	44 23       	and	r20, r20
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <ir_receive+0x57a>
    3cc2:	29 ce       	rjmp	.-942    	; 0x3916 <ir_receive+0x1cc>
    3cc4:	df b7       	in	r29, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	a6 e0       	ldi	r26, 0x06	; 6
    3cca:	b0 e2       	ldi	r27, 0x20	; 32
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	59 e3       	ldi	r21, 0x39	; 57
    3cd2:	06 c0       	rjmp	.+12     	; 0x3ce0 <ir_receive+0x596>
    3cd4:	01 96       	adiw	r24, 0x01	; 1
    3cd6:	12 96       	adiw	r26, 0x02	; 2
    3cd8:	86 30       	cpi	r24, 0x06	; 6
    3cda:	91 05       	cpc	r25, r1
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <ir_receive+0x596>
    3cde:	ba c0       	rjmp	.+372    	; 0x3e54 <ir_receive+0x70a>
    3ce0:	58 9f       	mul	r21, r24
    3ce2:	f0 01       	movw	r30, r0
    3ce4:	59 9f       	mul	r21, r25
    3ce6:	f0 0d       	add	r31, r0
    3ce8:	11 24       	eor	r1, r1
    3cea:	e5 56       	subi	r30, 0x65	; 101
    3cec:	f7 4d       	sbci	r31, 0xD7	; 215
    3cee:	66 81       	ldd	r22, Z+6	; 0x06
    3cf0:	77 81       	ldd	r23, Z+7	; 0x07
    3cf2:	26 17       	cp	r18, r22
    3cf4:	37 07       	cpc	r19, r23
    3cf6:	71 f7       	brne	.-36     	; 0x3cd4 <ir_receive+0x58a>
    3cf8:	14 82       	std	Z+4, r1	; 0x04
    3cfa:	15 82       	std	Z+5, r1	; 0x05
    3cfc:	16 82       	std	Z+6, r1	; 0x06
    3cfe:	17 82       	std	Z+7, r1	; 0x07
    3d00:	10 86       	std	Z+8, r1	; 0x08
    3d02:	11 86       	std	Z+9, r1	; 0x09
    3d04:	12 86       	std	Z+10, r1	; 0x0a
    3d06:	13 86       	std	Z+11, r1	; 0x0b
    3d08:	14 86       	std	Z+12, r1	; 0x0c
    3d0a:	15 86       	std	Z+13, r1	; 0x0d
    3d0c:	16 aa       	std	Z+54, r1	; 0x36
    3d0e:	17 aa       	std	Z+55, r1	; 0x37
    3d10:	10 ae       	std	Z+56, r1	; 0x38
    3d12:	ed 91       	ld	r30, X+
    3d14:	fc 91       	ld	r31, X
    3d16:	11 97       	sbiw	r26, 0x01	; 1
    3d18:	64 81       	ldd	r22, Z+4	; 0x04
    3d1a:	60 61       	ori	r22, 0x10	; 16
    3d1c:	64 83       	std	Z+4, r22	; 0x04
    3d1e:	da cf       	rjmp	.-76     	; 0x3cd4 <ir_receive+0x58a>
    3d20:	c6 81       	ldd	r28, Z+6	; 0x06
    3d22:	d7 81       	ldd	r29, Z+7	; 0x07
    3d24:	67 a9       	ldd	r22, Z+55	; 0x37
    3d26:	9f b7       	in	r25, 0x3f	; 63
    3d28:	f8 94       	cli
    3d2a:	80 91 57 25 	lds	r24, 0x2557	; 0x802557 <processing_ffsync>
    3d2e:	81 11       	cpse	r24, r1
    3d30:	89 c0       	rjmp	.+274    	; 0x3e44 <ir_receive+0x6fa>
    3d32:	a0 90 20 0a 	lds	r10, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    3d36:	b0 90 21 0a 	lds	r11, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    3d3a:	6f 3f       	cpi	r22, 0xFF	; 255
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <ir_receive+0x5f6>
    3d3e:	82 c0       	rjmp	.+260    	; 0x3e44 <ir_receive+0x6fa>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	80 93 57 25 	sts	0x2557, r24	; 0x802557 <processing_ffsync>
    3d46:	9f bf       	out	0x3f, r25	; 63
    3d48:	88 23       	and	r24, r24
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <ir_receive+0x604>
    3d4c:	e4 cd       	rjmp	.-1080   	; 0x3916 <ir_receive+0x1cc>
    3d4e:	70 e0       	ldi	r23, 0x00	; 0
    3d50:	6e 5f       	subi	r22, 0xFE	; 254
    3d52:	7f 4f       	sbci	r23, 0xFF	; 255
    3d54:	07 2e       	mov	r0, r23
    3d56:	00 0c       	add	r0, r0
    3d58:	88 0b       	sbc	r24, r24
    3d5a:	99 0b       	sbc	r25, r25
    3d5c:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	4a ef       	ldi	r20, 0xFA	; 250
    3d66:	50 e4       	ldi	r21, 0x40	; 64
    3d68:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    3d6c:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    3d70:	6a 15       	cp	r22, r10
    3d72:	7b 05       	cpc	r23, r11
    3d74:	08 f4       	brcc	.+2      	; 0x3d78 <ir_receive+0x62e>
    3d76:	a1 c0       	rjmp	.+322    	; 0x3eba <ir_receive+0x770>
    3d78:	ff eb       	ldi	r31, 0xBF	; 191
    3d7a:	af 1a       	sub	r10, r31
    3d7c:	f2 e6       	ldi	r31, 0x62	; 98
    3d7e:	bf 0a       	sbc	r11, r31
    3d80:	a6 1a       	sub	r10, r22
    3d82:	b7 0a       	sbc	r11, r23
    3d84:	1f b7       	in	r17, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	86 e0       	ldi	r24, 0x06	; 6
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	0e 94 87 77 	call	0xef0e	; 0xef0e <malloc>
    3d90:	1f bf       	out	0x3f, r17	; 63
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	41 f1       	breq	.+80     	; 0x3de6 <ir_receive+0x69c>
    3d96:	e0 91 e7 27 	lds	r30, 0x27E7	; 0x8027e7 <obsStart>
    3d9a:	f0 91 e8 27 	lds	r31, 0x27E8	; 0x8027e8 <obsStart+0x1>
    3d9e:	04 80       	ldd	r0, Z+4	; 0x04
    3da0:	f5 81       	ldd	r31, Z+5	; 0x05
    3da2:	e0 2d       	mov	r30, r0
    3da4:	20 81       	ld	r18, Z
    3da6:	31 81       	ldd	r19, Z+1	; 0x01
    3da8:	a2 16       	cp	r10, r18
    3daa:	b3 06       	cpc	r11, r19
    3dac:	40 f4       	brcc	.+16     	; 0x3dbe <ir_receive+0x674>
    3dae:	04 80       	ldd	r0, Z+4	; 0x04
    3db0:	f5 81       	ldd	r31, Z+5	; 0x05
    3db2:	e0 2d       	mov	r30, r0
    3db4:	20 81       	ld	r18, Z
    3db6:	31 81       	ldd	r19, Z+1	; 0x01
    3db8:	a2 16       	cp	r10, r18
    3dba:	b3 06       	cpc	r11, r19
    3dbc:	c0 f3       	brcs	.-16     	; 0x3dae <ir_receive+0x664>
    3dbe:	22 81       	ldd	r18, Z+2	; 0x02
    3dc0:	33 81       	ldd	r19, Z+3	; 0x03
    3dc2:	d9 01       	movw	r26, r18
    3dc4:	14 96       	adiw	r26, 0x04	; 4
    3dc6:	8d 93       	st	X+, r24
    3dc8:	9c 93       	st	X, r25
    3dca:	15 97       	sbiw	r26, 0x05	; 5
    3dcc:	dc 01       	movw	r26, r24
    3dce:	12 96       	adiw	r26, 0x02	; 2
    3dd0:	2d 93       	st	X+, r18
    3dd2:	3c 93       	st	X, r19
    3dd4:	13 97       	sbiw	r26, 0x03	; 3
    3dd6:	14 96       	adiw	r26, 0x04	; 4
    3dd8:	ed 93       	st	X+, r30
    3dda:	fc 93       	st	X, r31
    3ddc:	15 97       	sbiw	r26, 0x05	; 5
    3dde:	82 83       	std	Z+2, r24	; 0x02
    3de0:	93 83       	std	Z+3, r25	; 0x03
    3de2:	ad 92       	st	X+, r10
    3de4:	bc 92       	st	X, r11
    3de6:	5f b7       	in	r21, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	a6 e0       	ldi	r26, 0x06	; 6
    3dec:	b0 e2       	ldi	r27, 0x20	; 32
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	49 e3       	ldi	r20, 0x39	; 57
    3df4:	05 c0       	rjmp	.+10     	; 0x3e00 <ir_receive+0x6b6>
    3df6:	01 96       	adiw	r24, 0x01	; 1
    3df8:	12 96       	adiw	r26, 0x02	; 2
    3dfa:	86 30       	cpi	r24, 0x06	; 6
    3dfc:	91 05       	cpc	r25, r1
    3dfe:	31 f1       	breq	.+76     	; 0x3e4c <ir_receive+0x702>
    3e00:	48 9f       	mul	r20, r24
    3e02:	f0 01       	movw	r30, r0
    3e04:	49 9f       	mul	r20, r25
    3e06:	f0 0d       	add	r31, r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	e5 56       	subi	r30, 0x65	; 101
    3e0c:	f7 4d       	sbci	r31, 0xD7	; 215
    3e0e:	26 81       	ldd	r18, Z+6	; 0x06
    3e10:	37 81       	ldd	r19, Z+7	; 0x07
    3e12:	c2 17       	cp	r28, r18
    3e14:	d3 07       	cpc	r29, r19
    3e16:	79 f7       	brne	.-34     	; 0x3df6 <ir_receive+0x6ac>
    3e18:	14 82       	std	Z+4, r1	; 0x04
    3e1a:	15 82       	std	Z+5, r1	; 0x05
    3e1c:	16 82       	std	Z+6, r1	; 0x06
    3e1e:	17 82       	std	Z+7, r1	; 0x07
    3e20:	10 86       	std	Z+8, r1	; 0x08
    3e22:	11 86       	std	Z+9, r1	; 0x09
    3e24:	12 86       	std	Z+10, r1	; 0x0a
    3e26:	13 86       	std	Z+11, r1	; 0x0b
    3e28:	14 86       	std	Z+12, r1	; 0x0c
    3e2a:	15 86       	std	Z+13, r1	; 0x0d
    3e2c:	16 aa       	std	Z+54, r1	; 0x36
    3e2e:	17 aa       	std	Z+55, r1	; 0x37
    3e30:	10 ae       	std	Z+56, r1	; 0x38
    3e32:	ed 91       	ld	r30, X+
    3e34:	fc 91       	ld	r31, X
    3e36:	11 97       	sbiw	r26, 0x01	; 1
    3e38:	24 81       	ldd	r18, Z+4	; 0x04
    3e3a:	20 61       	ori	r18, 0x10	; 16
    3e3c:	24 83       	std	Z+4, r18	; 0x04
    3e3e:	db cf       	rjmp	.-74     	; 0x3df6 <ir_receive+0x6ac>
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	3c cf       	rjmp	.-392    	; 0x3cbc <ir_receive+0x572>
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	7f cf       	rjmp	.-258    	; 0x3d46 <ir_receive+0x5fc>
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	bc ce       	rjmp	.-648    	; 0x3bc4 <ir_receive+0x47a>
    3e4c:	10 92 57 25 	sts	0x2557, r1	; 0x802557 <processing_ffsync>
    3e50:	5f bf       	out	0x3f, r21	; 63
    3e52:	61 cd       	rjmp	.-1342   	; 0x3916 <ir_receive+0x1cc>
    3e54:	df bf       	out	0x3f, r29	; 63
    3e56:	00 91 87 28 	lds	r16, 0x2887	; 0x802887 <rnbCmdSentTime>
    3e5a:	10 91 88 28 	lds	r17, 0x2888	; 0x802888 <rnbCmdSentTime+0x1>
    3e5e:	20 91 89 28 	lds	r18, 0x2889	; 0x802889 <rnbCmdSentTime+0x2>
    3e62:	30 91 8a 28 	lds	r19, 0x288A	; 0x80288a <rnbCmdSentTime+0x3>
    3e66:	41 30       	cpi	r20, 0x01	; 1
    3e68:	59 f1       	breq	.+86     	; 0x3ec0 <ir_receive+0x776>
    3e6a:	84 e1       	ldi	r24, 0x14	; 20
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	8c 1b       	sub	r24, r28
    3e70:	91 09       	sbc	r25, r1
    3e72:	09 2e       	mov	r0, r25
    3e74:	00 0c       	add	r0, r0
    3e76:	aa 0b       	sbc	r26, r26
    3e78:	bb 0b       	sbc	r27, r27
    3e7a:	b9 01       	movw	r22, r18
    3e7c:	a8 01       	movw	r20, r16
    3e7e:	48 1b       	sub	r20, r24
    3e80:	59 0b       	sbc	r21, r25
    3e82:	6a 0b       	sbc	r22, r26
    3e84:	7b 0b       	sbc	r23, r27
    3e86:	40 93 87 28 	sts	0x2887, r20	; 0x802887 <rnbCmdSentTime>
    3e8a:	50 93 88 28 	sts	0x2888, r21	; 0x802888 <rnbCmdSentTime+0x1>
    3e8e:	60 93 89 28 	sts	0x2889, r22	; 0x802889 <rnbCmdSentTime+0x2>
    3e92:	70 93 8a 28 	sts	0x288A, r23	; 0x80288a <rnbCmdSentTime+0x3>
    3e96:	0e 94 d3 58 	call	0xb1a6	; 0xb1a6 <ir_range_meas>
    3e9a:	8f b7       	in	r24, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	10 92 27 2a 	sts	0x2A27, r1	; 0x802a27 <hp_ir_block_bm>
    3ea2:	8f bf       	out	0x3f, r24	; 63
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	40 e4       	ldi	r20, 0x40	; 64
    3eaa:	56 e5       	ldi	r21, 0x56	; 86
    3eac:	65 e0       	ldi	r22, 0x05	; 5
    3eae:	70 e0       	ldi	r23, 0x00	; 0
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    3eb8:	2e cd       	rjmp	.-1444   	; 0x3916 <ir_receive+0x1cc>
    3eba:	a6 1a       	sub	r10, r22
    3ebc:	b7 0a       	sbc	r11, r23
    3ebe:	62 cf       	rjmp	.-316    	; 0x3d84 <ir_receive+0x63a>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	d9 cf       	rjmp	.-78     	; 0x3e7a <ir_receive+0x730>

00003ec8 <ir_comm_init>:
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	94 e4       	ldi	r25, 0x44	; 68
    3ece:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    3ed2:	84 e0       	ldi	r24, 0x04	; 4
    3ed4:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    3ed8:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    3edc:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    3ee0:	8f b7       	in	r24, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	9f ef       	ldi	r25, 0xFF	; 255
    3ee6:	90 93 27 2a 	sts	0x2A27, r25	; 0x802a27 <hp_ir_block_bm>
    3eea:	8f bf       	out	0x3f, r24	; 63
    3eec:	c6 e0       	ldi	r28, 0x06	; 6
    3eee:	d0 e2       	ldi	r29, 0x20	; 32
    3ef0:	62 e1       	ldi	r22, 0x12	; 18
    3ef2:	70 e2       	ldi	r23, 0x20	; 32
    3ef4:	de 01       	movw	r26, r28
    3ef6:	48 e2       	ldi	r20, 0x28	; 40
    3ef8:	33 e0       	ldi	r19, 0x03	; 3
    3efa:	20 e7       	ldi	r18, 0x70	; 112
    3efc:	92 e0       	ldi	r25, 0x02	; 2
    3efe:	ed 91       	ld	r30, X+
    3f00:	fd 91       	ld	r31, X+
    3f02:	43 83       	std	Z+3, r20	; 0x03
    3f04:	35 83       	std	Z+5, r19	; 0x05
    3f06:	26 83       	std	Z+6, r18	; 0x06
    3f08:	97 83       	std	Z+7, r25	; 0x07
    3f0a:	84 81       	ldd	r24, Z+4	; 0x04
    3f0c:	80 61       	ori	r24, 0x10	; 16
    3f0e:	84 83       	std	Z+4, r24	; 0x04
    3f10:	84 81       	ldd	r24, Z+4	; 0x04
    3f12:	88 60       	ori	r24, 0x08	; 8
    3f14:	84 83       	std	Z+4, r24	; 0x04
    3f16:	6a 17       	cp	r22, r26
    3f18:	7b 07       	cpc	r23, r27
    3f1a:	89 f7       	brne	.-30     	; 0x3efe <ir_comm_init+0x36>
    3f1c:	10 92 48 2a 	sts	0x2A48, r1	; 0x802a48 <curr_ir_power>
    3f20:	10 92 49 2a 	sts	0x2A49, r1	; 0x802a49 <curr_ir_power+0x1>
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	39 e3       	ldi	r19, 0x39	; 57
    3f2a:	38 9f       	mul	r19, r24
    3f2c:	f0 01       	movw	r30, r0
    3f2e:	39 9f       	mul	r19, r25
    3f30:	f0 0d       	add	r31, r0
    3f32:	11 24       	eor	r1, r1
    3f34:	e5 56       	subi	r30, 0x65	; 101
    3f36:	f7 4d       	sbci	r31, 0xD7	; 215
    3f38:	14 82       	std	Z+4, r1	; 0x04
    3f3a:	15 82       	std	Z+5, r1	; 0x05
    3f3c:	16 82       	std	Z+6, r1	; 0x06
    3f3e:	17 82       	std	Z+7, r1	; 0x07
    3f40:	10 86       	std	Z+8, r1	; 0x08
    3f42:	11 86       	std	Z+9, r1	; 0x09
    3f44:	12 86       	std	Z+10, r1	; 0x0a
    3f46:	13 86       	std	Z+11, r1	; 0x0b
    3f48:	14 86       	std	Z+12, r1	; 0x0c
    3f4a:	15 86       	std	Z+13, r1	; 0x0d
    3f4c:	16 aa       	std	Z+54, r1	; 0x36
    3f4e:	17 aa       	std	Z+55, r1	; 0x37
    3f50:	10 ae       	std	Z+56, r1	; 0x38
    3f52:	e9 91       	ld	r30, Y+
    3f54:	f9 91       	ld	r31, Y+
    3f56:	24 81       	ldd	r18, Z+4	; 0x04
    3f58:	20 61       	ori	r18, 0x10	; 16
    3f5a:	24 83       	std	Z+4, r18	; 0x04
    3f5c:	01 96       	adiw	r24, 0x01	; 1
    3f5e:	86 30       	cpi	r24, 0x06	; 6
    3f60:	91 05       	cpc	r25, r1
    3f62:	19 f7       	brne	.-58     	; 0x3f2a <ir_comm_init+0x62>
    3f64:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <cmd_arrival_time>
    3f68:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <cmd_arrival_time+0x1>
    3f6c:	10 92 30 2a 	sts	0x2A30, r1	; 0x802a30 <cmd_arrival_time+0x2>
    3f70:	10 92 31 2a 	sts	0x2A31, r1	; 0x802a31 <cmd_arrival_time+0x3>
    3f74:	10 92 e0 27 	sts	0x27E0, r1	; 0x8027e0 <num_waiting_msgs>
    3f78:	10 92 9b 26 	sts	0x269B, r1	; 0x80269b <user_facing_messages_ovf>
    3f7c:	10 92 58 25 	sts	0x2558, r1	; 0x802558 <processing_cmd>
    3f80:	10 92 57 25 	sts	0x2557, r1	; 0x802557 <processing_ffsync>
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	47 e3       	ldi	r20, 0x37	; 55
    3f8a:	59 e1       	ldi	r21, 0x19	; 25
    3f8c:	6e e3       	ldi	r22, 0x3E	; 62
    3f8e:	70 e0       	ldi	r23, 0x00	; 0
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 ce 60 	call	0xc19c	; 0xc19c <schedule_periodic_task>
    3f98:	8f b7       	in	r24, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	10 92 27 2a 	sts	0x2A27, r1	; 0x802a27 <hp_ir_block_bm>
    3fa0:	8f bf       	out	0x3f, r24	; 63
    3fa2:	df 91       	pop	r29
    3fa4:	cf 91       	pop	r28
    3fa6:	08 95       	ret

00003fa8 <send_msg>:
    3fa8:	2f 92       	push	r2
    3faa:	3f 92       	push	r3
    3fac:	4f 92       	push	r4
    3fae:	5f 92       	push	r5
    3fb0:	6f 92       	push	r6
    3fb2:	7f 92       	push	r7
    3fb4:	8f 92       	push	r8
    3fb6:	9f 92       	push	r9
    3fb8:	af 92       	push	r10
    3fba:	bf 92       	push	r11
    3fbc:	cf 92       	push	r12
    3fbe:	df 92       	push	r13
    3fc0:	ef 92       	push	r14
    3fc2:	ff 92       	push	r15
    3fc4:	0f 93       	push	r16
    3fc6:	1f 93       	push	r17
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	e8 2e       	mov	r14, r24
    3fce:	4b 01       	movw	r8, r22
    3fd0:	34 2e       	mov	r3, r20
    3fd2:	22 2e       	mov	r2, r18
    3fd4:	88 e2       	ldi	r24, 0x28	; 40
    3fd6:	84 17       	cp	r24, r20
    3fd8:	08 f4       	brcc	.+2      	; 0x3fdc <send_msg+0x34>
    3fda:	bf c0       	rjmp	.+382    	; 0x415a <__stack+0x15b>
    3fdc:	60 90 99 26 	lds	r6, 0x2699	; 0x802699 <droplet_ID>
    3fe0:	70 90 9a 26 	lds	r7, 0x269A	; 0x80269a <droplet_ID+0x1>
    3fe4:	f1 2c       	mov	r15, r1
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	97 01       	movw	r18, r14
    3fec:	08 2e       	mov	r0, r24
    3fee:	02 c0       	rjmp	.+4      	; 0x3ff4 <send_msg+0x4c>
    3ff0:	35 95       	asr	r19
    3ff2:	27 95       	ror	r18
    3ff4:	0a 94       	dec	r0
    3ff6:	e2 f7       	brpl	.-8      	; 0x3ff0 <send_msg+0x48>
    3ff8:	20 fd       	sbrc	r18, 0
    3ffa:	b8 c0       	rjmp	.+368    	; 0x416c <__stack+0x16d>
    3ffc:	01 96       	adiw	r24, 0x01	; 1
    3ffe:	86 30       	cpi	r24, 0x06	; 6
    4000:	91 05       	cpc	r25, r1
    4002:	99 f7       	brne	.-26     	; 0x3fea <send_msg+0x42>
    4004:	e3 01       	movw	r28, r6
    4006:	33 20       	and	r3, r3
    4008:	19 f1       	breq	.+70     	; 0x4050 <__stack+0x51>
    400a:	f4 01       	movw	r30, r8
    400c:	2f ef       	ldi	r18, 0xFF	; 255
    400e:	23 0d       	add	r18, r3
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	2f 5f       	subi	r18, 0xFF	; 255
    4014:	3f 4f       	sbci	r19, 0xFF	; 255
    4016:	28 0d       	add	r18, r8
    4018:	39 1d       	adc	r19, r9
    401a:	81 91       	ld	r24, Z+
    401c:	c8 27       	eor	r28, r24
    401e:	8c 2f       	mov	r24, r28
    4020:	82 95       	swap	r24
    4022:	8c 27       	eor	r24, r28
    4024:	08 2e       	mov	r0, r24
    4026:	86 95       	lsr	r24
    4028:	86 95       	lsr	r24
    402a:	80 25       	eor	r24, r0
    402c:	08 2e       	mov	r0, r24
    402e:	86 95       	lsr	r24
    4030:	80 25       	eor	r24, r0
    4032:	87 70       	andi	r24, 0x07	; 7
    4034:	0c 2e       	mov	r0, r28
    4036:	cd 2f       	mov	r28, r29
    4038:	86 95       	lsr	r24
    403a:	07 94       	ror	r0
    403c:	87 95       	ror	r24
    403e:	d0 2d       	mov	r29, r0
    4040:	c8 27       	eor	r28, r24
    4042:	06 94       	lsr	r0
    4044:	87 95       	ror	r24
    4046:	d0 25       	eor	r29, r0
    4048:	c8 27       	eor	r28, r24
    404a:	e2 17       	cp	r30, r18
    404c:	f3 07       	cpc	r31, r19
    404e:	29 f7       	brne	.-54     	; 0x401a <__stack+0x1b>
    4050:	89 ea       	ldi	r24, 0xA9	; 169
    4052:	a8 2e       	mov	r10, r24
    4054:	88 e2       	ldi	r24, 0x28	; 40
    4056:	b8 2e       	mov	r11, r24
    4058:	94 eb       	ldi	r25, 0xB4	; 180
    405a:	c9 2e       	mov	r12, r25
    405c:	91 e2       	ldi	r25, 0x21	; 33
    405e:	d9 2e       	mov	r13, r25
    4060:	00 e0       	ldi	r16, 0x00	; 0
    4062:	10 e0       	ldi	r17, 0x00	; 0
    4064:	43 2c       	mov	r4, r3
    4066:	51 2c       	mov	r5, r1
    4068:	0b c0       	rjmp	.+22     	; 0x4080 <__stack+0x81>
    406a:	0f 5f       	subi	r16, 0xFF	; 255
    406c:	1f 4f       	sbci	r17, 0xFF	; 255
    406e:	f9 e3       	ldi	r31, 0x39	; 57
    4070:	af 0e       	add	r10, r31
    4072:	b1 1c       	adc	r11, r1
    4074:	8f ef       	ldi	r24, 0xFF	; 255
    4076:	c8 1a       	sub	r12, r24
    4078:	d8 0a       	sbc	r13, r24
    407a:	06 30       	cpi	r16, 0x06	; 6
    407c:	11 05       	cpc	r17, r1
    407e:	41 f1       	breq	.+80     	; 0x40d0 <__stack+0xd1>
    4080:	c7 01       	movw	r24, r14
    4082:	00 2e       	mov	r0, r16
    4084:	02 c0       	rjmp	.+4      	; 0x408a <__stack+0x8b>
    4086:	95 95       	asr	r25
    4088:	87 95       	ror	r24
    408a:	0a 94       	dec	r0
    408c:	e2 f7       	brpl	.-8      	; 0x4086 <__stack+0x87>
    408e:	80 ff       	sbrs	r24, 0
    4090:	ec cf       	rjmp	.-40     	; 0x406a <__stack+0x6b>
    4092:	89 e3       	ldi	r24, 0x39	; 57
    4094:	80 9f       	mul	r24, r16
    4096:	f0 01       	movw	r30, r0
    4098:	81 9f       	mul	r24, r17
    409a:	f0 0d       	add	r31, r0
    409c:	11 24       	eor	r1, r1
    409e:	e5 56       	subi	r30, 0x65	; 101
    40a0:	f7 4d       	sbci	r31, 0xD7	; 215
    40a2:	80 ad       	ldd	r24, Z+56	; 0x38
    40a4:	80 62       	ori	r24, 0x20	; 32
    40a6:	80 af       	std	Z+56, r24	; 0x38
    40a8:	36 aa       	std	Z+54, r3	; 0x36
    40aa:	c4 83       	std	Z+4, r28	; 0x04
    40ac:	d5 83       	std	Z+5, r29	; 0x05
    40ae:	12 86       	std	Z+10, r1	; 0x0a
    40b0:	13 86       	std	Z+11, r1	; 0x0b
    40b2:	66 82       	std	Z+6, r6	; 0x06
    40b4:	77 82       	std	Z+7, r7	; 0x07
    40b6:	a2 01       	movw	r20, r4
    40b8:	b4 01       	movw	r22, r8
    40ba:	c5 01       	movw	r24, r10
    40bc:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <memcpy>
    40c0:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    40c4:	f6 01       	movw	r30, r12
    40c6:	80 81       	ld	r24, Z
    40c8:	89 2b       	or	r24, r25
    40ca:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    40ce:	cd cf       	rjmp	.-102    	; 0x406a <__stack+0x6b>
    40d0:	e6 e0       	ldi	r30, 0x06	; 6
    40d2:	f0 e2       	ldi	r31, 0x20	; 32
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	49 e3       	ldi	r20, 0x39	; 57
    40da:	08 c0       	rjmp	.+16     	; 0x40ec <__stack+0xed>
    40dc:	23 60       	ori	r18, 0x03	; 3
    40de:	13 96       	adiw	r26, 0x03	; 3
    40e0:	2c 93       	st	X, r18
    40e2:	01 96       	adiw	r24, 0x01	; 1
    40e4:	32 96       	adiw	r30, 0x02	; 2
    40e6:	86 30       	cpi	r24, 0x06	; 6
    40e8:	91 05       	cpc	r25, r1
    40ea:	21 f1       	breq	.+72     	; 0x4134 <__stack+0x135>
    40ec:	97 01       	movw	r18, r14
    40ee:	08 2e       	mov	r0, r24
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <__stack+0xf7>
    40f2:	35 95       	asr	r19
    40f4:	27 95       	ror	r18
    40f6:	0a 94       	dec	r0
    40f8:	e2 f7       	brpl	.-8      	; 0x40f2 <__stack+0xf3>
    40fa:	20 ff       	sbrs	r18, 0
    40fc:	f2 cf       	rjmp	.-28     	; 0x40e2 <__stack+0xe3>
    40fe:	48 9f       	mul	r20, r24
    4100:	d0 01       	movw	r26, r0
    4102:	49 9f       	mul	r20, r25
    4104:	b0 0d       	add	r27, r0
    4106:	11 24       	eor	r1, r1
    4108:	a5 56       	subi	r26, 0x65	; 101
    410a:	b7 4d       	sbci	r27, 0xD7	; 215
    410c:	1d 92       	st	X+, r1
    410e:	1d 92       	st	X+, r1
    4110:	1d 92       	st	X+, r1
    4112:	1c 92       	st	X, r1
    4114:	13 97       	sbiw	r26, 0x03	; 3
    4116:	a0 81       	ld	r26, Z
    4118:	b1 81       	ldd	r27, Z+1	; 0x01
    411a:	13 96       	adiw	r26, 0x03	; 3
    411c:	2c 91       	ld	r18, X
    411e:	13 97       	sbiw	r26, 0x03	; 3
    4120:	21 10       	cpse	r2, r1
    4122:	dc cf       	rjmp	.-72     	; 0x40dc <__stack+0xdd>
    4124:	22 60       	ori	r18, 0x02	; 2
    4126:	13 96       	adiw	r26, 0x03	; 3
    4128:	2c 93       	st	X, r18
    412a:	01 96       	adiw	r24, 0x01	; 1
    412c:	32 96       	adiw	r30, 0x02	; 2
    412e:	86 30       	cpi	r24, 0x06	; 6
    4130:	91 05       	cpc	r25, r1
    4132:	e1 f6       	brne	.-72     	; 0x40ec <__stack+0xed>
    4134:	df 91       	pop	r29
    4136:	cf 91       	pop	r28
    4138:	1f 91       	pop	r17
    413a:	0f 91       	pop	r16
    413c:	ff 90       	pop	r15
    413e:	ef 90       	pop	r14
    4140:	df 90       	pop	r13
    4142:	cf 90       	pop	r12
    4144:	bf 90       	pop	r11
    4146:	af 90       	pop	r10
    4148:	9f 90       	pop	r9
    414a:	8f 90       	pop	r8
    414c:	7f 90       	pop	r7
    414e:	6f 90       	pop	r6
    4150:	5f 90       	pop	r5
    4152:	4f 90       	pop	r4
    4154:	3f 90       	pop	r3
    4156:	2f 90       	pop	r2
    4158:	08 95       	ret
    415a:	85 e9       	ldi	r24, 0x95	; 149
    415c:	96 e0       	ldi	r25, 0x06	; 6
    415e:	9f 93       	push	r25
    4160:	8f 93       	push	r24
    4162:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	38 cf       	rjmp	.-400    	; 0x3fdc <send_msg+0x34>
    416c:	29 e3       	ldi	r18, 0x39	; 57
    416e:	28 9f       	mul	r18, r24
    4170:	f0 01       	movw	r30, r0
    4172:	29 9f       	mul	r18, r25
    4174:	f0 0d       	add	r31, r0
    4176:	11 24       	eor	r1, r1
    4178:	e5 56       	subi	r30, 0x65	; 101
    417a:	f7 4d       	sbci	r31, 0xD7	; 215
    417c:	80 ad       	ldd	r24, Z+56	; 0x38
    417e:	80 7c       	andi	r24, 0xC0	; 192
    4180:	e3 01       	movw	r28, r6
    4182:	c8 27       	eor	r28, r24
    4184:	8c 2f       	mov	r24, r28
    4186:	82 95       	swap	r24
    4188:	8c 27       	eor	r24, r28
    418a:	08 2e       	mov	r0, r24
    418c:	86 95       	lsr	r24
    418e:	86 95       	lsr	r24
    4190:	80 25       	eor	r24, r0
    4192:	08 2e       	mov	r0, r24
    4194:	86 95       	lsr	r24
    4196:	80 25       	eor	r24, r0
    4198:	87 70       	andi	r24, 0x07	; 7
    419a:	0c 2e       	mov	r0, r28
    419c:	cd 2f       	mov	r28, r29
    419e:	86 95       	lsr	r24
    41a0:	07 94       	ror	r0
    41a2:	87 95       	ror	r24
    41a4:	d0 2d       	mov	r29, r0
    41a6:	c8 27       	eor	r28, r24
    41a8:	06 94       	lsr	r0
    41aa:	87 95       	ror	r24
    41ac:	d0 25       	eor	r29, r0
    41ae:	c8 27       	eor	r28, r24
    41b0:	80 85       	ldd	r24, Z+8	; 0x08
    41b2:	91 85       	ldd	r25, Z+9	; 0x09
    41b4:	c8 27       	eor	r28, r24
    41b6:	8c 2f       	mov	r24, r28
    41b8:	82 95       	swap	r24
    41ba:	8c 27       	eor	r24, r28
    41bc:	08 2e       	mov	r0, r24
    41be:	86 95       	lsr	r24
    41c0:	86 95       	lsr	r24
    41c2:	80 25       	eor	r24, r0
    41c4:	08 2e       	mov	r0, r24
    41c6:	86 95       	lsr	r24
    41c8:	80 25       	eor	r24, r0
    41ca:	87 70       	andi	r24, 0x07	; 7
    41cc:	0c 2e       	mov	r0, r28
    41ce:	cd 2f       	mov	r28, r29
    41d0:	86 95       	lsr	r24
    41d2:	07 94       	ror	r0
    41d4:	87 95       	ror	r24
    41d6:	d0 2d       	mov	r29, r0
    41d8:	c8 27       	eor	r28, r24
    41da:	06 94       	lsr	r0
    41dc:	87 95       	ror	r24
    41de:	d0 25       	eor	r29, r0
    41e0:	c8 27       	eor	r28, r24
    41e2:	11 cf       	rjmp	.-478    	; 0x4006 <__stack+0x7>

000041e4 <hp_ir_targeted_cmd>:
    41e4:	af 92       	push	r10
    41e6:	bf 92       	push	r11
    41e8:	cf 92       	push	r12
    41ea:	ef 92       	push	r14
    41ec:	ff 92       	push	r15
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	cf 93       	push	r28
    41f4:	df 93       	push	r29
    41f6:	5b 01       	movw	r10, r22
    41f8:	79 01       	movw	r14, r18
    41fa:	cf b6       	in	r12, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	90 91 27 2a 	lds	r25, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    4202:	91 11       	cpse	r25, r1
    4204:	53 c0       	rjmp	.+166    	; 0x42ac <hp_ir_targeted_cmd+0xc8>
    4206:	40 34       	cpi	r20, 0x40	; 64
    4208:	08 f0       	brcs	.+2      	; 0x420c <hp_ir_targeted_cmd+0x28>
    420a:	40 54       	subi	r20, 0x40	; 64
    420c:	08 2f       	mov	r16, r24
    420e:	10 e0       	ldi	r17, 0x00	; 0
    4210:	c6 e0       	ldi	r28, 0x06	; 6
    4212:	d0 e2       	ldi	r29, 0x20	; 32
    4214:	e0 e0       	ldi	r30, 0x00	; 0
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	69 e3       	ldi	r22, 0x39	; 57
    421a:	51 e8       	ldi	r21, 0x81	; 129
    421c:	21 e0       	ldi	r18, 0x01	; 1
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	d8 01       	movw	r26, r16
    4222:	0e 2e       	mov	r0, r30
    4224:	02 c0       	rjmp	.+4      	; 0x422a <hp_ir_targeted_cmd+0x46>
    4226:	b5 95       	asr	r27
    4228:	a7 95       	ror	r26
    422a:	0a 94       	dec	r0
    422c:	e2 f7       	brpl	.-8      	; 0x4226 <hp_ir_targeted_cmd+0x42>
    422e:	a0 ff       	sbrs	r26, 0
    4230:	28 c0       	rjmp	.+80     	; 0x4282 <hp_ir_targeted_cmd+0x9e>
    4232:	a8 81       	ld	r26, Y
    4234:	b9 81       	ldd	r27, Y+1	; 0x01
    4236:	14 96       	adiw	r26, 0x04	; 4
    4238:	9c 91       	ld	r25, X
    423a:	14 97       	sbiw	r26, 0x04	; 4
    423c:	9f 7e       	andi	r25, 0xEF	; 239
    423e:	14 96       	adiw	r26, 0x04	; 4
    4240:	9c 93       	st	X, r25
    4242:	6e 9f       	mul	r22, r30
    4244:	d0 01       	movw	r26, r0
    4246:	6f 9f       	mul	r22, r31
    4248:	b0 0d       	add	r27, r0
    424a:	11 24       	eor	r1, r1
    424c:	a5 56       	subi	r26, 0x65	; 101
    424e:	b7 4d       	sbci	r27, 0xD7	; 215
    4250:	d8 96       	adiw	r26, 0x38	; 56
    4252:	5c 93       	st	X, r21
    4254:	d8 97       	sbiw	r26, 0x38	; 56
    4256:	d8 96       	adiw	r26, 0x38	; 56
    4258:	9c 91       	ld	r25, X
    425a:	d8 97       	sbiw	r26, 0x38	; 56
    425c:	90 64       	ori	r25, 0x40	; 64
    425e:	d8 96       	adiw	r26, 0x38	; 56
    4260:	9c 93       	st	X, r25
    4262:	d8 97       	sbiw	r26, 0x38	; 56
    4264:	18 96       	adiw	r26, 0x08	; 8
    4266:	ed 92       	st	X+, r14
    4268:	fc 92       	st	X, r15
    426a:	19 97       	sbiw	r26, 0x09	; 9
    426c:	90 91 27 2a 	lds	r25, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    4270:	d9 01       	movw	r26, r18
    4272:	0e 2e       	mov	r0, r30
    4274:	01 c0       	rjmp	.+2      	; 0x4278 <hp_ir_targeted_cmd+0x94>
    4276:	aa 0f       	add	r26, r26
    4278:	0a 94       	dec	r0
    427a:	ea f7       	brpl	.-6      	; 0x4276 <hp_ir_targeted_cmd+0x92>
    427c:	a9 2b       	or	r26, r25
    427e:	a0 93 27 2a 	sts	0x2A27, r26	; 0x802a27 <hp_ir_block_bm>
    4282:	31 96       	adiw	r30, 0x01	; 1
    4284:	22 96       	adiw	r28, 0x02	; 2
    4286:	e6 30       	cpi	r30, 0x06	; 6
    4288:	f1 05       	cpc	r31, r1
    428a:	51 f6       	brne	.-108    	; 0x4220 <hp_ir_targeted_cmd+0x3c>
    428c:	cf be       	out	0x3f, r12	; 63
    428e:	21 e0       	ldi	r18, 0x01	; 1
    4290:	b5 01       	movw	r22, r10
    4292:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <send_msg>
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	cf 90       	pop	r12
    42a6:	bf 90       	pop	r11
    42a8:	af 90       	pop	r10
    42aa:	08 95       	ret
    42ac:	cf be       	out	0x3f, r12	; 63
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	f3 cf       	rjmp	.-26     	; 0x4298 <hp_ir_targeted_cmd+0xb4>

000042b2 <ir_is_busy>:
		channel[dir]->CTRLB |= USART_RXEN_bm;	// this enables receive on the USART
		hp_ir_block_bm &= (~(1<<dir));
	}
}

uint8_t ir_is_busy(uint8_t dirs_mask){
    42b2:	4f 92       	push	r4
    42b4:	5f 92       	push	r5
    42b6:	6f 92       	push	r6
    42b8:	7f 92       	push	r7
    42ba:	8f 92       	push	r8
    42bc:	9f 92       	push	r9
    42be:	af 92       	push	r10
    42c0:	bf 92       	push	r11
    42c2:	ef 92       	push	r14
    42c4:	ff 92       	push	r15
    42c6:	cf 93       	push	r28
    42c8:	c8 2f       	mov	r28, r24
	uint32_t now = get_time();
    42ca:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
	uint8_t transmitting = 0;
	uint8_t receiving = 0;
	if(hp_ir_block_bm&dirs_mask){
    42ce:	20 91 27 2a 	lds	r18, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    42d2:	2c 23       	and	r18, r28
    42d4:	69 f0       	breq	.+26     	; 0x42f0 <ir_is_busy+0x3e>
		return 3;
    42d6:	83 e0       	ldi	r24, 0x03	; 3
				receiving = 1;	
			}
    	}
	}
	return transmitting ? 2 : (receiving ? 1 : 0);
}
    42d8:	cf 91       	pop	r28
    42da:	ff 90       	pop	r15
    42dc:	ef 90       	pop	r14
    42de:	bf 90       	pop	r11
    42e0:	af 90       	pop	r10
    42e2:	9f 90       	pop	r9
    42e4:	8f 90       	pop	r8
    42e6:	7f 90       	pop	r7
    42e8:	6f 90       	pop	r6
    42ea:	5f 90       	pop	r5
    42ec:	4f 90       	pop	r4
    42ee:	08 95       	ret
    42f0:	ec 2e       	mov	r14, r28
    42f2:	f1 2c       	mov	r15, r1

uint8_t ir_is_busy(uint8_t dirs_mask){
	uint32_t now = get_time();
	uint8_t transmitting = 0;
	uint8_t receiving = 0;
	if(hp_ir_block_bm&dirs_mask){
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	a0 e0       	ldi	r26, 0x00	; 0
		return 3;
	}
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
    42fc:	c9 e3       	ldi	r28, 0x39	; 57
	uint8_t receiving = 0;
	if(hp_ir_block_bm&dirs_mask){
		return 3;
	}
	for(uint8_t dir=0; dir<6; dir++){
    	if(dirs_mask&(1<<dir)){
    42fe:	a7 01       	movw	r20, r14
    4300:	02 2e       	mov	r0, r18
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <ir_is_busy+0x56>
    4304:	55 95       	asr	r21
    4306:	47 95       	ror	r20
    4308:	0a 94       	dec	r0
    430a:	e2 f7       	brpl	.-8      	; 0x4304 <ir_is_busy+0x52>
    430c:	40 ff       	sbrs	r20, 0
    430e:	22 c0       	rjmp	.+68     	; 0x4354 <ir_is_busy+0xa2>
        	if(ir_rxtx[dir].status & IR_STATUS_TRANSMITTING_bm){
    4310:	c2 9f       	mul	r28, r18
    4312:	f0 01       	movw	r30, r0
    4314:	c3 9f       	mul	r28, r19
    4316:	f0 0d       	add	r31, r0
    4318:	11 24       	eor	r1, r1
    431a:	e5 56       	subi	r30, 0x65	; 101
    431c:	f7 4d       	sbci	r31, 0xD7	; 215
    431e:	40 ad       	ldd	r20, Z+56	; 0x38
    4320:	45 fd       	sbrc	r20, 5
            	transmitting = 1;
    4322:	a1 e0       	ldi	r26, 0x01	; 1
        	}
			if((now - ir_rxtx[dir].last_byte) < IR_MSG_TIMEOUT){
    4324:	c2 9f       	mul	r28, r18
    4326:	f0 01       	movw	r30, r0
    4328:	c3 9f       	mul	r28, r19
    432a:	f0 0d       	add	r31, r0
    432c:	11 24       	eor	r1, r1
    432e:	e5 56       	subi	r30, 0x65	; 101
    4330:	f7 4d       	sbci	r31, 0xD7	; 215
    4332:	80 80       	ld	r8, Z
    4334:	91 80       	ldd	r9, Z+1	; 0x01
    4336:	a2 80       	ldd	r10, Z+2	; 0x02
    4338:	b3 80       	ldd	r11, Z+3	; 0x03
    433a:	2b 01       	movw	r4, r22
    433c:	3c 01       	movw	r6, r24
    433e:	48 18       	sub	r4, r8
    4340:	59 08       	sbc	r5, r9
    4342:	6a 08       	sbc	r6, r10
    4344:	7b 08       	sbc	r7, r11
    4346:	40 e1       	ldi	r20, 0x10	; 16
    4348:	44 16       	cp	r4, r20
    434a:	51 04       	cpc	r5, r1
    434c:	61 04       	cpc	r6, r1
    434e:	71 04       	cpc	r7, r1
    4350:	08 f4       	brcc	.+2      	; 0x4354 <ir_is_busy+0xa2>
				receiving = 1;	
    4352:	b1 e0       	ldi	r27, 0x01	; 1
    4354:	2f 5f       	subi	r18, 0xFF	; 255
    4356:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t transmitting = 0;
	uint8_t receiving = 0;
	if(hp_ir_block_bm&dirs_mask){
		return 3;
	}
	for(uint8_t dir=0; dir<6; dir++){
    4358:	26 30       	cpi	r18, 0x06	; 6
    435a:	31 05       	cpc	r19, r1
    435c:	81 f6       	brne	.-96     	; 0x42fe <ir_is_busy+0x4c>
			if((now - ir_rxtx[dir].last_byte) < IR_MSG_TIMEOUT){
				receiving = 1;	
			}
    	}
	}
	return transmitting ? 2 : (receiving ? 1 : 0);
    435e:	aa 23       	and	r26, r26
    4360:	11 f0       	breq	.+4      	; 0x4366 <ir_is_busy+0xb4>
    4362:	82 e0       	ldi	r24, 0x02	; 2
    4364:	b9 cf       	rjmp	.-142    	; 0x42d8 <ir_is_busy+0x26>
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	b1 11       	cpse	r27, r1
    436a:	b6 cf       	rjmp	.-148    	; 0x42d8 <ir_is_busy+0x26>
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	b4 cf       	rjmp	.-152    	; 0x42d8 <ir_is_busy+0x26>

00004370 <ir_targeted_cmd>:
	}
	send_msg(dirs_to_go, data, data_length, 0);
    return 1;
}

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, id_t target){
    4370:	df 92       	push	r13
    4372:	ef 92       	push	r14
    4374:	ff 92       	push	r15
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	f8 2e       	mov	r15, r24
    4380:	8b 01       	movw	r16, r22
    4382:	e4 2e       	mov	r14, r20
    4384:	e9 01       	movw	r28, r18
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    4386:	d0 90 27 2a 	lds	r13, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    438a:	d1 10       	cpse	r13, r1
    438c:	6d c0       	rjmp	.+218    	; 0x4468 <ir_targeted_cmd+0xf8>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    438e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <ir_is_busy>
    4392:	82 30       	cpi	r24, 0x02	; 2
    4394:	b8 f1       	brcs	.+110    	; 0x4404 <ir_targeted_cmd+0x94>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    4396:	86 e5       	ldi	r24, 0x56	; 86
    4398:	96 e0       	ldi	r25, 0x06	; 6
    439a:	9f 93       	push	r25
    439c:	8f 93       	push	r24
    439e:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	ee 20       	and	r14, r14
    43a8:	e1 f0       	breq	.+56     	; 0x43e2 <ir_targeted_cmd+0x72>
    43aa:	e8 01       	movw	r28, r16
    43ac:	ea 94       	dec	r14
    43ae:	f1 2c       	mov	r15, r1
    43b0:	8f ef       	ldi	r24, 0xFF	; 255
    43b2:	e8 1a       	sub	r14, r24
    43b4:	f8 0a       	sbc	r15, r24
    43b6:	e0 0e       	add	r14, r16
    43b8:	f1 1e       	adc	r15, r17
			printf("%02hX ",data[i]);
    43ba:	0c e4       	ldi	r16, 0x4C	; 76
    43bc:	11 e2       	ldi	r17, 0x21	; 33
    43be:	89 91       	ld	r24, Y+
    43c0:	28 2f       	mov	r18, r24
    43c2:	08 2e       	mov	r0, r24
    43c4:	00 0c       	add	r0, r0
    43c6:	33 0b       	sbc	r19, r19
    43c8:	3f 93       	push	r19
    43ca:	8f 93       	push	r24
    43cc:	1f 93       	push	r17
    43ce:	0f 93       	push	r16
    43d0:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	ce 15       	cp	r28, r14
    43de:	df 05       	cpc	r29, r15
    43e0:	71 f7       	brne	.-36     	; 0x43be <ir_targeted_cmd+0x4e>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    43e2:	8a e1       	ldi	r24, 0x1A	; 26
    43e4:	96 e0       	ldi	r25, 0x06	; 6
    43e6:	9f 93       	push	r25
    43e8:	8f 93       	push	r24
    43ea:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    return 1;
}

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, id_t target){
	return all_ir_sends(dirs, data, data_length, target, 1);
}
    43f2:	8d 2d       	mov	r24, r13
    43f4:	df 91       	pop	r29
    43f6:	cf 91       	pop	r28
    43f8:	1f 91       	pop	r17
    43fa:	0f 91       	pop	r16
    43fc:	ff 90       	pop	r15
    43fe:	ef 90       	pop	r14
    4400:	df 90       	pop	r13
    4402:	08 95       	ret
    4404:	4f 2d       	mov	r20, r15
    4406:	50 e0       	ldi	r21, 0x00	; 0
    4408:	a6 e0       	ldi	r26, 0x06	; 6
    440a:	b0 e2       	ldi	r27, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    4410:	79 e3       	ldi	r23, 0x39	; 57
    4412:	61 e0       	ldi	r22, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    4414:	9a 01       	movw	r18, r20
    4416:	08 2e       	mov	r0, r24
    4418:	02 c0       	rjmp	.+4      	; 0x441e <ir_targeted_cmd+0xae>
    441a:	35 95       	asr	r19
    441c:	27 95       	ror	r18
    441e:	0a 94       	dec	r0
    4420:	e2 f7       	brpl	.-8      	; 0x441a <ir_targeted_cmd+0xaa>
    4422:	20 ff       	sbrs	r18, 0
    4424:	13 c0       	rjmp	.+38     	; 0x444c <ir_targeted_cmd+0xdc>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    4426:	ed 91       	ld	r30, X+
    4428:	fc 91       	ld	r31, X
    442a:	11 97       	sbiw	r26, 0x01	; 1
    442c:	24 81       	ldd	r18, Z+4	; 0x04
    442e:	2f 7e       	andi	r18, 0xEF	; 239
    4430:	24 83       	std	Z+4, r18	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    4432:	78 9f       	mul	r23, r24
    4434:	f0 01       	movw	r30, r0
    4436:	79 9f       	mul	r23, r25
    4438:	f0 0d       	add	r31, r0
    443a:	11 24       	eor	r1, r1
    443c:	e5 56       	subi	r30, 0x65	; 101
    443e:	f7 4d       	sbci	r31, 0xD7	; 215
    4440:	60 af       	std	Z+56, r22	; 0x38
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    4442:	20 ad       	ldd	r18, Z+56	; 0x38
    4444:	20 68       	ori	r18, 0x80	; 128
    4446:	20 af       	std	Z+56, r18	; 0x38
			ir_rxtx[dir].target_ID=target;
    4448:	c0 87       	std	Z+8, r28	; 0x08
    444a:	d1 87       	std	Z+9, r29	; 0x09
    444c:	01 96       	adiw	r24, 0x01	; 1
    444e:	12 96       	adiw	r26, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    4450:	86 30       	cpi	r24, 0x06	; 6
    4452:	91 05       	cpc	r25, r1
    4454:	f9 f6       	brne	.-66     	; 0x4414 <ir_targeted_cmd+0xa4>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	4e 2d       	mov	r20, r14
    445a:	b8 01       	movw	r22, r16
    445c:	8f 2d       	mov	r24, r15
    445e:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <send_msg>
    return 1;
    4462:	dd 24       	eor	r13, r13
    4464:	d3 94       	inc	r13
    4466:	c5 cf       	rjmp	.-118    	; 0x43f2 <ir_targeted_cmd+0x82>
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
    4468:	88 e7       	ldi	r24, 0x78	; 120
    446a:	96 e0       	ldi	r25, 0x06	; 6
    446c:	9f 93       	push	r25
    446e:	8f 93       	push	r24
    4470:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
		return 0;
    4478:	d1 2c       	mov	r13, r1
    447a:	bb cf       	rjmp	.-138    	; 0x43f2 <ir_targeted_cmd+0x82>

0000447c <ir_cmd>:

uint8_t ir_targeted_cmd(uint8_t dirs, char *data, uint8_t data_length, id_t target){
	return all_ir_sends(dirs, data, data_length, target, 1);
}

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
    447c:	df 92       	push	r13
    447e:	ef 92       	push	r14
    4480:	ff 92       	push	r15
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	c8 2f       	mov	r28, r24
    448c:	8b 01       	movw	r16, r22
    448e:	e4 2e       	mov	r14, r20
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    4490:	d0 90 27 2a 	lds	r13, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    4494:	d1 10       	cpse	r13, r1
    4496:	6d c0       	rjmp	.+218    	; 0x4572 <ir_cmd+0xf6>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    4498:	0e 94 59 21 	call	0x42b2	; 0x42b2 <ir_is_busy>
    449c:	82 30       	cpi	r24, 0x02	; 2
    449e:	b8 f1       	brcs	.+110    	; 0x450e <ir_cmd+0x92>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    44a0:	86 e5       	ldi	r24, 0x56	; 86
    44a2:	96 e0       	ldi	r25, 0x06	; 6
    44a4:	9f 93       	push	r25
    44a6:	8f 93       	push	r24
    44a8:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	ee 20       	and	r14, r14
    44b2:	e1 f0       	breq	.+56     	; 0x44ec <ir_cmd+0x70>
    44b4:	e8 01       	movw	r28, r16
    44b6:	ea 94       	dec	r14
    44b8:	f1 2c       	mov	r15, r1
    44ba:	8f ef       	ldi	r24, 0xFF	; 255
    44bc:	e8 1a       	sub	r14, r24
    44be:	f8 0a       	sbc	r15, r24
    44c0:	e0 0e       	add	r14, r16
    44c2:	f1 1e       	adc	r15, r17
			printf("%02hX ",data[i]);
    44c4:	0c e4       	ldi	r16, 0x4C	; 76
    44c6:	11 e2       	ldi	r17, 0x21	; 33
    44c8:	89 91       	ld	r24, Y+
    44ca:	28 2f       	mov	r18, r24
    44cc:	08 2e       	mov	r0, r24
    44ce:	00 0c       	add	r0, r0
    44d0:	33 0b       	sbc	r19, r19
    44d2:	3f 93       	push	r19
    44d4:	8f 93       	push	r24
    44d6:	1f 93       	push	r17
    44d8:	0f 93       	push	r16
    44da:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	0f 90       	pop	r0
    44e4:	0f 90       	pop	r0
    44e6:	ce 15       	cp	r28, r14
    44e8:	df 05       	cpc	r29, r15
    44ea:	71 f7       	brne	.-36     	; 0x44c8 <ir_cmd+0x4c>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    44ec:	8a e1       	ldi	r24, 0x1A	; 26
    44ee:	96 e0       	ldi	r25, 0x06	; 6
    44f0:	9f 93       	push	r25
    44f2:	8f 93       	push	r24
    44f4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
	return all_ir_sends(dirs, data, data_length, target, 1);
}

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
	return all_ir_sends(dirs, data, data_length, 0, 1);
}
    44fc:	8d 2d       	mov	r24, r13
    44fe:	df 91       	pop	r29
    4500:	cf 91       	pop	r28
    4502:	1f 91       	pop	r17
    4504:	0f 91       	pop	r16
    4506:	ff 90       	pop	r15
    4508:	ef 90       	pop	r14
    450a:	df 90       	pop	r13
    450c:	08 95       	ret
    450e:	4c 2f       	mov	r20, r28
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	a6 e0       	ldi	r26, 0x06	; 6
    4514:	b0 e2       	ldi	r27, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    451a:	79 e3       	ldi	r23, 0x39	; 57
    451c:	61 e0       	ldi	r22, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    451e:	9a 01       	movw	r18, r20
    4520:	08 2e       	mov	r0, r24
    4522:	02 c0       	rjmp	.+4      	; 0x4528 <ir_cmd+0xac>
    4524:	35 95       	asr	r19
    4526:	27 95       	ror	r18
    4528:	0a 94       	dec	r0
    452a:	e2 f7       	brpl	.-8      	; 0x4524 <ir_cmd+0xa8>
    452c:	20 ff       	sbrs	r18, 0
    452e:	13 c0       	rjmp	.+38     	; 0x4556 <ir_cmd+0xda>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    4530:	ed 91       	ld	r30, X+
    4532:	fc 91       	ld	r31, X
    4534:	11 97       	sbiw	r26, 0x01	; 1
    4536:	24 81       	ldd	r18, Z+4	; 0x04
    4538:	2f 7e       	andi	r18, 0xEF	; 239
    453a:	24 83       	std	Z+4, r18	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    453c:	78 9f       	mul	r23, r24
    453e:	f0 01       	movw	r30, r0
    4540:	79 9f       	mul	r23, r25
    4542:	f0 0d       	add	r31, r0
    4544:	11 24       	eor	r1, r1
    4546:	e5 56       	subi	r30, 0x65	; 101
    4548:	f7 4d       	sbci	r31, 0xD7	; 215
    454a:	60 af       	std	Z+56, r22	; 0x38
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    454c:	20 ad       	ldd	r18, Z+56	; 0x38
    454e:	20 68       	ori	r18, 0x80	; 128
    4550:	20 af       	std	Z+56, r18	; 0x38
			ir_rxtx[dir].target_ID=target;
    4552:	10 86       	std	Z+8, r1	; 0x08
    4554:	11 86       	std	Z+9, r1	; 0x09
    4556:	01 96       	adiw	r24, 0x01	; 1
    4558:	12 96       	adiw	r26, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    455a:	86 30       	cpi	r24, 0x06	; 6
    455c:	91 05       	cpc	r25, r1
    455e:	f9 f6       	brne	.-66     	; 0x451e <ir_cmd+0xa2>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	4e 2d       	mov	r20, r14
    4564:	b8 01       	movw	r22, r16
    4566:	8c 2f       	mov	r24, r28
    4568:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <send_msg>
    return 1;
    456c:	dd 24       	eor	r13, r13
    456e:	d3 94       	inc	r13
    4570:	c5 cf       	rjmp	.-118    	; 0x44fc <ir_cmd+0x80>
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
    4572:	88 e7       	ldi	r24, 0x78	; 120
    4574:	96 e0       	ldi	r25, 0x06	; 6
    4576:	9f 93       	push	r25
    4578:	8f 93       	push	r24
    457a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
		return 0;
    4582:	d1 2c       	mov	r13, r1
    4584:	bb cf       	rjmp	.-138    	; 0x44fc <ir_cmd+0x80>

00004586 <ir_targeted_send>:

uint8_t ir_cmd(uint8_t dirs, char *data, uint8_t data_length){	
	return all_ir_sends(dirs, data, data_length, 0, 1);
}

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, id_t target){
    4586:	df 92       	push	r13
    4588:	ef 92       	push	r14
    458a:	ff 92       	push	r15
    458c:	0f 93       	push	r16
    458e:	1f 93       	push	r17
    4590:	cf 93       	push	r28
    4592:	df 93       	push	r29
    4594:	f8 2e       	mov	r15, r24
    4596:	8b 01       	movw	r16, r22
    4598:	e4 2e       	mov	r14, r20
    459a:	e9 01       	movw	r28, r18
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    459c:	d0 90 27 2a 	lds	r13, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    45a0:	d1 10       	cpse	r13, r1
    45a2:	70 c0       	rjmp	.+224    	; 0x4684 <ir_targeted_send+0xfe>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    45a4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <ir_is_busy>
    45a8:	82 30       	cpi	r24, 0x02	; 2
    45aa:	b8 f1       	brcs	.+110    	; 0x461a <ir_targeted_send+0x94>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    45ac:	86 e5       	ldi	r24, 0x56	; 86
    45ae:	96 e0       	ldi	r25, 0x06	; 6
    45b0:	9f 93       	push	r25
    45b2:	8f 93       	push	r24
    45b4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	ee 20       	and	r14, r14
    45be:	e1 f0       	breq	.+56     	; 0x45f8 <ir_targeted_send+0x72>
    45c0:	e8 01       	movw	r28, r16
    45c2:	ea 94       	dec	r14
    45c4:	f1 2c       	mov	r15, r1
    45c6:	8f ef       	ldi	r24, 0xFF	; 255
    45c8:	e8 1a       	sub	r14, r24
    45ca:	f8 0a       	sbc	r15, r24
    45cc:	e0 0e       	add	r14, r16
    45ce:	f1 1e       	adc	r15, r17
			printf("%02hX ",data[i]);
    45d0:	0c e4       	ldi	r16, 0x4C	; 76
    45d2:	11 e2       	ldi	r17, 0x21	; 33
    45d4:	89 91       	ld	r24, Y+
    45d6:	28 2f       	mov	r18, r24
    45d8:	08 2e       	mov	r0, r24
    45da:	00 0c       	add	r0, r0
    45dc:	33 0b       	sbc	r19, r19
    45de:	3f 93       	push	r19
    45e0:	8f 93       	push	r24
    45e2:	1f 93       	push	r17
    45e4:	0f 93       	push	r16
    45e6:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    45ea:	0f 90       	pop	r0
    45ec:	0f 90       	pop	r0
    45ee:	0f 90       	pop	r0
    45f0:	0f 90       	pop	r0
    45f2:	ce 15       	cp	r28, r14
    45f4:	df 05       	cpc	r29, r15
    45f6:	71 f7       	brne	.-36     	; 0x45d4 <ir_targeted_send+0x4e>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    45f8:	8a e1       	ldi	r24, 0x1A	; 26
    45fa:	96 e0       	ldi	r25, 0x06	; 6
    45fc:	9f 93       	push	r25
    45fe:	8f 93       	push	r24
    4600:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
	return all_ir_sends(dirs, data, data_length, 0, 1);
}

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, id_t target){
	return all_ir_sends(dirs, data, data_length, target, 0);
}
    4608:	8d 2d       	mov	r24, r13
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	08 95       	ret
    461a:	4f 2d       	mov	r20, r15
    461c:	50 e0       	ldi	r21, 0x00	; 0
    461e:	e6 e0       	ldi	r30, 0x06	; 6
    4620:	f0 e2       	ldi	r31, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	90 e0       	ldi	r25, 0x00	; 0
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    4626:	79 e3       	ldi	r23, 0x39	; 57
    4628:	61 e0       	ldi	r22, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    462a:	9a 01       	movw	r18, r20
    462c:	08 2e       	mov	r0, r24
    462e:	02 c0       	rjmp	.+4      	; 0x4634 <ir_targeted_send+0xae>
    4630:	35 95       	asr	r19
    4632:	27 95       	ror	r18
    4634:	0a 94       	dec	r0
    4636:	e2 f7       	brpl	.-8      	; 0x4630 <ir_targeted_send+0xaa>
    4638:	20 ff       	sbrs	r18, 0
    463a:	16 c0       	rjmp	.+44     	; 0x4668 <ir_targeted_send+0xe2>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    463c:	a0 81       	ld	r26, Z
    463e:	b1 81       	ldd	r27, Z+1	; 0x01
    4640:	14 96       	adiw	r26, 0x04	; 4
    4642:	2c 91       	ld	r18, X
    4644:	14 97       	sbiw	r26, 0x04	; 4
    4646:	2f 7e       	andi	r18, 0xEF	; 239
    4648:	14 96       	adiw	r26, 0x04	; 4
    464a:	2c 93       	st	X, r18
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    464c:	78 9f       	mul	r23, r24
    464e:	d0 01       	movw	r26, r0
    4650:	79 9f       	mul	r23, r25
    4652:	b0 0d       	add	r27, r0
    4654:	11 24       	eor	r1, r1
    4656:	a5 56       	subi	r26, 0x65	; 101
    4658:	b7 4d       	sbci	r27, 0xD7	; 215
    465a:	d8 96       	adiw	r26, 0x38	; 56
    465c:	6c 93       	st	X, r22
    465e:	d8 97       	sbiw	r26, 0x38	; 56
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    4660:	18 96       	adiw	r26, 0x08	; 8
    4662:	cd 93       	st	X+, r28
    4664:	dc 93       	st	X, r29
    4666:	19 97       	sbiw	r26, 0x09	; 9
    4668:	01 96       	adiw	r24, 0x01	; 1
    466a:	32 96       	adiw	r30, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    466c:	86 30       	cpi	r24, 0x06	; 6
    466e:	91 05       	cpc	r25, r1
    4670:	e1 f6       	brne	.-72     	; 0x462a <ir_targeted_send+0xa4>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	4e 2d       	mov	r20, r14
    4676:	b8 01       	movw	r22, r16
    4678:	8f 2d       	mov	r24, r15
    467a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <send_msg>
    return 1;
    467e:	dd 24       	eor	r13, r13
    4680:	d3 94       	inc	r13
    4682:	c2 cf       	rjmp	.-124    	; 0x4608 <ir_targeted_send+0x82>
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
    4684:	88 e7       	ldi	r24, 0x78	; 120
    4686:	96 e0       	ldi	r25, 0x06	; 6
    4688:	9f 93       	push	r25
    468a:	8f 93       	push	r24
    468c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
		return 0;
    4694:	d1 2c       	mov	r13, r1
    4696:	b8 cf       	rjmp	.-144    	; 0x4608 <ir_targeted_send+0x82>

00004698 <ir_send>:

uint8_t ir_targeted_send(uint8_t dirs, char *data, uint8_t data_length, id_t target){
	return all_ir_sends(dirs, data, data_length, target, 0);
}

uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
    4698:	df 92       	push	r13
    469a:	ef 92       	push	r14
    469c:	ff 92       	push	r15
    469e:	0f 93       	push	r16
    46a0:	1f 93       	push	r17
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	c8 2f       	mov	r28, r24
    46a8:	8b 01       	movw	r16, r22
    46aa:	e4 2e       	mov	r14, r20
 * This function returns '0' if no message was sent because the channels were busy, and '1' if it was successful 
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
    46ac:	d0 90 27 2a 	lds	r13, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    46b0:	d1 10       	cpse	r13, r1
    46b2:	70 c0       	rjmp	.+224    	; 0x4794 <ir_send+0xfc>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    46b4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <ir_is_busy>
    46b8:	82 30       	cpi	r24, 0x02	; 2
    46ba:	b8 f1       	brcs	.+110    	; 0x472a <ir_send+0x92>
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
    46bc:	86 e5       	ldi	r24, 0x56	; 86
    46be:	96 e0       	ldi	r25, 0x06	; 6
    46c0:	9f 93       	push	r25
    46c2:	8f 93       	push	r24
    46c4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		for(uint8_t i=0;i<data_length;i++){
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	ee 20       	and	r14, r14
    46ce:	e1 f0       	breq	.+56     	; 0x4708 <ir_send+0x70>
    46d0:	e8 01       	movw	r28, r16
    46d2:	ea 94       	dec	r14
    46d4:	f1 2c       	mov	r15, r1
    46d6:	8f ef       	ldi	r24, 0xFF	; 255
    46d8:	e8 1a       	sub	r14, r24
    46da:	f8 0a       	sbc	r15, r24
    46dc:	e0 0e       	add	r14, r16
    46de:	f1 1e       	adc	r15, r17
			printf("%02hX ",data[i]);
    46e0:	0c e4       	ldi	r16, 0x4C	; 76
    46e2:	11 e2       	ldi	r17, 0x21	; 33
    46e4:	89 91       	ld	r24, Y+
    46e6:	28 2f       	mov	r18, r24
    46e8:	08 2e       	mov	r0, r24
    46ea:	00 0c       	add	r0, r0
    46ec:	33 0b       	sbc	r19, r19
    46ee:	3f 93       	push	r19
    46f0:	8f 93       	push	r24
    46f2:	1f 93       	push	r17
    46f4:	0f 93       	push	r16
    46f6:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
        printf_P(PSTR("Aborting IR send while trying:\r\n\t"));
		for(uint8_t i=0;i<data_length;i++){
    46fa:	0f 90       	pop	r0
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	ce 15       	cp	r28, r14
    4704:	df 05       	cpc	r29, r15
    4706:	71 f7       	brne	.-36     	; 0x46e4 <ir_send+0x4c>
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
    4708:	8a e1       	ldi	r24, 0x1A	; 26
    470a:	96 e0       	ldi	r25, 0x06	; 6
    470c:	9f 93       	push	r25
    470e:	8f 93       	push	r24
    4710:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
	return all_ir_sends(dirs, data, data_length, target, 0);
}

uint8_t ir_send(uint8_t dirs, char *data, uint8_t data_length){
	return all_ir_sends(dirs, data, data_length, 0, 0);
}
    4718:	8d 2d       	mov	r24, r13
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	1f 91       	pop	r17
    4720:	0f 91       	pop	r16
    4722:	ff 90       	pop	r15
    4724:	ef 90       	pop	r14
    4726:	df 90       	pop	r13
    4728:	08 95       	ret
    472a:	4c 2f       	mov	r20, r28
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	e6 e0       	ldi	r30, 0x06	; 6
    4730:	f0 e2       	ldi	r31, 0x20	; 32
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
		return 0;
	}
	if(ir_is_busy(dirs_to_go)>1){
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	90 e0       	ldi	r25, 0x00	; 0
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    4736:	79 e3       	ldi	r23, 0x39	; 57
    4738:	61 e0       	ldi	r22, 0x01	; 1
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
		if(dirs_to_go&(1<<dir)){		
    473a:	9a 01       	movw	r18, r20
    473c:	08 2e       	mov	r0, r24
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <ir_send+0xac>
    4740:	35 95       	asr	r19
    4742:	27 95       	ror	r18
    4744:	0a 94       	dec	r0
    4746:	e2 f7       	brpl	.-8      	; 0x4740 <ir_send+0xa8>
    4748:	20 ff       	sbrs	r18, 0
    474a:	16 c0       	rjmp	.+44     	; 0x4778 <ir_send+0xe0>
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    474c:	a0 81       	ld	r26, Z
    474e:	b1 81       	ldd	r27, Z+1	; 0x01
    4750:	14 96       	adiw	r26, 0x04	; 4
    4752:	2c 91       	ld	r18, X
    4754:	14 97       	sbiw	r26, 0x04	; 4
    4756:	2f 7e       	andi	r18, 0xEF	; 239
    4758:	14 96       	adiw	r26, 0x04	; 4
    475a:	2c 93       	st	X, r18
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    475c:	78 9f       	mul	r23, r24
    475e:	d0 01       	movw	r26, r0
    4760:	79 9f       	mul	r23, r25
    4762:	b0 0d       	add	r27, r0
    4764:	11 24       	eor	r1, r1
    4766:	a5 56       	subi	r26, 0x65	; 101
    4768:	b7 4d       	sbci	r27, 0xD7	; 215
    476a:	d8 96       	adiw	r26, 0x38	; 56
    476c:	6c 93       	st	X, r22
    476e:	d8 97       	sbiw	r26, 0x38	; 56
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    4770:	18 96       	adiw	r26, 0x08	; 8
    4772:	1d 92       	st	X+, r1
    4774:	1c 92       	st	X, r1
    4776:	19 97       	sbiw	r26, 0x09	; 9
    4778:	01 96       	adiw	r24, 0x01	; 1
    477a:	32 96       	adiw	r30, 0x02	; 2
			printf("%02hX ",data[i]);
		}
		printf_P(PSTR("\r\nChannels are probably blocked by your previous message.\r\n"));
        return 0;
    }        
	for(uint8_t dir=0;dir<6;dir++){
    477c:	86 30       	cpi	r24, 0x06	; 6
    477e:	91 05       	cpc	r25, r1
    4780:	e1 f6       	brne	.-72     	; 0x473a <ir_send+0xa2>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length, 0);
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	4e 2d       	mov	r20, r14
    4786:	b8 01       	movw	r22, r16
    4788:	8c 2f       	mov	r24, r28
    478a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <send_msg>
    return 1;
    478e:	dd 24       	eor	r13, r13
    4790:	d3 94       	inc	r13
    4792:	c2 cf       	rjmp	.-124    	; 0x4718 <ir_send+0x80>
 * in claiming channels and starting the message send process. Note that this function returning '1' doesn't
 * guarantee a successful transmission, as it's still possible for something to go wrong with the send.
 */
inline uint8_t all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, id_t target, uint8_t cmd_flag){
	if(hp_ir_block_bm){
		printf_P(PSTR("Normal send blocked by hp.\r\n"));
    4794:	88 e7       	ldi	r24, 0x78	; 120
    4796:	96 e0       	ldi	r25, 0x06	; 6
    4798:	9f 93       	push	r25
    479a:	8f 93       	push	r24
    479c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    47a0:	0f 90       	pop	r0
    47a2:	0f 90       	pop	r0
		return 0;
    47a4:	d1 2c       	mov	r13, r1
    47a6:	b8 cf       	rjmp	.-144    	; 0x4718 <ir_send+0x80>

000047a8 <__vector_25>:
	}
	return transmitting ? 2 : (receiving ? 1 : 0);
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    47a8:	1f 92       	push	r1
    47aa:	0f 92       	push	r0
    47ac:	0f b6       	in	r0, 0x3f	; 63
    47ae:	0f 92       	push	r0
    47b0:	11 24       	eor	r1, r1
    47b2:	0b b6       	in	r0, 0x3b	; 59
    47b4:	0f 92       	push	r0
    47b6:	2f 93       	push	r18
    47b8:	3f 93       	push	r19
    47ba:	4f 93       	push	r20
    47bc:	5f 93       	push	r21
    47be:	6f 93       	push	r22
    47c0:	7f 93       	push	r23
    47c2:	8f 93       	push	r24
    47c4:	9f 93       	push	r25
    47c6:	af 93       	push	r26
    47c8:	bf 93       	push	r27
    47ca:	ef 93       	push	r30
    47cc:	ff 93       	push	r31
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	0e 94 a5 1b 	call	0x374a	; 0x374a <ir_receive>
    47d4:	ff 91       	pop	r31
    47d6:	ef 91       	pop	r30
    47d8:	bf 91       	pop	r27
    47da:	af 91       	pop	r26
    47dc:	9f 91       	pop	r25
    47de:	8f 91       	pop	r24
    47e0:	7f 91       	pop	r23
    47e2:	6f 91       	pop	r22
    47e4:	5f 91       	pop	r21
    47e6:	4f 91       	pop	r20
    47e8:	3f 91       	pop	r19
    47ea:	2f 91       	pop	r18
    47ec:	0f 90       	pop	r0
    47ee:	0b be       	out	0x3b, r0	; 59
    47f0:	0f 90       	pop	r0
    47f2:	0f be       	out	0x3f, r0	; 63
    47f4:	0f 90       	pop	r0
    47f6:	1f 90       	pop	r1
    47f8:	18 95       	reti

000047fa <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    47fa:	1f 92       	push	r1
    47fc:	0f 92       	push	r0
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	0f 92       	push	r0
    4802:	11 24       	eor	r1, r1
    4804:	0b b6       	in	r0, 0x3b	; 59
    4806:	0f 92       	push	r0
    4808:	2f 93       	push	r18
    480a:	3f 93       	push	r19
    480c:	4f 93       	push	r20
    480e:	5f 93       	push	r21
    4810:	6f 93       	push	r22
    4812:	7f 93       	push	r23
    4814:	8f 93       	push	r24
    4816:	9f 93       	push	r25
    4818:	af 93       	push	r26
    481a:	bf 93       	push	r27
    481c:	ef 93       	push	r30
    481e:	ff 93       	push	r31
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <ir_transmit_complete>
    4826:	ff 91       	pop	r31
    4828:	ef 91       	pop	r30
    482a:	bf 91       	pop	r27
    482c:	af 91       	pop	r26
    482e:	9f 91       	pop	r25
    4830:	8f 91       	pop	r24
    4832:	7f 91       	pop	r23
    4834:	6f 91       	pop	r22
    4836:	5f 91       	pop	r21
    4838:	4f 91       	pop	r20
    483a:	3f 91       	pop	r19
    483c:	2f 91       	pop	r18
    483e:	0f 90       	pop	r0
    4840:	0b be       	out	0x3b, r0	; 59
    4842:	0f 90       	pop	r0
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	0f 90       	pop	r0
    4848:	1f 90       	pop	r1
    484a:	18 95       	reti

0000484c <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    484c:	1f 92       	push	r1
    484e:	0f 92       	push	r0
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	0f 92       	push	r0
    4854:	11 24       	eor	r1, r1
    4856:	0b b6       	in	r0, 0x3b	; 59
    4858:	0f 92       	push	r0
    485a:	2f 93       	push	r18
    485c:	3f 93       	push	r19
    485e:	4f 93       	push	r20
    4860:	5f 93       	push	r21
    4862:	6f 93       	push	r22
    4864:	7f 93       	push	r23
    4866:	8f 93       	push	r24
    4868:	9f 93       	push	r25
    486a:	af 93       	push	r26
    486c:	bf 93       	push	r27
    486e:	ef 93       	push	r30
    4870:	ff 93       	push	r31
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	0e 94 b7 1a 	call	0x356e	; 0x356e <ir_transmit>
    4878:	ff 91       	pop	r31
    487a:	ef 91       	pop	r30
    487c:	bf 91       	pop	r27
    487e:	af 91       	pop	r26
    4880:	9f 91       	pop	r25
    4882:	8f 91       	pop	r24
    4884:	7f 91       	pop	r23
    4886:	6f 91       	pop	r22
    4888:	5f 91       	pop	r21
    488a:	4f 91       	pop	r20
    488c:	3f 91       	pop	r19
    488e:	2f 91       	pop	r18
    4890:	0f 90       	pop	r0
    4892:	0b be       	out	0x3b, r0	; 59
    4894:	0f 90       	pop	r0
    4896:	0f be       	out	0x3f, r0	; 63
    4898:	0f 90       	pop	r0
    489a:	1f 90       	pop	r1
    489c:	18 95       	reti

0000489e <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    489e:	1f 92       	push	r1
    48a0:	0f 92       	push	r0
    48a2:	0f b6       	in	r0, 0x3f	; 63
    48a4:	0f 92       	push	r0
    48a6:	11 24       	eor	r1, r1
    48a8:	0b b6       	in	r0, 0x3b	; 59
    48aa:	0f 92       	push	r0
    48ac:	2f 93       	push	r18
    48ae:	3f 93       	push	r19
    48b0:	4f 93       	push	r20
    48b2:	5f 93       	push	r21
    48b4:	6f 93       	push	r22
    48b6:	7f 93       	push	r23
    48b8:	8f 93       	push	r24
    48ba:	9f 93       	push	r25
    48bc:	af 93       	push	r26
    48be:	bf 93       	push	r27
    48c0:	ef 93       	push	r30
    48c2:	ff 93       	push	r31
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	0e 94 a5 1b 	call	0x374a	; 0x374a <ir_receive>
    48ca:	ff 91       	pop	r31
    48cc:	ef 91       	pop	r30
    48ce:	bf 91       	pop	r27
    48d0:	af 91       	pop	r26
    48d2:	9f 91       	pop	r25
    48d4:	8f 91       	pop	r24
    48d6:	7f 91       	pop	r23
    48d8:	6f 91       	pop	r22
    48da:	5f 91       	pop	r21
    48dc:	4f 91       	pop	r20
    48de:	3f 91       	pop	r19
    48e0:	2f 91       	pop	r18
    48e2:	0f 90       	pop	r0
    48e4:	0b be       	out	0x3b, r0	; 59
    48e6:	0f 90       	pop	r0
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	0f 90       	pop	r0
    48ec:	1f 90       	pop	r1
    48ee:	18 95       	reti

000048f0 <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    48f0:	1f 92       	push	r1
    48f2:	0f 92       	push	r0
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	0f 92       	push	r0
    48f8:	11 24       	eor	r1, r1
    48fa:	0b b6       	in	r0, 0x3b	; 59
    48fc:	0f 92       	push	r0
    48fe:	2f 93       	push	r18
    4900:	3f 93       	push	r19
    4902:	4f 93       	push	r20
    4904:	5f 93       	push	r21
    4906:	6f 93       	push	r22
    4908:	7f 93       	push	r23
    490a:	8f 93       	push	r24
    490c:	9f 93       	push	r25
    490e:	af 93       	push	r26
    4910:	bf 93       	push	r27
    4912:	ef 93       	push	r30
    4914:	ff 93       	push	r31
    4916:	81 e0       	ldi	r24, 0x01	; 1
    4918:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <ir_transmit_complete>
    491c:	ff 91       	pop	r31
    491e:	ef 91       	pop	r30
    4920:	bf 91       	pop	r27
    4922:	af 91       	pop	r26
    4924:	9f 91       	pop	r25
    4926:	8f 91       	pop	r24
    4928:	7f 91       	pop	r23
    492a:	6f 91       	pop	r22
    492c:	5f 91       	pop	r21
    492e:	4f 91       	pop	r20
    4930:	3f 91       	pop	r19
    4932:	2f 91       	pop	r18
    4934:	0f 90       	pop	r0
    4936:	0b be       	out	0x3b, r0	; 59
    4938:	0f 90       	pop	r0
    493a:	0f be       	out	0x3f, r0	; 63
    493c:	0f 90       	pop	r0
    493e:	1f 90       	pop	r1
    4940:	18 95       	reti

00004942 <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    4942:	1f 92       	push	r1
    4944:	0f 92       	push	r0
    4946:	0f b6       	in	r0, 0x3f	; 63
    4948:	0f 92       	push	r0
    494a:	11 24       	eor	r1, r1
    494c:	0b b6       	in	r0, 0x3b	; 59
    494e:	0f 92       	push	r0
    4950:	2f 93       	push	r18
    4952:	3f 93       	push	r19
    4954:	4f 93       	push	r20
    4956:	5f 93       	push	r21
    4958:	6f 93       	push	r22
    495a:	7f 93       	push	r23
    495c:	8f 93       	push	r24
    495e:	9f 93       	push	r25
    4960:	af 93       	push	r26
    4962:	bf 93       	push	r27
    4964:	ef 93       	push	r30
    4966:	ff 93       	push	r31
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	0e 94 b7 1a 	call	0x356e	; 0x356e <ir_transmit>
    496e:	ff 91       	pop	r31
    4970:	ef 91       	pop	r30
    4972:	bf 91       	pop	r27
    4974:	af 91       	pop	r26
    4976:	9f 91       	pop	r25
    4978:	8f 91       	pop	r24
    497a:	7f 91       	pop	r23
    497c:	6f 91       	pop	r22
    497e:	5f 91       	pop	r21
    4980:	4f 91       	pop	r20
    4982:	3f 91       	pop	r19
    4984:	2f 91       	pop	r18
    4986:	0f 90       	pop	r0
    4988:	0b be       	out	0x3b, r0	; 59
    498a:	0f 90       	pop	r0
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	0f 90       	pop	r0
    4990:	1f 90       	pop	r1
    4992:	18 95       	reti

00004994 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    4994:	1f 92       	push	r1
    4996:	0f 92       	push	r0
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	0f 92       	push	r0
    499c:	11 24       	eor	r1, r1
    499e:	0b b6       	in	r0, 0x3b	; 59
    49a0:	0f 92       	push	r0
    49a2:	2f 93       	push	r18
    49a4:	3f 93       	push	r19
    49a6:	4f 93       	push	r20
    49a8:	5f 93       	push	r21
    49aa:	6f 93       	push	r22
    49ac:	7f 93       	push	r23
    49ae:	8f 93       	push	r24
    49b0:	9f 93       	push	r25
    49b2:	af 93       	push	r26
    49b4:	bf 93       	push	r27
    49b6:	ef 93       	push	r30
    49b8:	ff 93       	push	r31
    49ba:	82 e0       	ldi	r24, 0x02	; 2
    49bc:	0e 94 a5 1b 	call	0x374a	; 0x374a <ir_receive>
    49c0:	ff 91       	pop	r31
    49c2:	ef 91       	pop	r30
    49c4:	bf 91       	pop	r27
    49c6:	af 91       	pop	r26
    49c8:	9f 91       	pop	r25
    49ca:	8f 91       	pop	r24
    49cc:	7f 91       	pop	r23
    49ce:	6f 91       	pop	r22
    49d0:	5f 91       	pop	r21
    49d2:	4f 91       	pop	r20
    49d4:	3f 91       	pop	r19
    49d6:	2f 91       	pop	r18
    49d8:	0f 90       	pop	r0
    49da:	0b be       	out	0x3b, r0	; 59
    49dc:	0f 90       	pop	r0
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	0f 90       	pop	r0
    49e2:	1f 90       	pop	r1
    49e4:	18 95       	reti

000049e6 <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    49e6:	1f 92       	push	r1
    49e8:	0f 92       	push	r0
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	0f 92       	push	r0
    49ee:	11 24       	eor	r1, r1
    49f0:	0b b6       	in	r0, 0x3b	; 59
    49f2:	0f 92       	push	r0
    49f4:	2f 93       	push	r18
    49f6:	3f 93       	push	r19
    49f8:	4f 93       	push	r20
    49fa:	5f 93       	push	r21
    49fc:	6f 93       	push	r22
    49fe:	7f 93       	push	r23
    4a00:	8f 93       	push	r24
    4a02:	9f 93       	push	r25
    4a04:	af 93       	push	r26
    4a06:	bf 93       	push	r27
    4a08:	ef 93       	push	r30
    4a0a:	ff 93       	push	r31
    4a0c:	82 e0       	ldi	r24, 0x02	; 2
    4a0e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <ir_transmit_complete>
    4a12:	ff 91       	pop	r31
    4a14:	ef 91       	pop	r30
    4a16:	bf 91       	pop	r27
    4a18:	af 91       	pop	r26
    4a1a:	9f 91       	pop	r25
    4a1c:	8f 91       	pop	r24
    4a1e:	7f 91       	pop	r23
    4a20:	6f 91       	pop	r22
    4a22:	5f 91       	pop	r21
    4a24:	4f 91       	pop	r20
    4a26:	3f 91       	pop	r19
    4a28:	2f 91       	pop	r18
    4a2a:	0f 90       	pop	r0
    4a2c:	0b be       	out	0x3b, r0	; 59
    4a2e:	0f 90       	pop	r0
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	0f 90       	pop	r0
    4a34:	1f 90       	pop	r1
    4a36:	18 95       	reti

00004a38 <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    4a38:	1f 92       	push	r1
    4a3a:	0f 92       	push	r0
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	0f 92       	push	r0
    4a40:	11 24       	eor	r1, r1
    4a42:	0b b6       	in	r0, 0x3b	; 59
    4a44:	0f 92       	push	r0
    4a46:	2f 93       	push	r18
    4a48:	3f 93       	push	r19
    4a4a:	4f 93       	push	r20
    4a4c:	5f 93       	push	r21
    4a4e:	6f 93       	push	r22
    4a50:	7f 93       	push	r23
    4a52:	8f 93       	push	r24
    4a54:	9f 93       	push	r25
    4a56:	af 93       	push	r26
    4a58:	bf 93       	push	r27
    4a5a:	ef 93       	push	r30
    4a5c:	ff 93       	push	r31
    4a5e:	82 e0       	ldi	r24, 0x02	; 2
    4a60:	0e 94 b7 1a 	call	0x356e	; 0x356e <ir_transmit>
    4a64:	ff 91       	pop	r31
    4a66:	ef 91       	pop	r30
    4a68:	bf 91       	pop	r27
    4a6a:	af 91       	pop	r26
    4a6c:	9f 91       	pop	r25
    4a6e:	8f 91       	pop	r24
    4a70:	7f 91       	pop	r23
    4a72:	6f 91       	pop	r22
    4a74:	5f 91       	pop	r21
    4a76:	4f 91       	pop	r20
    4a78:	3f 91       	pop	r19
    4a7a:	2f 91       	pop	r18
    4a7c:	0f 90       	pop	r0
    4a7e:	0b be       	out	0x3b, r0	; 59
    4a80:	0f 90       	pop	r0
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	0f 90       	pop	r0
    4a86:	1f 90       	pop	r1
    4a88:	18 95       	reti

00004a8a <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    4a8a:	1f 92       	push	r1
    4a8c:	0f 92       	push	r0
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	0f 92       	push	r0
    4a92:	11 24       	eor	r1, r1
    4a94:	0b b6       	in	r0, 0x3b	; 59
    4a96:	0f 92       	push	r0
    4a98:	2f 93       	push	r18
    4a9a:	3f 93       	push	r19
    4a9c:	4f 93       	push	r20
    4a9e:	5f 93       	push	r21
    4aa0:	6f 93       	push	r22
    4aa2:	7f 93       	push	r23
    4aa4:	8f 93       	push	r24
    4aa6:	9f 93       	push	r25
    4aa8:	af 93       	push	r26
    4aaa:	bf 93       	push	r27
    4aac:	ef 93       	push	r30
    4aae:	ff 93       	push	r31
    4ab0:	83 e0       	ldi	r24, 0x03	; 3
    4ab2:	0e 94 a5 1b 	call	0x374a	; 0x374a <ir_receive>
    4ab6:	ff 91       	pop	r31
    4ab8:	ef 91       	pop	r30
    4aba:	bf 91       	pop	r27
    4abc:	af 91       	pop	r26
    4abe:	9f 91       	pop	r25
    4ac0:	8f 91       	pop	r24
    4ac2:	7f 91       	pop	r23
    4ac4:	6f 91       	pop	r22
    4ac6:	5f 91       	pop	r21
    4ac8:	4f 91       	pop	r20
    4aca:	3f 91       	pop	r19
    4acc:	2f 91       	pop	r18
    4ace:	0f 90       	pop	r0
    4ad0:	0b be       	out	0x3b, r0	; 59
    4ad2:	0f 90       	pop	r0
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	0f 90       	pop	r0
    4ad8:	1f 90       	pop	r1
    4ada:	18 95       	reti

00004adc <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    4adc:	1f 92       	push	r1
    4ade:	0f 92       	push	r0
    4ae0:	0f b6       	in	r0, 0x3f	; 63
    4ae2:	0f 92       	push	r0
    4ae4:	11 24       	eor	r1, r1
    4ae6:	0b b6       	in	r0, 0x3b	; 59
    4ae8:	0f 92       	push	r0
    4aea:	2f 93       	push	r18
    4aec:	3f 93       	push	r19
    4aee:	4f 93       	push	r20
    4af0:	5f 93       	push	r21
    4af2:	6f 93       	push	r22
    4af4:	7f 93       	push	r23
    4af6:	8f 93       	push	r24
    4af8:	9f 93       	push	r25
    4afa:	af 93       	push	r26
    4afc:	bf 93       	push	r27
    4afe:	ef 93       	push	r30
    4b00:	ff 93       	push	r31
    4b02:	83 e0       	ldi	r24, 0x03	; 3
    4b04:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <ir_transmit_complete>
    4b08:	ff 91       	pop	r31
    4b0a:	ef 91       	pop	r30
    4b0c:	bf 91       	pop	r27
    4b0e:	af 91       	pop	r26
    4b10:	9f 91       	pop	r25
    4b12:	8f 91       	pop	r24
    4b14:	7f 91       	pop	r23
    4b16:	6f 91       	pop	r22
    4b18:	5f 91       	pop	r21
    4b1a:	4f 91       	pop	r20
    4b1c:	3f 91       	pop	r19
    4b1e:	2f 91       	pop	r18
    4b20:	0f 90       	pop	r0
    4b22:	0b be       	out	0x3b, r0	; 59
    4b24:	0f 90       	pop	r0
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	0f 90       	pop	r0
    4b2a:	1f 90       	pop	r1
    4b2c:	18 95       	reti

00004b2e <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    4b2e:	1f 92       	push	r1
    4b30:	0f 92       	push	r0
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	0f 92       	push	r0
    4b36:	11 24       	eor	r1, r1
    4b38:	0b b6       	in	r0, 0x3b	; 59
    4b3a:	0f 92       	push	r0
    4b3c:	2f 93       	push	r18
    4b3e:	3f 93       	push	r19
    4b40:	4f 93       	push	r20
    4b42:	5f 93       	push	r21
    4b44:	6f 93       	push	r22
    4b46:	7f 93       	push	r23
    4b48:	8f 93       	push	r24
    4b4a:	9f 93       	push	r25
    4b4c:	af 93       	push	r26
    4b4e:	bf 93       	push	r27
    4b50:	ef 93       	push	r30
    4b52:	ff 93       	push	r31
    4b54:	83 e0       	ldi	r24, 0x03	; 3
    4b56:	0e 94 b7 1a 	call	0x356e	; 0x356e <ir_transmit>
    4b5a:	ff 91       	pop	r31
    4b5c:	ef 91       	pop	r30
    4b5e:	bf 91       	pop	r27
    4b60:	af 91       	pop	r26
    4b62:	9f 91       	pop	r25
    4b64:	8f 91       	pop	r24
    4b66:	7f 91       	pop	r23
    4b68:	6f 91       	pop	r22
    4b6a:	5f 91       	pop	r21
    4b6c:	4f 91       	pop	r20
    4b6e:	3f 91       	pop	r19
    4b70:	2f 91       	pop	r18
    4b72:	0f 90       	pop	r0
    4b74:	0b be       	out	0x3b, r0	; 59
    4b76:	0f 90       	pop	r0
    4b78:	0f be       	out	0x3f, r0	; 63
    4b7a:	0f 90       	pop	r0
    4b7c:	1f 90       	pop	r1
    4b7e:	18 95       	reti

00004b80 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    4b80:	1f 92       	push	r1
    4b82:	0f 92       	push	r0
    4b84:	0f b6       	in	r0, 0x3f	; 63
    4b86:	0f 92       	push	r0
    4b88:	11 24       	eor	r1, r1
    4b8a:	0b b6       	in	r0, 0x3b	; 59
    4b8c:	0f 92       	push	r0
    4b8e:	2f 93       	push	r18
    4b90:	3f 93       	push	r19
    4b92:	4f 93       	push	r20
    4b94:	5f 93       	push	r21
    4b96:	6f 93       	push	r22
    4b98:	7f 93       	push	r23
    4b9a:	8f 93       	push	r24
    4b9c:	9f 93       	push	r25
    4b9e:	af 93       	push	r26
    4ba0:	bf 93       	push	r27
    4ba2:	ef 93       	push	r30
    4ba4:	ff 93       	push	r31
    4ba6:	84 e0       	ldi	r24, 0x04	; 4
    4ba8:	0e 94 a5 1b 	call	0x374a	; 0x374a <ir_receive>
    4bac:	ff 91       	pop	r31
    4bae:	ef 91       	pop	r30
    4bb0:	bf 91       	pop	r27
    4bb2:	af 91       	pop	r26
    4bb4:	9f 91       	pop	r25
    4bb6:	8f 91       	pop	r24
    4bb8:	7f 91       	pop	r23
    4bba:	6f 91       	pop	r22
    4bbc:	5f 91       	pop	r21
    4bbe:	4f 91       	pop	r20
    4bc0:	3f 91       	pop	r19
    4bc2:	2f 91       	pop	r18
    4bc4:	0f 90       	pop	r0
    4bc6:	0b be       	out	0x3b, r0	; 59
    4bc8:	0f 90       	pop	r0
    4bca:	0f be       	out	0x3f, r0	; 63
    4bcc:	0f 90       	pop	r0
    4bce:	1f 90       	pop	r1
    4bd0:	18 95       	reti

00004bd2 <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    4bd2:	1f 92       	push	r1
    4bd4:	0f 92       	push	r0
    4bd6:	0f b6       	in	r0, 0x3f	; 63
    4bd8:	0f 92       	push	r0
    4bda:	11 24       	eor	r1, r1
    4bdc:	0b b6       	in	r0, 0x3b	; 59
    4bde:	0f 92       	push	r0
    4be0:	2f 93       	push	r18
    4be2:	3f 93       	push	r19
    4be4:	4f 93       	push	r20
    4be6:	5f 93       	push	r21
    4be8:	6f 93       	push	r22
    4bea:	7f 93       	push	r23
    4bec:	8f 93       	push	r24
    4bee:	9f 93       	push	r25
    4bf0:	af 93       	push	r26
    4bf2:	bf 93       	push	r27
    4bf4:	ef 93       	push	r30
    4bf6:	ff 93       	push	r31
    4bf8:	84 e0       	ldi	r24, 0x04	; 4
    4bfa:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <ir_transmit_complete>
    4bfe:	ff 91       	pop	r31
    4c00:	ef 91       	pop	r30
    4c02:	bf 91       	pop	r27
    4c04:	af 91       	pop	r26
    4c06:	9f 91       	pop	r25
    4c08:	8f 91       	pop	r24
    4c0a:	7f 91       	pop	r23
    4c0c:	6f 91       	pop	r22
    4c0e:	5f 91       	pop	r21
    4c10:	4f 91       	pop	r20
    4c12:	3f 91       	pop	r19
    4c14:	2f 91       	pop	r18
    4c16:	0f 90       	pop	r0
    4c18:	0b be       	out	0x3b, r0	; 59
    4c1a:	0f 90       	pop	r0
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	0f 90       	pop	r0
    4c20:	1f 90       	pop	r1
    4c22:	18 95       	reti

00004c24 <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    4c24:	1f 92       	push	r1
    4c26:	0f 92       	push	r0
    4c28:	0f b6       	in	r0, 0x3f	; 63
    4c2a:	0f 92       	push	r0
    4c2c:	11 24       	eor	r1, r1
    4c2e:	0b b6       	in	r0, 0x3b	; 59
    4c30:	0f 92       	push	r0
    4c32:	2f 93       	push	r18
    4c34:	3f 93       	push	r19
    4c36:	4f 93       	push	r20
    4c38:	5f 93       	push	r21
    4c3a:	6f 93       	push	r22
    4c3c:	7f 93       	push	r23
    4c3e:	8f 93       	push	r24
    4c40:	9f 93       	push	r25
    4c42:	af 93       	push	r26
    4c44:	bf 93       	push	r27
    4c46:	ef 93       	push	r30
    4c48:	ff 93       	push	r31
    4c4a:	84 e0       	ldi	r24, 0x04	; 4
    4c4c:	0e 94 b7 1a 	call	0x356e	; 0x356e <ir_transmit>
    4c50:	ff 91       	pop	r31
    4c52:	ef 91       	pop	r30
    4c54:	bf 91       	pop	r27
    4c56:	af 91       	pop	r26
    4c58:	9f 91       	pop	r25
    4c5a:	8f 91       	pop	r24
    4c5c:	7f 91       	pop	r23
    4c5e:	6f 91       	pop	r22
    4c60:	5f 91       	pop	r21
    4c62:	4f 91       	pop	r20
    4c64:	3f 91       	pop	r19
    4c66:	2f 91       	pop	r18
    4c68:	0f 90       	pop	r0
    4c6a:	0b be       	out	0x3b, r0	; 59
    4c6c:	0f 90       	pop	r0
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	0f 90       	pop	r0
    4c72:	1f 90       	pop	r1
    4c74:	18 95       	reti

00004c76 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    4c76:	1f 92       	push	r1
    4c78:	0f 92       	push	r0
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	0f 92       	push	r0
    4c7e:	11 24       	eor	r1, r1
    4c80:	0b b6       	in	r0, 0x3b	; 59
    4c82:	0f 92       	push	r0
    4c84:	2f 93       	push	r18
    4c86:	3f 93       	push	r19
    4c88:	4f 93       	push	r20
    4c8a:	5f 93       	push	r21
    4c8c:	6f 93       	push	r22
    4c8e:	7f 93       	push	r23
    4c90:	8f 93       	push	r24
    4c92:	9f 93       	push	r25
    4c94:	af 93       	push	r26
    4c96:	bf 93       	push	r27
    4c98:	ef 93       	push	r30
    4c9a:	ff 93       	push	r31
    4c9c:	85 e0       	ldi	r24, 0x05	; 5
    4c9e:	0e 94 a5 1b 	call	0x374a	; 0x374a <ir_receive>
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	0b b6       	in	r0, 0x3b	; 59
    4cd4:	0f 92       	push	r0
    4cd6:	2f 93       	push	r18
    4cd8:	3f 93       	push	r19
    4cda:	4f 93       	push	r20
    4cdc:	5f 93       	push	r21
    4cde:	6f 93       	push	r22
    4ce0:	7f 93       	push	r23
    4ce2:	8f 93       	push	r24
    4ce4:	9f 93       	push	r25
    4ce6:	af 93       	push	r26
    4ce8:	bf 93       	push	r27
    4cea:	ef 93       	push	r30
    4cec:	ff 93       	push	r31
    4cee:	85 e0       	ldi	r24, 0x05	; 5
    4cf0:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <ir_transmit_complete>
    4cf4:	ff 91       	pop	r31
    4cf6:	ef 91       	pop	r30
    4cf8:	bf 91       	pop	r27
    4cfa:	af 91       	pop	r26
    4cfc:	9f 91       	pop	r25
    4cfe:	8f 91       	pop	r24
    4d00:	7f 91       	pop	r23
    4d02:	6f 91       	pop	r22
    4d04:	5f 91       	pop	r21
    4d06:	4f 91       	pop	r20
    4d08:	3f 91       	pop	r19
    4d0a:	2f 91       	pop	r18
    4d0c:	0f 90       	pop	r0
    4d0e:	0b be       	out	0x3b, r0	; 59
    4d10:	0f 90       	pop	r0
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	0f 90       	pop	r0
    4d16:	1f 90       	pop	r1
    4d18:	18 95       	reti

00004d1a <__vector_120>:
    4d1a:	1f 92       	push	r1
    4d1c:	0f 92       	push	r0
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	0f 92       	push	r0
    4d22:	11 24       	eor	r1, r1
    4d24:	0b b6       	in	r0, 0x3b	; 59
    4d26:	0f 92       	push	r0
    4d28:	2f 93       	push	r18
    4d2a:	3f 93       	push	r19
    4d2c:	4f 93       	push	r20
    4d2e:	5f 93       	push	r21
    4d30:	6f 93       	push	r22
    4d32:	7f 93       	push	r23
    4d34:	8f 93       	push	r24
    4d36:	9f 93       	push	r25
    4d38:	af 93       	push	r26
    4d3a:	bf 93       	push	r27
    4d3c:	ef 93       	push	r30
    4d3e:	ff 93       	push	r31
    4d40:	85 e0       	ldi	r24, 0x05	; 5
    4d42:	0e 94 b7 1a 	call	0x356e	; 0x356e <ir_transmit>
    4d46:	ff 91       	pop	r31
    4d48:	ef 91       	pop	r30
    4d4a:	bf 91       	pop	r27
    4d4c:	af 91       	pop	r26
    4d4e:	9f 91       	pop	r25
    4d50:	8f 91       	pop	r24
    4d52:	7f 91       	pop	r23
    4d54:	6f 91       	pop	r22
    4d56:	5f 91       	pop	r21
    4d58:	4f 91       	pop	r20
    4d5a:	3f 91       	pop	r19
    4d5c:	2f 91       	pop	r18
    4d5e:	0f 90       	pop	r0
    4d60:	0b be       	out	0x3b, r0	; 59
    4d62:	0f 90       	pop	r0
    4d64:	0f be       	out	0x3f, r0	; 63
    4d66:	0f 90       	pop	r0
    4d68:	1f 90       	pop	r1
    4d6a:	18 95       	reti

00004d6c <twiWriteWrapper.constprop.0>:
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}

static uint8_t twiWriteWrapper(uint8_t addr, uint8_t* write_buff, uint8_t buff_len, char marker){
    4d6c:	4f 92       	push	r4
    4d6e:	5f 92       	push	r5
    4d70:	7f 92       	push	r7
    4d72:	8f 92       	push	r8
    4d74:	9f 92       	push	r9
    4d76:	af 92       	push	r10
    4d78:	bf 92       	push	r11
    4d7a:	cf 92       	push	r12
    4d7c:	ef 92       	push	r14
    4d7e:	ff 92       	push	r15
    4d80:	1f 93       	push	r17
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	78 2e       	mov	r7, r24
    4d88:	eb 01       	movw	r28, r22
    4d8a:	c4 2e       	mov	r12, r20
	uint32_t startTime = get_time();
    4d8c:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    4d90:	4b 01       	movw	r8, r22
    4d92:	5c 01       	movw	r10, r24
		if((get_time()-startTime)>1000){
			printf_P(PSTR("\tTWI timeout when setting IR Powers [%c]\r\n"), marker);
			return 0;
		}else if((get_time()-startTime)>100){
			if(!printed){
				printf_P(PSTR("Waiting for TWI [%c]...\r\n"), marker);
    4d94:	ec 2c       	mov	r14, r12
    4d96:	0c 2c       	mov	r0, r12
    4d98:	00 0c       	add	r0, r0
    4d9a:	ff 08       	sbc	r15, r15
    4d9c:	89 e0       	ldi	r24, 0x09	; 9
    4d9e:	48 2e       	mov	r4, r24
    4da0:	87 e0       	ldi	r24, 0x07	; 7
    4da2:	58 2e       	mov	r5, r24
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}

static uint8_t twiWriteWrapper(uint8_t addr, uint8_t* write_buff, uint8_t buff_len, char marker){
    4da4:	10 e0       	ldi	r17, 0x00	; 0
    4da6:	1a c0       	rjmp	.+52     	; 0x4ddc <twiWriteWrapper.constprop.0+0x70>
}

static uint8_t waitForTWIReady(uint32_t startTime, char marker){
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>1000){
    4da8:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	88 19       	sub	r24, r8
    4db2:	99 09       	sbc	r25, r9
    4db4:	aa 09       	sbc	r26, r10
    4db6:	bb 09       	sbc	r27, r11
    4db8:	89 3e       	cpi	r24, 0xE9	; 233
    4dba:	93 40       	sbci	r25, 0x03	; 3
    4dbc:	a1 05       	cpc	r26, r1
    4dbe:	b1 05       	cpc	r27, r1
    4dc0:	50 f5       	brcc	.+84     	; 0x4e16 <twiWriteWrapper.constprop.0+0xaa>
			printf_P(PSTR("\tTWI timeout when setting IR Powers [%c]\r\n"), marker);
			return 0;
		}else if((get_time()-startTime)>100){
    4dc2:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	88 19       	sub	r24, r8
    4dcc:	99 09       	sbc	r25, r9
    4dce:	aa 09       	sbc	r26, r10
    4dd0:	bb 09       	sbc	r27, r11
    4dd2:	85 36       	cpi	r24, 0x65	; 101
    4dd4:	91 05       	cpc	r25, r1
    4dd6:	a1 05       	cpc	r26, r1
    4dd8:	b1 05       	cpc	r27, r1
    4dda:	78 f5       	brcc	.+94     	; 0x4e3a <twiWriteWrapper.constprop.0+0xce>
	return result + printed - 1;
}

static uint8_t waitForTWIReady(uint32_t startTime, char marker){
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
    4ddc:	e0 91 46 2a 	lds	r30, 0x2A46	; 0x802a46 <twi>
    4de0:	f0 91 47 2a 	lds	r31, 0x2A47	; 0x802a47 <twi+0x1>
    4de4:	87 89       	ldd	r24, Z+23	; 0x17
    4de6:	81 11       	cpse	r24, r1
    4de8:	df cf       	rjmp	.-66     	; 0x4da8 <twiWriteWrapper.constprop.0+0x3c>
	uint32_t startTime = get_time();
	uint8_t result = 0;
	uint8_t printed = 0;
	while(!result){
		if((printed = waitForTWIReady(startTime, marker))){
			result = TWI_MasterWrite(addr, write_buff, buff_len);
    4dea:	46 e0       	ldi	r20, 0x06	; 6
    4dec:	be 01       	movw	r22, r28
    4dee:	87 2d       	mov	r24, r7
    4df0:	0e 94 30 18 	call	0x3060	; 0x3060 <TWI_MasterWrite>

static uint8_t twiWriteWrapper(uint8_t addr, uint8_t* write_buff, uint8_t buff_len, char marker){
	uint32_t startTime = get_time();
	uint8_t result = 0;
	uint8_t printed = 0;
	while(!result){
    4df4:	88 23       	and	r24, r24
    4df6:	b1 f2       	breq	.-84     	; 0x4da4 <twiWriteWrapper.constprop.0+0x38>
			result = TWI_MasterWrite(addr, write_buff, buff_len);
		}else{
			return 0;
		}
	}
	return result + printed - 1;
    4df8:	81 0f       	add	r24, r17
}
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	1f 91       	pop	r17
    4e00:	ff 90       	pop	r15
    4e02:	ef 90       	pop	r14
    4e04:	cf 90       	pop	r12
    4e06:	bf 90       	pop	r11
    4e08:	af 90       	pop	r10
    4e0a:	9f 90       	pop	r9
    4e0c:	8f 90       	pop	r8
    4e0e:	7f 90       	pop	r7
    4e10:	5f 90       	pop	r5
    4e12:	4f 90       	pop	r4
    4e14:	08 95       	ret

static uint8_t waitForTWIReady(uint32_t startTime, char marker){
	uint8_t printed = 0;
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>1000){
			printf_P(PSTR("\tTWI timeout when setting IR Powers [%c]\r\n"), marker);
    4e16:	8c 2d       	mov	r24, r12
    4e18:	0c 2c       	mov	r0, r12
    4e1a:	00 0c       	add	r0, r0
    4e1c:	99 0b       	sbc	r25, r25
    4e1e:	9f 93       	push	r25
    4e20:	cf 92       	push	r12
    4e22:	83 e2       	ldi	r24, 0x23	; 35
    4e24:	97 e0       	ldi	r25, 0x07	; 7
    4e26:	9f 93       	push	r25
    4e28:	8f 93       	push	r24
    4e2a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4e2e:	0f 90       	pop	r0
    4e30:	0f 90       	pop	r0
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
	uint8_t printed = 0;
	while(!result){
		if((printed = waitForTWIReady(startTime, marker))){
			result = TWI_MasterWrite(addr, write_buff, buff_len);
		}else{
			return 0;
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	e0 cf       	rjmp	.-64     	; 0x4dfa <twiWriteWrapper.constprop.0+0x8e>
	while(twi->status!=TWIM_STATUS_READY){
		if((get_time()-startTime)>1000){
			printf_P(PSTR("\tTWI timeout when setting IR Powers [%c]\r\n"), marker);
			return 0;
		}else if((get_time()-startTime)>100){
			if(!printed){
    4e3a:	11 23       	and	r17, r17
    4e3c:	31 f0       	breq	.+12     	; 0x4e4a <twiWriteWrapper.constprop.0+0xde>
				printf_P(PSTR("Waiting for TWI [%c]...\r\n"), marker);
				printed = 1;				
			}
			delay_ms(10);
    4e3e:	8a e0       	ldi	r24, 0x0A	; 10
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    4e46:	11 e0       	ldi	r17, 0x01	; 1
    4e48:	c9 cf       	rjmp	.-110    	; 0x4ddc <twiWriteWrapper.constprop.0+0x70>
		if((get_time()-startTime)>1000){
			printf_P(PSTR("\tTWI timeout when setting IR Powers [%c]\r\n"), marker);
			return 0;
		}else if((get_time()-startTime)>100){
			if(!printed){
				printf_P(PSTR("Waiting for TWI [%c]...\r\n"), marker);
    4e4a:	ff 92       	push	r15
    4e4c:	cf 92       	push	r12
    4e4e:	5f 92       	push	r5
    4e50:	4f 92       	push	r4
    4e52:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	ef cf       	rjmp	.-34     	; 0x4e3e <twiWriteWrapper.constprop.0+0xd2>

00004e60 <ir_led_init>:
static uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
static PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
static uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void ir_led_init()
{
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    4e64:	a0 ea       	ldi	r26, 0xA0	; 160
    4e66:	b6 e0       	ldi	r27, 0x06	; 6
    4e68:	93 ef       	ldi	r25, 0xF3	; 243
    4e6a:	11 96       	adiw	r26, 0x01	; 1
    4e6c:	9c 93       	st	X, r25
    4e6e:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC2_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    4e70:	e0 e0       	ldi	r30, 0x00	; 0
    4e72:	fb e0       	ldi	r31, 0x0B	; 11
    4e74:	82 e0       	ldi	r24, 0x02	; 2
    4e76:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC2_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    4e78:	80 81       	ld	r24, Z
    4e7a:	83 60       	ori	r24, 0x03	; 3
    4e7c:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    4e7e:	83 ed       	ldi	r24, 0xD3	; 211
    4e80:	87 a3       	std	Z+39, r24	; 0x27
    4e82:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    4e84:	89 e6       	ldi	r24, 0x69	; 105
    4e86:	81 a7       	std	Z+41, r24	; 0x29
    4e88:	83 a7       	std	Z+43, r24	; 0x2b
    4e8a:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    4e8c:	87 a7       	std	Z+47, r24	; 0x2f
    4e8e:	80 a7       	std	Z+40, r24	; 0x28
    4e90:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    4e92:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    4e94:	c0 e4       	ldi	r28, 0x40	; 64
    4e96:	d6 e0       	ldi	r29, 0x06	; 6
    4e98:	98 e8       	ldi	r25, 0x88	; 136
    4e9a:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    4e9c:	20 e6       	ldi	r18, 0x60	; 96
    4e9e:	36 e0       	ldi	r19, 0x06	; 6
    4ea0:	88 e0       	ldi	r24, 0x08	; 8
    4ea2:	f9 01       	movw	r30, r18
    4ea4:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    4ea6:	40 e8       	ldi	r20, 0x80	; 128
    4ea8:	56 e0       	ldi	r21, 0x06	; 6
    4eaa:	fa 01       	movw	r30, r20
    4eac:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    4eae:	11 96       	adiw	r26, 0x01	; 1
    4eb0:	8c 93       	st	X, r24
    4eb2:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    4eb4:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    4eb6:	f9 01       	movw	r30, r18
    4eb8:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    4eba:	fa 01       	movw	r30, r20
    4ebc:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    4ebe:	16 96       	adiw	r26, 0x06	; 6
    4ec0:	8c 93       	st	X, r24
    4ec2:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    4ec4:	80 e4       	ldi	r24, 0x40	; 64
    4ec6:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    4ec8:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    4eca:	f9 01       	movw	r30, r18
    4ecc:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    4ece:	fa 01       	movw	r30, r20
    4ed0:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    4ed2:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    4ed4:	53 96       	adiw	r26, 0x13	; 19
    4ed6:	8c 93       	st	X, r24
	
}
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	08 95       	ret

00004ede <ir_led_on>:

void ir_led_on(uint8_t direction)
{
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	9c 01       	movw	r18, r24
    4ee6:	22 0f       	add	r18, r18
    4ee8:	33 1f       	adc	r19, r19
    4eea:	f9 01       	movw	r30, r18
    4eec:	ea 5f       	subi	r30, 0xFA	; 250
    4eee:	ff 4d       	sbci	r31, 0xDF	; 223
    4ef0:	a0 81       	ld	r26, Z
    4ef2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ef4:	14 96       	adiw	r26, 0x04	; 4
    4ef6:	4c 91       	ld	r20, X
    4ef8:	14 97       	sbiw	r26, 0x04	; 4
    4efa:	fc 01       	movw	r30, r24
    4efc:	e7 5a       	subi	r30, 0xA7	; 167
    4efe:	fa 4d       	sbci	r31, 0xDA	; 218
    4f00:	40 83       	st	Z, r20
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    4f02:	e0 e0       	ldi	r30, 0x00	; 0
    4f04:	fb e0       	ldi	r31, 0x0B	; 11
    4f06:	41 81       	ldd	r20, Z+1	; 0x01
    4f08:	ec 01       	movw	r28, r24
    4f0a:	c4 53       	subi	r28, 0x34	; 52
    4f0c:	de 4d       	sbci	r29, 0xDE	; 222
    4f0e:	58 81       	ld	r21, Y
    4f10:	65 2f       	mov	r22, r21
    4f12:	60 95       	com	r22
    4f14:	46 23       	and	r20, r22
    4f16:	41 83       	std	Z+1, r20	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    4f18:	e0 ea       	ldi	r30, 0xA0	; 160
    4f1a:	f6 e0       	ldi	r31, 0x06	; 6
    4f1c:	51 83       	std	Z+1, r21	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    4f1e:	44 81       	ldd	r20, Z+4	; 0x04
    4f20:	45 2b       	or	r20, r21
    4f22:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    4f24:	14 96       	adiw	r26, 0x04	; 4
    4f26:	1c 92       	st	X, r1
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    4f28:	f9 01       	movw	r30, r18
    4f2a:	e6 54       	subi	r30, 0x46	; 70
    4f2c:	fe 4d       	sbci	r31, 0xDE	; 222
    4f2e:	01 90       	ld	r0, Z+
    4f30:	f0 81       	ld	r31, Z
    4f32:	e0 2d       	mov	r30, r0
    4f34:	dc 01       	movw	r26, r24
    4f36:	aa 53       	subi	r26, 0x3A	; 58
    4f38:	be 4d       	sbci	r27, 0xDE	; 222
    4f3a:	8c 91       	ld	r24, X
    4f3c:	81 83       	std	Z+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    4f3e:	94 81       	ldd	r25, Z+4	; 0x04
    4f40:	80 95       	com	r24
    4f42:	89 23       	and	r24, r25
    4f44:	84 83       	std	Z+4, r24	; 0x04

}
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	08 95       	ret

00004f4c <ir_led_off>:

void ir_led_off(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	9c 01       	movw	r18, r24
    4f50:	22 0f       	add	r18, r18
    4f52:	33 1f       	adc	r19, r19
    4f54:	f9 01       	movw	r30, r18
    4f56:	e6 54       	subi	r30, 0x46	; 70
    4f58:	fe 4d       	sbci	r31, 0xDE	; 222
    4f5a:	01 90       	ld	r0, Z+
    4f5c:	f0 81       	ld	r31, Z
    4f5e:	e0 2d       	mov	r30, r0
    4f60:	54 81       	ldd	r21, Z+4	; 0x04
    4f62:	dc 01       	movw	r26, r24
    4f64:	aa 53       	subi	r26, 0x3A	; 58
    4f66:	be 4d       	sbci	r27, 0xDE	; 222
    4f68:	4c 91       	ld	r20, X
    4f6a:	45 2b       	or	r20, r21
    4f6c:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    4f6e:	f9 01       	movw	r30, r18
    4f70:	ea 5f       	subi	r30, 0xFA	; 250
    4f72:	ff 4d       	sbci	r31, 0xDF	; 223
    4f74:	01 90       	ld	r0, Z+
    4f76:	f0 81       	ld	r31, Z
    4f78:	e0 2d       	mov	r30, r0
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	a7 5a       	subi	r26, 0xA7	; 167
    4f7e:	ba 4d       	sbci	r27, 0xDA	; 218
    4f80:	2c 91       	ld	r18, X
    4f82:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    4f84:	e0 ea       	ldi	r30, 0xA0	; 160
    4f86:	f6 e0       	ldi	r31, 0x06	; 6
    4f88:	24 81       	ldd	r18, Z+4	; 0x04
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	a4 53       	subi	r26, 0x34	; 52
    4f8e:	be 4d       	sbci	r27, 0xDE	; 222
    4f90:	3c 91       	ld	r19, X
    4f92:	93 2f       	mov	r25, r19
    4f94:	90 95       	com	r25
    4f96:	92 23       	and	r25, r18
    4f98:	94 83       	std	Z+4, r25	; 0x04
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    4f9a:	e0 e0       	ldi	r30, 0x00	; 0
    4f9c:	fb e0       	ldi	r31, 0x0B	; 11
    4f9e:	81 81       	ldd	r24, Z+1	; 0x01
    4fa0:	83 2b       	or	r24, r19
    4fa2:	81 83       	std	Z+1, r24	; 0x01
    4fa4:	08 95       	ret

00004fa6 <set_all_ir_powers>:
}

void set_all_ir_powers(uint16_t power)
{
    4fa6:	ff 92       	push	r15
    4fa8:	0f 93       	push	r16
    4faa:	1f 93       	push	r17
    4fac:	cf 93       	push	r28
    4fae:	df 93       	push	r29
    4fb0:	00 d0       	rcall	.+0      	; 0x4fb2 <set_all_ir_powers+0xc>
    4fb2:	00 d0       	rcall	.+0      	; 0x4fb4 <set_all_ir_powers+0xe>
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
	if(power>256) return;
    4fb8:	81 30       	cpi	r24, 0x01	; 1
    4fba:	21 e0       	ldi	r18, 0x01	; 1
    4fbc:	92 07       	cpc	r25, r18
    4fbe:	e0 f4       	brcc	.+56     	; 0x4ff8 <set_all_ir_powers+0x52>
	if(curr_ir_power==power) return;
    4fc0:	20 91 48 2a 	lds	r18, 0x2A48	; 0x802a48 <curr_ir_power>
    4fc4:	30 91 49 2a 	lds	r19, 0x2A49	; 0x802a49 <curr_ir_power+0x1>
    4fc8:	82 17       	cp	r24, r18
    4fca:	93 07       	cpc	r25, r19
    4fcc:	a9 f0       	breq	.+42     	; 0x4ff8 <set_all_ir_powers+0x52>
    4fce:	8c 01       	movw	r16, r24
	uint8_t power_high = (power>>8);
	uint8_t power_low = (power&0xFF);
	uint8_t write_buffer[6] = {0x00|power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    4fd0:	19 83       	std	Y+1, r17	; 0x01
    4fd2:	8a 83       	std	Y+2, r24	; 0x02
    4fd4:	81 2f       	mov	r24, r17
    4fd6:	80 61       	ori	r24, 0x10	; 16
    4fd8:	8b 83       	std	Y+3, r24	; 0x03
    4fda:	0c 83       	std	Y+4, r16	; 0x04
    4fdc:	81 2f       	mov	r24, r17
    4fde:	80 66       	ori	r24, 0x60	; 96
    4fe0:	8d 83       	std	Y+5, r24	; 0x05
    4fe2:	0e 83       	std	Y+6, r16	; 0x06
	
	uint8_t aResult = 0;
	uint8_t bResult = 0;
	
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, 'a');
    4fe4:	41 e6       	ldi	r20, 0x61	; 97
    4fe6:	be 01       	movw	r22, r28
    4fe8:	6f 5f       	subi	r22, 0xFF	; 255
    4fea:	7f 4f       	sbci	r23, 0xFF	; 255
    4fec:	8c e2       	ldi	r24, 0x2C	; 44
    4fee:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <twiWriteWrapper.constprop.0>
    4ff2:	f8 2e       	mov	r15, r24
	if(!aResult){
    4ff4:	81 11       	cpse	r24, r1
    4ff6:	09 c0       	rjmp	.+18     	; 0x500a <set_all_ir_powers+0x64>
	
	if((aResult+bResult)>2){
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}
    4ff8:	26 96       	adiw	r28, 0x06	; 6
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	de bf       	out	0x3e, r29	; 62
    4ffe:	df 91       	pop	r29
    5000:	cf 91       	pop	r28
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	ff 90       	pop	r15
    5008:	08 95       	ret
	
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, 'a');
	if(!aResult){
		return;
	}
	bResult = twiWriteWrapper(IR_POWER_ADDR_B, write_buffer, 6, 'b');
    500a:	42 e6       	ldi	r20, 0x62	; 98
    500c:	be 01       	movw	r22, r28
    500e:	6f 5f       	subi	r22, 0xFF	; 255
    5010:	7f 4f       	sbci	r23, 0xFF	; 255
    5012:	8e e2       	ldi	r24, 0x2E	; 46
    5014:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <twiWriteWrapper.constprop.0>
	if(!bResult){
    5018:	88 23       	and	r24, r24
    501a:	71 f3       	breq	.-36     	; 0x4ff8 <set_all_ir_powers+0x52>
		return;
	}
	
	if((aResult+bResult)>2){
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	8f 0d       	add	r24, r15
    5020:	91 1d       	adc	r25, r1
    5022:	02 97       	sbiw	r24, 0x02	; 2
    5024:	41 f0       	breq	.+16     	; 0x5036 <set_all_ir_powers+0x90>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    5026:	8e e4       	ldi	r24, 0x4E	; 78
    5028:	97 e0       	ldi	r25, 0x07	; 7
    502a:	9f 93       	push	r25
    502c:	8f 93       	push	r24
    502e:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    5036:	00 93 48 2a 	sts	0x2A48, r16	; 0x802a48 <curr_ir_power>
    503a:	10 93 49 2a 	sts	0x2A49, r17	; 0x802a49 <curr_ir_power+0x1>
    503e:	dc cf       	rjmp	.-72     	; 0x4ff8 <set_all_ir_powers+0x52>

00005040 <ir_sensor_init>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    5040:	e0 e2       	ldi	r30, 0x20	; 32
    5042:	f6 e0       	ldi	r31, 0x06	; 6
    5044:	8c ef       	ldi	r24, 0xFC	; 252
    5046:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    5048:	87 e0       	ldi	r24, 0x07	; 7
    504a:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    504c:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    504e:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    5050:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    5052:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    5054:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    5056:	e0 e4       	ldi	r30, 0x40	; 64
    5058:	f2 e0       	ldi	r31, 0x02	; 2
    505a:	90 e2       	ldi	r25, 0x20	; 32
    505c:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    505e:	90 e1       	ldi	r25, 0x10	; 16
    5060:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    5062:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    5064:	83 e1       	ldi	r24, 0x13	; 19
    5066:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    5068:	84 e0       	ldi	r24, 0x04	; 4
    506a:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    506c:	84 b5       	in	r24, 0x24	; 36
    506e:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    5070:	85 b5       	in	r24, 0x25	; 37
    5072:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	80 83       	st	Z, r24
	#endif
	
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    5078:	ef e5       	ldi	r30, 0x5F	; 95
    507a:	f5 e2       	ldi	r31, 0x25	; 37
    507c:	10 82       	st	Z, r1
    507e:	11 82       	std	Z+1, r1	; 0x01
    5080:	12 82       	std	Z+2, r1	; 0x02
    5082:	13 82       	std	Z+3, r1	; 0x03
    5084:	14 82       	std	Z+4, r1	; 0x04
    5086:	15 82       	std	Z+5, r1	; 0x05
    5088:	16 82       	std	Z+6, r1	; 0x06
    508a:	17 82       	std	Z+7, r1	; 0x07
    508c:	10 86       	std	Z+8, r1	; 0x08
    508e:	11 86       	std	Z+9, r1	; 0x09
    5090:	12 86       	std	Z+10, r1	; 0x0a
    5092:	13 86       	std	Z+11, r1	; 0x0b
	}
	schedule_task(1000,initialize_ir_baselines,NULL);
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	43 e1       	ldi	r20, 0x13	; 19
    509a:	59 e2       	ldi	r21, 0x29	; 41
    509c:	68 ee       	ldi	r22, 0xE8	; 232
    509e:	73 e0       	ldi	r23, 0x03	; 3
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
	schedule_periodic_task(5407, update_ir_baselines, NULL);
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	48 e1       	ldi	r20, 0x18	; 24
    50ae:	59 e2       	ldi	r21, 0x29	; 41
    50b0:	6f e1       	ldi	r22, 0x1F	; 31
    50b2:	75 e1       	ldi	r23, 0x15	; 21
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	0e 94 ce 60 	call	0xc19c	; 0xc19c <schedule_periodic_task>
    50bc:	08 95       	ret

000050be <get_ir_sensors>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hp_ir_block_bm = 0;
	}
}

void get_ir_sensors(int16_t* output_arr, uint8_t meas_per_ch){			
    50be:	2f 92       	push	r2
    50c0:	3f 92       	push	r3
    50c2:	4f 92       	push	r4
    50c4:	5f 92       	push	r5
    50c6:	6f 92       	push	r6
    50c8:	7f 92       	push	r7
    50ca:	8f 92       	push	r8
    50cc:	9f 92       	push	r9
    50ce:	af 92       	push	r10
    50d0:	bf 92       	push	r11
    50d2:	cf 92       	push	r12
    50d4:	df 92       	push	r13
    50d6:	ef 92       	push	r14
    50d8:	ff 92       	push	r15
    50da:	0f 93       	push	r16
    50dc:	1f 93       	push	r17
    50de:	cf 93       	push	r28
    50e0:	df 93       	push	r29
    50e2:	cd b7       	in	r28, 0x3d	; 61
    50e4:	de b7       	in	r29, 0x3e	; 62
    50e6:	36 2e       	mov	r3, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    50e8:	4d b6       	in	r4, 0x3d	; 61
    50ea:	5e b6       	in	r5, 0x3e	; 62
		hp_ir_block_bm = 0;
	}
}

void get_ir_sensors(int16_t* output_arr, uint8_t meas_per_ch){			
	int16_t meas[6][meas_per_ch];	
    50ec:	06 2f       	mov	r16, r22
    50ee:	10 e0       	ldi	r17, 0x00	; 0
    50f0:	00 0f       	add	r16, r16
    50f2:	11 1f       	adc	r17, r17
    50f4:	2d b7       	in	r18, 0x3d	; 61
    50f6:	3e b7       	in	r19, 0x3e	; 62
    50f8:	4c e0       	ldi	r20, 0x0C	; 12
    50fa:	64 9f       	mul	r22, r20
    50fc:	20 19       	sub	r18, r0
    50fe:	31 09       	sbc	r19, r1
    5100:	11 24       	eor	r1, r1
    5102:	2d bf       	out	0x3d, r18	; 61
    5104:	3e bf       	out	0x3e, r19	; 62
    5106:	ed b7       	in	r30, 0x3d	; 61
    5108:	fe b7       	in	r31, 0x3e	; 62
    510a:	31 96       	adiw	r30, 0x01	; 1
    510c:	4f 01       	movw	r8, r30
    510e:	a3 ed       	ldi	r26, 0xD3	; 211
    5110:	b1 e2       	ldi	r27, 0x21	; 33
    5112:	af 01       	movw	r20, r30
    5114:	68 e2       	ldi	r22, 0x28	; 40
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    5116:	ee 24       	eor	r14, r14
    5118:	e3 94       	inc	r14
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    511a:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    511e:	37 70       	andi	r19, 0x07	; 7
    5120:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    5124:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    5128:	26 2b       	or	r18, r22
    512a:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    512e:	33 20       	and	r3, r3
    5130:	c9 f0       	breq	.+50     	; 0x5164 <get_ir_sensors+0xa6>
    5132:	fa 01       	movw	r30, r20
    5134:	30 e0       	ldi	r19, 0x00	; 0
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5136:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5138:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    513a:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
    513e:	20 68       	ori	r18, 0x80	; 128
    5140:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    5144:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    5148:	22 23       	and	r18, r18
    514a:	e1 f3       	breq	.-8      	; 0x5144 <get_ir_sensors+0x86>
					meas[dir][meas_count] = ADCB.CH0RES;
    514c:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    5150:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
    5154:	61 93       	st	Z+, r22
    5156:	71 93       	st	Z+, r23
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    5158:	e0 92 63 02 	sts	0x0263, r14	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    515c:	ff be       	out	0x3f, r15	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    515e:	3f 5f       	subi	r19, 0xFF	; 255
    5160:	33 12       	cpse	r3, r19
    5162:	e9 cf       	rjmp	.-46     	; 0x5136 <get_ir_sensors+0x78>
    5164:	40 0f       	add	r20, r16
    5166:	51 1f       	adc	r21, r17
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    5168:	f1 e2       	ldi	r31, 0x21	; 33
    516a:	a8 3d       	cpi	r26, 0xD8	; 216
    516c:	bf 07       	cpc	r27, r31
    516e:	11 f0       	breq	.+4      	; 0x5174 <get_ir_sensors+0xb6>
    5170:	6d 91       	ld	r22, X+
    5172:	d3 cf       	rjmp	.-90     	; 0x511a <get_ir_sensors+0x5c>
    5174:	54 01       	movw	r10, r8
    5176:	24 e0       	ldi	r18, 0x04	; 4
    5178:	a2 0e       	add	r10, r18
    517a:	b1 1c       	adc	r11, r1
    517c:	2f e5       	ldi	r18, 0x5F	; 95
    517e:	62 2e       	mov	r6, r18
    5180:	25 e2       	ldi	r18, 0x25	; 37
    5182:	72 2e       	mov	r7, r18
    5184:	7c 01       	movw	r14, r24
    5186:	c1 2c       	mov	r12, r1
    5188:	d1 2c       	mov	r13, r1
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
		if(meas_per_ch>2){
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
    518a:	3e ef       	ldi	r19, 0xFE	; 254
    518c:	23 2e       	mov	r2, r19
    518e:	23 0c       	add	r2, r3
    5190:	21 c0       	rjmp	.+66     	; 0x51d4 <get_ir_sensors+0x116>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
    5192:	f2 e0       	ldi	r31, 0x02	; 2
    5194:	3f 16       	cp	r3, r31
    5196:	09 f4       	brne	.+2      	; 0x519a <get_ir_sensors+0xdc>
    5198:	42 c0       	rjmp	.+132    	; 0x521e <get_ir_sensors+0x160>
			output_arr[dir] = meas_find_median(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
		else
			output_arr[dir] = meas[dir][0];
    519a:	0c 9d       	mul	r16, r12
    519c:	f0 01       	movw	r30, r0
    519e:	0d 9d       	mul	r16, r13
    51a0:	f0 0d       	add	r31, r0
    51a2:	1c 9d       	mul	r17, r12
    51a4:	f0 0d       	add	r31, r0
    51a6:	11 24       	eor	r1, r1
    51a8:	e8 0d       	add	r30, r8
    51aa:	f9 1d       	adc	r31, r9
    51ac:	80 81       	ld	r24, Z
    51ae:	91 81       	ldd	r25, Z+1	; 0x01
    51b0:	f7 01       	movw	r30, r14
    51b2:	80 83       	st	Z, r24
    51b4:	91 83       	std	Z+1, r25	; 0x01
    51b6:	ff ef       	ldi	r31, 0xFF	; 255
    51b8:	cf 1a       	sub	r12, r31
    51ba:	df 0a       	sbc	r13, r31
    51bc:	a0 0e       	add	r10, r16
    51be:	b1 1e       	adc	r11, r17
    51c0:	22 e0       	ldi	r18, 0x02	; 2
    51c2:	62 0e       	add	r6, r18
    51c4:	71 1c       	adc	r7, r1
    51c6:	32 e0       	ldi	r19, 0x02	; 2
    51c8:	e3 0e       	add	r14, r19
    51ca:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
    51cc:	46 e0       	ldi	r20, 0x06	; 6
    51ce:	c4 16       	cp	r12, r20
    51d0:	d1 04       	cpc	r13, r1
    51d2:	81 f0       	breq	.+32     	; 0x51f4 <get_ir_sensors+0x136>
		if(meas_per_ch>2){
    51d4:	32 e0       	ldi	r19, 0x02	; 2
    51d6:	33 15       	cp	r19, r3
    51d8:	e0 f6       	brcc	.-72     	; 0x5192 <get_ir_sensors+0xd4>
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
    51da:	62 2d       	mov	r22, r2
    51dc:	c5 01       	movw	r24, r10
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = meas_find_median(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    51de:	0e 94 38 5c 	call	0xb870	; 0xb870 <meas_find_median>
    51e2:	f3 01       	movw	r30, r6
    51e4:	20 81       	ld	r18, Z
    51e6:	31 81       	ldd	r19, Z+1	; 0x01
    51e8:	82 1b       	sub	r24, r18
    51ea:	93 0b       	sbc	r25, r19
    51ec:	f7 01       	movw	r30, r14
    51ee:	80 83       	st	Z, r24
    51f0:	91 83       	std	Z+1, r25	; 0x01
    51f2:	e1 cf       	rjmp	.-62     	; 0x51b6 <get_ir_sensors+0xf8>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    51f4:	4d be       	out	0x3d, r4	; 61
    51f6:	5e be       	out	0x3e, r5	; 62
    51f8:	df 91       	pop	r29
    51fa:	cf 91       	pop	r28
    51fc:	1f 91       	pop	r17
    51fe:	0f 91       	pop	r16
    5200:	ff 90       	pop	r15
    5202:	ef 90       	pop	r14
    5204:	df 90       	pop	r13
    5206:	cf 90       	pop	r12
    5208:	bf 90       	pop	r11
    520a:	af 90       	pop	r10
    520c:	9f 90       	pop	r9
    520e:	8f 90       	pop	r8
    5210:	7f 90       	pop	r7
    5212:	6f 90       	pop	r6
    5214:	5f 90       	pop	r5
    5216:	4f 90       	pop	r4
    5218:	3f 90       	pop	r3
    521a:	2f 90       	pop	r2
    521c:	08 95       	ret
			int16_t median = meas_find_median(&(meas[dir][2]),meas_per_ch-2);
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = meas_find_median(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    521e:	61 e0       	ldi	r22, 0x01	; 1
    5220:	c5 01       	movw	r24, r10
    5222:	02 97       	sbiw	r24, 0x02	; 2
    5224:	dc cf       	rjmp	.-72     	; 0x51de <get_ir_sensors+0x120>

00005226 <initialize_ir_baselines>:
	schedule_task(1000,initialize_ir_baselines,NULL);
	schedule_periodic_task(5407, update_ir_baselines, NULL);
}

void initialize_ir_baselines(){
	get_ir_sensors(ir_sense_baseline, 13);
    5226:	6d e0       	ldi	r22, 0x0D	; 13
    5228:	8f e5       	ldi	r24, 0x5F	; 95
    522a:	95 e2       	ldi	r25, 0x25	; 37
    522c:	0c 94 5f 28 	jmp	0x50be	; 0x50be <get_ir_sensors>

00005230 <update_ir_baselines>:
		//printf(" %4d", ir_sense_baseline[dir]);
	//}
	//printf("\r\n");	
}

void update_ir_baselines(){
    5230:	ef 92       	push	r14
    5232:	ff 92       	push	r15
    5234:	0f 93       	push	r16
    5236:	1f 93       	push	r17
    5238:	cf 93       	push	r28
    523a:	df 93       	push	r29
    523c:	cd b7       	in	r28, 0x3d	; 61
    523e:	de b7       	in	r29, 0x3e	; 62
    5240:	2c 97       	sbiw	r28, 0x0c	; 12
    5242:	cd bf       	out	0x3d, r28	; 61
    5244:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5246:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5248:	f8 94       	cli
		if(hp_ir_block_bm){
    524a:	80 91 27 2a 	lds	r24, 0x2A27	; 0x802a27 <hp_ir_block_bm>
    524e:	81 11       	cpse	r24, r1
    5250:	35 c0       	rjmp	.+106    	; 0x52bc <update_ir_baselines+0x8c>
			return;
		}
		hp_ir_block_bm=0xFF;
    5252:	8f ef       	ldi	r24, 0xFF	; 255
    5254:	80 93 27 2a 	sts	0x2A27, r24	; 0x802a27 <hp_ir_block_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5258:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    525a:	8e 01       	movw	r16, r28
    525c:	0f 5f       	subi	r16, 0xFF	; 255
    525e:	1f 4f       	sbci	r17, 0xFF	; 255
    5260:	3f e5       	ldi	r19, 0x5F	; 95
    5262:	e3 2e       	mov	r14, r19
    5264:	35 e2       	ldi	r19, 0x25	; 37
    5266:	f3 2e       	mov	r15, r19
    5268:	f7 01       	movw	r30, r14
    526a:	d8 01       	movw	r26, r16
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    526c:	80 81       	ld	r24, Z
    526e:	91 81       	ldd	r25, Z+1	; 0x01
    5270:	8d 93       	st	X+, r24
    5272:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    5274:	11 92       	st	Z+, r1
    5276:	11 92       	st	Z+, r1
			return;
		}
		hp_ir_block_bm=0xFF;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    5278:	85 e2       	ldi	r24, 0x25	; 37
    527a:	eb 36       	cpi	r30, 0x6B	; 107
    527c:	f8 07       	cpc	r31, r24
    527e:	b1 f7       	brne	.-20     	; 0x526c <update_ir_baselines+0x3c>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	get_ir_sensors(ir_sense_baseline, 13);
    5280:	6d e0       	ldi	r22, 0x0D	; 13
    5282:	8f e5       	ldi	r24, 0x5F	; 95
    5284:	95 e2       	ldi	r25, 0x25	; 37
    5286:	0e 94 5f 28 	call	0x50be	; 0x50be <get_ir_sensors>
    528a:	0b c0       	rjmp	.+22     	; 0x52a2 <update_ir_baselines+0x72>
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    528c:	95 95       	asr	r25
    528e:	87 95       	ror	r24
    5290:	f7 01       	movw	r30, r14
    5292:	81 93       	st	Z+, r24
    5294:	91 93       	st	Z+, r25
    5296:	7f 01       	movw	r14, r30
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	get_ir_sensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    5298:	fb e6       	ldi	r31, 0x6B	; 107
    529a:	ef 16       	cp	r14, r31
    529c:	f5 e2       	ldi	r31, 0x25	; 37
    529e:	ff 06       	cpc	r15, r31
    52a0:	c1 f0       	breq	.+48     	; 0x52d2 <update_ir_baselines+0xa2>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    52a2:	f8 01       	movw	r30, r16
    52a4:	21 91       	ld	r18, Z+
    52a6:	31 91       	ld	r19, Z+
    52a8:	8f 01       	movw	r16, r30
    52aa:	f7 01       	movw	r30, r14
    52ac:	80 81       	ld	r24, Z
    52ae:	91 81       	ldd	r25, Z+1	; 0x01
    52b0:	82 0f       	add	r24, r18
    52b2:	93 1f       	adc	r25, r19
    52b4:	97 ff       	sbrs	r25, 7
    52b6:	ea cf       	rjmp	.-44     	; 0x528c <update_ir_baselines+0x5c>
    52b8:	01 96       	adiw	r24, 0x01	; 1
    52ba:	e8 cf       	rjmp	.-48     	; 0x528c <update_ir_baselines+0x5c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    52bc:	9f bf       	out	0x3f, r25	; 63
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hp_ir_block_bm = 0;
	}
}
    52be:	2c 96       	adiw	r28, 0x0c	; 12
    52c0:	cd bf       	out	0x3d, r28	; 61
    52c2:	de bf       	out	0x3e, r29	; 62
    52c4:	df 91       	pop	r29
    52c6:	cf 91       	pop	r28
    52c8:	1f 91       	pop	r17
    52ca:	0f 91       	pop	r16
    52cc:	ff 90       	pop	r15
    52ce:	ef 90       	pop	r14
    52d0:	08 95       	ret
	}
	get_ir_sensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    52d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    52d4:	f8 94       	cli
		hp_ir_block_bm = 0;
    52d6:	10 92 27 2a 	sts	0x2A27, r1	; 0x802a27 <hp_ir_block_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    52da:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    52dc:	f0 cf       	rjmp	.-32     	; 0x52be <update_ir_baselines+0x8e>

000052de <check_collision_values>:
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}

void check_collision_values(int16_t meas[6]){
    52de:	bf 92       	push	r11
    52e0:	cf 92       	push	r12
    52e2:	df 92       	push	r13
    52e4:	ef 92       	push	r14
    52e6:	ff 92       	push	r15
    52e8:	0f 93       	push	r16
    52ea:	1f 93       	push	r17
    52ec:	cf 93       	push	r28
    52ee:	df 93       	push	r29
    52f0:	cd b7       	in	r28, 0x3d	; 61
    52f2:	de b7       	in	r29, 0x3e	; 62
    52f4:	68 97       	sbiw	r28, 0x18	; 24
    52f6:	cd bf       	out	0x3d, r28	; 61
    52f8:	de bf       	out	0x3e, r29	; 62
    52fa:	b8 2e       	mov	r11, r24
    52fc:	09 2f       	mov	r16, r25
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(ir_is_busy(ALL_DIRS)<1){
    52fe:	8f e3       	ldi	r24, 0x3F	; 63
    5300:	0e 94 59 21 	call	0x42b2	; 0x42b2 <ir_is_busy>
    5304:	88 23       	and	r24, r24
    5306:	09 f4       	brne	.+2      	; 0x530a <check_collision_values+0x2c>
    5308:	66 c0       	rjmp	.+204    	; 0x53d6 <check_collision_values+0xf8>
		printf_P(PSTR("IR Hardware busy, probably sending a message? Can't check collisions.\r\n"));
		return;
	}
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    530a:	81 e0       	ldi	r24, 0x01	; 1
    530c:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <ir_rxtx+0x38>
    5310:	80 93 0c 29 	sts	0x290C, r24	; 0x80290c <ir_rxtx+0x71>
    5314:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <ir_rxtx+0xaa>
    5318:	80 93 7e 29 	sts	0x297E, r24	; 0x80297e <ir_rxtx+0xe3>
    531c:	80 93 b7 29 	sts	0x29B7, r24	; 0x8029b7 <ir_rxtx+0x11c>
    5320:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <ir_rxtx+0x155>

void ir_led_init(void);
void set_all_ir_powers(uint16_t power);
void ir_led_on(uint8_t direction);
void ir_led_off(uint8_t direction);
inline uint16_t get_all_ir_powers(void){ return curr_ir_power; }
    5324:	c0 90 48 2a 	lds	r12, 0x2A48	; 0x802a48 <curr_ir_power>
    5328:	d0 90 49 2a 	lds	r13, 0x2A49	; 0x802a49 <curr_ir_power+0x1>
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	91 e0       	ldi	r25, 0x01	; 1
    5330:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <set_all_ir_powers>
	get_ir_sensors(baseline_meas, 5);
    5334:	7e 01       	movw	r14, r28
    5336:	8d e0       	ldi	r24, 0x0D	; 13
    5338:	e8 0e       	add	r14, r24
    533a:	f1 1c       	adc	r15, r1
    533c:	65 e0       	ldi	r22, 0x05	; 5
    533e:	c7 01       	movw	r24, r14
    5340:	0e 94 5f 28 	call	0x50be	; 0x50be <get_ir_sensors>
	//printf("Coll    base: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", baseline_meas[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_on(i);
    5344:	10 e0       	ldi	r17, 0x00	; 0
    5346:	81 2f       	mov	r24, r17
    5348:	0e 94 6f 27 	call	0x4ede	; 0x4ede <ir_led_on>
    534c:	1f 5f       	subi	r17, 0xFF	; 255
    534e:	16 30       	cpi	r17, 0x06	; 6
    5350:	d1 f7       	brne	.-12     	; 0x5346 <check_collision_values+0x68>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    5352:	8f ec       	ldi	r24, 0xCF	; 207
    5354:	97 e0       	ldi	r25, 0x07	; 7
    5356:	01 97       	sbiw	r24, 0x01	; 1
    5358:	f1 f7       	brne	.-4      	; 0x5356 <check_collision_values+0x78>
    535a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    535c:	00 c0       	rjmp	.+0      	; 0x535e <check_collision_values+0x80>
	busy_delay_us(250);	
	get_ir_sensors(measured_vals, 5);
    535e:	65 e0       	ldi	r22, 0x05	; 5
    5360:	ce 01       	movw	r24, r28
    5362:	01 96       	adiw	r24, 0x01	; 1
    5364:	0e 94 5f 28 	call	0x50be	; 0x50be <get_ir_sensors>
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
    5368:	10 e0       	ldi	r17, 0x00	; 0
    536a:	81 2f       	mov	r24, r17
    536c:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <ir_led_off>
    5370:	1f 5f       	subi	r17, 0xFF	; 255
    5372:	16 30       	cpi	r17, 0x06	; 6
    5374:	d1 f7       	brne	.-12     	; 0x536a <check_collision_values+0x8c>
    5376:	fe 01       	movw	r30, r28
    5378:	31 96       	adiw	r30, 0x01	; 1
    537a:	97 01       	movw	r18, r14
    537c:	6b 2d       	mov	r22, r11
    537e:	70 2f       	mov	r23, r16
	for(uint8_t i=0;i<6;i++){
		meas[i] = (measured_vals[i]-baseline_meas[i]);
    5380:	81 91       	ld	r24, Z+
    5382:	91 91       	ld	r25, Z+
    5384:	d9 01       	movw	r26, r18
    5386:	4d 91       	ld	r20, X+
    5388:	5d 91       	ld	r21, X+
    538a:	9d 01       	movw	r18, r26
    538c:	84 1b       	sub	r24, r20
    538e:	95 0b       	sbc	r25, r21
    5390:	db 01       	movw	r26, r22
    5392:	8d 93       	st	X+, r24
    5394:	9d 93       	st	X+, r25
    5396:	bd 01       	movw	r22, r26
	get_ir_sensors(measured_vals, 5);
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) ir_led_off(i);
	for(uint8_t i=0;i<6;i++){
    5398:	ee 15       	cp	r30, r14
    539a:	ff 05       	cpc	r31, r15
    539c:	89 f7       	brne	.-30     	; 0x5380 <check_collision_values+0xa2>
		meas[i] = (measured_vals[i]-baseline_meas[i]);
	}
	set_all_ir_powers(curr_power);
    539e:	c6 01       	movw	r24, r12
    53a0:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <set_all_ir_powers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    53a4:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <ir_rxtx+0x38>
    53a8:	10 92 0c 29 	sts	0x290C, r1	; 0x80290c <ir_rxtx+0x71>
    53ac:	10 92 45 29 	sts	0x2945, r1	; 0x802945 <ir_rxtx+0xaa>
    53b0:	10 92 7e 29 	sts	0x297E, r1	; 0x80297e <ir_rxtx+0xe3>
    53b4:	10 92 b7 29 	sts	0x29B7, r1	; 0x8029b7 <ir_rxtx+0x11c>
    53b8:	10 92 f0 29 	sts	0x29F0, r1	; 0x8029f0 <ir_rxtx+0x155>
    53bc:	68 96       	adiw	r28, 0x18	; 24
    53be:	cd bf       	out	0x3d, r28	; 61
    53c0:	de bf       	out	0x3e, r29	; 62
    53c2:	df 91       	pop	r29
    53c4:	cf 91       	pop	r28
    53c6:	1f 91       	pop	r17
    53c8:	0f 91       	pop	r16
    53ca:	ff 90       	pop	r15
    53cc:	ef 90       	pop	r14
    53ce:	df 90       	pop	r13
    53d0:	cf 90       	pop	r12
    53d2:	bf 90       	pop	r11
    53d4:	08 95       	ret
void check_collision_values(int16_t meas[6]){
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(ir_is_busy(ALL_DIRS)<1){
		printf_P(PSTR("IR Hardware busy, probably sending a message? Can't check collisions.\r\n"));
    53d6:	83 e8       	ldi	r24, 0x83	; 131
    53d8:	97 e0       	ldi	r25, 0x07	; 7
    53da:	9f 93       	push	r25
    53dc:	8f 93       	push	r24
    53de:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		return;
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	ea cf       	rjmp	.-44     	; 0x53bc <check_collision_values+0xde>

000053e8 <check_collisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t check_collisions(){
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	cd b7       	in	r28, 0x3d	; 61
    53ee:	de b7       	in	r29, 0x3e	; 62
    53f0:	2c 97       	sbiw	r28, 0x0c	; 12
    53f2:	cd bf       	out	0x3d, r28	; 61
    53f4:	de bf       	out	0x3e, r29	; 62
	int16_t meas[6];
	uint8_t dirs = 0;
	check_collision_values(meas);
    53f6:	ce 01       	movw	r24, r28
    53f8:	01 96       	adiw	r24, 0x01	; 1
    53fa:	0e 94 6f 29 	call	0x52de	; 0x52de <check_collision_values>
    53fe:	fe 01       	movw	r30, r28
    5400:	31 96       	adiw	r30, 0x01	; 1
    5402:	af e5       	ldi	r26, 0x5F	; 95
    5404:	b5 e2       	ldi	r27, 0x25	; 37
    5406:	40 e0       	ldi	r20, 0x00	; 0
    5408:	50 e0       	ldi	r21, 0x00	; 0
	//printf("\r\n");	
}

uint8_t check_collisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
    540a:	80 e0       	ldi	r24, 0x00	; 0
	check_collision_values(meas);
	for(uint8_t i=0;i<6;i++){
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
    540c:	61 91       	ld	r22, Z+
    540e:	71 91       	ld	r23, Z+
    5410:	2d 91       	ld	r18, X+
    5412:	3d 91       	ld	r19, X+
    5414:	62 0f       	add	r22, r18
    5416:	73 1f       	adc	r23, r19
    5418:	21 e0       	ldi	r18, 0x01	; 1
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	6f 3f       	cpi	r22, 0xFF	; 255
    541e:	77 40       	sbci	r23, 0x07	; 7
    5420:	14 f4       	brge	.+4      	; 0x5426 <check_collisions+0x3e>
    5422:	20 e0       	ldi	r18, 0x00	; 0
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	04 2e       	mov	r0, r20
    5428:	01 c0       	rjmp	.+2      	; 0x542c <check_collisions+0x44>
    542a:	22 0f       	add	r18, r18
    542c:	0a 94       	dec	r0
    542e:	ea f7       	brpl	.-6      	; 0x542a <check_collisions+0x42>
    5430:	82 2b       	or	r24, r18
    5432:	4f 5f       	subi	r20, 0xFF	; 255
    5434:	5f 4f       	sbci	r21, 0xFF	; 255

uint8_t check_collisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
	check_collision_values(meas);
	for(uint8_t i=0;i<6;i++){
    5436:	46 30       	cpi	r20, 0x06	; 6
    5438:	51 05       	cpc	r21, r1
    543a:	41 f7       	brne	.-48     	; 0x540c <check_collisions+0x24>
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}
    543c:	2c 96       	adiw	r28, 0x0c	; 12
    543e:	cd bf       	out	0x3d, r28	; 61
    5440:	de bf       	out	0x3e, r29	; 62
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	08 95       	ret

00005448 <compressP>:
	//TODO: Calculate G, the gradient of 'f' w.r.t. errors in the robot's motion.
	__attribute__((unused)) Matrix Q;
	//TODO: Hard-Code Q, our movement's covariance. Probably separately for each direction???
	__attribute__((unused)) Matrix newP;
	//newP = Phi.curP.(tr(Phi)) + G.Q.(tr(G))
}
    5448:	2f 92       	push	r2
    544a:	3f 92       	push	r3
    544c:	4f 92       	push	r4
    544e:	5f 92       	push	r5
    5450:	6f 92       	push	r6
    5452:	7f 92       	push	r7
    5454:	8f 92       	push	r8
    5456:	9f 92       	push	r9
    5458:	af 92       	push	r10
    545a:	bf 92       	push	r11
    545c:	cf 92       	push	r12
    545e:	df 92       	push	r13
    5460:	ef 92       	push	r14
    5462:	ff 92       	push	r15
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	8c 01       	movw	r16, r24
    546e:	4b 01       	movw	r8, r22
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	40 e0       	ldi	r20, 0x00	; 0
    5476:	5e e3       	ldi	r21, 0x3E	; 62
    5478:	fc 01       	movw	r30, r24
    547a:	60 81       	ld	r22, Z
    547c:	71 81       	ldd	r23, Z+1	; 0x01
    547e:	82 81       	ldd	r24, Z+2	; 0x02
    5480:	93 81       	ldd	r25, Z+3	; 0x03
    5482:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5486:	7b 01       	movw	r14, r22
    5488:	d8 2f       	mov	r29, r24
    548a:	c9 2f       	mov	r28, r25
    548c:	cb 01       	movw	r24, r22
    548e:	ad 2f       	mov	r26, r29
    5490:	bc 2f       	mov	r27, r28
    5492:	f8 01       	movw	r30, r16
    5494:	80 83       	st	Z, r24
    5496:	91 83       	std	Z+1, r25	; 0x01
    5498:	a2 83       	std	Z+2, r26	; 0x02
    549a:	b3 83       	std	Z+3, r27	; 0x03
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	40 e8       	ldi	r20, 0x80	; 128
    54a2:	5d e3       	ldi	r21, 0x3D	; 61
    54a4:	64 81       	ldd	r22, Z+4	; 0x04
    54a6:	75 81       	ldd	r23, Z+5	; 0x05
    54a8:	86 81       	ldd	r24, Z+6	; 0x06
    54aa:	97 81       	ldd	r25, Z+7	; 0x07
    54ac:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    54b0:	f8 01       	movw	r30, r16
    54b2:	64 83       	std	Z+4, r22	; 0x04
    54b4:	75 83       	std	Z+5, r23	; 0x05
    54b6:	86 83       	std	Z+6, r24	; 0x06
    54b8:	97 83       	std	Z+7, r25	; 0x07
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	40 e8       	ldi	r20, 0x80	; 128
    54c0:	51 e4       	ldi	r21, 0x41	; 65
    54c2:	60 85       	ldd	r22, Z+8	; 0x08
    54c4:	71 85       	ldd	r23, Z+9	; 0x09
    54c6:	82 85       	ldd	r24, Z+10	; 0x0a
    54c8:	93 85       	ldd	r25, Z+11	; 0x0b
    54ca:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    54ce:	f8 01       	movw	r30, r16
    54d0:	60 87       	std	Z+8, r22	; 0x08
    54d2:	71 87       	std	Z+9, r23	; 0x09
    54d4:	82 87       	std	Z+10, r24	; 0x0a
    54d6:	93 87       	std	Z+11, r25	; 0x0b
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	40 e0       	ldi	r20, 0x00	; 0
    54de:	5e e3       	ldi	r21, 0x3E	; 62
    54e0:	60 89       	ldd	r22, Z+16	; 0x10
    54e2:	71 89       	ldd	r23, Z+17	; 0x11
    54e4:	82 89       	ldd	r24, Z+18	; 0x12
    54e6:	93 89       	ldd	r25, Z+19	; 0x13
    54e8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    54ec:	f8 01       	movw	r30, r16
    54ee:	60 8b       	std	Z+16, r22	; 0x10
    54f0:	71 8b       	std	Z+17, r23	; 0x11
    54f2:	82 8b       	std	Z+18, r24	; 0x12
    54f4:	93 8b       	std	Z+19, r25	; 0x13
    54f6:	20 e0       	ldi	r18, 0x00	; 0
    54f8:	30 e0       	ldi	r19, 0x00	; 0
    54fa:	40 e8       	ldi	r20, 0x80	; 128
    54fc:	51 e4       	ldi	r21, 0x41	; 65
    54fe:	64 89       	ldd	r22, Z+20	; 0x14
    5500:	75 89       	ldd	r23, Z+21	; 0x15
    5502:	86 89       	ldd	r24, Z+22	; 0x16
    5504:	97 89       	ldd	r25, Z+23	; 0x17
    5506:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    550a:	f8 01       	movw	r30, r16
    550c:	64 8b       	std	Z+20, r22	; 0x14
    550e:	75 8b       	std	Z+21, r23	; 0x15
    5510:	86 8b       	std	Z+22, r24	; 0x16
    5512:	97 8b       	std	Z+23, r25	; 0x17
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	40 e8       	ldi	r20, 0x80	; 128
    551a:	53 e4       	ldi	r21, 0x43	; 67
    551c:	60 a1       	ldd	r22, Z+32	; 0x20
    551e:	71 a1       	ldd	r23, Z+33	; 0x21
    5520:	82 a1       	ldd	r24, Z+34	; 0x22
    5522:	93 a1       	ldd	r25, Z+35	; 0x23
    5524:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5528:	f8 01       	movw	r30, r16
    552a:	60 a3       	std	Z+32, r22	; 0x20
    552c:	71 a3       	std	Z+33, r23	; 0x21
    552e:	82 a3       	std	Z+34, r24	; 0x22
    5530:	93 a3       	std	Z+35, r25	; 0x23
    5532:	68 01       	movw	r12, r16
    5534:	a1 2c       	mov	r10, r1
    5536:	b1 2c       	mov	r11, r1
    5538:	21 2c       	mov	r2, r1
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	3f ef       	ldi	r19, 0xFF	; 255
    553e:	4f e7       	ldi	r20, 0x7F	; 127
    5540:	57 e4       	ldi	r21, 0x47	; 71
    5542:	b7 01       	movw	r22, r14
    5544:	8d 2f       	mov	r24, r29
    5546:	9c 2f       	mov	r25, r28
    5548:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    554c:	18 16       	cp	r1, r24
    554e:	2c f4       	brge	.+10     	; 0x555a <compressP+0x112>
    5550:	e1 2c       	mov	r14, r1
    5552:	ff 24       	eor	r15, r15
    5554:	fa 94       	dec	r15
    5556:	df e7       	ldi	r29, 0x7F	; 127
    5558:	c7 e4       	ldi	r28, 0x47	; 71
    555a:	a7 01       	movw	r20, r14
    555c:	6d 2f       	mov	r22, r29
    555e:	7c 2f       	mov	r23, r28
    5560:	f6 01       	movw	r30, r12
    5562:	40 83       	st	Z, r20
    5564:	51 83       	std	Z+1, r21	; 0x01
    5566:	62 83       	std	Z+2, r22	; 0x02
    5568:	73 83       	std	Z+3, r23	; 0x03
    556a:	23 94       	inc	r2
    556c:	f3 e0       	ldi	r31, 0x03	; 3
    556e:	2f 16       	cp	r2, r31
    5570:	09 f4       	brne	.+2      	; 0x5574 <compressP+0x12c>
    5572:	47 c0       	rjmp	.+142    	; 0x5602 <compressP+0x1ba>
    5574:	32 2c       	mov	r3, r2
    5576:	75 01       	movw	r14, r10
    5578:	ee 0c       	add	r14, r14
    557a:	ff 1c       	adc	r15, r15
    557c:	ea 0c       	add	r14, r10
    557e:	fb 1c       	adc	r15, r11
    5580:	1f c0       	rjmp	.+62     	; 0x55c0 <compressP+0x178>
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e0       	ldi	r20, 0x00	; 0
    5588:	57 ec       	ldi	r21, 0xC7	; 199
    558a:	c3 01       	movw	r24, r6
    558c:	b2 01       	movw	r22, r4
    558e:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    5592:	87 ff       	sbrs	r24, 7
    5594:	05 c0       	rjmp	.+10     	; 0x55a0 <compressP+0x158>
    5596:	41 2c       	mov	r4, r1
    5598:	51 2c       	mov	r5, r1
    559a:	61 2c       	mov	r6, r1
    559c:	27 ec       	ldi	r18, 0xC7	; 199
    559e:	72 2e       	mov	r7, r18
    55a0:	ce 0d       	add	r28, r14
    55a2:	df 1d       	adc	r29, r15
    55a4:	cc 0f       	add	r28, r28
    55a6:	dd 1f       	adc	r29, r29
    55a8:	cc 0f       	add	r28, r28
    55aa:	dd 1f       	adc	r29, r29
    55ac:	c0 0f       	add	r28, r16
    55ae:	d1 1f       	adc	r29, r17
    55b0:	48 82       	st	Y, r4
    55b2:	59 82       	std	Y+1, r5	; 0x01
    55b4:	6a 82       	std	Y+2, r6	; 0x02
    55b6:	7b 82       	std	Y+3, r7	; 0x03
    55b8:	33 94       	inc	r3
    55ba:	83 e0       	ldi	r24, 0x03	; 3
    55bc:	38 16       	cp	r3, r24
    55be:	09 f1       	breq	.+66     	; 0x5602 <compressP+0x1ba>
    55c0:	c3 2d       	mov	r28, r3
    55c2:	d0 e0       	ldi	r29, 0x00	; 0
    55c4:	f7 01       	movw	r30, r14
    55c6:	ec 0f       	add	r30, r28
    55c8:	fd 1f       	adc	r31, r29
    55ca:	ee 0f       	add	r30, r30
    55cc:	ff 1f       	adc	r31, r31
    55ce:	ee 0f       	add	r30, r30
    55d0:	ff 1f       	adc	r31, r31
    55d2:	e0 0f       	add	r30, r16
    55d4:	f1 1f       	adc	r31, r17
    55d6:	40 80       	ld	r4, Z
    55d8:	51 80       	ldd	r5, Z+1	; 0x01
    55da:	62 80       	ldd	r6, Z+2	; 0x02
    55dc:	73 80       	ldd	r7, Z+3	; 0x03
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	3e ef       	ldi	r19, 0xFE	; 254
    55e2:	4f ef       	ldi	r20, 0xFF	; 255
    55e4:	56 e4       	ldi	r21, 0x46	; 70
    55e6:	c3 01       	movw	r24, r6
    55e8:	b2 01       	movw	r22, r4
    55ea:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    55ee:	18 16       	cp	r1, r24
    55f0:	44 f6       	brge	.-112    	; 0x5582 <compressP+0x13a>
    55f2:	41 2c       	mov	r4, r1
    55f4:	9e ef       	ldi	r25, 0xFE	; 254
    55f6:	59 2e       	mov	r5, r25
    55f8:	66 24       	eor	r6, r6
    55fa:	6a 94       	dec	r6
    55fc:	96 e4       	ldi	r25, 0x46	; 70
    55fe:	79 2e       	mov	r7, r25
    5600:	cf cf       	rjmp	.-98     	; 0x55a0 <compressP+0x158>
    5602:	8f ef       	ldi	r24, 0xFF	; 255
    5604:	a8 1a       	sub	r10, r24
    5606:	b8 0a       	sbc	r11, r24
    5608:	e0 e1       	ldi	r30, 0x10	; 16
    560a:	ce 0e       	add	r12, r30
    560c:	d1 1c       	adc	r13, r1
    560e:	f3 e0       	ldi	r31, 0x03	; 3
    5610:	af 16       	cp	r10, r31
    5612:	b1 04       	cpc	r11, r1
    5614:	31 f0       	breq	.+12     	; 0x5622 <compressP+0x1da>
    5616:	f6 01       	movw	r30, r12
    5618:	e0 80       	ld	r14, Z
    561a:	f1 80       	ldd	r15, Z+1	; 0x01
    561c:	d2 81       	ldd	r29, Z+2	; 0x02
    561e:	c3 81       	ldd	r28, Z+3	; 0x03
    5620:	8c cf       	rjmp	.-232    	; 0x553a <compressP+0xf2>
    5622:	f8 01       	movw	r30, r16
    5624:	60 81       	ld	r22, Z
    5626:	71 81       	ldd	r23, Z+1	; 0x01
    5628:	82 81       	ldd	r24, Z+2	; 0x02
    562a:	93 81       	ldd	r25, Z+3	; 0x03
    562c:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    5630:	f4 01       	movw	r30, r8
    5632:	60 83       	st	Z, r22
    5634:	71 83       	std	Z+1, r23	; 0x01
    5636:	f8 01       	movw	r30, r16
    5638:	64 81       	ldd	r22, Z+4	; 0x04
    563a:	75 81       	ldd	r23, Z+5	; 0x05
    563c:	86 81       	ldd	r24, Z+6	; 0x06
    563e:	97 81       	ldd	r25, Z+7	; 0x07
    5640:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    5644:	f4 01       	movw	r30, r8
    5646:	62 83       	std	Z+2, r22	; 0x02
    5648:	73 83       	std	Z+3, r23	; 0x03
    564a:	f8 01       	movw	r30, r16
    564c:	60 85       	ldd	r22, Z+8	; 0x08
    564e:	71 85       	ldd	r23, Z+9	; 0x09
    5650:	82 85       	ldd	r24, Z+10	; 0x0a
    5652:	93 85       	ldd	r25, Z+11	; 0x0b
    5654:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    5658:	f4 01       	movw	r30, r8
    565a:	64 83       	std	Z+4, r22	; 0x04
    565c:	75 83       	std	Z+5, r23	; 0x05
    565e:	f8 01       	movw	r30, r16
    5660:	60 89       	ldd	r22, Z+16	; 0x10
    5662:	71 89       	ldd	r23, Z+17	; 0x11
    5664:	82 89       	ldd	r24, Z+18	; 0x12
    5666:	93 89       	ldd	r25, Z+19	; 0x13
    5668:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    566c:	f4 01       	movw	r30, r8
    566e:	66 83       	std	Z+6, r22	; 0x06
    5670:	77 83       	std	Z+7, r23	; 0x07
    5672:	f8 01       	movw	r30, r16
    5674:	64 89       	ldd	r22, Z+20	; 0x14
    5676:	75 89       	ldd	r23, Z+21	; 0x15
    5678:	86 89       	ldd	r24, Z+22	; 0x16
    567a:	97 89       	ldd	r25, Z+23	; 0x17
    567c:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    5680:	f4 01       	movw	r30, r8
    5682:	60 87       	std	Z+8, r22	; 0x08
    5684:	71 87       	std	Z+9, r23	; 0x09
    5686:	f8 01       	movw	r30, r16
    5688:	60 a1       	ldd	r22, Z+32	; 0x20
    568a:	71 a1       	ldd	r23, Z+33	; 0x21
    568c:	82 a1       	ldd	r24, Z+34	; 0x22
    568e:	93 a1       	ldd	r25, Z+35	; 0x23
    5690:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    5694:	f4 01       	movw	r30, r8
    5696:	62 87       	std	Z+10, r22	; 0x0a
    5698:	73 87       	std	Z+11, r23	; 0x0b
    569a:	df 91       	pop	r29
    569c:	cf 91       	pop	r28
    569e:	1f 91       	pop	r17
    56a0:	0f 91       	pop	r16
    56a2:	ff 90       	pop	r15
    56a4:	ef 90       	pop	r14
    56a6:	df 90       	pop	r13
    56a8:	cf 90       	pop	r12
    56aa:	bf 90       	pop	r11
    56ac:	af 90       	pop	r10
    56ae:	9f 90       	pop	r9
    56b0:	8f 90       	pop	r8
    56b2:	7f 90       	pop	r7
    56b4:	6f 90       	pop	r6
    56b6:	5f 90       	pop	r5
    56b8:	4f 90       	pop	r4
    56ba:	3f 90       	pop	r3
    56bc:	2f 90       	pop	r2
    56be:	08 95       	ret

000056c0 <decompressP>:
    56c0:	4f 92       	push	r4
    56c2:	5f 92       	push	r5
    56c4:	6f 92       	push	r6
    56c6:	7f 92       	push	r7
    56c8:	8f 92       	push	r8
    56ca:	9f 92       	push	r9
    56cc:	af 92       	push	r10
    56ce:	bf 92       	push	r11
    56d0:	cf 92       	push	r12
    56d2:	df 92       	push	r13
    56d4:	ef 92       	push	r14
    56d6:	ff 92       	push	r15
    56d8:	0f 93       	push	r16
    56da:	1f 93       	push	r17
    56dc:	cf 93       	push	r28
    56de:	df 93       	push	r29
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
    56e4:	2a 97       	sbiw	r28, 0x0a	; 10
    56e6:	cd bf       	out	0x3d, r28	; 61
    56e8:	de bf       	out	0x3e, r29	; 62
    56ea:	89 87       	std	Y+9, r24	; 0x09
    56ec:	9a 87       	std	Y+10, r25	; 0x0a
    56ee:	8b 01       	movw	r16, r22
    56f0:	fb 01       	movw	r30, r22
    56f2:	62 81       	ldd	r22, Z+2	; 0x02
    56f4:	73 81       	ldd	r23, Z+3	; 0x03
    56f6:	07 2e       	mov	r0, r23
    56f8:	00 0c       	add	r0, r0
    56fa:	88 0b       	sbc	r24, r24
    56fc:	99 0b       	sbc	r25, r25
    56fe:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5702:	2b 01       	movw	r4, r22
    5704:	3c 01       	movw	r6, r24
    5706:	f8 01       	movw	r30, r16
    5708:	64 81       	ldd	r22, Z+4	; 0x04
    570a:	75 81       	ldd	r23, Z+5	; 0x05
    570c:	07 2e       	mov	r0, r23
    570e:	00 0c       	add	r0, r0
    5710:	88 0b       	sbc	r24, r24
    5712:	99 0b       	sbc	r25, r25
    5714:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5718:	4b 01       	movw	r8, r22
    571a:	5c 01       	movw	r10, r24
    571c:	f8 01       	movw	r30, r16
    571e:	66 81       	ldd	r22, Z+6	; 0x06
    5720:	77 81       	ldd	r23, Z+7	; 0x07
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	90 e0       	ldi	r25, 0x00	; 0
    5726:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    572a:	6b 01       	movw	r12, r22
    572c:	7c 01       	movw	r14, r24
    572e:	f8 01       	movw	r30, r16
    5730:	60 85       	ldd	r22, Z+8	; 0x08
    5732:	71 85       	ldd	r23, Z+9	; 0x09
    5734:	07 2e       	mov	r0, r23
    5736:	00 0c       	add	r0, r0
    5738:	88 0b       	sbc	r24, r24
    573a:	99 0b       	sbc	r25, r25
    573c:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5740:	69 83       	std	Y+1, r22	; 0x01
    5742:	7a 83       	std	Y+2, r23	; 0x02
    5744:	8b 83       	std	Y+3, r24	; 0x03
    5746:	9c 83       	std	Y+4, r25	; 0x04
    5748:	f8 01       	movw	r30, r16
    574a:	62 85       	ldd	r22, Z+10	; 0x0a
    574c:	73 85       	ldd	r23, Z+11	; 0x0b
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    5756:	6d 83       	std	Y+5, r22	; 0x05
    5758:	7e 83       	std	Y+6, r23	; 0x06
    575a:	8f 83       	std	Y+7, r24	; 0x07
    575c:	98 87       	std	Y+8, r25	; 0x08
    575e:	f8 01       	movw	r30, r16
    5760:	60 81       	ld	r22, Z
    5762:	71 81       	ldd	r23, Z+1	; 0x01
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	40 e0       	ldi	r20, 0x00	; 0
    5772:	51 e4       	ldi	r21, 0x41	; 65
    5774:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5778:	e9 85       	ldd	r30, Y+9	; 0x09
    577a:	fa 85       	ldd	r31, Y+10	; 0x0a
    577c:	60 83       	st	Z, r22
    577e:	71 83       	std	Z+1, r23	; 0x01
    5780:	82 83       	std	Z+2, r24	; 0x02
    5782:	93 83       	std	Z+3, r25	; 0x03
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	30 e0       	ldi	r19, 0x00	; 0
    5788:	40 e8       	ldi	r20, 0x80	; 128
    578a:	51 e4       	ldi	r21, 0x41	; 65
    578c:	c3 01       	movw	r24, r6
    578e:	b2 01       	movw	r22, r4
    5790:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5794:	2b 01       	movw	r4, r22
    5796:	3c 01       	movw	r6, r24
    5798:	e9 85       	ldd	r30, Y+9	; 0x09
    579a:	fa 85       	ldd	r31, Y+10	; 0x0a
    579c:	64 83       	std	Z+4, r22	; 0x04
    579e:	75 83       	std	Z+5, r23	; 0x05
    57a0:	86 83       	std	Z+6, r24	; 0x06
    57a2:	97 83       	std	Z+7, r25	; 0x07
    57a4:	20 e0       	ldi	r18, 0x00	; 0
    57a6:	30 e0       	ldi	r19, 0x00	; 0
    57a8:	40 e8       	ldi	r20, 0x80	; 128
    57aa:	5d e3       	ldi	r21, 0x3D	; 61
    57ac:	c5 01       	movw	r24, r10
    57ae:	b4 01       	movw	r22, r8
    57b0:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    57b4:	4b 01       	movw	r8, r22
    57b6:	5c 01       	movw	r10, r24
    57b8:	e9 85       	ldd	r30, Y+9	; 0x09
    57ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    57bc:	60 87       	std	Z+8, r22	; 0x08
    57be:	71 87       	std	Z+9, r23	; 0x09
    57c0:	82 87       	std	Z+10, r24	; 0x0a
    57c2:	93 87       	std	Z+11, r25	; 0x0b
    57c4:	44 86       	std	Z+12, r4	; 0x0c
    57c6:	55 86       	std	Z+13, r5	; 0x0d
    57c8:	66 86       	std	Z+14, r6	; 0x0e
    57ca:	77 86       	std	Z+15, r7	; 0x0f
    57cc:	20 e0       	ldi	r18, 0x00	; 0
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	40 e0       	ldi	r20, 0x00	; 0
    57d2:	51 e4       	ldi	r21, 0x41	; 65
    57d4:	c7 01       	movw	r24, r14
    57d6:	b6 01       	movw	r22, r12
    57d8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    57dc:	e9 85       	ldd	r30, Y+9	; 0x09
    57de:	fa 85       	ldd	r31, Y+10	; 0x0a
    57e0:	60 8b       	std	Z+16, r22	; 0x10
    57e2:	71 8b       	std	Z+17, r23	; 0x11
    57e4:	82 8b       	std	Z+18, r24	; 0x12
    57e6:	93 8b       	std	Z+19, r25	; 0x13
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	40 e8       	ldi	r20, 0x80	; 128
    57ee:	5d e3       	ldi	r21, 0x3D	; 61
    57f0:	69 81       	ldd	r22, Y+1	; 0x01
    57f2:	7a 81       	ldd	r23, Y+2	; 0x02
    57f4:	8b 81       	ldd	r24, Y+3	; 0x03
    57f6:	9c 81       	ldd	r25, Y+4	; 0x04
    57f8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    57fc:	e9 85       	ldd	r30, Y+9	; 0x09
    57fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    5800:	64 8b       	std	Z+20, r22	; 0x14
    5802:	75 8b       	std	Z+21, r23	; 0x15
    5804:	86 8b       	std	Z+22, r24	; 0x16
    5806:	97 8b       	std	Z+23, r25	; 0x17
    5808:	80 8e       	std	Z+24, r8	; 0x18
    580a:	91 8e       	std	Z+25, r9	; 0x19
    580c:	a2 8e       	std	Z+26, r10	; 0x1a
    580e:	b3 8e       	std	Z+27, r11	; 0x1b
    5810:	64 8f       	std	Z+28, r22	; 0x1c
    5812:	75 8f       	std	Z+29, r23	; 0x1d
    5814:	86 8f       	std	Z+30, r24	; 0x1e
    5816:	97 8f       	std	Z+31, r25	; 0x1f
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	40 e8       	ldi	r20, 0x80	; 128
    581e:	5b e3       	ldi	r21, 0x3B	; 59
    5820:	6d 81       	ldd	r22, Y+5	; 0x05
    5822:	7e 81       	ldd	r23, Y+6	; 0x06
    5824:	8f 81       	ldd	r24, Y+7	; 0x07
    5826:	98 85       	ldd	r25, Y+8	; 0x08
    5828:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    582c:	e9 85       	ldd	r30, Y+9	; 0x09
    582e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5830:	60 a3       	std	Z+32, r22	; 0x20
    5832:	71 a3       	std	Z+33, r23	; 0x21
    5834:	82 a3       	std	Z+34, r24	; 0x22
    5836:	93 a3       	std	Z+35, r25	; 0x23
    5838:	2a 96       	adiw	r28, 0x0a	; 10
    583a:	cd bf       	out	0x3d, r28	; 61
    583c:	de bf       	out	0x3e, r29	; 62
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	1f 91       	pop	r17
    5844:	0f 91       	pop	r16
    5846:	ff 90       	pop	r15
    5848:	ef 90       	pop	r14
    584a:	df 90       	pop	r13
    584c:	cf 90       	pop	r12
    584e:	bf 90       	pop	r11
    5850:	af 90       	pop	r10
    5852:	9f 90       	pop	r9
    5854:	8f 90       	pop	r8
    5856:	7f 90       	pop	r7
    5858:	6f 90       	pop	r6
    585a:	5f 90       	pop	r5
    585c:	4f 90       	pop	r4
    585e:	08 95       	ret

00005860 <calcRelativePose>:
    5860:	cf 92       	push	r12
    5862:	df 92       	push	r13
    5864:	ef 92       	push	r14
    5866:	ff 92       	push	r15
    5868:	0f 93       	push	r16
    586a:	1f 93       	push	r17
    586c:	cf 93       	push	r28
    586e:	df 93       	push	r29
    5870:	8c 01       	movw	r16, r24
    5872:	eb 01       	movw	r28, r22
    5874:	cc 80       	ldd	r12, Y+4	; 0x04
    5876:	dd 80       	ldd	r13, Y+5	; 0x05
    5878:	ee 80       	ldd	r14, Y+6	; 0x06
    587a:	ff 80       	ldd	r15, Y+7	; 0x07
    587c:	c7 01       	movw	r24, r14
    587e:	b6 01       	movw	r22, r12
    5880:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    5884:	9b 01       	movw	r18, r22
    5886:	ac 01       	movw	r20, r24
    5888:	68 81       	ld	r22, Y
    588a:	79 81       	ldd	r23, Y+1	; 0x01
    588c:	8a 81       	ldd	r24, Y+2	; 0x02
    588e:	9b 81       	ldd	r25, Y+3	; 0x03
    5890:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5894:	f8 01       	movw	r30, r16
    5896:	60 83       	st	Z, r22
    5898:	71 83       	std	Z+1, r23	; 0x01
    589a:	82 83       	std	Z+2, r24	; 0x02
    589c:	93 83       	std	Z+3, r25	; 0x03
    589e:	c7 01       	movw	r24, r14
    58a0:	b6 01       	movw	r22, r12
    58a2:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    58a6:	9b 01       	movw	r18, r22
    58a8:	ac 01       	movw	r20, r24
    58aa:	68 81       	ld	r22, Y
    58ac:	79 81       	ldd	r23, Y+1	; 0x01
    58ae:	8a 81       	ldd	r24, Y+2	; 0x02
    58b0:	9b 81       	ldd	r25, Y+3	; 0x03
    58b2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    58b6:	f8 01       	movw	r30, r16
    58b8:	64 83       	std	Z+4, r22	; 0x04
    58ba:	75 83       	std	Z+5, r23	; 0x05
    58bc:	86 83       	std	Z+6, r24	; 0x06
    58be:	97 83       	std	Z+7, r25	; 0x07
    58c0:	88 85       	ldd	r24, Y+8	; 0x08
    58c2:	99 85       	ldd	r25, Y+9	; 0x09
    58c4:	aa 85       	ldd	r26, Y+10	; 0x0a
    58c6:	bb 85       	ldd	r27, Y+11	; 0x0b
    58c8:	80 87       	std	Z+8, r24	; 0x08
    58ca:	91 87       	std	Z+9, r25	; 0x09
    58cc:	a2 87       	std	Z+10, r26	; 0x0a
    58ce:	b3 87       	std	Z+11, r27	; 0x0b
    58d0:	df 91       	pop	r29
    58d2:	cf 91       	pop	r28
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    58d8:	ff 90       	pop	r15
    58da:	ef 90       	pop	r14
    58dc:	df 90       	pop	r13
    58de:	cf 90       	pop	r12
    58e0:	08 95       	ret

000058e2 <updatePos>:
    58e2:	2f 92       	push	r2
    58e4:	3f 92       	push	r3
    58e6:	4f 92       	push	r4
    58e8:	5f 92       	push	r5
    58ea:	6f 92       	push	r6
    58ec:	7f 92       	push	r7
    58ee:	8f 92       	push	r8
    58f0:	9f 92       	push	r9
    58f2:	af 92       	push	r10
    58f4:	bf 92       	push	r11
    58f6:	cf 92       	push	r12
    58f8:	df 92       	push	r13
    58fa:	ef 92       	push	r14
    58fc:	ff 92       	push	r15
    58fe:	0f 93       	push	r16
    5900:	1f 93       	push	r17
    5902:	cf 93       	push	r28
    5904:	df 93       	push	r29
    5906:	cd b7       	in	r28, 0x3d	; 61
    5908:	de b7       	in	r29, 0x3e	; 62
    590a:	c8 5f       	subi	r28, 0xF8	; 248
    590c:	d1 40       	sbci	r29, 0x01	; 1
    590e:	cd bf       	out	0x3d, r28	; 61
    5910:	de bf       	out	0x3e, r29	; 62
    5912:	8c 01       	movw	r16, r24
    5914:	7b 01       	movw	r14, r22
    5916:	60 91 34 2a 	lds	r22, 0x2A34	; 0x802a34 <myPos>
    591a:	70 91 35 2a 	lds	r23, 0x2A35	; 0x802a35 <myPos+0x1>
    591e:	07 2e       	mov	r0, r23
    5920:	00 0c       	add	r0, r0
    5922:	88 0b       	sbc	r24, r24
    5924:	99 0b       	sbc	r25, r25
    5926:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    592a:	c3 51       	subi	r28, 0x13	; 19
    592c:	de 4f       	sbci	r29, 0xFE	; 254
    592e:	68 83       	st	Y, r22
    5930:	79 83       	std	Y+1, r23	; 0x01
    5932:	8a 83       	std	Y+2, r24	; 0x02
    5934:	9b 83       	std	Y+3, r25	; 0x03
    5936:	cd 5e       	subi	r28, 0xED	; 237
    5938:	d1 40       	sbci	r29, 0x01	; 1
    593a:	60 91 36 2a 	lds	r22, 0x2A36	; 0x802a36 <myPos+0x2>
    593e:	70 91 37 2a 	lds	r23, 0x2A37	; 0x802a37 <myPos+0x3>
    5942:	07 2e       	mov	r0, r23
    5944:	00 0c       	add	r0, r0
    5946:	88 0b       	sbc	r24, r24
    5948:	99 0b       	sbc	r25, r25
    594a:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    594e:	cf 50       	subi	r28, 0x0F	; 15
    5950:	de 4f       	sbci	r29, 0xFE	; 254
    5952:	68 83       	st	Y, r22
    5954:	79 83       	std	Y+1, r23	; 0x01
    5956:	8a 83       	std	Y+2, r24	; 0x02
    5958:	9b 83       	std	Y+3, r25	; 0x03
    595a:	c1 5f       	subi	r28, 0xF1	; 241
    595c:	d1 40       	sbci	r29, 0x01	; 1
    595e:	60 91 38 2a 	lds	r22, 0x2A38	; 0x802a38 <myPos+0x4>
    5962:	70 91 39 2a 	lds	r23, 0x2A39	; 0x802a39 <myPos+0x5>
    5966:	07 2e       	mov	r0, r23
    5968:	00 0c       	add	r0, r0
    596a:	88 0b       	sbc	r24, r24
    596c:	99 0b       	sbc	r25, r25
    596e:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	44 e3       	ldi	r20, 0x34	; 52
    5978:	53 e4       	ldi	r21, 0x43	; 67
    597a:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    597e:	2b ed       	ldi	r18, 0xDB	; 219
    5980:	3f e0       	ldi	r19, 0x0F	; 15
    5982:	49 e4       	ldi	r20, 0x49	; 73
    5984:	50 e4       	ldi	r21, 0x40	; 64
    5986:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    598a:	4b 01       	movw	r8, r22
    598c:	5c 01       	movw	r10, r24
    598e:	20 e0       	ldi	r18, 0x00	; 0
    5990:	30 e0       	ldi	r19, 0x00	; 0
    5992:	a9 01       	movw	r20, r18
    5994:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5998:	2b ed       	ldi	r18, 0xDB	; 219
    599a:	3f e0       	ldi	r19, 0x0F	; 15
    599c:	49 e4       	ldi	r20, 0x49	; 73
    599e:	50 e4       	ldi	r21, 0x40	; 64
    59a0:	87 fd       	sbrc	r24, 7
    59a2:	d0 c2       	rjmp	.+1440   	; 0x5f44 <updatePos+0x662>
    59a4:	c5 01       	movw	r24, r10
    59a6:	b4 01       	movw	r22, r8
    59a8:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    59ac:	2b ed       	ldi	r18, 0xDB	; 219
    59ae:	3f e0       	ldi	r19, 0x0F	; 15
    59b0:	49 ec       	ldi	r20, 0xC9	; 201
    59b2:	50 e4       	ldi	r21, 0x40	; 64
    59b4:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    59b8:	2b ed       	ldi	r18, 0xDB	; 219
    59ba:	3f e0       	ldi	r19, 0x0F	; 15
    59bc:	49 e4       	ldi	r20, 0x49	; 73
    59be:	50 e4       	ldi	r21, 0x40	; 64
    59c0:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    59c4:	cb 50       	subi	r28, 0x0B	; 11
    59c6:	de 4f       	sbci	r29, 0xFE	; 254
    59c8:	68 83       	st	Y, r22
    59ca:	79 83       	std	Y+1, r23	; 0x01
    59cc:	8a 83       	std	Y+2, r24	; 0x02
    59ce:	9b 83       	std	Y+3, r25	; 0x03
    59d0:	c5 5f       	subi	r28, 0xF5	; 245
    59d2:	d1 40       	sbci	r29, 0x01	; 1
    59d4:	f8 01       	movw	r30, r16
    59d6:	80 81       	ld	r24, Z
    59d8:	91 81       	ldd	r25, Z+1	; 0x01
    59da:	81 15       	cp	r24, r1
    59dc:	f0 e8       	ldi	r31, 0x80	; 128
    59de:	9f 07       	cpc	r25, r31
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <updatePos+0x102>
    59e2:	91 c2       	rjmp	.+1314   	; 0x5f06 <updatePos+0x624>
    59e4:	f8 01       	movw	r30, r16
    59e6:	22 81       	ldd	r18, Z+2	; 0x02
    59e8:	33 81       	ldd	r19, Z+3	; 0x03
    59ea:	21 15       	cp	r18, r1
    59ec:	f0 e8       	ldi	r31, 0x80	; 128
    59ee:	3f 07       	cpc	r19, r31
    59f0:	09 f4       	brne	.+2      	; 0x59f4 <updatePos+0x112>
    59f2:	89 c2       	rjmp	.+1298   	; 0x5f06 <updatePos+0x624>
    59f4:	f8 01       	movw	r30, r16
    59f6:	44 81       	ldd	r20, Z+4	; 0x04
    59f8:	55 81       	ldd	r21, Z+5	; 0x05
    59fa:	41 15       	cp	r20, r1
    59fc:	f0 e8       	ldi	r31, 0x80	; 128
    59fe:	5f 07       	cpc	r21, r31
    5a00:	09 f4       	brne	.+2      	; 0x5a04 <updatePos+0x122>
    5a02:	81 c2       	rjmp	.+1282   	; 0x5f06 <updatePos+0x624>
    5a04:	5f 93       	push	r21
    5a06:	4f 93       	push	r20
    5a08:	3f 93       	push	r19
    5a0a:	2f 93       	push	r18
    5a0c:	9f 93       	push	r25
    5a0e:	8f 93       	push	r24
    5a10:	81 e7       	ldi	r24, 0x71	; 113
    5a12:	98 e0       	ldi	r25, 0x08	; 8
    5a14:	9f 93       	push	r25
    5a16:	8f 93       	push	r24
    5a18:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	60 81       	ld	r22, Z
    5a20:	71 81       	ldd	r23, Z+1	; 0x01
    5a22:	07 2e       	mov	r0, r23
    5a24:	00 0c       	add	r0, r0
    5a26:	88 0b       	sbc	r24, r24
    5a28:	99 0b       	sbc	r25, r25
    5a2a:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5a2e:	cf 51       	subi	r28, 0x1F	; 31
    5a30:	de 4f       	sbci	r29, 0xFE	; 254
    5a32:	68 83       	st	Y, r22
    5a34:	79 83       	std	Y+1, r23	; 0x01
    5a36:	8a 83       	std	Y+2, r24	; 0x02
    5a38:	9b 83       	std	Y+3, r25	; 0x03
    5a3a:	c1 5e       	subi	r28, 0xE1	; 225
    5a3c:	d1 40       	sbci	r29, 0x01	; 1
    5a3e:	f8 01       	movw	r30, r16
    5a40:	62 81       	ldd	r22, Z+2	; 0x02
    5a42:	73 81       	ldd	r23, Z+3	; 0x03
    5a44:	07 2e       	mov	r0, r23
    5a46:	00 0c       	add	r0, r0
    5a48:	88 0b       	sbc	r24, r24
    5a4a:	99 0b       	sbc	r25, r25
    5a4c:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5a50:	cb 51       	subi	r28, 0x1B	; 27
    5a52:	de 4f       	sbci	r29, 0xFE	; 254
    5a54:	68 83       	st	Y, r22
    5a56:	79 83       	std	Y+1, r23	; 0x01
    5a58:	8a 83       	std	Y+2, r24	; 0x02
    5a5a:	9b 83       	std	Y+3, r25	; 0x03
    5a5c:	c5 5e       	subi	r28, 0xE5	; 229
    5a5e:	d1 40       	sbci	r29, 0x01	; 1
    5a60:	f8 01       	movw	r30, r16
    5a62:	64 81       	ldd	r22, Z+4	; 0x04
    5a64:	75 81       	ldd	r23, Z+5	; 0x05
    5a66:	07 2e       	mov	r0, r23
    5a68:	00 0c       	add	r0, r0
    5a6a:	88 0b       	sbc	r24, r24
    5a6c:	99 0b       	sbc	r25, r25
    5a6e:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    5a72:	20 e0       	ldi	r18, 0x00	; 0
    5a74:	30 e0       	ldi	r19, 0x00	; 0
    5a76:	44 e3       	ldi	r20, 0x34	; 52
    5a78:	53 e4       	ldi	r21, 0x43	; 67
    5a7a:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    5a7e:	2b ed       	ldi	r18, 0xDB	; 219
    5a80:	3f e0       	ldi	r19, 0x0F	; 15
    5a82:	49 e4       	ldi	r20, 0x49	; 73
    5a84:	50 e4       	ldi	r21, 0x40	; 64
    5a86:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5a8a:	4b 01       	movw	r8, r22
    5a8c:	5c 01       	movw	r10, r24
    5a8e:	cd bf       	out	0x3d, r28	; 61
    5a90:	de bf       	out	0x3e, r29	; 62
    5a92:	20 e0       	ldi	r18, 0x00	; 0
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	a9 01       	movw	r20, r18
    5a98:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5a9c:	2b ed       	ldi	r18, 0xDB	; 219
    5a9e:	3f e0       	ldi	r19, 0x0F	; 15
    5aa0:	49 e4       	ldi	r20, 0x49	; 73
    5aa2:	50 e4       	ldi	r21, 0x40	; 64
    5aa4:	87 fd       	sbrc	r24, 7
    5aa6:	5e c3       	rjmp	.+1724   	; 0x6164 <updatePos+0x882>
    5aa8:	c5 01       	movw	r24, r10
    5aaa:	b4 01       	movw	r22, r8
    5aac:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    5ab0:	2b ed       	ldi	r18, 0xDB	; 219
    5ab2:	3f e0       	ldi	r19, 0x0F	; 15
    5ab4:	49 ec       	ldi	r20, 0xC9	; 201
    5ab6:	50 e4       	ldi	r21, 0x40	; 64
    5ab8:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    5abc:	2b ed       	ldi	r18, 0xDB	; 219
    5abe:	3f e0       	ldi	r19, 0x0F	; 15
    5ac0:	49 e4       	ldi	r20, 0x49	; 73
    5ac2:	50 e4       	ldi	r21, 0x40	; 64
    5ac4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    5ac8:	c7 51       	subi	r28, 0x17	; 23
    5aca:	de 4f       	sbci	r29, 0xFE	; 254
    5acc:	68 83       	st	Y, r22
    5ace:	79 83       	std	Y+1, r23	; 0x01
    5ad0:	8a 83       	std	Y+2, r24	; 0x02
    5ad2:	9b 83       	std	Y+3, r25	; 0x03
    5ad4:	c9 5e       	subi	r28, 0xE9	; 233
    5ad6:	d1 40       	sbci	r29, 0x01	; 1
    5ad8:	62 ea       	ldi	r22, 0xA2	; 162
    5ada:	76 e2       	ldi	r23, 0x26	; 38
    5adc:	ce 01       	movw	r24, r28
    5ade:	83 57       	subi	r24, 0x73	; 115
    5ae0:	9e 4f       	sbci	r25, 0xFE	; 254
    5ae2:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <decompressP>
    5ae6:	ae 01       	movw	r20, r28
    5ae8:	4f 51       	subi	r20, 0x1F	; 31
    5aea:	5e 4f       	sbci	r21, 0xFE	; 254
    5aec:	be 01       	movw	r22, r28
    5aee:	63 51       	subi	r22, 0x13	; 19
    5af0:	7e 4f       	sbci	r23, 0xFE	; 254
    5af2:	ce 01       	movw	r24, r28
    5af4:	87 5b       	subi	r24, 0xB7	; 183
    5af6:	9f 4f       	sbci	r25, 0xFF	; 255
    5af8:	0e 94 67 3a 	call	0x74ce	; 0x74ce <vectorSubtract>
    5afc:	a7 01       	movw	r20, r14
    5afe:	be 01       	movw	r22, r28
    5b00:	63 57       	subi	r22, 0x73	; 115
    5b02:	7e 4f       	sbci	r23, 0xFE	; 254
    5b04:	ce 01       	movw	r24, r28
    5b06:	01 96       	adiw	r24, 0x01	; 1
    5b08:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <matrixAdd>
    5b0c:	ce 01       	movw	r24, r28
    5b0e:	01 96       	adiw	r24, 0x01	; 1
    5b10:	0e 94 d6 40 	call	0x81ac	; 0x81ac <matrixInplaceInverse>
    5b14:	ae 01       	movw	r20, r28
    5b16:	47 5b       	subi	r20, 0xB7	; 183
    5b18:	5f 4f       	sbci	r21, 0xFF	; 255
    5b1a:	be 01       	movw	r22, r28
    5b1c:	6f 5f       	subi	r22, 0xFF	; 255
    5b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b20:	ce 01       	movw	r24, r28
    5b22:	85 96       	adiw	r24, 0x25	; 37
    5b24:	0e 94 1e 3b 	call	0x763c	; 0x763c <matrixTimesVector>
    5b28:	2d a1       	ldd	r18, Y+37	; 0x25
    5b2a:	3e a1       	ldd	r19, Y+38	; 0x26
    5b2c:	4f a1       	ldd	r20, Y+39	; 0x27
    5b2e:	58 a5       	ldd	r21, Y+40	; 0x28
    5b30:	2d 96       	adiw	r28, 0x0d	; 13
    5b32:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b34:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b36:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b38:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b3a:	2d 97       	sbiw	r28, 0x0d	; 13
    5b3c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5b40:	4b 01       	movw	r8, r22
    5b42:	5c 01       	movw	r10, r24
    5b44:	29 a5       	ldd	r18, Y+41	; 0x29
    5b46:	3a a5       	ldd	r19, Y+42	; 0x2a
    5b48:	4b a5       	ldd	r20, Y+43	; 0x2b
    5b4a:	5c a5       	ldd	r21, Y+44	; 0x2c
    5b4c:	61 96       	adiw	r28, 0x11	; 17
    5b4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b50:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b52:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b54:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b56:	61 97       	sbiw	r28, 0x11	; 17
    5b58:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5b5c:	9b 01       	movw	r18, r22
    5b5e:	ac 01       	movw	r20, r24
    5b60:	c5 01       	movw	r24, r10
    5b62:	b4 01       	movw	r22, r8
    5b64:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    5b68:	4b 01       	movw	r8, r22
    5b6a:	5c 01       	movw	r10, r24
    5b6c:	2d a5       	ldd	r18, Y+45	; 0x2d
    5b6e:	3e a5       	ldd	r19, Y+46	; 0x2e
    5b70:	4f a5       	ldd	r20, Y+47	; 0x2f
    5b72:	58 a9       	ldd	r21, Y+48	; 0x30
    5b74:	65 96       	adiw	r28, 0x15	; 21
    5b76:	6c ad       	ldd	r22, Y+60	; 0x3c
    5b78:	7d ad       	ldd	r23, Y+61	; 0x3d
    5b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b7e:	65 97       	sbiw	r28, 0x15	; 21
    5b80:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    5b84:	9b 01       	movw	r18, r22
    5b86:	ac 01       	movw	r20, r24
    5b88:	c5 01       	movw	r24, r10
    5b8a:	b4 01       	movw	r22, r8
    5b8c:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    5b90:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    5b94:	d6 2e       	mov	r13, r22
    5b96:	c7 2e       	mov	r12, r23
    5b98:	78 2e       	mov	r7, r24
    5b9a:	69 2e       	mov	r6, r25
    5b9c:	be 01       	movw	r22, r28
    5b9e:	63 57       	subi	r22, 0x73	; 115
    5ba0:	7e 4f       	sbci	r23, 0xFE	; 254
    5ba2:	ce 01       	movw	r24, r28
    5ba4:	87 5b       	subi	r24, 0xB7	; 183
    5ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba8:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <matrixInverse>
    5bac:	b7 01       	movw	r22, r14
    5bae:	ce 01       	movw	r24, r28
    5bb0:	85 96       	adiw	r24, 0x25	; 37
    5bb2:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <matrixInverse>
    5bb6:	ae 01       	movw	r20, r28
    5bb8:	4b 5d       	subi	r20, 0xDB	; 219
    5bba:	5f 4f       	sbci	r21, 0xFF	; 255
    5bbc:	be 01       	movw	r22, r28
    5bbe:	67 5b       	subi	r22, 0xB7	; 183
    5bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	01 96       	adiw	r24, 0x01	; 1
    5bc6:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <matrixAdd>
    5bca:	ce 01       	movw	r24, r28
    5bcc:	01 96       	adiw	r24, 0x01	; 1
    5bce:	0e 94 ef 42 	call	0x85de	; 0x85de <matrixDet>
    5bd2:	4b 01       	movw	r8, r22
    5bd4:	5c 01       	movw	r10, r24
    5bd6:	ce 01       	movw	r24, r28
    5bd8:	87 5b       	subi	r24, 0xB7	; 183
    5bda:	9f 4f       	sbci	r25, 0xFF	; 255
    5bdc:	0e 94 ef 42 	call	0x85de	; 0x85de <matrixDet>
    5be0:	1b 01       	movw	r2, r22
    5be2:	2c 01       	movw	r4, r24
    5be4:	ce 01       	movw	r24, r28
    5be6:	85 96       	adiw	r24, 0x25	; 37
    5be8:	0e 94 ef 42 	call	0x85de	; 0x85de <matrixDet>
    5bec:	9b 01       	movw	r18, r22
    5bee:	ac 01       	movw	r20, r24
    5bf0:	c5 01       	movw	r24, r10
    5bf2:	b4 01       	movw	r22, r8
    5bf4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    5bf8:	a2 01       	movw	r20, r4
    5bfa:	91 01       	movw	r18, r2
    5bfc:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    5c00:	1b 01       	movw	r2, r22
    5c02:	2c 01       	movw	r4, r24
    5c04:	a5 01       	movw	r20, r10
    5c06:	94 01       	movw	r18, r8
    5c08:	c5 01       	movw	r24, r10
    5c0a:	b4 01       	movw	r22, r8
    5c0c:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    5c10:	9b 01       	movw	r18, r22
    5c12:	ac 01       	movw	r20, r24
    5c14:	c2 01       	movw	r24, r4
    5c16:	b1 01       	movw	r22, r2
    5c18:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    5c1c:	4b 01       	movw	r8, r22
    5c1e:	5c 01       	movw	r10, r24
    5c20:	20 e0       	ldi	r18, 0x00	; 0
    5c22:	30 e0       	ldi	r19, 0x00	; 0
    5c24:	40 e8       	ldi	r20, 0x80	; 128
    5c26:	5f e3       	ldi	r21, 0x3F	; 63
    5c28:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5c2c:	18 16       	cp	r1, r24
    5c2e:	0c f0       	brlt	.+2      	; 0x5c32 <updatePos+0x350>
    5c30:	e9 c1       	rjmp	.+978    	; 0x6004 <updatePos+0x722>
    5c32:	81 2c       	mov	r8, r1
    5c34:	91 2c       	mov	r9, r1
    5c36:	30 e8       	ldi	r19, 0x80	; 128
    5c38:	a3 2e       	mov	r10, r19
    5c3a:	3f e3       	ldi	r19, 0x3F	; 63
    5c3c:	b3 2e       	mov	r11, r19
    5c3e:	b5 01       	movw	r22, r10
    5c40:	a4 01       	movw	r20, r8
    5c42:	ce 01       	movw	r24, r28
    5c44:	87 5b       	subi	r24, 0xB7	; 183
    5c46:	9f 4f       	sbci	r25, 0xFF	; 255
    5c48:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <matrixScale>
    5c4c:	a5 01       	movw	r20, r10
    5c4e:	94 01       	movw	r18, r8
    5c50:	60 e0       	ldi	r22, 0x00	; 0
    5c52:	70 e0       	ldi	r23, 0x00	; 0
    5c54:	80 e8       	ldi	r24, 0x80	; 128
    5c56:	9f e3       	ldi	r25, 0x3F	; 63
    5c58:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    5c5c:	ab 01       	movw	r20, r22
    5c5e:	bc 01       	movw	r22, r24
    5c60:	ce 01       	movw	r24, r28
    5c62:	85 96       	adiw	r24, 0x25	; 37
    5c64:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <matrixScale>
    5c68:	ae 01       	movw	r20, r28
    5c6a:	4b 5d       	subi	r20, 0xDB	; 219
    5c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c6e:	be 01       	movw	r22, r28
    5c70:	67 5b       	subi	r22, 0xB7	; 183
    5c72:	7f 4f       	sbci	r23, 0xFF	; 255
    5c74:	ce 01       	movw	r24, r28
    5c76:	87 59       	subi	r24, 0x97	; 151
    5c78:	9e 4f       	sbci	r25, 0xFE	; 254
    5c7a:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <matrixAdd>
    5c7e:	ce 01       	movw	r24, r28
    5c80:	87 59       	subi	r24, 0x97	; 151
    5c82:	9e 4f       	sbci	r25, 0xFE	; 254
    5c84:	0e 94 d6 40 	call	0x81ac	; 0x81ac <matrixInplaceInverse>
    5c88:	ae 01       	movw	r20, r28
    5c8a:	43 51       	subi	r20, 0x13	; 19
    5c8c:	5e 4f       	sbci	r21, 0xFE	; 254
    5c8e:	be 01       	movw	r22, r28
    5c90:	67 5b       	subi	r22, 0xB7	; 183
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	ce 01       	movw	r24, r28
    5c96:	8b 52       	subi	r24, 0x2B	; 43
    5c98:	9e 4f       	sbci	r25, 0xFE	; 254
    5c9a:	0e 94 1e 3b 	call	0x763c	; 0x763c <matrixTimesVector>
    5c9e:	ae 01       	movw	r20, r28
    5ca0:	4f 51       	subi	r20, 0x1F	; 31
    5ca2:	5e 4f       	sbci	r21, 0xFE	; 254
    5ca4:	be 01       	movw	r22, r28
    5ca6:	6b 5d       	subi	r22, 0xDB	; 219
    5ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    5caa:	ce 01       	movw	r24, r28
    5cac:	01 96       	adiw	r24, 0x01	; 1
    5cae:	0e 94 1e 3b 	call	0x763c	; 0x763c <matrixTimesVector>
    5cb2:	ae 01       	movw	r20, r28
    5cb4:	4f 5f       	subi	r20, 0xFF	; 255
    5cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb8:	be 01       	movw	r22, r28
    5cba:	6b 52       	subi	r22, 0x2B	; 43
    5cbc:	7e 4f       	sbci	r23, 0xFE	; 254
    5cbe:	ca 01       	movw	r24, r20
    5cc0:	0e 94 27 3a 	call	0x744e	; 0x744e <vectorAdd>
    5cc4:	ae 01       	movw	r20, r28
    5cc6:	4f 5f       	subi	r20, 0xFF	; 255
    5cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cca:	be 01       	movw	r22, r28
    5ccc:	67 59       	subi	r22, 0x97	; 151
    5cce:	7e 4f       	sbci	r23, 0xFE	; 254
    5cd0:	ce 01       	movw	r24, r28
    5cd2:	8b 52       	subi	r24, 0x2B	; 43
    5cd4:	9e 4f       	sbci	r25, 0xFE	; 254
    5cd6:	0e 94 1e 3b 	call	0x763c	; 0x763c <matrixTimesVector>
    5cda:	20 e0       	ldi	r18, 0x00	; 0
    5cdc:	30 e0       	ldi	r19, 0x00	; 0
    5cde:	40 e8       	ldi	r20, 0x80	; 128
    5ce0:	50 e4       	ldi	r21, 0x40	; 64
    5ce2:	d6 01       	movw	r26, r12
    5ce4:	f3 01       	movw	r30, r6
    5ce6:	6b 2f       	mov	r22, r27
    5ce8:	7c 2d       	mov	r23, r12
    5cea:	8f 2f       	mov	r24, r31
    5cec:	96 2d       	mov	r25, r6
    5cee:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5cf2:	18 16       	cp	r1, r24
    5cf4:	0c f4       	brge	.+2      	; 0x5cf8 <updatePos+0x416>
    5cf6:	25 c2       	rjmp	.+1098   	; 0x6142 <updatePos+0x860>
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	40 e8       	ldi	r20, 0x80	; 128
    5cfe:	5f e3       	ldi	r21, 0x3F	; 63
    5d00:	d6 01       	movw	r26, r12
    5d02:	f3 01       	movw	r30, r6
    5d04:	6b 2f       	mov	r22, r27
    5d06:	7c 2d       	mov	r23, r12
    5d08:	8f 2f       	mov	r24, r31
    5d0a:	96 2d       	mov	r25, r6
    5d0c:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5d10:	18 16       	cp	r1, r24
    5d12:	0c f0       	brlt	.+2      	; 0x5d16 <updatePos+0x434>
    5d14:	58 c1       	rjmp	.+688    	; 0x5fc6 <updatePos+0x6e4>
    5d16:	ae 01       	movw	r20, r28
    5d18:	43 51       	subi	r20, 0x13	; 19
    5d1a:	5e 4f       	sbci	r21, 0xFE	; 254
    5d1c:	be 01       	movw	r22, r28
    5d1e:	6b 52       	subi	r22, 0x2B	; 43
    5d20:	7e 4f       	sbci	r23, 0xFE	; 254
    5d22:	ce 01       	movw	r24, r28
    5d24:	87 53       	subi	r24, 0x37	; 55
    5d26:	9e 4f       	sbci	r25, 0xFE	; 254
    5d28:	0e 94 67 3a 	call	0x74ce	; 0x74ce <vectorSubtract>
    5d2c:	be 01       	movw	r22, r28
    5d2e:	67 53       	subi	r22, 0x37	; 55
    5d30:	7e 4f       	sbci	r23, 0xFE	; 254
    5d32:	ce 01       	movw	r24, r28
    5d34:	8b 5b       	subi	r24, 0xBB	; 187
    5d36:	9e 4f       	sbci	r25, 0xFE	; 254
    5d38:	0e 94 a7 3a 	call	0x754e	; 0x754e <vectorSquare>
    5d3c:	ae 01       	movw	r20, r28
    5d3e:	4b 5b       	subi	r20, 0xBB	; 187
    5d40:	5e 4f       	sbci	r21, 0xFE	; 254
    5d42:	be 01       	movw	r22, r28
    5d44:	63 57       	subi	r22, 0x73	; 115
    5d46:	7e 4f       	sbci	r23, 0xFE	; 254
    5d48:	ca 01       	movw	r24, r20
    5d4a:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <matrixAdd>
    5d4e:	ae 01       	movw	r20, r28
    5d50:	4f 51       	subi	r20, 0x1F	; 31
    5d52:	5e 4f       	sbci	r21, 0xFE	; 254
    5d54:	be 01       	movw	r22, r28
    5d56:	6b 52       	subi	r22, 0x2B	; 43
    5d58:	7e 4f       	sbci	r23, 0xFE	; 254
    5d5a:	ce 01       	movw	r24, r28
    5d5c:	83 54       	subi	r24, 0x43	; 67
    5d5e:	9e 4f       	sbci	r25, 0xFE	; 254
    5d60:	0e 94 67 3a 	call	0x74ce	; 0x74ce <vectorSubtract>
    5d64:	be 01       	movw	r22, r28
    5d66:	63 54       	subi	r22, 0x43	; 67
    5d68:	7e 4f       	sbci	r23, 0xFE	; 254
    5d6a:	ce 01       	movw	r24, r28
    5d6c:	8f 5d       	subi	r24, 0xDF	; 223
    5d6e:	9e 4f       	sbci	r25, 0xFE	; 254
    5d70:	0e 94 a7 3a 	call	0x754e	; 0x754e <vectorSquare>
    5d74:	ae 01       	movw	r20, r28
    5d76:	4f 5d       	subi	r20, 0xDF	; 223
    5d78:	5e 4f       	sbci	r21, 0xFE	; 254
    5d7a:	b7 01       	movw	r22, r14
    5d7c:	ca 01       	movw	r24, r20
    5d7e:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <matrixAdd>
    5d82:	be 01       	movw	r22, r28
    5d84:	6f 5d       	subi	r22, 0xDF	; 223
    5d86:	7e 4f       	sbci	r23, 0xFE	; 254
    5d88:	ce 01       	movw	r24, r28
    5d8a:	83 50       	subi	r24, 0x03	; 3
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	0e 94 91 3d 	call	0x7b22	; 0x7b22 <choleskyDecomposition>
    5d92:	be 01       	movw	r22, r28
    5d94:	63 50       	subi	r22, 0x03	; 3
    5d96:	7f 4f       	sbci	r23, 0xFF	; 255
    5d98:	ce 01       	movw	r24, r28
    5d9a:	87 52       	subi	r24, 0x27	; 39
    5d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d9e:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <matrixTranspose>
    5da2:	be 01       	movw	r22, r28
    5da4:	63 50       	subi	r22, 0x03	; 3
    5da6:	7f 4f       	sbci	r23, 0xFF	; 255
    5da8:	ce 01       	movw	r24, r28
    5daa:	8b 54       	subi	r24, 0x4B	; 75
    5dac:	9f 4f       	sbci	r25, 0xFF	; 255
    5dae:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <matrixInverse>
    5db2:	ae 01       	movw	r20, r28
    5db4:	4b 54       	subi	r20, 0x4B	; 75
    5db6:	5f 4f       	sbci	r21, 0xFF	; 255
    5db8:	be 01       	movw	r22, r28
    5dba:	6b 5b       	subi	r22, 0xBB	; 187
    5dbc:	7e 4f       	sbci	r23, 0xFE	; 254
    5dbe:	ce 01       	movw	r24, r28
    5dc0:	8f 56       	subi	r24, 0x6F	; 111
    5dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc4:	0e 94 c7 3b 	call	0x778e	; 0x778e <matrixMultiply>
    5dc8:	ce 01       	movw	r24, r28
    5dca:	8b 54       	subi	r24, 0x4B	; 75
    5dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dce:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <matrixInplaceTranspose>
    5dd2:	ae 01       	movw	r20, r28
    5dd4:	4f 56       	subi	r20, 0x6F	; 111
    5dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd8:	be 01       	movw	r22, r28
    5dda:	6b 54       	subi	r22, 0x4B	; 75
    5ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dde:	ca 01       	movw	r24, r20
    5de0:	0e 94 4e 3c 	call	0x789c	; 0x789c <matrixInplaceMultiply>
    5de4:	ae 01       	movw	r20, r28
    5de6:	4f 56       	subi	r20, 0x6F	; 111
    5de8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dea:	be 01       	movw	r22, r28
    5dec:	63 59       	subi	r22, 0x93	; 147
    5dee:	7f 4f       	sbci	r23, 0xFF	; 255
    5df0:	ce 01       	movw	r24, r28
    5df2:	8f 54       	subi	r24, 0x4F	; 79
    5df4:	9e 4f       	sbci	r25, 0xFE	; 254
    5df6:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <eigensystem>
    5dfa:	cf 54       	subi	r28, 0x4F	; 79
    5dfc:	de 4f       	sbci	r29, 0xFE	; 254
    5dfe:	28 80       	ld	r2, Y
    5e00:	39 80       	ldd	r3, Y+1	; 0x01
    5e02:	4a 80       	ldd	r4, Y+2	; 0x02
    5e04:	5b 80       	ldd	r5, Y+3	; 0x03
    5e06:	c1 5b       	subi	r28, 0xB1	; 177
    5e08:	d1 40       	sbci	r29, 0x01	; 1
    5e0a:	2d 96       	adiw	r28, 0x0d	; 13
    5e0c:	2c ae       	std	Y+60, r2	; 0x3c
    5e0e:	3d ae       	std	Y+61, r3	; 0x3d
    5e10:	4e ae       	std	Y+62, r4	; 0x3e
    5e12:	5f ae       	std	Y+63, r5	; 0x3f
    5e14:	2d 97       	sbiw	r28, 0x0d	; 13
    5e16:	61 96       	adiw	r28, 0x11	; 17
    5e18:	1c ae       	std	Y+60, r1	; 0x3c
    5e1a:	1d ae       	std	Y+61, r1	; 0x3d
    5e1c:	1e ae       	std	Y+62, r1	; 0x3e
    5e1e:	1f ae       	std	Y+63, r1	; 0x3f
    5e20:	61 97       	sbiw	r28, 0x11	; 17
    5e22:	65 96       	adiw	r28, 0x15	; 21
    5e24:	1c ae       	std	Y+60, r1	; 0x3c
    5e26:	1d ae       	std	Y+61, r1	; 0x3d
    5e28:	1e ae       	std	Y+62, r1	; 0x3e
    5e2a:	1f ae       	std	Y+63, r1	; 0x3f
    5e2c:	65 97       	sbiw	r28, 0x15	; 21
    5e2e:	69 96       	adiw	r28, 0x19	; 25
    5e30:	1c ae       	std	Y+60, r1	; 0x3c
    5e32:	1d ae       	std	Y+61, r1	; 0x3d
    5e34:	1e ae       	std	Y+62, r1	; 0x3e
    5e36:	1f ae       	std	Y+63, r1	; 0x3f
    5e38:	69 97       	sbiw	r28, 0x19	; 25
    5e3a:	cb 54       	subi	r28, 0x4B	; 75
    5e3c:	de 4f       	sbci	r29, 0xFE	; 254
    5e3e:	88 81       	ld	r24, Y
    5e40:	99 81       	ldd	r25, Y+1	; 0x01
    5e42:	aa 81       	ldd	r26, Y+2	; 0x02
    5e44:	bb 81       	ldd	r27, Y+3	; 0x03
    5e46:	c5 5b       	subi	r28, 0xB5	; 181
    5e48:	d1 40       	sbci	r29, 0x01	; 1
    5e4a:	6d 96       	adiw	r28, 0x1d	; 29
    5e4c:	8c af       	std	Y+60, r24	; 0x3c
    5e4e:	9d af       	std	Y+61, r25	; 0x3d
    5e50:	ae af       	std	Y+62, r26	; 0x3e
    5e52:	bf af       	std	Y+63, r27	; 0x3f
    5e54:	6d 97       	sbiw	r28, 0x1d	; 29
    5e56:	a1 96       	adiw	r28, 0x21	; 33
    5e58:	1c ae       	std	Y+60, r1	; 0x3c
    5e5a:	1d ae       	std	Y+61, r1	; 0x3d
    5e5c:	1e ae       	std	Y+62, r1	; 0x3e
    5e5e:	1f ae       	std	Y+63, r1	; 0x3f
    5e60:	a1 97       	sbiw	r28, 0x21	; 33
    5e62:	a5 96       	adiw	r28, 0x25	; 37
    5e64:	1c ae       	std	Y+60, r1	; 0x3c
    5e66:	1d ae       	std	Y+61, r1	; 0x3d
    5e68:	1e ae       	std	Y+62, r1	; 0x3e
    5e6a:	1f ae       	std	Y+63, r1	; 0x3f
    5e6c:	a5 97       	sbiw	r28, 0x25	; 37
    5e6e:	a9 96       	adiw	r28, 0x29	; 41
    5e70:	1c ae       	std	Y+60, r1	; 0x3c
    5e72:	1d ae       	std	Y+61, r1	; 0x3d
    5e74:	1e ae       	std	Y+62, r1	; 0x3e
    5e76:	1f ae       	std	Y+63, r1	; 0x3f
    5e78:	a9 97       	sbiw	r28, 0x29	; 41
    5e7a:	c7 54       	subi	r28, 0x47	; 71
    5e7c:	de 4f       	sbci	r29, 0xFE	; 254
    5e7e:	88 81       	ld	r24, Y
    5e80:	99 81       	ldd	r25, Y+1	; 0x01
    5e82:	aa 81       	ldd	r26, Y+2	; 0x02
    5e84:	bb 81       	ldd	r27, Y+3	; 0x03
    5e86:	c9 5b       	subi	r28, 0xB9	; 185
    5e88:	d1 40       	sbci	r29, 0x01	; 1
    5e8a:	ad 96       	adiw	r28, 0x2d	; 45
    5e8c:	8c af       	std	Y+60, r24	; 0x3c
    5e8e:	9d af       	std	Y+61, r25	; 0x3d
    5e90:	ae af       	std	Y+62, r26	; 0x3e
    5e92:	bf af       	std	Y+63, r27	; 0x3f
    5e94:	ad 97       	sbiw	r28, 0x2d	; 45
    5e96:	be 01       	movw	r22, r28
    5e98:	63 59       	subi	r22, 0x93	; 147
    5e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e9c:	ce 01       	movw	r24, r28
    5e9e:	85 96       	adiw	r24, 0x25	; 37
    5ea0:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <matrixTranspose>
    5ea4:	84 e2       	ldi	r24, 0x24	; 36
    5ea6:	e0 e6       	ldi	r30, 0x60	; 96
    5ea8:	f0 e2       	ldi	r31, 0x20	; 32
    5eaa:	de 01       	movw	r26, r28
    5eac:	11 96       	adiw	r26, 0x01	; 1
    5eae:	01 90       	ld	r0, Z+
    5eb0:	0d 92       	st	X+, r0
    5eb2:	8a 95       	dec	r24
    5eb4:	e1 f7       	brne	.-8      	; 0x5eae <updatePos+0x5cc>
    5eb6:	8e 01       	movw	r16, r28
    5eb8:	07 5b       	subi	r16, 0xB7	; 183
    5eba:	1f 4f       	sbci	r17, 0xFF	; 255
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	31 96       	adiw	r30, 0x01	; 1
    5ec0:	7f 01       	movw	r14, r30
    5ec2:	58 01       	movw	r10, r16
    5ec4:	f0 e3       	ldi	r31, 0x30	; 48
    5ec6:	af 0e       	add	r10, r31
    5ec8:	b1 1c       	adc	r11, r1
    5eca:	20 e0       	ldi	r18, 0x00	; 0
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e8       	ldi	r20, 0x80	; 128
    5ed0:	5f e3       	ldi	r21, 0x3F	; 63
    5ed2:	c2 01       	movw	r24, r4
    5ed4:	b1 01       	movw	r22, r2
    5ed6:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5eda:	18 16       	cp	r1, r24
    5edc:	0c f0       	brlt	.+2      	; 0x5ee0 <updatePos+0x5fe>
    5ede:	9f c0       	rjmp	.+318    	; 0x601e <updatePos+0x73c>
    5ee0:	f7 01       	movw	r30, r14
    5ee2:	20 82       	st	Z, r2
    5ee4:	31 82       	std	Z+1, r3	; 0x01
    5ee6:	42 82       	std	Z+2, r4	; 0x02
    5ee8:	53 82       	std	Z+3, r5	; 0x03
    5eea:	00 5f       	subi	r16, 0xF0	; 240
    5eec:	1f 4f       	sbci	r17, 0xFF	; 255
    5eee:	f0 e1       	ldi	r31, 0x10	; 16
    5ef0:	ef 0e       	add	r14, r31
    5ef2:	f1 1c       	adc	r15, r1
    5ef4:	0a 15       	cp	r16, r10
    5ef6:	1b 05       	cpc	r17, r11
    5ef8:	b1 f1       	breq	.+108    	; 0x5f66 <updatePos+0x684>
    5efa:	f8 01       	movw	r30, r16
    5efc:	20 80       	ld	r2, Z
    5efe:	31 80       	ldd	r3, Z+1	; 0x01
    5f00:	42 80       	ldd	r4, Z+2	; 0x02
    5f02:	53 80       	ldd	r5, Z+3	; 0x03
    5f04:	e2 cf       	rjmp	.-60     	; 0x5eca <updatePos+0x5e8>
    5f06:	8c e8       	ldi	r24, 0x8C	; 140
    5f08:	98 e0       	ldi	r25, 0x08	; 8
    5f0a:	9f 93       	push	r25
    5f0c:	8f 93       	push	r24
    5f0e:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    5f12:	0f 90       	pop	r0
    5f14:	0f 90       	pop	r0
    5f16:	c8 50       	subi	r28, 0x08	; 8
    5f18:	de 4f       	sbci	r29, 0xFE	; 254
    5f1a:	cd bf       	out	0x3d, r28	; 61
    5f1c:	de bf       	out	0x3e, r29	; 62
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	1f 91       	pop	r17
    5f24:	0f 91       	pop	r16
    5f26:	ff 90       	pop	r15
    5f28:	ef 90       	pop	r14
    5f2a:	df 90       	pop	r13
    5f2c:	cf 90       	pop	r12
    5f2e:	bf 90       	pop	r11
    5f30:	af 90       	pop	r10
    5f32:	9f 90       	pop	r9
    5f34:	8f 90       	pop	r8
    5f36:	7f 90       	pop	r7
    5f38:	6f 90       	pop	r6
    5f3a:	5f 90       	pop	r5
    5f3c:	4f 90       	pop	r4
    5f3e:	3f 90       	pop	r3
    5f40:	2f 90       	pop	r2
    5f42:	08 95       	ret
    5f44:	c5 01       	movw	r24, r10
    5f46:	b4 01       	movw	r22, r8
    5f48:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    5f4c:	2b ed       	ldi	r18, 0xDB	; 219
    5f4e:	3f e0       	ldi	r19, 0x0F	; 15
    5f50:	49 ec       	ldi	r20, 0xC9	; 201
    5f52:	50 e4       	ldi	r21, 0x40	; 64
    5f54:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    5f58:	2b ed       	ldi	r18, 0xDB	; 219
    5f5a:	3f e0       	ldi	r19, 0x0F	; 15
    5f5c:	49 e4       	ldi	r20, 0x49	; 73
    5f5e:	50 e4       	ldi	r21, 0x40	; 64
    5f60:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    5f64:	2f cd       	rjmp	.-1442   	; 0x59c4 <updatePos+0xe2>
    5f66:	ae 01       	movw	r20, r28
    5f68:	43 50       	subi	r20, 0x03	; 3
    5f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f6c:	be 01       	movw	r22, r28
    5f6e:	63 59       	subi	r22, 0x93	; 147
    5f70:	7f 4f       	sbci	r23, 0xFF	; 255
    5f72:	ce 01       	movw	r24, r28
    5f74:	8f 56       	subi	r24, 0x6F	; 111
    5f76:	9f 4f       	sbci	r25, 0xFF	; 255
    5f78:	0e 94 c7 3b 	call	0x778e	; 0x778e <matrixMultiply>
    5f7c:	ae 01       	movw	r20, r28
    5f7e:	4f 5f       	subi	r20, 0xFF	; 255
    5f80:	5f 4f       	sbci	r21, 0xFF	; 255
    5f82:	be 01       	movw	r22, r28
    5f84:	6b 5d       	subi	r22, 0xDB	; 219
    5f86:	7f 4f       	sbci	r23, 0xFF	; 255
    5f88:	ce 01       	movw	r24, r28
    5f8a:	87 59       	subi	r24, 0x97	; 151
    5f8c:	9e 4f       	sbci	r25, 0xFE	; 254
    5f8e:	0e 94 c7 3b 	call	0x778e	; 0x778e <matrixMultiply>
    5f92:	ae 01       	movw	r20, r28
    5f94:	4f 56       	subi	r20, 0x6F	; 111
    5f96:	5f 4f       	sbci	r21, 0xFF	; 255
    5f98:	be 01       	movw	r22, r28
    5f9a:	67 59       	subi	r22, 0x97	; 151
    5f9c:	7e 4f       	sbci	r23, 0xFE	; 254
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	0e 94 4e 3c 	call	0x789c	; 0x789c <matrixInplaceMultiply>
    5fa4:	ae 01       	movw	r20, r28
    5fa6:	47 59       	subi	r20, 0x97	; 151
    5fa8:	5e 4f       	sbci	r21, 0xFE	; 254
    5faa:	be 01       	movw	r22, r28
    5fac:	67 52       	subi	r22, 0x27	; 39
    5fae:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb0:	ca 01       	movw	r24, r20
    5fb2:	0e 94 4e 3c 	call	0x789c	; 0x789c <matrixInplaceMultiply>
    5fb6:	ce 01       	movw	r24, r28
    5fb8:	87 59       	subi	r24, 0x97	; 151
    5fba:	9e 4f       	sbci	r25, 0xFE	; 254
    5fbc:	0e 94 40 49 	call	0x9280	; 0x9280 <positiveDefiniteQ>
    5fc0:	88 23       	and	r24, r24
    5fc2:	09 f4       	brne	.+2      	; 0x5fc6 <updatePos+0x6e4>
    5fc4:	ff c0       	rjmp	.+510    	; 0x61c4 <updatePos+0x8e2>
    5fc6:	cb 52       	subi	r28, 0x2B	; 43
    5fc8:	de 4f       	sbci	r29, 0xFE	; 254
    5fca:	88 80       	ld	r8, Y
    5fcc:	99 80       	ldd	r9, Y+1	; 0x01
    5fce:	aa 80       	ldd	r10, Y+2	; 0x02
    5fd0:	bb 80       	ldd	r11, Y+3	; 0x03
    5fd2:	c5 5d       	subi	r28, 0xD5	; 213
    5fd4:	d1 40       	sbci	r29, 0x01	; 1
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	38 ef       	ldi	r19, 0xF8	; 248
    5fda:	4f ef       	ldi	r20, 0xFF	; 255
    5fdc:	55 e4       	ldi	r21, 0x45	; 69
    5fde:	c5 01       	movw	r24, r10
    5fe0:	b4 01       	movw	r22, r8
    5fe2:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    5fe6:	18 16       	cp	r1, r24
    5fe8:	0c f1       	brlt	.+66     	; 0x602c <updatePos+0x74a>
    5fea:	20 e0       	ldi	r18, 0x00	; 0
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	40 e0       	ldi	r20, 0x00	; 0
    5ff0:	56 ec       	ldi	r21, 0xC6	; 198
    5ff2:	c5 01       	movw	r24, r10
    5ff4:	b4 01       	movw	r22, r8
    5ff6:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    5ffa:	87 ff       	sbrs	r24, 7
    5ffc:	dc c0       	rjmp	.+440    	; 0x61b6 <updatePos+0x8d4>
    5ffe:	10 e0       	ldi	r17, 0x00	; 0
    6000:	00 ee       	ldi	r16, 0xE0	; 224
    6002:	16 c0       	rjmp	.+44     	; 0x6030 <updatePos+0x74e>
    6004:	20 e0       	ldi	r18, 0x00	; 0
    6006:	30 e0       	ldi	r19, 0x00	; 0
    6008:	a9 01       	movw	r20, r18
    600a:	c5 01       	movw	r24, r10
    600c:	b4 01       	movw	r22, r8
    600e:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    6012:	87 ff       	sbrs	r24, 7
    6014:	14 ce       	rjmp	.-984    	; 0x5c3e <updatePos+0x35c>
    6016:	81 2c       	mov	r8, r1
    6018:	91 2c       	mov	r9, r1
    601a:	54 01       	movw	r10, r8
    601c:	10 ce       	rjmp	.-992    	; 0x5c3e <updatePos+0x35c>
    601e:	21 2c       	mov	r2, r1
    6020:	31 2c       	mov	r3, r1
    6022:	20 e8       	ldi	r18, 0x80	; 128
    6024:	42 2e       	mov	r4, r18
    6026:	2f e3       	ldi	r18, 0x3F	; 63
    6028:	52 2e       	mov	r5, r18
    602a:	5a cf       	rjmp	.-332    	; 0x5ee0 <updatePos+0x5fe>
    602c:	1f ef       	ldi	r17, 0xFF	; 255
    602e:	0f e1       	ldi	r16, 0x1F	; 31
    6030:	10 93 34 2a 	sts	0x2A34, r17	; 0x802a34 <myPos>
    6034:	00 93 35 2a 	sts	0x2A35, r16	; 0x802a35 <myPos+0x1>
    6038:	c7 52       	subi	r28, 0x27	; 39
    603a:	de 4f       	sbci	r29, 0xFE	; 254
    603c:	88 80       	ld	r8, Y
    603e:	99 80       	ldd	r9, Y+1	; 0x01
    6040:	aa 80       	ldd	r10, Y+2	; 0x02
    6042:	bb 80       	ldd	r11, Y+3	; 0x03
    6044:	c9 5d       	subi	r28, 0xD9	; 217
    6046:	d1 40       	sbci	r29, 0x01	; 1
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	38 ef       	ldi	r19, 0xF8	; 248
    604c:	4f ef       	ldi	r20, 0xFF	; 255
    604e:	55 e4       	ldi	r21, 0x45	; 69
    6050:	c5 01       	movw	r24, r10
    6052:	b4 01       	movw	r22, r8
    6054:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6058:	18 16       	cp	r1, r24
    605a:	74 f0       	brlt	.+28     	; 0x6078 <updatePos+0x796>
    605c:	20 e0       	ldi	r18, 0x00	; 0
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	40 e0       	ldi	r20, 0x00	; 0
    6062:	56 ec       	ldi	r21, 0xC6	; 198
    6064:	c5 01       	movw	r24, r10
    6066:	b4 01       	movw	r22, r8
    6068:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    606c:	87 ff       	sbrs	r24, 7
    606e:	9c c0       	rjmp	.+312    	; 0x61a8 <updatePos+0x8c6>
    6070:	f1 2c       	mov	r15, r1
    6072:	80 ee       	ldi	r24, 0xE0	; 224
    6074:	e8 2e       	mov	r14, r24
    6076:	04 c0       	rjmp	.+8      	; 0x6080 <updatePos+0x79e>
    6078:	ff 24       	eor	r15, r15
    607a:	fa 94       	dec	r15
    607c:	9f e1       	ldi	r25, 0x1F	; 31
    607e:	e9 2e       	mov	r14, r25
    6080:	f0 92 36 2a 	sts	0x2A36, r15	; 0x802a36 <myPos+0x2>
    6084:	e0 92 37 2a 	sts	0x2A37, r14	; 0x802a37 <myPos+0x3>
    6088:	c3 52       	subi	r28, 0x23	; 35
    608a:	de 4f       	sbci	r29, 0xFE	; 254
    608c:	88 80       	ld	r8, Y
    608e:	99 80       	ldd	r9, Y+1	; 0x01
    6090:	aa 80       	ldd	r10, Y+2	; 0x02
    6092:	bb 80       	ldd	r11, Y+3	; 0x03
    6094:	cd 5d       	subi	r28, 0xDD	; 221
    6096:	d1 40       	sbci	r29, 0x01	; 1
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	a9 01       	movw	r20, r18
    609e:	c5 01       	movw	r24, r10
    60a0:	b4 01       	movw	r22, r8
    60a2:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    60a6:	2b ed       	ldi	r18, 0xDB	; 219
    60a8:	3f e0       	ldi	r19, 0x0F	; 15
    60aa:	49 e4       	ldi	r20, 0x49	; 73
    60ac:	50 e4       	ldi	r21, 0x40	; 64
    60ae:	87 fd       	sbrc	r24, 7
    60b0:	6a c0       	rjmp	.+212    	; 0x6186 <updatePos+0x8a4>
    60b2:	c5 01       	movw	r24, r10
    60b4:	b4 01       	movw	r22, r8
    60b6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    60ba:	2b ed       	ldi	r18, 0xDB	; 219
    60bc:	3f e0       	ldi	r19, 0x0F	; 15
    60be:	49 ec       	ldi	r20, 0xC9	; 201
    60c0:	50 e4       	ldi	r21, 0x40	; 64
    60c2:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    60c6:	2b ed       	ldi	r18, 0xDB	; 219
    60c8:	3f e0       	ldi	r19, 0x0F	; 15
    60ca:	49 e4       	ldi	r20, 0x49	; 73
    60cc:	50 e4       	ldi	r21, 0x40	; 64
    60ce:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    60d2:	2b ed       	ldi	r18, 0xDB	; 219
    60d4:	3f e0       	ldi	r19, 0x0F	; 15
    60d6:	49 e4       	ldi	r20, 0x49	; 73
    60d8:	50 e4       	ldi	r21, 0x40	; 64
    60da:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	44 e3       	ldi	r20, 0x34	; 52
    60e4:	53 e4       	ldi	r21, 0x43	; 67
    60e6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    60ea:	20 e0       	ldi	r18, 0x00	; 0
    60ec:	30 e0       	ldi	r19, 0x00	; 0
    60ee:	40 e0       	ldi	r20, 0x00	; 0
    60f0:	5f e3       	ldi	r21, 0x3F	; 63
    60f2:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    60f6:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    60fa:	60 93 38 2a 	sts	0x2A38, r22	; 0x802a38 <myPos+0x4>
    60fe:	70 93 39 2a 	sts	0x2A39, r23	; 0x802a39 <myPos+0x5>
    6102:	7f 93       	push	r23
    6104:	6f 93       	push	r22
    6106:	ef 92       	push	r14
    6108:	ff 92       	push	r15
    610a:	0f 93       	push	r16
    610c:	1f 93       	push	r17
    610e:	87 ee       	ldi	r24, 0xE7	; 231
    6110:	97 e0       	ldi	r25, 0x07	; 7
    6112:	9f 93       	push	r25
    6114:	8f 93       	push	r24
    6116:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    611a:	6f 92       	push	r6
    611c:	7f 92       	push	r7
    611e:	cf 92       	push	r12
    6120:	df 92       	push	r13
    6122:	8b ec       	ldi	r24, 0xCB	; 203
    6124:	97 e0       	ldi	r25, 0x07	; 7
    6126:	9f 93       	push	r25
    6128:	8f 93       	push	r24
    612a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    612e:	62 ea       	ldi	r22, 0xA2	; 162
    6130:	76 e2       	ldi	r23, 0x26	; 38
    6132:	ce 01       	movw	r24, r28
    6134:	87 59       	subi	r24, 0x97	; 151
    6136:	9e 4f       	sbci	r25, 0xFE	; 254
    6138:	0e 94 24 2a 	call	0x5448	; 0x5448 <compressP>
    613c:	cd bf       	out	0x3d, r28	; 61
    613e:	de bf       	out	0x3e, r29	; 62
    6140:	ea ce       	rjmp	.-556    	; 0x5f16 <updatePos+0x634>
    6142:	6f 92       	push	r6
    6144:	7f 92       	push	r7
    6146:	cf 92       	push	r12
    6148:	df 92       	push	r13
    614a:	8b e3       	ldi	r24, 0x3B	; 59
    614c:	98 e0       	ldi	r25, 0x08	; 8
    614e:	9f 93       	push	r25
    6150:	8f 93       	push	r24
    6152:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    6156:	0f 90       	pop	r0
    6158:	0f 90       	pop	r0
    615a:	0f 90       	pop	r0
    615c:	0f 90       	pop	r0
    615e:	0f 90       	pop	r0
    6160:	0f 90       	pop	r0
    6162:	d9 ce       	rjmp	.-590    	; 0x5f16 <updatePos+0x634>
    6164:	c5 01       	movw	r24, r10
    6166:	b4 01       	movw	r22, r8
    6168:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    616c:	2b ed       	ldi	r18, 0xDB	; 219
    616e:	3f e0       	ldi	r19, 0x0F	; 15
    6170:	49 ec       	ldi	r20, 0xC9	; 201
    6172:	50 e4       	ldi	r21, 0x40	; 64
    6174:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    6178:	2b ed       	ldi	r18, 0xDB	; 219
    617a:	3f e0       	ldi	r19, 0x0F	; 15
    617c:	49 e4       	ldi	r20, 0x49	; 73
    617e:	50 e4       	ldi	r21, 0x40	; 64
    6180:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6184:	a1 cc       	rjmp	.-1726   	; 0x5ac8 <updatePos+0x1e6>
    6186:	c5 01       	movw	r24, r10
    6188:	b4 01       	movw	r22, r8
    618a:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    618e:	2b ed       	ldi	r18, 0xDB	; 219
    6190:	3f e0       	ldi	r19, 0x0F	; 15
    6192:	49 ec       	ldi	r20, 0xC9	; 201
    6194:	50 e4       	ldi	r21, 0x40	; 64
    6196:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    619a:	2b ed       	ldi	r18, 0xDB	; 219
    619c:	3f e0       	ldi	r19, 0x0F	; 15
    619e:	49 e4       	ldi	r20, 0x49	; 73
    61a0:	50 e4       	ldi	r21, 0x40	; 64
    61a2:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    61a6:	95 cf       	rjmp	.-214    	; 0x60d2 <updatePos+0x7f0>
    61a8:	c5 01       	movw	r24, r10
    61aa:	b4 01       	movw	r22, r8
    61ac:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    61b0:	f6 2e       	mov	r15, r22
    61b2:	e7 2e       	mov	r14, r23
    61b4:	65 cf       	rjmp	.-310    	; 0x6080 <updatePos+0x79e>
    61b6:	c5 01       	movw	r24, r10
    61b8:	b4 01       	movw	r22, r8
    61ba:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    61be:	16 2f       	mov	r17, r22
    61c0:	07 2f       	mov	r16, r23
    61c2:	36 cf       	rjmp	.-404    	; 0x6030 <updatePos+0x74e>
    61c4:	83 e0       	ldi	r24, 0x03	; 3
    61c6:	98 e0       	ldi	r25, 0x08	; 8
    61c8:	9f 93       	push	r25
    61ca:	8f 93       	push	r24
    61cc:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    61d0:	0f 90       	pop	r0
    61d2:	0f 90       	pop	r0
    61d4:	a0 ce       	rjmp	.-704    	; 0x5f16 <updatePos+0x634>

000061d6 <getMeasCovar.isra.3>:
    61d6:	4f 92       	push	r4
    61d8:	5f 92       	push	r5
    61da:	6f 92       	push	r6
    61dc:	7f 92       	push	r7
    61de:	8f 92       	push	r8
    61e0:	9f 92       	push	r9
    61e2:	af 92       	push	r10
    61e4:	bf 92       	push	r11
    61e6:	cf 92       	push	r12
    61e8:	df 92       	push	r13
    61ea:	ef 92       	push	r14
    61ec:	ff 92       	push	r15
    61ee:	0f 93       	push	r16
    61f0:	1f 93       	push	r17
    61f2:	cf 93       	push	r28
    61f4:	df 93       	push	r29
    61f6:	cd b7       	in	r28, 0x3d	; 61
    61f8:	de b7       	in	r29, 0x3e	; 62
    61fa:	a4 97       	sbiw	r28, 0x24	; 36
    61fc:	cd bf       	out	0x3d, r28	; 61
    61fe:	de bf       	out	0x3e, r29	; 62
    6200:	8c 01       	movw	r16, r24
    6202:	5b 01       	movw	r10, r22
    6204:	4a 01       	movw	r8, r20
    6206:	fb 01       	movw	r30, r22
    6208:	c0 80       	ld	r12, Z
    620a:	d1 80       	ldd	r13, Z+1	; 0x01
    620c:	e2 80       	ldd	r14, Z+2	; 0x02
    620e:	f3 80       	ldd	r15, Z+3	; 0x03
    6210:	20 e0       	ldi	r18, 0x00	; 0
    6212:	30 e0       	ldi	r19, 0x00	; 0
    6214:	40 ea       	ldi	r20, 0xA0	; 160
    6216:	52 e4       	ldi	r21, 0x42	; 66
    6218:	c7 01       	movw	r24, r14
    621a:	b6 01       	movw	r22, r12
    621c:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    6220:	18 16       	cp	r1, r24
    6222:	0c f0       	brlt	.+2      	; 0x6226 <getMeasCovar.isra.3+0x50>
    6224:	8e c0       	rjmp	.+284    	; 0x6342 <getMeasCovar.isra.3+0x16c>
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	4c e0       	ldi	r20, 0x0C	; 12
    622c:	53 e4       	ldi	r21, 0x43	; 67
    622e:	c7 01       	movw	r24, r14
    6230:	b6 01       	movw	r22, r12
    6232:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    6236:	18 16       	cp	r1, r24
    6238:	0c f0       	brlt	.+2      	; 0x623c <getMeasCovar.isra.3+0x66>
    623a:	7b c0       	rjmp	.+246    	; 0x6332 <getMeasCovar.isra.3+0x15c>
    623c:	87 e1       	ldi	r24, 0x17	; 23
    623e:	92 e2       	ldi	r25, 0x22	; 34
    6240:	80 93 6b 25 	sts	0x256B, r24	; 0x80256b <start.5528>
    6244:	90 93 6c 25 	sts	0x256C, r25	; 0x80256c <start.5528+0x1>
    6248:	bc 01       	movw	r22, r24
    624a:	c8 01       	movw	r24, r16
    624c:	0e 94 b9 48 	call	0x9172	; 0x9172 <matrixCopy>
    6250:	f4 01       	movw	r30, r8
    6252:	40 80       	ld	r4, Z
    6254:	51 80       	ldd	r5, Z+1	; 0x01
    6256:	62 80       	ldd	r6, Z+2	; 0x02
    6258:	73 80       	ldd	r7, Z+3	; 0x03
    625a:	c3 01       	movw	r24, r6
    625c:	b2 01       	movw	r22, r4
    625e:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    6262:	6b 01       	movw	r12, r22
    6264:	7c 01       	movw	r14, r24
    6266:	c3 01       	movw	r24, r6
    6268:	b2 01       	movw	r22, r4
    626a:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    626e:	2b 01       	movw	r4, r22
    6270:	3c 01       	movw	r6, r24
    6272:	c9 82       	std	Y+1, r12	; 0x01
    6274:	da 82       	std	Y+2, r13	; 0x02
    6276:	eb 82       	std	Y+3, r14	; 0x03
    6278:	fc 82       	std	Y+4, r15	; 0x04
    627a:	f5 01       	movw	r30, r10
    627c:	80 80       	ld	r8, Z
    627e:	91 80       	ldd	r9, Z+1	; 0x01
    6280:	a2 80       	ldd	r10, Z+2	; 0x02
    6282:	b3 80       	ldd	r11, Z+3	; 0x03
    6284:	c5 01       	movw	r24, r10
    6286:	b4 01       	movw	r22, r8
    6288:	90 58       	subi	r25, 0x80	; 128
    628a:	a3 01       	movw	r20, r6
    628c:	92 01       	movw	r18, r4
    628e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6292:	6d 83       	std	Y+5, r22	; 0x05
    6294:	7e 83       	std	Y+6, r23	; 0x06
    6296:	8f 83       	std	Y+7, r24	; 0x07
    6298:	98 87       	std	Y+8, r25	; 0x08
    629a:	19 86       	std	Y+9, r1	; 0x09
    629c:	1a 86       	std	Y+10, r1	; 0x0a
    629e:	1b 86       	std	Y+11, r1	; 0x0b
    62a0:	1c 86       	std	Y+12, r1	; 0x0c
    62a2:	4d 86       	std	Y+13, r4	; 0x0d
    62a4:	5e 86       	std	Y+14, r5	; 0x0e
    62a6:	6f 86       	std	Y+15, r6	; 0x0f
    62a8:	78 8a       	std	Y+16, r7	; 0x10
    62aa:	a5 01       	movw	r20, r10
    62ac:	94 01       	movw	r18, r8
    62ae:	c7 01       	movw	r24, r14
    62b0:	b6 01       	movw	r22, r12
    62b2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    62b6:	69 8b       	std	Y+17, r22	; 0x11
    62b8:	7a 8b       	std	Y+18, r23	; 0x12
    62ba:	8b 8b       	std	Y+19, r24	; 0x13
    62bc:	9c 8b       	std	Y+20, r25	; 0x14
    62be:	1d 8a       	std	Y+21, r1	; 0x15
    62c0:	1e 8a       	std	Y+22, r1	; 0x16
    62c2:	1f 8a       	std	Y+23, r1	; 0x17
    62c4:	18 8e       	std	Y+24, r1	; 0x18
    62c6:	19 8e       	std	Y+25, r1	; 0x19
    62c8:	1a 8e       	std	Y+26, r1	; 0x1a
    62ca:	1b 8e       	std	Y+27, r1	; 0x1b
    62cc:	1c 8e       	std	Y+28, r1	; 0x1c
    62ce:	1d 8e       	std	Y+29, r1	; 0x1d
    62d0:	1e 8e       	std	Y+30, r1	; 0x1e
    62d2:	1f 8e       	std	Y+31, r1	; 0x1f
    62d4:	18 a2       	std	Y+32, r1	; 0x20
    62d6:	80 e0       	ldi	r24, 0x00	; 0
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	a0 e8       	ldi	r26, 0x80	; 128
    62dc:	bf e3       	ldi	r27, 0x3F	; 63
    62de:	89 a3       	std	Y+33, r24	; 0x21
    62e0:	9a a3       	std	Y+34, r25	; 0x22
    62e2:	ab a3       	std	Y+35, r26	; 0x23
    62e4:	bc a3       	std	Y+36, r27	; 0x24
    62e6:	a8 01       	movw	r20, r16
    62e8:	be 01       	movw	r22, r28
    62ea:	6f 5f       	subi	r22, 0xFF	; 255
    62ec:	7f 4f       	sbci	r23, 0xFF	; 255
    62ee:	c8 01       	movw	r24, r16
    62f0:	0e 94 4e 3c 	call	0x789c	; 0x789c <matrixInplaceMultiply>
    62f4:	ce 01       	movw	r24, r28
    62f6:	01 96       	adiw	r24, 0x01	; 1
    62f8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <matrixInplaceTranspose>
    62fc:	ae 01       	movw	r20, r28
    62fe:	4f 5f       	subi	r20, 0xFF	; 255
    6300:	5f 4f       	sbci	r21, 0xFF	; 255
    6302:	b8 01       	movw	r22, r16
    6304:	c8 01       	movw	r24, r16
    6306:	0e 94 4e 3c 	call	0x789c	; 0x789c <matrixInplaceMultiply>
    630a:	a4 96       	adiw	r28, 0x24	; 36
    630c:	cd bf       	out	0x3d, r28	; 61
    630e:	de bf       	out	0x3e, r29	; 62
    6310:	df 91       	pop	r29
    6312:	cf 91       	pop	r28
    6314:	1f 91       	pop	r17
    6316:	0f 91       	pop	r16
    6318:	ff 90       	pop	r15
    631a:	ef 90       	pop	r14
    631c:	df 90       	pop	r13
    631e:	cf 90       	pop	r12
    6320:	bf 90       	pop	r11
    6322:	af 90       	pop	r10
    6324:	9f 90       	pop	r9
    6326:	8f 90       	pop	r8
    6328:	7f 90       	pop	r7
    632a:	6f 90       	pop	r6
    632c:	5f 90       	pop	r5
    632e:	4f 90       	pop	r4
    6330:	08 95       	ret
    6332:	8b e3       	ldi	r24, 0x3B	; 59
    6334:	92 e2       	ldi	r25, 0x22	; 34
    6336:	80 93 6b 25 	sts	0x256B, r24	; 0x80256b <start.5528>
    633a:	90 93 6c 25 	sts	0x256C, r25	; 0x80256c <start.5528+0x1>
    633e:	bc 01       	movw	r22, r24
    6340:	84 cf       	rjmp	.-248    	; 0x624a <getMeasCovar.isra.3+0x74>
    6342:	8f e5       	ldi	r24, 0x5F	; 95
    6344:	92 e2       	ldi	r25, 0x22	; 34
    6346:	80 93 6b 25 	sts	0x256B, r24	; 0x80256b <start.5528>
    634a:	90 93 6c 25 	sts	0x256C, r25	; 0x80256c <start.5528+0x1>
    634e:	bc 01       	movw	r22, r24
    6350:	7c cf       	rjmp	.-264    	; 0x624a <getMeasCovar.isra.3+0x74>

00006352 <sendBotMeasMsg>:
    6352:	2f 92       	push	r2
    6354:	3f 92       	push	r3
    6356:	4f 92       	push	r4
    6358:	5f 92       	push	r5
    635a:	6f 92       	push	r6
    635c:	7f 92       	push	r7
    635e:	8f 92       	push	r8
    6360:	9f 92       	push	r9
    6362:	af 92       	push	r10
    6364:	bf 92       	push	r11
    6366:	cf 92       	push	r12
    6368:	df 92       	push	r13
    636a:	ef 92       	push	r14
    636c:	ff 92       	push	r15
    636e:	0f 93       	push	r16
    6370:	1f 93       	push	r17
    6372:	cf 93       	push	r28
    6374:	df 93       	push	r29
    6376:	cd b7       	in	r28, 0x3d	; 61
    6378:	de b7       	in	r29, 0x3e	; 62
    637a:	2e 97       	sbiw	r28, 0x0e	; 14
    637c:	cd bf       	out	0x3d, r28	; 61
    637e:	de bf       	out	0x3e, r29	; 62
    6380:	8c 01       	movw	r16, r24
    6382:	8f e3       	ldi	r24, 0x3F	; 63
    6384:	0e 94 59 21 	call	0x42b2	; 0x42b2 <ir_is_busy>
    6388:	f8 01       	movw	r30, r16
    638a:	88 23       	and	r24, r24
    638c:	09 f4       	brne	.+2      	; 0x6390 <sendBotMeasMsg+0x3e>
    638e:	5a c1       	rjmp	.+692    	; 0x6644 <sendBotMeasMsg+0x2f2>
    6390:	80 8d       	ldd	r24, Z+24	; 0x18
    6392:	86 30       	cpi	r24, 0x06	; 6
    6394:	08 f0       	brcs	.+2      	; 0x6398 <sendBotMeasMsg+0x46>
    6396:	8e c1       	rjmp	.+796    	; 0x66b4 <sendBotMeasMsg+0x362>
    6398:	f8 01       	movw	r30, r16
    639a:	e5 88       	ldd	r14, Z+21	; 0x15
    639c:	f6 88       	ldd	r15, Z+22	; 0x16
    639e:	21 e0       	ldi	r18, 0x01	; 1
    63a0:	30 e0       	ldi	r19, 0x00	; 0
    63a2:	02 c0       	rjmp	.+4      	; 0x63a8 <sendBotMeasMsg+0x56>
    63a4:	22 0f       	add	r18, r18
    63a6:	33 1f       	adc	r19, r19
    63a8:	8a 95       	dec	r24
    63aa:	e2 f7       	brpl	.-8      	; 0x63a4 <sendBotMeasMsg+0x52>
    63ac:	29 83       	std	Y+1, r18	; 0x01
    63ae:	3a 83       	std	Y+2, r19	; 0x02
    63b0:	21 50       	subi	r18, 0x01	; 1
    63b2:	2d 87       	std	Y+13, r18	; 0x0d
    63b4:	0e 94 a9 4f 	call	0x9f52	; 0x9f52 <rand_real>
    63b8:	69 87       	std	Y+9, r22	; 0x09
    63ba:	7a 87       	std	Y+10, r23	; 0x0a
    63bc:	8b 87       	std	Y+11, r24	; 0x0b
    63be:	9c 87       	std	Y+12, r25	; 0x0c
    63c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    63c2:	33 23       	and	r19, r19
    63c4:	09 f4       	brne	.+2      	; 0x63c8 <sendBotMeasMsg+0x76>
    63c6:	95 c1       	rjmp	.+810    	; 0x66f2 <sendBotMeasMsg+0x3a0>
    63c8:	23 2e       	mov	r2, r19
    63ca:	31 2c       	mov	r3, r1
    63cc:	b1 01       	movw	r22, r2
    63ce:	03 2c       	mov	r0, r3
    63d0:	00 0c       	add	r0, r0
    63d2:	88 0b       	sbc	r24, r24
    63d4:	99 0b       	sbc	r25, r25
    63d6:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    63da:	69 83       	std	Y+1, r22	; 0x01
    63dc:	7a 83       	std	Y+2, r23	; 0x02
    63de:	8b 83       	std	Y+3, r24	; 0x03
    63e0:	9c 83       	std	Y+4, r25	; 0x04
    63e2:	b7 01       	movw	r22, r14
    63e4:	80 e0       	ldi	r24, 0x00	; 0
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    63ec:	20 e0       	ldi	r18, 0x00	; 0
    63ee:	30 e0       	ldi	r19, 0x00	; 0
    63f0:	48 e4       	ldi	r20, 0x48	; 72
    63f2:	52 e4       	ldi	r21, 0x42	; 66
    63f4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    63f8:	20 e0       	ldi	r18, 0x00	; 0
    63fa:	30 e0       	ldi	r19, 0x00	; 0
    63fc:	46 e1       	ldi	r20, 0x16	; 22
    63fe:	53 e4       	ldi	r21, 0x43	; 67
    6400:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    6404:	29 81       	ldd	r18, Y+1	; 0x01
    6406:	3a 81       	ldd	r19, Y+2	; 0x02
    6408:	4b 81       	ldd	r20, Y+3	; 0x03
    640a:	5c 81       	ldd	r21, Y+4	; 0x04
    640c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6410:	4b 01       	movw	r8, r22
    6412:	5c 01       	movw	r10, r24
    6414:	1d 82       	std	Y+5, r1	; 0x05
    6416:	1e 82       	std	Y+6, r1	; 0x06
    6418:	1f 82       	std	Y+7, r1	; 0x07
    641a:	18 86       	std	Y+8, r1	; 0x08
    641c:	1e 86       	std	Y+14, r1	; 0x0e
    641e:	89 c0       	rjmp	.+274    	; 0x6532 <sendBotMeasMsg+0x1e0>
    6420:	a3 01       	movw	r20, r6
    6422:	92 01       	movw	r18, r4
    6424:	c3 01       	movw	r24, r6
    6426:	b2 01       	movw	r22, r4
    6428:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    642c:	2b 01       	movw	r4, r22
    642e:	3c 01       	movw	r6, r24
    6430:	a5 01       	movw	r20, r10
    6432:	94 01       	movw	r18, r8
    6434:	69 81       	ldd	r22, Y+1	; 0x01
    6436:	7a 81       	ldd	r23, Y+2	; 0x02
    6438:	8b 81       	ldd	r24, Y+3	; 0x03
    643a:	9c 81       	ldd	r25, Y+4	; 0x04
    643c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6440:	9b 01       	movw	r18, r22
    6442:	ac 01       	movw	r20, r24
    6444:	c3 01       	movw	r24, r6
    6446:	b2 01       	movw	r22, r4
    6448:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    644c:	2b 01       	movw	r4, r22
    644e:	3c 01       	movw	r6, r24
    6450:	20 e0       	ldi	r18, 0x00	; 0
    6452:	30 e0       	ldi	r19, 0x00	; 0
    6454:	40 e0       	ldi	r20, 0x00	; 0
    6456:	5f e3       	ldi	r21, 0x3F	; 63
    6458:	c7 01       	movw	r24, r14
    645a:	b6 01       	movw	r22, r12
    645c:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6460:	6b 01       	movw	r12, r22
    6462:	7c 01       	movw	r14, r24
    6464:	20 e0       	ldi	r18, 0x00	; 0
    6466:	30 e0       	ldi	r19, 0x00	; 0
    6468:	a9 01       	movw	r20, r18
    646a:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    646e:	18 16       	cp	r1, r24
    6470:	4c f4       	brge	.+18     	; 0x6484 <sendBotMeasMsg+0x132>
    6472:	a5 01       	movw	r20, r10
    6474:	94 01       	movw	r18, r8
    6476:	c7 01       	movw	r24, r14
    6478:	b6 01       	movw	r22, r12
    647a:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    647e:	18 16       	cp	r1, r24
    6480:	0c f0       	brlt	.+2      	; 0x6484 <sendBotMeasMsg+0x132>
    6482:	bf c0       	rjmp	.+382    	; 0x6602 <sendBotMeasMsg+0x2b0>
    6484:	a5 01       	movw	r20, r10
    6486:	94 01       	movw	r18, r8
    6488:	c7 01       	movw	r24, r14
    648a:	b6 01       	movw	r22, r12
    648c:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6490:	18 16       	cp	r1, r24
    6492:	0c f0       	brlt	.+2      	; 0x6496 <sendBotMeasMsg+0x144>
    6494:	cf c0       	rjmp	.+414    	; 0x6634 <sendBotMeasMsg+0x2e2>
    6496:	a7 01       	movw	r20, r14
    6498:	96 01       	movw	r18, r12
    649a:	69 81       	ldd	r22, Y+1	; 0x01
    649c:	7a 81       	ldd	r23, Y+2	; 0x02
    649e:	8b 81       	ldd	r24, Y+3	; 0x03
    64a0:	9c 81       	ldd	r25, Y+4	; 0x04
    64a2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    64a6:	9b 01       	movw	r18, r22
    64a8:	ac 01       	movw	r20, r24
    64aa:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    64ae:	6b 01       	movw	r12, r22
    64b0:	7c 01       	movw	r14, r24
    64b2:	a5 01       	movw	r20, r10
    64b4:	94 01       	movw	r18, r8
    64b6:	69 81       	ldd	r22, Y+1	; 0x01
    64b8:	7a 81       	ldd	r23, Y+2	; 0x02
    64ba:	8b 81       	ldd	r24, Y+3	; 0x03
    64bc:	9c 81       	ldd	r25, Y+4	; 0x04
    64be:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    64c2:	29 81       	ldd	r18, Y+1	; 0x01
    64c4:	3a 81       	ldd	r19, Y+2	; 0x02
    64c6:	4b 81       	ldd	r20, Y+3	; 0x03
    64c8:	5c 81       	ldd	r21, Y+4	; 0x04
    64ca:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    64ce:	9b 01       	movw	r18, r22
    64d0:	ac 01       	movw	r20, r24
    64d2:	c7 01       	movw	r24, r14
    64d4:	b6 01       	movw	r22, r12
    64d6:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    64da:	9b 01       	movw	r18, r22
    64dc:	ac 01       	movw	r20, r24
    64de:	60 e0       	ldi	r22, 0x00	; 0
    64e0:	70 e0       	ldi	r23, 0x00	; 0
    64e2:	80 e8       	ldi	r24, 0x80	; 128
    64e4:	9f e3       	ldi	r25, 0x3F	; 63
    64e6:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    64ea:	9b 01       	movw	r18, r22
    64ec:	ac 01       	movw	r20, r24
    64ee:	c3 01       	movw	r24, r6
    64f0:	b2 01       	movw	r22, r4
    64f2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    64f6:	9b 01       	movw	r18, r22
    64f8:	ac 01       	movw	r20, r24
    64fa:	6d 81       	ldd	r22, Y+5	; 0x05
    64fc:	7e 81       	ldd	r23, Y+6	; 0x06
    64fe:	8f 81       	ldd	r24, Y+7	; 0x07
    6500:	98 85       	ldd	r25, Y+8	; 0x08
    6502:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6506:	6d 83       	std	Y+5, r22	; 0x05
    6508:	7e 83       	std	Y+6, r23	; 0x06
    650a:	8f 83       	std	Y+7, r24	; 0x07
    650c:	98 87       	std	Y+8, r25	; 0x08
    650e:	9b 01       	movw	r18, r22
    6510:	ac 01       	movw	r20, r24
    6512:	69 85       	ldd	r22, Y+9	; 0x09
    6514:	7a 85       	ldd	r23, Y+10	; 0x0a
    6516:	8b 85       	ldd	r24, Y+11	; 0x0b
    6518:	9c 85       	ldd	r25, Y+12	; 0x0c
    651a:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    651e:	18 16       	cp	r1, r24
    6520:	0c f0       	brlt	.+2      	; 0x6524 <sendBotMeasMsg+0x1d2>
    6522:	fa c0       	rjmp	.+500    	; 0x6718 <sendBotMeasMsg+0x3c6>
    6524:	2e 85       	ldd	r18, Y+14	; 0x0e
    6526:	2f 5f       	subi	r18, 0xFF	; 255
    6528:	2e 87       	std	Y+14, r18	; 0x0e
    652a:	3d 85       	ldd	r19, Y+13	; 0x0d
    652c:	23 17       	cp	r18, r19
    652e:	08 f0       	brcs	.+2      	; 0x6532 <sendBotMeasMsg+0x1e0>
    6530:	e2 c0       	rjmp	.+452    	; 0x66f6 <sendBotMeasMsg+0x3a4>
    6532:	ee 85       	ldd	r30, Y+14	; 0x0e
    6534:	6e 2f       	mov	r22, r30
    6536:	70 e0       	ldi	r23, 0x00	; 0
    6538:	80 e0       	ldi	r24, 0x00	; 0
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    6540:	6b 01       	movw	r12, r22
    6542:	7c 01       	movw	r14, r24
    6544:	20 e0       	ldi	r18, 0x00	; 0
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	40 e0       	ldi	r20, 0x00	; 0
    654a:	5f e3       	ldi	r21, 0x3F	; 63
    654c:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6550:	2b 01       	movw	r4, r22
    6552:	3c 01       	movw	r6, r24
    6554:	a5 01       	movw	r20, r10
    6556:	94 01       	movw	r18, r8
    6558:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    655c:	18 16       	cp	r1, r24
    655e:	0c f0       	brlt	.+2      	; 0x6562 <sendBotMeasMsg+0x210>
    6560:	5f cf       	rjmp	.-322    	; 0x6420 <sendBotMeasMsg+0xce>
    6562:	29 81       	ldd	r18, Y+1	; 0x01
    6564:	3a 81       	ldd	r19, Y+2	; 0x02
    6566:	4b 81       	ldd	r20, Y+3	; 0x03
    6568:	5c 81       	ldd	r21, Y+4	; 0x04
    656a:	c3 01       	movw	r24, r6
    656c:	b2 01       	movw	r22, r4
    656e:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    6572:	18 16       	cp	r1, r24
    6574:	ac f1       	brlt	.+106    	; 0x65e0 <sendBotMeasMsg+0x28e>
    6576:	a5 01       	movw	r20, r10
    6578:	94 01       	movw	r18, r8
    657a:	c3 01       	movw	r24, r6
    657c:	b2 01       	movw	r22, r4
    657e:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6582:	18 16       	cp	r1, r24
    6584:	6c f5       	brge	.+90     	; 0x65e0 <sendBotMeasMsg+0x28e>
    6586:	29 81       	ldd	r18, Y+1	; 0x01
    6588:	3a 81       	ldd	r19, Y+2	; 0x02
    658a:	4b 81       	ldd	r20, Y+3	; 0x03
    658c:	5c 81       	ldd	r21, Y+4	; 0x04
    658e:	c3 01       	movw	r24, r6
    6590:	b2 01       	movw	r22, r4
    6592:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6596:	9b 01       	movw	r18, r22
    6598:	ac 01       	movw	r20, r24
    659a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    659e:	2b 01       	movw	r4, r22
    65a0:	3c 01       	movw	r6, r24
    65a2:	a5 01       	movw	r20, r10
    65a4:	94 01       	movw	r18, r8
    65a6:	69 81       	ldd	r22, Y+1	; 0x01
    65a8:	7a 81       	ldd	r23, Y+2	; 0x02
    65aa:	8b 81       	ldd	r24, Y+3	; 0x03
    65ac:	9c 81       	ldd	r25, Y+4	; 0x04
    65ae:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    65b2:	29 81       	ldd	r18, Y+1	; 0x01
    65b4:	3a 81       	ldd	r19, Y+2	; 0x02
    65b6:	4b 81       	ldd	r20, Y+3	; 0x03
    65b8:	5c 81       	ldd	r21, Y+4	; 0x04
    65ba:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    65be:	9b 01       	movw	r18, r22
    65c0:	ac 01       	movw	r20, r24
    65c2:	c3 01       	movw	r24, r6
    65c4:	b2 01       	movw	r22, r4
    65c6:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    65ca:	9b 01       	movw	r18, r22
    65cc:	ac 01       	movw	r20, r24
    65ce:	60 e0       	ldi	r22, 0x00	; 0
    65d0:	70 e0       	ldi	r23, 0x00	; 0
    65d2:	80 e8       	ldi	r24, 0x80	; 128
    65d4:	9f e3       	ldi	r25, 0x3F	; 63
    65d6:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    65da:	2b 01       	movw	r4, r22
    65dc:	3c 01       	movw	r6, r24
    65de:	38 cf       	rjmp	.-400    	; 0x6450 <sendBotMeasMsg+0xfe>
    65e0:	29 81       	ldd	r18, Y+1	; 0x01
    65e2:	3a 81       	ldd	r19, Y+2	; 0x02
    65e4:	4b 81       	ldd	r20, Y+3	; 0x03
    65e6:	5c 81       	ldd	r21, Y+4	; 0x04
    65e8:	c3 01       	movw	r24, r6
    65ea:	b2 01       	movw	r22, r4
    65ec:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    65f0:	18 16       	cp	r1, r24
    65f2:	24 f5       	brge	.+72     	; 0x663c <sendBotMeasMsg+0x2ea>
    65f4:	41 2c       	mov	r4, r1
    65f6:	51 2c       	mov	r5, r1
    65f8:	40 e8       	ldi	r20, 0x80	; 128
    65fa:	64 2e       	mov	r6, r20
    65fc:	4f e3       	ldi	r20, 0x3F	; 63
    65fe:	74 2e       	mov	r7, r20
    6600:	27 cf       	rjmp	.-434    	; 0x6450 <sendBotMeasMsg+0xfe>
    6602:	a7 01       	movw	r20, r14
    6604:	96 01       	movw	r18, r12
    6606:	c7 01       	movw	r24, r14
    6608:	b6 01       	movw	r22, r12
    660a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    660e:	6b 01       	movw	r12, r22
    6610:	7c 01       	movw	r14, r24
    6612:	a5 01       	movw	r20, r10
    6614:	94 01       	movw	r18, r8
    6616:	69 81       	ldd	r22, Y+1	; 0x01
    6618:	7a 81       	ldd	r23, Y+2	; 0x02
    661a:	8b 81       	ldd	r24, Y+3	; 0x03
    661c:	9c 81       	ldd	r25, Y+4	; 0x04
    661e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6622:	9b 01       	movw	r18, r22
    6624:	ac 01       	movw	r20, r24
    6626:	c7 01       	movw	r24, r14
    6628:	b6 01       	movw	r22, r12
    662a:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    662e:	9b 01       	movw	r18, r22
    6630:	ac 01       	movw	r20, r24
    6632:	5d cf       	rjmp	.-326    	; 0x64ee <sendBotMeasMsg+0x19c>
    6634:	20 e0       	ldi	r18, 0x00	; 0
    6636:	30 e0       	ldi	r19, 0x00	; 0
    6638:	a9 01       	movw	r20, r18
    663a:	59 cf       	rjmp	.-334    	; 0x64ee <sendBotMeasMsg+0x19c>
    663c:	41 2c       	mov	r4, r1
    663e:	51 2c       	mov	r5, r1
    6640:	32 01       	movw	r6, r4
    6642:	06 cf       	rjmp	.-500    	; 0x6450 <sendBotMeasMsg+0xfe>
    6644:	23 89       	ldd	r18, Z+19	; 0x13
    6646:	34 89       	ldd	r19, Z+20	; 0x14
    6648:	43 e1       	ldi	r20, 0x13	; 19
    664a:	b8 01       	movw	r22, r16
    664c:	87 89       	ldd	r24, Z+23	; 0x17
    664e:	0e 94 c3 22 	call	0x4586	; 0x4586 <ir_targeted_send>
    6652:	f8 01       	movw	r30, r16
    6654:	80 8d       	ldd	r24, Z+24	; 0x18
    6656:	1f 92       	push	r1
    6658:	8f 93       	push	r24
    665a:	87 89       	ldd	r24, Z+23	; 0x17
    665c:	1f 92       	push	r1
    665e:	8f 93       	push	r24
    6660:	84 89       	ldd	r24, Z+20	; 0x14
    6662:	8f 93       	push	r24
    6664:	83 89       	ldd	r24, Z+19	; 0x13
    6666:	8f 93       	push	r24
    6668:	8d e2       	ldi	r24, 0x2D	; 45
    666a:	99 e0       	ldi	r25, 0x09	; 9
    666c:	9f 93       	push	r25
    666e:	8f 93       	push	r24
    6670:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    6674:	ff b7       	in	r31, 0x3f	; 63
    6676:	f9 83       	std	Y+1, r31	; 0x01
    6678:	f8 94       	cli
    667a:	c8 01       	movw	r24, r16
    667c:	0e 94 1f 78 	call	0xf03e	; 0xf03e <free>
    6680:	29 81       	ldd	r18, Y+1	; 0x01
    6682:	2f bf       	out	0x3f, r18	; 63
    6684:	cd bf       	out	0x3d, r28	; 61
    6686:	de bf       	out	0x3e, r29	; 62
    6688:	2e 96       	adiw	r28, 0x0e	; 14
    668a:	cd bf       	out	0x3d, r28	; 61
    668c:	de bf       	out	0x3e, r29	; 62
    668e:	df 91       	pop	r29
    6690:	cf 91       	pop	r28
    6692:	1f 91       	pop	r17
    6694:	0f 91       	pop	r16
    6696:	ff 90       	pop	r15
    6698:	ef 90       	pop	r14
    669a:	df 90       	pop	r13
    669c:	cf 90       	pop	r12
    669e:	bf 90       	pop	r11
    66a0:	af 90       	pop	r10
    66a2:	9f 90       	pop	r9
    66a4:	8f 90       	pop	r8
    66a6:	7f 90       	pop	r7
    66a8:	6f 90       	pop	r6
    66aa:	5f 90       	pop	r5
    66ac:	4f 90       	pop	r4
    66ae:	3f 90       	pop	r3
    66b0:	2f 90       	pop	r2
    66b2:	08 95       	ret
    66b4:	1f 92       	push	r1
    66b6:	8f 93       	push	r24
    66b8:	84 89       	ldd	r24, Z+20	; 0x14
    66ba:	8f 93       	push	r24
    66bc:	83 89       	ldd	r24, Z+19	; 0x13
    66be:	8f 93       	push	r24
    66c0:	81 e0       	ldi	r24, 0x01	; 1
    66c2:	99 e0       	ldi	r25, 0x09	; 9
    66c4:	9f 93       	push	r25
    66c6:	8f 93       	push	r24
    66c8:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    66cc:	ff b7       	in	r31, 0x3f	; 63
    66ce:	f9 83       	std	Y+1, r31	; 0x01
    66d0:	f8 94       	cli
    66d2:	c8 01       	movw	r24, r16
    66d4:	0e 94 1f 78 	call	0xf03e	; 0xf03e <free>
    66d8:	29 81       	ldd	r18, Y+1	; 0x01
    66da:	2f bf       	out	0x3f, r18	; 63
    66dc:	0f 90       	pop	r0
    66de:	0f 90       	pop	r0
    66e0:	0f 90       	pop	r0
    66e2:	0f 90       	pop	r0
    66e4:	0f 90       	pop	r0
    66e6:	0f 90       	pop	r0
    66e8:	f8 01       	movw	r30, r16
    66ea:	80 8d       	ldd	r24, Z+24	; 0x18
    66ec:	8f 5f       	subi	r24, 0xFF	; 255
    66ee:	80 8f       	std	Z+24, r24	; 0x18
    66f0:	cb cf       	rjmp	.-106    	; 0x6688 <sendBotMeasMsg+0x336>
    66f2:	21 2c       	mov	r2, r1
    66f4:	31 2c       	mov	r3, r1
    66f6:	b1 01       	movw	r22, r2
    66f8:	62 95       	swap	r22
    66fa:	72 95       	swap	r23
    66fc:	70 7f       	andi	r23, 0xF0	; 240
    66fe:	76 27       	eor	r23, r22
    6700:	60 7f       	andi	r22, 0xF0	; 240
    6702:	76 27       	eor	r23, r22
    6704:	07 2e       	mov	r0, r23
    6706:	00 0c       	add	r0, r0
    6708:	88 0b       	sbc	r24, r24
    670a:	99 0b       	sbc	r25, r25
    670c:	98 01       	movw	r18, r16
    670e:	49 ea       	ldi	r20, 0xA9	; 169
    6710:	51 e3       	ldi	r21, 0x31	; 49
    6712:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    6716:	e8 cf       	rjmp	.-48     	; 0x66e8 <sendBotMeasMsg+0x396>
    6718:	fe 85       	ldd	r31, Y+14	; 0x0e
    671a:	8f 2f       	mov	r24, r31
    671c:	90 e0       	ldi	r25, 0x00	; 0
    671e:	a0 e0       	ldi	r26, 0x00	; 0
    6720:	b0 e0       	ldi	r27, 0x00	; 0
    6722:	88 0f       	add	r24, r24
    6724:	99 1f       	adc	r25, r25
    6726:	aa 1f       	adc	r26, r26
    6728:	bb 1f       	adc	r27, r27
    672a:	88 0f       	add	r24, r24
    672c:	99 1f       	adc	r25, r25
    672e:	aa 1f       	adc	r26, r26
    6730:	bb 1f       	adc	r27, r27
    6732:	bc 01       	movw	r22, r24
    6734:	cd 01       	movw	r24, r26
    6736:	66 0f       	add	r22, r22
    6738:	77 1f       	adc	r23, r23
    673a:	88 1f       	adc	r24, r24
    673c:	99 1f       	adc	r25, r25
    673e:	66 0f       	add	r22, r22
    6740:	77 1f       	adc	r23, r23
    6742:	88 1f       	adc	r24, r24
    6744:	99 1f       	adc	r25, r25
    6746:	e2 cf       	rjmp	.-60     	; 0x670c <sendBotMeasMsg+0x3ba>

00006748 <localization_init>:
    6748:	80 e0       	ldi	r24, 0x00	; 0
    674a:	90 e8       	ldi	r25, 0x80	; 128
    674c:	80 93 34 2a 	sts	0x2A34, r24	; 0x802a34 <myPos>
    6750:	90 93 35 2a 	sts	0x2A35, r25	; 0x802a35 <myPos+0x1>
    6754:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <myPos+0x2>
    6758:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <myPos+0x3>
    675c:	80 93 38 2a 	sts	0x2A38, r24	; 0x802a38 <myPos+0x4>
    6760:	90 93 39 2a 	sts	0x2A39, r25	; 0x802a39 <myPos+0x5>
    6764:	10 92 a2 26 	sts	0x26A2, r1	; 0x8026a2 <myPosCovar>
    6768:	10 92 a3 26 	sts	0x26A3, r1	; 0x8026a3 <myPosCovar+0x1>
    676c:	10 92 a4 26 	sts	0x26A4, r1	; 0x8026a4 <myPosCovar+0x2>
    6770:	10 92 a5 26 	sts	0x26A5, r1	; 0x8026a5 <myPosCovar+0x3>
    6774:	10 92 a6 26 	sts	0x26A6, r1	; 0x8026a6 <myPosCovar+0x4>
    6778:	10 92 a7 26 	sts	0x26A7, r1	; 0x8026a7 <myPosCovar+0x5>
    677c:	10 92 a8 26 	sts	0x26A8, r1	; 0x8026a8 <myPosCovar+0x6>
    6780:	10 92 a9 26 	sts	0x26A9, r1	; 0x8026a9 <myPosCovar+0x7>
    6784:	10 92 aa 26 	sts	0x26AA, r1	; 0x8026aa <myPosCovar+0x8>
    6788:	10 92 ab 26 	sts	0x26AB, r1	; 0x8026ab <myPosCovar+0x9>
    678c:	10 92 ac 26 	sts	0x26AC, r1	; 0x8026ac <myPosCovar+0xa>
    6790:	10 92 ad 26 	sts	0x26AD, r1	; 0x8026ad <myPosCovar+0xb>
    6794:	10 92 7d 28 	sts	0x287D, r1	; 0x80287d <seedFlag>
    6798:	80 91 99 26 	lds	r24, 0x2699	; 0x802699 <droplet_ID>
    679c:	90 91 9a 26 	lds	r25, 0x269A	; 0x80269a <droplet_ID+0x1>
    67a0:	8f 3d       	cpi	r24, 0xDF	; 223
    67a2:	2e e7       	ldi	r18, 0x7E	; 126
    67a4:	92 07       	cpc	r25, r18
    67a6:	e9 f1       	breq	.+122    	; 0x6822 <localization_init+0xda>
    67a8:	81 36       	cpi	r24, 0x61	; 97
    67aa:	23 e1       	ldi	r18, 0x13	; 19
    67ac:	92 07       	cpc	r25, r18
    67ae:	d9 f1       	breq	.+118    	; 0x6826 <localization_init+0xde>
    67b0:	86 36       	cpi	r24, 0x66	; 102
    67b2:	2c e6       	ldi	r18, 0x6C	; 108
    67b4:	92 07       	cpc	r25, r18
    67b6:	c9 f1       	breq	.+114    	; 0x682a <localization_init+0xe2>
    67b8:	89 36       	cpi	r24, 0x69	; 105
    67ba:	96 49       	sbci	r25, 0x96	; 150
    67bc:	09 f0       	breq	.+2      	; 0x67c0 <localization_init+0x78>
    67be:	08 95       	ret
    67c0:	83 e0       	ldi	r24, 0x03	; 3
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	21 e0       	ldi	r18, 0x01	; 1
    67c6:	20 93 7d 28 	sts	0x287D, r18	; 0x80287d <seedFlag>
    67ca:	fc 01       	movw	r30, r24
    67cc:	ee 0f       	add	r30, r30
    67ce:	ff 1f       	adc	r31, r31
    67d0:	e8 0f       	add	r30, r24
    67d2:	f9 1f       	adc	r31, r25
    67d4:	ee 0f       	add	r30, r30
    67d6:	ff 1f       	adc	r31, r31
    67d8:	ed 57       	subi	r30, 0x7D	; 125
    67da:	fd 4d       	sbci	r31, 0xDD	; 221
    67dc:	80 81       	ld	r24, Z
    67de:	91 81       	ldd	r25, Z+1	; 0x01
    67e0:	80 93 34 2a 	sts	0x2A34, r24	; 0x802a34 <myPos>
    67e4:	90 93 35 2a 	sts	0x2A35, r25	; 0x802a35 <myPos+0x1>
    67e8:	82 81       	ldd	r24, Z+2	; 0x02
    67ea:	93 81       	ldd	r25, Z+3	; 0x03
    67ec:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <myPos+0x2>
    67f0:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <myPos+0x3>
    67f4:	84 81       	ldd	r24, Z+4	; 0x04
    67f6:	95 81       	ldd	r25, Z+5	; 0x05
    67f8:	80 93 38 2a 	sts	0x2A38, r24	; 0x802a38 <myPos+0x4>
    67fc:	90 93 39 2a 	sts	0x2A39, r25	; 0x802a39 <myPos+0x5>
    6800:	81 e0       	ldi	r24, 0x01	; 1
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	80 93 a2 26 	sts	0x26A2, r24	; 0x8026a2 <myPosCovar>
    6808:	90 93 a3 26 	sts	0x26A3, r25	; 0x8026a3 <myPosCovar+0x1>
    680c:	80 93 a8 26 	sts	0x26A8, r24	; 0x8026a8 <myPosCovar+0x6>
    6810:	90 93 a9 26 	sts	0x26A9, r25	; 0x8026a9 <myPosCovar+0x7>
    6814:	80 e1       	ldi	r24, 0x10	; 16
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	80 93 ac 26 	sts	0x26AC, r24	; 0x8026ac <myPosCovar+0xa>
    681c:	90 93 ad 26 	sts	0x26AD, r25	; 0x8026ad <myPosCovar+0xb>
    6820:	08 95       	ret
    6822:	80 e0       	ldi	r24, 0x00	; 0
    6824:	ce cf       	rjmp	.-100    	; 0x67c2 <localization_init+0x7a>
    6826:	81 e0       	ldi	r24, 0x01	; 1
    6828:	cc cf       	rjmp	.-104    	; 0x67c2 <localization_init+0x7a>
    682a:	82 e0       	ldi	r24, 0x02	; 2
    682c:	ca cf       	rjmp	.-108    	; 0x67c2 <localization_init+0x7a>

0000682e <useRNBmeas>:
/*
 * This function takes a measurement of another droplet and computes an estimated position for that
 * droplet based on this droplet's position and position covariance, and the measurement.
 * It then prepares a message to be sent to the measured droplet, conveying this information.
 */
void useRNBmeas(id_t id, uint16_t r, int16_t b, int16_t h){
    682e:	2f 92       	push	r2
    6830:	3f 92       	push	r3
    6832:	4f 92       	push	r4
    6834:	5f 92       	push	r5
    6836:	6f 92       	push	r6
    6838:	7f 92       	push	r7
    683a:	8f 92       	push	r8
    683c:	9f 92       	push	r9
    683e:	af 92       	push	r10
    6840:	bf 92       	push	r11
    6842:	cf 92       	push	r12
    6844:	df 92       	push	r13
    6846:	ef 92       	push	r14
    6848:	ff 92       	push	r15
    684a:	0f 93       	push	r16
    684c:	1f 93       	push	r17
    684e:	cf 93       	push	r28
    6850:	df 93       	push	r29
    6852:	cd b7       	in	r28, 0x3d	; 61
    6854:	de b7       	in	r29, 0x3e	; 62
    6856:	cc 53       	subi	r28, 0x3C	; 60
    6858:	d1 40       	sbci	r29, 0x01	; 1
    685a:	cd bf       	out	0x3d, r28	; 61
    685c:	de bf       	out	0x3e, r29	; 62
    685e:	3c 01       	movw	r6, r24
    6860:	6b 01       	movw	r12, r22
    6862:	7a 01       	movw	r14, r20
    6864:	89 01       	movw	r16, r18
	if(!POS_DEFINED(&myPos)){
    6866:	60 91 34 2a 	lds	r22, 0x2A34	; 0x802a34 <myPos>
    686a:	70 91 35 2a 	lds	r23, 0x2A35	; 0x802a35 <myPos+0x1>
    686e:	61 15       	cp	r22, r1
    6870:	20 e8       	ldi	r18, 0x80	; 128
    6872:	72 07       	cpc	r23, r18
    6874:	09 f4       	brne	.+2      	; 0x6878 <useRNBmeas+0x4a>
    6876:	af c3       	rjmp	.+1886   	; 0x6fd6 <useRNBmeas+0x7a8>
    6878:	a0 90 36 2a 	lds	r10, 0x2A36	; 0x802a36 <myPos+0x2>
    687c:	b0 90 37 2a 	lds	r11, 0x2A37	; 0x802a37 <myPos+0x3>
    6880:	a1 14       	cp	r10, r1
    6882:	30 e8       	ldi	r19, 0x80	; 128
    6884:	b3 06       	cpc	r11, r19
    6886:	09 f4       	brne	.+2      	; 0x688a <useRNBmeas+0x5c>
    6888:	a6 c3       	rjmp	.+1868   	; 0x6fd6 <useRNBmeas+0x7a8>
    688a:	80 90 38 2a 	lds	r8, 0x2A38	; 0x802a38 <myPos+0x4>
    688e:	90 90 39 2a 	lds	r9, 0x2A39	; 0x802a39 <myPos+0x5>
    6892:	81 14       	cp	r8, r1
    6894:	80 e8       	ldi	r24, 0x80	; 128
    6896:	98 06       	cpc	r9, r24
    6898:	09 f4       	brne	.+2      	; 0x689c <useRNBmeas+0x6e>
    689a:	9d c3       	rjmp	.+1850   	; 0x6fd6 <useRNBmeas+0x7a8>
		POS_CALC_DEBUG_PRINT("Can't adjust others' positions until I know where I am.\r\n");
		return;
	}
	Vector x_me = {myPos.x, myPos.y, deg_to_rad(myPos.o)};
    689c:	07 2e       	mov	r0, r23
    689e:	00 0c       	add	r0, r0
    68a0:	88 0b       	sbc	r24, r24
    68a2:	99 0b       	sbc	r25, r25
    68a4:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    68a8:	c3 5d       	subi	r28, 0xD3	; 211
    68aa:	de 4f       	sbci	r29, 0xFE	; 254
    68ac:	68 83       	st	Y, r22
    68ae:	79 83       	std	Y+1, r23	; 0x01
    68b0:	8a 83       	std	Y+2, r24	; 0x02
    68b2:	9b 83       	std	Y+3, r25	; 0x03
    68b4:	cd 52       	subi	r28, 0x2D	; 45
    68b6:	d1 40       	sbci	r29, 0x01	; 1
    68b8:	b5 01       	movw	r22, r10
    68ba:	bb 0c       	add	r11, r11
    68bc:	88 0b       	sbc	r24, r24
    68be:	99 0b       	sbc	r25, r25
    68c0:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    68c4:	cf 5c       	subi	r28, 0xCF	; 207
    68c6:	de 4f       	sbci	r29, 0xFE	; 254
    68c8:	68 83       	st	Y, r22
    68ca:	79 83       	std	Y+1, r23	; 0x01
    68cc:	8a 83       	std	Y+2, r24	; 0x02
    68ce:	9b 83       	std	Y+3, r25	; 0x03
    68d0:	c1 53       	subi	r28, 0x31	; 49
    68d2:	d1 40       	sbci	r29, 0x01	; 1
inline float rad_to_deg(float rad){
	return (pretty_angle(rad) / M_PI) * 180;
}

inline float deg_to_rad(float deg){
	return pretty_angle( (deg / 180) * M_PI );
    68d4:	b4 01       	movw	r22, r8
    68d6:	99 0c       	add	r9, r9
    68d8:	88 0b       	sbc	r24, r24
    68da:	99 0b       	sbc	r25, r25
    68dc:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    68e0:	20 e0       	ldi	r18, 0x00	; 0
    68e2:	30 e0       	ldi	r19, 0x00	; 0
    68e4:	44 e3       	ldi	r20, 0x34	; 52
    68e6:	53 e4       	ldi	r21, 0x43	; 67
    68e8:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    68ec:	2b ed       	ldi	r18, 0xDB	; 219
    68ee:	3f e0       	ldi	r19, 0x0F	; 15
    68f0:	49 e4       	ldi	r20, 0x49	; 73
    68f2:	50 e4       	ldi	r21, 0x40	; 64
    68f4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    68f8:	4b 01       	movw	r8, r22
    68fa:	5c 01       	movw	r10, r24
inline int16_t pretty_angle_deg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float pretty_angle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    68fc:	20 e0       	ldi	r18, 0x00	; 0
    68fe:	30 e0       	ldi	r19, 0x00	; 0
    6900:	a9 01       	movw	r20, r18
    6902:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6906:	2b ed       	ldi	r18, 0xDB	; 219
    6908:	3f e0       	ldi	r19, 0x0F	; 15
    690a:	49 e4       	ldi	r20, 0x49	; 73
    690c:	50 e4       	ldi	r21, 0x40	; 64
    690e:	87 fd       	sbrc	r24, 7
    6910:	6b c3       	rjmp	.+1750   	; 0x6fe8 <useRNBmeas+0x7ba>
    6912:	c5 01       	movw	r24, r10
    6914:	b4 01       	movw	r22, r8
    6916:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    691a:	2b ed       	ldi	r18, 0xDB	; 219
    691c:	3f e0       	ldi	r19, 0x0F	; 15
    691e:	49 ec       	ldi	r20, 0xC9	; 201
    6920:	50 e4       	ldi	r21, 0x40	; 64
    6922:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    6926:	2b ed       	ldi	r18, 0xDB	; 219
    6928:	3f e0       	ldi	r19, 0x0F	; 15
    692a:	49 e4       	ldi	r20, 0x49	; 73
    692c:	50 e4       	ldi	r21, 0x40	; 64
    692e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6932:	cb 5c       	subi	r28, 0xCB	; 203
    6934:	de 4f       	sbci	r29, 0xFE	; 254
    6936:	68 83       	st	Y, r22
    6938:	79 83       	std	Y+1, r23	; 0x01
    693a:	8a 83       	std	Y+2, r24	; 0x02
    693c:	9b 83       	std	Y+3, r25	; 0x03
    693e:	c5 53       	subi	r28, 0x35	; 53
    6940:	d1 40       	sbci	r29, 0x01	; 1
	Vector meas = {r, deg_to_rad(b+90), deg_to_rad(h+90)};
    6942:	b6 01       	movw	r22, r12
    6944:	80 e0       	ldi	r24, 0x00	; 0
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    694c:	cf 5d       	subi	r28, 0xDF	; 223
    694e:	de 4f       	sbci	r29, 0xFE	; 254
    6950:	68 83       	st	Y, r22
    6952:	79 83       	std	Y+1, r23	; 0x01
    6954:	8a 83       	std	Y+2, r24	; 0x02
    6956:	9b 83       	std	Y+3, r25	; 0x03
    6958:	c1 52       	subi	r28, 0x21	; 33
    695a:	d1 40       	sbci	r29, 0x01	; 1
inline float rad_to_deg(float rad){
	return (pretty_angle(rad) / M_PI) * 180;
}

inline float deg_to_rad(float deg){
	return pretty_angle( (deg / 180) * M_PI );
    695c:	f7 01       	movw	r30, r14
    695e:	e6 5a       	subi	r30, 0xA6	; 166
    6960:	ff 4f       	sbci	r31, 0xFF	; 255
    6962:	c7 5c       	subi	r28, 0xC7	; 199
    6964:	de 4f       	sbci	r29, 0xFE	; 254
    6966:	e8 83       	st	Y, r30
    6968:	f9 83       	std	Y+1, r31	; 0x01
    696a:	c9 53       	subi	r28, 0x39	; 57
    696c:	d1 40       	sbci	r29, 0x01	; 1
    696e:	bf 01       	movw	r22, r30
    6970:	ff 0f       	add	r31, r31
    6972:	88 0b       	sbc	r24, r24
    6974:	99 0b       	sbc	r25, r25
    6976:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    697a:	20 e0       	ldi	r18, 0x00	; 0
    697c:	30 e0       	ldi	r19, 0x00	; 0
    697e:	44 e3       	ldi	r20, 0x34	; 52
    6980:	53 e4       	ldi	r21, 0x43	; 67
    6982:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    6986:	2b ed       	ldi	r18, 0xDB	; 219
    6988:	3f e0       	ldi	r19, 0x0F	; 15
    698a:	49 e4       	ldi	r20, 0x49	; 73
    698c:	50 e4       	ldi	r21, 0x40	; 64
    698e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6992:	4b 01       	movw	r8, r22
    6994:	5c 01       	movw	r10, r24
inline int16_t pretty_angle_deg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float pretty_angle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    6996:	20 e0       	ldi	r18, 0x00	; 0
    6998:	30 e0       	ldi	r19, 0x00	; 0
    699a:	a9 01       	movw	r20, r18
    699c:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    69a0:	2b ed       	ldi	r18, 0xDB	; 219
    69a2:	3f e0       	ldi	r19, 0x0F	; 15
    69a4:	49 e4       	ldi	r20, 0x49	; 73
    69a6:	50 e4       	ldi	r21, 0x40	; 64
    69a8:	87 fd       	sbrc	r24, 7
    69aa:	5a c3       	rjmp	.+1716   	; 0x7060 <useRNBmeas+0x832>
    69ac:	c5 01       	movw	r24, r10
    69ae:	b4 01       	movw	r22, r8
    69b0:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    69b4:	2b ed       	ldi	r18, 0xDB	; 219
    69b6:	3f e0       	ldi	r19, 0x0F	; 15
    69b8:	49 ec       	ldi	r20, 0xC9	; 201
    69ba:	50 e4       	ldi	r21, 0x40	; 64
    69bc:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    69c0:	2b ed       	ldi	r18, 0xDB	; 219
    69c2:	3f e0       	ldi	r19, 0x0F	; 15
    69c4:	49 e4       	ldi	r20, 0x49	; 73
    69c6:	50 e4       	ldi	r21, 0x40	; 64
    69c8:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    69cc:	cb 5d       	subi	r28, 0xDB	; 219
    69ce:	de 4f       	sbci	r29, 0xFE	; 254
    69d0:	68 83       	st	Y, r22
    69d2:	79 83       	std	Y+1, r23	; 0x01
    69d4:	8a 83       	std	Y+2, r24	; 0x02
    69d6:	9b 83       	std	Y+3, r25	; 0x03
    69d8:	c5 52       	subi	r28, 0x25	; 37
    69da:	d1 40       	sbci	r29, 0x01	; 1
inline float rad_to_deg(float rad){
	return (pretty_angle(rad) / M_PI) * 180;
}

inline float deg_to_rad(float deg){
	return pretty_angle( (deg / 180) * M_PI );
    69dc:	b8 01       	movw	r22, r16
    69de:	66 5a       	subi	r22, 0xA6	; 166
    69e0:	7f 4f       	sbci	r23, 0xFF	; 255
    69e2:	07 2e       	mov	r0, r23
    69e4:	00 0c       	add	r0, r0
    69e6:	88 0b       	sbc	r24, r24
    69e8:	99 0b       	sbc	r25, r25
    69ea:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    69ee:	20 e0       	ldi	r18, 0x00	; 0
    69f0:	30 e0       	ldi	r19, 0x00	; 0
    69f2:	44 e3       	ldi	r20, 0x34	; 52
    69f4:	53 e4       	ldi	r21, 0x43	; 67
    69f6:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    69fa:	2b ed       	ldi	r18, 0xDB	; 219
    69fc:	3f e0       	ldi	r19, 0x0F	; 15
    69fe:	49 e4       	ldi	r20, 0x49	; 73
    6a00:	50 e4       	ldi	r21, 0x40	; 64
    6a02:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6a06:	4b 01       	movw	r8, r22
    6a08:	5c 01       	movw	r10, r24
inline int16_t pretty_angle_deg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float pretty_angle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    6a0a:	20 e0       	ldi	r18, 0x00	; 0
    6a0c:	30 e0       	ldi	r19, 0x00	; 0
    6a0e:	a9 01       	movw	r20, r18
    6a10:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6a14:	2b ed       	ldi	r18, 0xDB	; 219
    6a16:	3f e0       	ldi	r19, 0x0F	; 15
    6a18:	49 e4       	ldi	r20, 0x49	; 73
    6a1a:	50 e4       	ldi	r21, 0x40	; 64
    6a1c:	87 fd       	sbrc	r24, 7
    6a1e:	0f c3       	rjmp	.+1566   	; 0x703e <useRNBmeas+0x810>
    6a20:	c5 01       	movw	r24, r10
    6a22:	b4 01       	movw	r22, r8
    6a24:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6a28:	2b ed       	ldi	r18, 0xDB	; 219
    6a2a:	3f e0       	ldi	r19, 0x0F	; 15
    6a2c:	49 ec       	ldi	r20, 0xC9	; 201
    6a2e:	50 e4       	ldi	r21, 0x40	; 64
    6a30:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    6a34:	2b ed       	ldi	r18, 0xDB	; 219
    6a36:	3f e0       	ldi	r19, 0x0F	; 15
    6a38:	49 e4       	ldi	r20, 0x49	; 73
    6a3a:	50 e4       	ldi	r21, 0x40	; 64
    6a3c:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6a40:	c7 5d       	subi	r28, 0xD7	; 215
    6a42:	de 4f       	sbci	r29, 0xFE	; 254
    6a44:	68 83       	st	Y, r22
    6a46:	79 83       	std	Y+1, r23	; 0x01
    6a48:	8a 83       	std	Y+2, r24	; 0x02
    6a4a:	9b 83       	std	Y+3, r25	; 0x03
    6a4c:	c9 52       	subi	r28, 0x29	; 41
    6a4e:	d1 40       	sbci	r29, 0x01	; 1
	Matrix myP;
	decompressP(&myP, &myPosCovar);
    6a50:	62 ea       	ldi	r22, 0xA2	; 162
    6a52:	76 e2       	ldi	r23, 0x26	; 38
    6a54:	ce 01       	movw	r24, r28
    6a56:	87 52       	subi	r24, 0x27	; 39
    6a58:	9f 4f       	sbci	r25, 0xFF	; 255
    6a5a:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <decompressP>
    6a5e:	cb 5c       	subi	r28, 0xCB	; 203
    6a60:	de 4f       	sbci	r29, 0xFE	; 254
    6a62:	28 80       	ld	r2, Y
    6a64:	39 80       	ldd	r3, Y+1	; 0x01
    6a66:	4a 80       	ldd	r4, Y+2	; 0x02
    6a68:	5b 80       	ldd	r5, Y+3	; 0x03
    6a6a:	c5 53       	subi	r28, 0x35	; 53
    6a6c:	d1 40       	sbci	r29, 0x01	; 1
	matrixTimesVector(myPos, &G, &z);
	vectorAdd(myPos, &x_you, myPos);		
}

static void populateGammaMatrix(Matrix* G, Vector* pos){
	float cosO = cos((*pos)[2]);
    6a6e:	c2 01       	movw	r24, r4
    6a70:	b1 01       	movw	r22, r2
    6a72:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    6a76:	4b 01       	movw	r8, r22
    6a78:	5c 01       	movw	r10, r24
	float sinO = sin((*pos)[2]);
    6a7a:	c2 01       	movw	r24, r4
    6a7c:	b1 01       	movw	r22, r2
    6a7e:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
	(*G)[0][0] = cosO;    (*G)[0][1] = -sinO;    (*G)[0][2] = 0;
    6a82:	cb 54       	subi	r28, 0x4B	; 75
    6a84:	df 4f       	sbci	r29, 0xFF	; 255
    6a86:	88 82       	st	Y, r8
    6a88:	99 82       	std	Y+1, r9	; 0x01
    6a8a:	aa 82       	std	Y+2, r10	; 0x02
    6a8c:	bb 82       	std	Y+3, r11	; 0x03
    6a8e:	c5 5b       	subi	r28, 0xB5	; 181
    6a90:	d0 40       	sbci	r29, 0x00	; 0
    6a92:	9b 01       	movw	r18, r22
    6a94:	ac 01       	movw	r20, r24
    6a96:	50 58       	subi	r21, 0x80	; 128
    6a98:	c7 54       	subi	r28, 0x47	; 71
    6a9a:	df 4f       	sbci	r29, 0xFF	; 255
    6a9c:	28 83       	st	Y, r18
    6a9e:	39 83       	std	Y+1, r19	; 0x01
    6aa0:	4a 83       	std	Y+2, r20	; 0x02
    6aa2:	5b 83       	std	Y+3, r21	; 0x03
    6aa4:	c9 5b       	subi	r28, 0xB9	; 185
    6aa6:	d0 40       	sbci	r29, 0x00	; 0
    6aa8:	c3 54       	subi	r28, 0x43	; 67
    6aaa:	df 4f       	sbci	r29, 0xFF	; 255
    6aac:	18 82       	st	Y, r1
    6aae:	19 82       	std	Y+1, r1	; 0x01
    6ab0:	1a 82       	std	Y+2, r1	; 0x02
    6ab2:	1b 82       	std	Y+3, r1	; 0x03
    6ab4:	cd 5b       	subi	r28, 0xBD	; 189
    6ab6:	d0 40       	sbci	r29, 0x00	; 0
	(*G)[1][0] = sinO;    (*G)[1][1] =  cosO;    (*G)[1][2] = 0;
    6ab8:	cf 53       	subi	r28, 0x3F	; 63
    6aba:	df 4f       	sbci	r29, 0xFF	; 255
    6abc:	68 83       	st	Y, r22
    6abe:	79 83       	std	Y+1, r23	; 0x01
    6ac0:	8a 83       	std	Y+2, r24	; 0x02
    6ac2:	9b 83       	std	Y+3, r25	; 0x03
    6ac4:	c1 5c       	subi	r28, 0xC1	; 193
    6ac6:	d0 40       	sbci	r29, 0x00	; 0
    6ac8:	cb 53       	subi	r28, 0x3B	; 59
    6aca:	df 4f       	sbci	r29, 0xFF	; 255
    6acc:	88 82       	st	Y, r8
    6ace:	99 82       	std	Y+1, r9	; 0x01
    6ad0:	aa 82       	std	Y+2, r10	; 0x02
    6ad2:	bb 82       	std	Y+3, r11	; 0x03
    6ad4:	c5 5c       	subi	r28, 0xC5	; 197
    6ad6:	d0 40       	sbci	r29, 0x00	; 0
    6ad8:	c7 53       	subi	r28, 0x37	; 55
    6ada:	df 4f       	sbci	r29, 0xFF	; 255
    6adc:	18 82       	st	Y, r1
    6ade:	19 82       	std	Y+1, r1	; 0x01
    6ae0:	1a 82       	std	Y+2, r1	; 0x02
    6ae2:	1b 82       	std	Y+3, r1	; 0x03
    6ae4:	c9 5c       	subi	r28, 0xC9	; 201
    6ae6:	d0 40       	sbci	r29, 0x00	; 0
	(*G)[2][0] = 0;       (*G)[2][1] = 0;        (*G)[2][2] = 1;
    6ae8:	c3 53       	subi	r28, 0x33	; 51
    6aea:	df 4f       	sbci	r29, 0xFF	; 255
    6aec:	18 82       	st	Y, r1
    6aee:	19 82       	std	Y+1, r1	; 0x01
    6af0:	1a 82       	std	Y+2, r1	; 0x02
    6af2:	1b 82       	std	Y+3, r1	; 0x03
    6af4:	cd 5c       	subi	r28, 0xCD	; 205
    6af6:	d0 40       	sbci	r29, 0x00	; 0
    6af8:	cf 52       	subi	r28, 0x2F	; 47
    6afa:	df 4f       	sbci	r29, 0xFF	; 255
    6afc:	18 82       	st	Y, r1
    6afe:	19 82       	std	Y+1, r1	; 0x01
    6b00:	1a 82       	std	Y+2, r1	; 0x02
    6b02:	1b 82       	std	Y+3, r1	; 0x03
    6b04:	c1 5d       	subi	r28, 0xD1	; 209
    6b06:	d0 40       	sbci	r29, 0x00	; 0
    6b08:	81 2c       	mov	r8, r1
    6b0a:	91 2c       	mov	r9, r1
    6b0c:	40 e8       	ldi	r20, 0x80	; 128
    6b0e:	a4 2e       	mov	r10, r20
    6b10:	4f e3       	ldi	r20, 0x3F	; 63
    6b12:	b4 2e       	mov	r11, r20
    6b14:	cb 52       	subi	r28, 0x2B	; 43
    6b16:	df 4f       	sbci	r29, 0xFF	; 255
    6b18:	88 82       	st	Y, r8
    6b1a:	99 82       	std	Y+1, r9	; 0x01
    6b1c:	aa 82       	std	Y+2, r10	; 0x02
    6b1e:	bb 82       	std	Y+3, r11	; 0x03
    6b20:	c5 5d       	subi	r28, 0xD5	; 213
    6b22:	d0 40       	sbci	r29, 0x00	; 0
	Matrix myP;
	decompressP(&myP, &myPosCovar);
	Matrix G;
	populateGammaMatrix(&G, &x_me);
	Matrix Gtp;
	matrixTranspose(&Gtp, &G);
    6b24:	be 01       	movw	r22, r28
    6b26:	6b 54       	subi	r22, 0x4B	; 75
    6b28:	7f 4f       	sbci	r23, 0xFF	; 255
    6b2a:	ce 01       	movw	r24, r28
    6b2c:	8f 56       	subi	r24, 0x6F	; 111
    6b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6b30:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <matrixTranspose>
	Vector z;
	calcRelativePose(&z, &meas);
    6b34:	be 01       	movw	r22, r28
    6b36:	6f 5d       	subi	r22, 0xDF	; 223
    6b38:	7e 4f       	sbci	r23, 0xFE	; 254
    6b3a:	ce 01       	movw	r24, r28
    6b3c:	8b 5e       	subi	r24, 0xEB	; 235
    6b3e:	9e 4f       	sbci	r25, 0xFE	; 254
    6b40:	0e 94 30 2c 	call	0x5860	; 0x5860 <calcRelativePose>
	Matrix R;
	getMeasCovar(&R, &meas);
    6b44:	41 e2       	ldi	r20, 0x21	; 33
    6b46:	51 e0       	ldi	r21, 0x01	; 1
    6b48:	4c 0f       	add	r20, r28
    6b4a:	5d 1f       	adc	r21, r29
    6b4c:	4c 5f       	subi	r20, 0xFC	; 252
    6b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b50:	be 01       	movw	r22, r28
    6b52:	6f 5d       	subi	r22, 0xDF	; 223
    6b54:	7e 4f       	sbci	r23, 0xFE	; 254
    6b56:	ce 01       	movw	r24, r28
    6b58:	83 59       	subi	r24, 0x93	; 147
    6b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b5c:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <getMeasCovar.isra.3>

	//yourX = myX + G.z
	Vector x_you;
	matrixTimesVector(&x_you, &G, &z);
    6b60:	ae 01       	movw	r20, r28
    6b62:	4b 5e       	subi	r20, 0xEB	; 235
    6b64:	5e 4f       	sbci	r21, 0xFE	; 254
    6b66:	be 01       	movw	r22, r28
    6b68:	6b 54       	subi	r22, 0x4B	; 75
    6b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b6c:	ce 01       	movw	r24, r28
    6b6e:	87 5f       	subi	r24, 0xF7	; 247
    6b70:	9e 4f       	sbci	r25, 0xFE	; 254
    6b72:	0e 94 1e 3b 	call	0x763c	; 0x763c <matrixTimesVector>
	vectorAdd(&x_you, &x_me, &x_you);
    6b76:	ae 01       	movw	r20, r28
    6b78:	47 5f       	subi	r20, 0xF7	; 247
    6b7a:	5e 4f       	sbci	r21, 0xFE	; 254
    6b7c:	be 01       	movw	r22, r28
    6b7e:	63 5d       	subi	r22, 0xD3	; 211
    6b80:	7e 4f       	sbci	r23, 0xFE	; 254
    6b82:	ca 01       	movw	r24, r20
    6b84:	0e 94 27 3a 	call	0x744e	; 0x744e <vectorAdd>
	(*G)[1][0] = sinO;    (*G)[1][1] =  cosO;    (*G)[1][2] = 0;
	(*G)[2][0] = 0;       (*G)[2][1] = 0;        (*G)[2][2] = 1;
}

static void populateHMatrix(Matrix* H, Vector* x_me, Vector* x_you){
	(*H)[0][0] = 1;    (*H)[0][1] = 0;    (*H)[0][2] = (*x_me)[1] - (*x_you)[1];
    6b88:	2d 96       	adiw	r28, 0x0d	; 13
    6b8a:	8c ae       	std	Y+60, r8	; 0x3c
    6b8c:	9d ae       	std	Y+61, r9	; 0x3d
    6b8e:	ae ae       	std	Y+62, r10	; 0x3e
    6b90:	bf ae       	std	Y+63, r11	; 0x3f
    6b92:	2d 97       	sbiw	r28, 0x0d	; 13
    6b94:	61 96       	adiw	r28, 0x11	; 17
    6b96:	1c ae       	std	Y+60, r1	; 0x3c
    6b98:	1d ae       	std	Y+61, r1	; 0x3d
    6b9a:	1e ae       	std	Y+62, r1	; 0x3e
    6b9c:	1f ae       	std	Y+63, r1	; 0x3f
    6b9e:	61 97       	sbiw	r28, 0x11	; 17
    6ba0:	c3 5f       	subi	r28, 0xF3	; 243
    6ba2:	de 4f       	sbci	r29, 0xFE	; 254
    6ba4:	28 81       	ld	r18, Y
    6ba6:	39 81       	ldd	r19, Y+1	; 0x01
    6ba8:	4a 81       	ldd	r20, Y+2	; 0x02
    6baa:	5b 81       	ldd	r21, Y+3	; 0x03
    6bac:	cd 50       	subi	r28, 0x0D	; 13
    6bae:	d1 40       	sbci	r29, 0x01	; 1
    6bb0:	cf 5c       	subi	r28, 0xCF	; 207
    6bb2:	de 4f       	sbci	r29, 0xFE	; 254
    6bb4:	68 81       	ld	r22, Y
    6bb6:	79 81       	ldd	r23, Y+1	; 0x01
    6bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    6bba:	9b 81       	ldd	r25, Y+3	; 0x03
    6bbc:	c1 53       	subi	r28, 0x31	; 49
    6bbe:	d1 40       	sbci	r29, 0x01	; 1
    6bc0:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6bc4:	65 96       	adiw	r28, 0x15	; 21
    6bc6:	6c af       	std	Y+60, r22	; 0x3c
    6bc8:	7d af       	std	Y+61, r23	; 0x3d
    6bca:	8e af       	std	Y+62, r24	; 0x3e
    6bcc:	9f af       	std	Y+63, r25	; 0x3f
    6bce:	65 97       	sbiw	r28, 0x15	; 21
	(*H)[1][0] = 0;    (*H)[1][1] = 1;    (*H)[1][2] = (*x_you)[0] - (*x_me)[0];
    6bd0:	69 96       	adiw	r28, 0x19	; 25
    6bd2:	1c ae       	std	Y+60, r1	; 0x3c
    6bd4:	1d ae       	std	Y+61, r1	; 0x3d
    6bd6:	1e ae       	std	Y+62, r1	; 0x3e
    6bd8:	1f ae       	std	Y+63, r1	; 0x3f
    6bda:	69 97       	sbiw	r28, 0x19	; 25
    6bdc:	6d 96       	adiw	r28, 0x1d	; 29
    6bde:	8c ae       	std	Y+60, r8	; 0x3c
    6be0:	9d ae       	std	Y+61, r9	; 0x3d
    6be2:	ae ae       	std	Y+62, r10	; 0x3e
    6be4:	bf ae       	std	Y+63, r11	; 0x3f
    6be6:	6d 97       	sbiw	r28, 0x1d	; 29
    6be8:	c3 5d       	subi	r28, 0xD3	; 211
    6bea:	de 4f       	sbci	r29, 0xFE	; 254
    6bec:	28 81       	ld	r18, Y
    6bee:	39 81       	ldd	r19, Y+1	; 0x01
    6bf0:	4a 81       	ldd	r20, Y+2	; 0x02
    6bf2:	5b 81       	ldd	r21, Y+3	; 0x03
    6bf4:	cd 52       	subi	r28, 0x2D	; 45
    6bf6:	d1 40       	sbci	r29, 0x01	; 1
    6bf8:	c7 5f       	subi	r28, 0xF7	; 247
    6bfa:	de 4f       	sbci	r29, 0xFE	; 254
    6bfc:	68 81       	ld	r22, Y
    6bfe:	79 81       	ldd	r23, Y+1	; 0x01
    6c00:	8a 81       	ldd	r24, Y+2	; 0x02
    6c02:	9b 81       	ldd	r25, Y+3	; 0x03
    6c04:	c9 50       	subi	r28, 0x09	; 9
    6c06:	d1 40       	sbci	r29, 0x01	; 1
    6c08:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6c0c:	a1 96       	adiw	r28, 0x21	; 33
    6c0e:	6c af       	std	Y+60, r22	; 0x3c
    6c10:	7d af       	std	Y+61, r23	; 0x3d
    6c12:	8e af       	std	Y+62, r24	; 0x3e
    6c14:	9f af       	std	Y+63, r25	; 0x3f
    6c16:	a1 97       	sbiw	r28, 0x21	; 33
	(*H)[2][0] = 0;    (*H)[2][1] = 0;    (*H)[2][2] = 1;
    6c18:	a5 96       	adiw	r28, 0x25	; 37
    6c1a:	1c ae       	std	Y+60, r1	; 0x3c
    6c1c:	1d ae       	std	Y+61, r1	; 0x3d
    6c1e:	1e ae       	std	Y+62, r1	; 0x3e
    6c20:	1f ae       	std	Y+63, r1	; 0x3f
    6c22:	a5 97       	sbiw	r28, 0x25	; 37
    6c24:	a9 96       	adiw	r28, 0x29	; 41
    6c26:	1c ae       	std	Y+60, r1	; 0x3c
    6c28:	1d ae       	std	Y+61, r1	; 0x3d
    6c2a:	1e ae       	std	Y+62, r1	; 0x3e
    6c2c:	1f ae       	std	Y+63, r1	; 0x3f
    6c2e:	a9 97       	sbiw	r28, 0x29	; 41
    6c30:	ad 96       	adiw	r28, 0x2d	; 45
    6c32:	8c ae       	std	Y+60, r8	; 0x3c
    6c34:	9d ae       	std	Y+61, r9	; 0x3d
    6c36:	ae ae       	std	Y+62, r10	; 0x3e
    6c38:	bf ae       	std	Y+63, r11	; 0x3f
    6c3a:	ad 97       	sbiw	r28, 0x2d	; 45
	populateHMatrix(&H, &x_me, &x_you);
	Matrix tmp;
	Matrix yourP;

	//yourP = H.myP.tp(H) + G.R.tp(G)
	matrixMultiply(&tmp, &G, &R);
    6c3c:	ae 01       	movw	r20, r28
    6c3e:	43 59       	subi	r20, 0x93	; 147
    6c40:	5f 4f       	sbci	r21, 0xFF	; 255
    6c42:	be 01       	movw	r22, r28
    6c44:	6b 54       	subi	r22, 0x4B	; 75
    6c46:	7f 4f       	sbci	r23, 0xFF	; 255
    6c48:	ce 01       	movw	r24, r28
    6c4a:	85 96       	adiw	r24, 0x25	; 37
    6c4c:	0e 94 c7 3b 	call	0x778e	; 0x778e <matrixMultiply>
	matrixMultiply(&yourP, &tmp, &Gtp); //now yourP is G.R.tp(G)
    6c50:	ae 01       	movw	r20, r28
    6c52:	4f 56       	subi	r20, 0x6F	; 111
    6c54:	5f 4f       	sbci	r21, 0xFF	; 255
    6c56:	be 01       	movw	r22, r28
    6c58:	6b 5d       	subi	r22, 0xDB	; 219
    6c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c5c:	ce 01       	movw	r24, r28
    6c5e:	01 96       	adiw	r24, 0x01	; 1
    6c60:	0e 94 c7 3b 	call	0x778e	; 0x778e <matrixMultiply>
	matrixMultiply(&tmp, &H, &myP);
    6c64:	ae 01       	movw	r20, r28
    6c66:	47 52       	subi	r20, 0x27	; 39
    6c68:	5f 4f       	sbci	r21, 0xFF	; 255
    6c6a:	be 01       	movw	r22, r28
    6c6c:	67 5b       	subi	r22, 0xB7	; 183
    6c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c70:	ce 01       	movw	r24, r28
    6c72:	85 96       	adiw	r24, 0x25	; 37
    6c74:	0e 94 c7 3b 	call	0x778e	; 0x778e <matrixMultiply>
	matrixInplaceTranspose(&H);
    6c78:	ce 01       	movw	r24, r28
    6c7a:	87 5b       	subi	r24, 0xB7	; 183
    6c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c7e:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <matrixInplaceTranspose>
	matrixInplaceMultiply(&tmp, &tmp, &H); //now tmp is H.myP.tp(H)
    6c82:	ae 01       	movw	r20, r28
    6c84:	47 5b       	subi	r20, 0xB7	; 183
    6c86:	5f 4f       	sbci	r21, 0xFF	; 255
    6c88:	be 01       	movw	r22, r28
    6c8a:	6b 5d       	subi	r22, 0xDB	; 219
    6c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c8e:	cb 01       	movw	r24, r22
    6c90:	0e 94 4e 3c 	call	0x789c	; 0x789c <matrixInplaceMultiply>
	matrixAdd(&yourP, &tmp, &yourP);
    6c94:	ae 01       	movw	r20, r28
    6c96:	4f 5f       	subi	r20, 0xFF	; 255
    6c98:	5f 4f       	sbci	r21, 0xFF	; 255
    6c9a:	be 01       	movw	r22, r28
    6c9c:	6b 5d       	subi	r22, 0xDB	; 219
    6c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    6ca0:	ca 01       	movw	r24, r20
    6ca2:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <matrixAdd>
	
	if(positiveDefiniteQ(&yourP)){
    6ca6:	ce 01       	movw	r24, r28
    6ca8:	01 96       	adiw	r24, 0x01	; 1
    6caa:	0e 94 40 49 	call	0x9280	; 0x9280 <positiveDefiniteQ>
    6cae:	88 23       	and	r24, r24
    6cb0:	09 f4       	brne	.+2      	; 0x6cb4 <useRNBmeas+0x486>
    6cb2:	7a c1       	rjmp	.+756    	; 0x6fa8 <useRNBmeas+0x77a>
		POS_CALC_DEBUG_PRINT("\t%04X @ {%6.1f, %6.1f, % 5.0f} from {% 4d, % 4d, % 4d}\r\n", id, x_you[0], x_you[1], (rad_to_deg(x_you[2]-M_PI_2)+0.5), r, b, h);
    6cb4:	2b ed       	ldi	r18, 0xDB	; 219
    6cb6:	3f e0       	ldi	r19, 0x0F	; 15
    6cb8:	49 ec       	ldi	r20, 0xC9	; 201
    6cba:	5f e3       	ldi	r21, 0x3F	; 63
    6cbc:	cf 5e       	subi	r28, 0xEF	; 239
    6cbe:	de 4f       	sbci	r29, 0xFE	; 254
    6cc0:	68 81       	ld	r22, Y
    6cc2:	79 81       	ldd	r23, Y+1	; 0x01
    6cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    6cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    6cc8:	c1 51       	subi	r28, 0x11	; 17
    6cca:	d1 40       	sbci	r29, 0x01	; 1
    6ccc:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6cd0:	4b 01       	movw	r8, r22
    6cd2:	5c 01       	movw	r10, r24
    6cd4:	20 e0       	ldi	r18, 0x00	; 0
    6cd6:	30 e0       	ldi	r19, 0x00	; 0
    6cd8:	a9 01       	movw	r20, r18
    6cda:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6cde:	2b ed       	ldi	r18, 0xDB	; 219
    6ce0:	3f e0       	ldi	r19, 0x0F	; 15
    6ce2:	49 e4       	ldi	r20, 0x49	; 73
    6ce4:	50 e4       	ldi	r21, 0x40	; 64
    6ce6:	87 fd       	sbrc	r24, 7
    6ce8:	d5 c1       	rjmp	.+938    	; 0x7094 <useRNBmeas+0x866>
    6cea:	c5 01       	movw	r24, r10
    6cec:	b4 01       	movw	r22, r8
    6cee:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6cf2:	2b ed       	ldi	r18, 0xDB	; 219
    6cf4:	3f e0       	ldi	r19, 0x0F	; 15
    6cf6:	49 ec       	ldi	r20, 0xC9	; 201
    6cf8:	50 e4       	ldi	r21, 0x40	; 64
    6cfa:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    6cfe:	2b ed       	ldi	r18, 0xDB	; 219
    6d00:	3f e0       	ldi	r19, 0x0F	; 15
    6d02:	49 e4       	ldi	r20, 0x49	; 73
    6d04:	50 e4       	ldi	r21, 0x40	; 64
    6d06:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6d0a:	1f 93       	push	r17
    6d0c:	0f 93       	push	r16
    6d0e:	ff 92       	push	r15
    6d10:	ef 92       	push	r14
    6d12:	df 92       	push	r13
    6d14:	cf 92       	push	r12
    6d16:	2b ed       	ldi	r18, 0xDB	; 219
    6d18:	3f e0       	ldi	r19, 0x0F	; 15
    6d1a:	49 e4       	ldi	r20, 0x49	; 73
    6d1c:	50 e4       	ldi	r21, 0x40	; 64
    6d1e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    6d22:	20 e0       	ldi	r18, 0x00	; 0
    6d24:	30 e0       	ldi	r19, 0x00	; 0
    6d26:	44 e3       	ldi	r20, 0x34	; 52
    6d28:	53 e4       	ldi	r21, 0x43	; 67
    6d2a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6d2e:	20 e0       	ldi	r18, 0x00	; 0
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	40 e0       	ldi	r20, 0x00	; 0
    6d34:	5f e3       	ldi	r21, 0x3F	; 63
    6d36:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6d3a:	9f 93       	push	r25
    6d3c:	8f 93       	push	r24
    6d3e:	7f 93       	push	r23
    6d40:	6f 93       	push	r22
    6d42:	c0 5f       	subi	r28, 0xF0	; 240
    6d44:	de 4f       	sbci	r29, 0xFE	; 254
    6d46:	88 81       	ld	r24, Y
    6d48:	c0 51       	subi	r28, 0x10	; 16
    6d4a:	d1 40       	sbci	r29, 0x01	; 1
    6d4c:	8f 93       	push	r24
    6d4e:	c1 5f       	subi	r28, 0xF1	; 241
    6d50:	de 4f       	sbci	r29, 0xFE	; 254
    6d52:	88 81       	ld	r24, Y
    6d54:	cf 50       	subi	r28, 0x0F	; 15
    6d56:	d1 40       	sbci	r29, 0x01	; 1
    6d58:	8f 93       	push	r24
    6d5a:	c2 5f       	subi	r28, 0xF2	; 242
    6d5c:	de 4f       	sbci	r29, 0xFE	; 254
    6d5e:	88 81       	ld	r24, Y
    6d60:	ce 50       	subi	r28, 0x0E	; 14
    6d62:	d1 40       	sbci	r29, 0x01	; 1
    6d64:	8f 93       	push	r24
    6d66:	c3 5f       	subi	r28, 0xF3	; 243
    6d68:	de 4f       	sbci	r29, 0xFE	; 254
    6d6a:	88 81       	ld	r24, Y
    6d6c:	cd 50       	subi	r28, 0x0D	; 13
    6d6e:	d1 40       	sbci	r29, 0x01	; 1
    6d70:	8f 93       	push	r24
    6d72:	c4 5f       	subi	r28, 0xF4	; 244
    6d74:	de 4f       	sbci	r29, 0xFE	; 254
    6d76:	88 81       	ld	r24, Y
    6d78:	cc 50       	subi	r28, 0x0C	; 12
    6d7a:	d1 40       	sbci	r29, 0x01	; 1
    6d7c:	8f 93       	push	r24
    6d7e:	c5 5f       	subi	r28, 0xF5	; 245
    6d80:	de 4f       	sbci	r29, 0xFE	; 254
    6d82:	88 81       	ld	r24, Y
    6d84:	cb 50       	subi	r28, 0x0B	; 11
    6d86:	d1 40       	sbci	r29, 0x01	; 1
    6d88:	8f 93       	push	r24
    6d8a:	c6 5f       	subi	r28, 0xF6	; 246
    6d8c:	de 4f       	sbci	r29, 0xFE	; 254
    6d8e:	88 81       	ld	r24, Y
    6d90:	ca 50       	subi	r28, 0x0A	; 10
    6d92:	d1 40       	sbci	r29, 0x01	; 1
    6d94:	8f 93       	push	r24
    6d96:	c7 5f       	subi	r28, 0xF7	; 247
    6d98:	de 4f       	sbci	r29, 0xFE	; 254
    6d9a:	88 81       	ld	r24, Y
    6d9c:	c9 50       	subi	r28, 0x09	; 9
    6d9e:	d1 40       	sbci	r29, 0x01	; 1
    6da0:	8f 93       	push	r24
    6da2:	7f 92       	push	r7
    6da4:	6f 92       	push	r6
    6da6:	80 e6       	ldi	r24, 0x60	; 96
    6da8:	99 e0       	ldi	r25, 0x09	; 9
    6daa:	9f 93       	push	r25
    6dac:	8f 93       	push	r24
    6dae:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		#if defined(POS_CALC_DEBUG_MODE) && defined(COVAR_DEBUG_MODE)
		POS_CALC_DEBUG_PRINT("Calc'd Covar:\r\n");
		printMatrixMathematica(&yourP);
		#endif
		BotPos pos;
		pos.x = x_you[0]>8191 ? 8191 : (x_you[0]<-8192 ? -8192 : x_you[0]);
    6db2:	c7 5f       	subi	r28, 0xF7	; 247
    6db4:	de 4f       	sbci	r29, 0xFE	; 254
    6db6:	88 80       	ld	r8, Y
    6db8:	99 80       	ldd	r9, Y+1	; 0x01
    6dba:	aa 80       	ldd	r10, Y+2	; 0x02
    6dbc:	bb 80       	ldd	r11, Y+3	; 0x03
    6dbe:	c9 50       	subi	r28, 0x09	; 9
    6dc0:	d1 40       	sbci	r29, 0x01	; 1
    6dc2:	cd bf       	out	0x3d, r28	; 61
    6dc4:	de bf       	out	0x3e, r29	; 62
    6dc6:	20 e0       	ldi	r18, 0x00	; 0
    6dc8:	38 ef       	ldi	r19, 0xF8	; 248
    6dca:	4f ef       	ldi	r20, 0xFF	; 255
    6dcc:	55 e4       	ldi	r21, 0x45	; 69
    6dce:	c5 01       	movw	r24, r10
    6dd0:	b4 01       	movw	r22, r8
    6dd2:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6dd6:	18 16       	cp	r1, r24
    6dd8:	0c f4       	brge	.+2      	; 0x6ddc <useRNBmeas+0x5ae>
    6dda:	17 c1       	rjmp	.+558    	; 0x700a <useRNBmeas+0x7dc>
    6ddc:	20 e0       	ldi	r18, 0x00	; 0
    6dde:	30 e0       	ldi	r19, 0x00	; 0
    6de0:	40 e0       	ldi	r20, 0x00	; 0
    6de2:	56 ec       	ldi	r21, 0xC6	; 198
    6de4:	c5 01       	movw	r24, r10
    6de6:	b4 01       	movw	r22, r8
    6de8:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    6dec:	87 fd       	sbrc	r24, 7
    6dee:	76 c1       	rjmp	.+748    	; 0x70dc <useRNBmeas+0x8ae>
    6df0:	c5 01       	movw	r24, r10
    6df2:	b4 01       	movw	r22, r8
    6df4:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    6df8:	1b 01       	movw	r2, r22
		pos.y = x_you[1]>8191 ? 8191 : (x_you[1]<-8192 ? -8192 : x_you[1]);
    6dfa:	c3 5f       	subi	r28, 0xF3	; 243
    6dfc:	de 4f       	sbci	r29, 0xFE	; 254
    6dfe:	88 80       	ld	r8, Y
    6e00:	99 80       	ldd	r9, Y+1	; 0x01
    6e02:	aa 80       	ldd	r10, Y+2	; 0x02
    6e04:	bb 80       	ldd	r11, Y+3	; 0x03
    6e06:	cd 50       	subi	r28, 0x0D	; 13
    6e08:	d1 40       	sbci	r29, 0x01	; 1
    6e0a:	20 e0       	ldi	r18, 0x00	; 0
    6e0c:	38 ef       	ldi	r19, 0xF8	; 248
    6e0e:	4f ef       	ldi	r20, 0xFF	; 255
    6e10:	55 e4       	ldi	r21, 0x45	; 69
    6e12:	c5 01       	movw	r24, r10
    6e14:	b4 01       	movw	r22, r8
    6e16:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6e1a:	18 16       	cp	r1, r24
    6e1c:	0c f4       	brge	.+2      	; 0x6e20 <useRNBmeas+0x5f2>
    6e1e:	31 c1       	rjmp	.+610    	; 0x7082 <useRNBmeas+0x854>
    6e20:	20 e0       	ldi	r18, 0x00	; 0
    6e22:	30 e0       	ldi	r19, 0x00	; 0
    6e24:	40 e0       	ldi	r20, 0x00	; 0
    6e26:	56 ec       	ldi	r21, 0xC6	; 198
    6e28:	c5 01       	movw	r24, r10
    6e2a:	b4 01       	movw	r22, r8
    6e2c:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    6e30:	87 fd       	sbrc	r24, 7
    6e32:	58 c1       	rjmp	.+688    	; 0x70e4 <useRNBmeas+0x8b6>
    6e34:	c5 01       	movw	r24, r10
    6e36:	b4 01       	movw	r22, r8
    6e38:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    6e3c:	c5 5c       	subi	r28, 0xC5	; 197
    6e3e:	de 4f       	sbci	r29, 0xFE	; 254
    6e40:	68 83       	st	Y, r22
    6e42:	79 83       	std	Y+1, r23	; 0x01
    6e44:	cb 53       	subi	r28, 0x3B	; 59
    6e46:	d1 40       	sbci	r29, 0x01	; 1
		pos.o = (rad_to_deg(x_you[2]-M_PI_2)+0.5);
    6e48:	2b ed       	ldi	r18, 0xDB	; 219
    6e4a:	3f e0       	ldi	r19, 0x0F	; 15
    6e4c:	49 ec       	ldi	r20, 0xC9	; 201
    6e4e:	5f e3       	ldi	r21, 0x3F	; 63
    6e50:	cf 5e       	subi	r28, 0xEF	; 239
    6e52:	de 4f       	sbci	r29, 0xFE	; 254
    6e54:	68 81       	ld	r22, Y
    6e56:	79 81       	ldd	r23, Y+1	; 0x01
    6e58:	8a 81       	ldd	r24, Y+2	; 0x02
    6e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    6e5c:	c1 51       	subi	r28, 0x11	; 17
    6e5e:	d1 40       	sbci	r29, 0x01	; 1
    6e60:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6e64:	4b 01       	movw	r8, r22
    6e66:	5c 01       	movw	r10, r24
    6e68:	20 e0       	ldi	r18, 0x00	; 0
    6e6a:	30 e0       	ldi	r19, 0x00	; 0
    6e6c:	a9 01       	movw	r20, r18
    6e6e:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    6e72:	2b ed       	ldi	r18, 0xDB	; 219
    6e74:	3f e0       	ldi	r19, 0x0F	; 15
    6e76:	49 e4       	ldi	r20, 0x49	; 73
    6e78:	50 e4       	ldi	r21, 0x40	; 64
    6e7a:	87 fd       	sbrc	r24, 7
    6e7c:	1c c1       	rjmp	.+568    	; 0x70b6 <useRNBmeas+0x888>
    6e7e:	c5 01       	movw	r24, r10
    6e80:	b4 01       	movw	r22, r8
    6e82:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6e86:	2b ed       	ldi	r18, 0xDB	; 219
    6e88:	3f e0       	ldi	r19, 0x0F	; 15
    6e8a:	49 ec       	ldi	r20, 0xC9	; 201
    6e8c:	50 e4       	ldi	r21, 0x40	; 64
    6e8e:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    6e92:	2b ed       	ldi	r18, 0xDB	; 219
    6e94:	3f e0       	ldi	r19, 0x0F	; 15
    6e96:	49 e4       	ldi	r20, 0x49	; 73
    6e98:	50 e4       	ldi	r21, 0x40	; 64
    6e9a:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6e9e:	4b 01       	movw	r8, r22
    6ea0:	5c 01       	movw	r10, r24
		DensePosCovar covar;
		compressP(&yourP, &covar);
    6ea2:	be 01       	movw	r22, r28
    6ea4:	63 50       	subi	r22, 0x03	; 3
    6ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ea8:	ce 01       	movw	r24, r28
    6eaa:	01 96       	adiw	r24, 0x01	; 1
    6eac:	0e 94 24 2a 	call	0x5448	; 0x5448 <compressP>
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6eb0:	5f b6       	in	r5, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6eb2:	f8 94       	cli
		tmp = malloc(size);
    6eb4:	89 e1       	ldi	r24, 0x19	; 25
    6eb6:	90 e0       	ldi	r25, 0x00	; 0
    6eb8:	0e 94 87 77 	call	0xef0e	; 0xef0e <malloc>
    6ebc:	8c 01       	movw	r16, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6ebe:	5f be       	out	0x3f, r5	; 63

//Takes all of the information needed for a botMeasMsg and packs it up in to a BotMeasMsgNode,
//then calls sendBotMeasMsg with it.
static void prepBotMeasMsg(id_t id, uint16_t r, int16_t b, BotPos* pos, DensePosCovar* covar){ //i: index in nearBots array.
	BotMeasMsgNode* mNode = (BotMeasMsgNode*)myMalloc(sizeof(BotMeasMsgNode));
	mNode->numTries = 0;
    6ec0:	fc 01       	movw	r30, r24
    6ec2:	10 8e       	std	Z+24, r1	; 0x18
	mNode->tgt = id;
    6ec4:	63 8a       	std	Z+19, r6	; 0x13
    6ec6:	74 8a       	std	Z+20, r7	; 0x14
	mNode->range = r;
    6ec8:	c5 8a       	std	Z+21, r12	; 0x15
    6eca:	d6 8a       	std	Z+22, r13	; 0x16
    6ecc:	97 01       	movw	r18, r14
    6ece:	2d 52       	subi	r18, 0x2D	; 45
    6ed0:	31 09       	sbc	r19, r1
    6ed2:	71 2c       	mov	r7, r1
inline int8_t sgn(float x){
	return (0<x)-(x<0);
}

inline int16_t pretty_angle_deg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
    6ed4:	88 e6       	ldi	r24, 0x68	; 104
    6ed6:	c8 2e       	mov	r12, r24
    6ed8:	dd 24       	eor	r13, r13
    6eda:	d3 94       	inc	r13
	mNode->dirMask = 0;
	for(int8_t j=-45;j<90;j+=45){
		mNode->dirMask |= 1<<dirFromAngle(pretty_angle_deg(b + j));
    6edc:	9c e3       	ldi	r25, 0x3C	; 60
    6ede:	e9 2e       	mov	r14, r25
    6ee0:	f1 2c       	mov	r15, r1
    6ee2:	e1 e0       	ldi	r30, 0x01	; 1
    6ee4:	f0 e0       	ldi	r31, 0x00	; 0
    6ee6:	c9 01       	movw	r24, r18
    6ee8:	37 fd       	sbrc	r19, 7
    6eea:	a1 c0       	rjmp	.+322    	; 0x702e <useRNBmeas+0x800>
    6eec:	8c 54       	subi	r24, 0x4C	; 76
    6eee:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef0:	b6 01       	movw	r22, r12
    6ef2:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    6ef6:	84 5b       	subi	r24, 0xB4	; 180
    6ef8:	91 09       	sbc	r25, r1
void	getPosColor(uint8_t* r, uint8_t* g, uint8_t* b);
void	printPosCovar(DensePosCovar* denseP);
void	sendBotMeasMsg(BotMeasMsgNode* mNode);

inline uint8_t dirFromAngle(int16_t angle){
	return abs((angle - (angle>0 ? 360 : 0))/60);
    6efa:	18 16       	cp	r1, r24
    6efc:	19 06       	cpc	r1, r25
    6efe:	0c f0       	brlt	.+2      	; 0x6f02 <useRNBmeas+0x6d4>
    6f00:	89 c0       	rjmp	.+274    	; 0x7014 <useRNBmeas+0x7e6>
    6f02:	48 e6       	ldi	r20, 0x68	; 104
    6f04:	51 e0       	ldi	r21, 0x01	; 1
    6f06:	84 1b       	sub	r24, r20
    6f08:	95 0b       	sbc	r25, r21
    6f0a:	b7 01       	movw	r22, r14
    6f0c:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    6f10:	77 fd       	sbrc	r23, 7
    6f12:	89 c0       	rjmp	.+274    	; 0x7026 <useRNBmeas+0x7f8>
    6f14:	cf 01       	movw	r24, r30
    6f16:	01 c0       	rjmp	.+2      	; 0x6f1a <useRNBmeas+0x6ec>
    6f18:	88 0f       	add	r24, r24
    6f1a:	6a 95       	dec	r22
    6f1c:	ea f7       	brpl	.-6      	; 0x6f18 <useRNBmeas+0x6ea>
    6f1e:	78 2a       	or	r7, r24
    6f20:	23 5d       	subi	r18, 0xD3	; 211
    6f22:	3f 4f       	sbci	r19, 0xFF	; 255
	BotMeasMsgNode* mNode = (BotMeasMsgNode*)myMalloc(sizeof(BotMeasMsgNode));
	mNode->numTries = 0;
	mNode->tgt = id;
	mNode->range = r;
	mNode->dirMask = 0;
	for(int8_t j=-45;j<90;j+=45){
    6f24:	c7 5c       	subi	r28, 0xC7	; 199
    6f26:	de 4f       	sbci	r29, 0xFE	; 254
    6f28:	88 81       	ld	r24, Y
    6f2a:	99 81       	ldd	r25, Y+1	; 0x01
    6f2c:	c9 53       	subi	r28, 0x39	; 57
    6f2e:	d1 40       	sbci	r29, 0x01	; 1
    6f30:	82 17       	cp	r24, r18
    6f32:	93 07       	cpc	r25, r19
    6f34:	c1 f6       	brne	.-80     	; 0x6ee6 <useRNBmeas+0x6b8>
    6f36:	f8 01       	movw	r30, r16
    6f38:	77 8a       	std	Z+23, r7	; 0x17
		mNode->dirMask |= 1<<dirFromAngle(pretty_angle_deg(b + j));
	}
	mNode->msg.flag = BOT_MEAS_MSG_FLAG;
    6f3a:	88 e5       	ldi	r24, 0x58	; 88
    6f3c:	82 8b       	std	Z+18, r24	; 0x12
	(mNode->msg).pos.x = pos->x;
    6f3e:	20 82       	st	Z, r2
    6f40:	31 82       	std	Z+1, r3	; 0x01
	(mNode->msg).pos.y = pos->y;
    6f42:	c5 5c       	subi	r28, 0xC5	; 197
    6f44:	de 4f       	sbci	r29, 0xFE	; 254
    6f46:	28 81       	ld	r18, Y
    6f48:	39 81       	ldd	r19, Y+1	; 0x01
    6f4a:	cb 53       	subi	r28, 0x3B	; 59
    6f4c:	d1 40       	sbci	r29, 0x01	; 1
    6f4e:	22 83       	std	Z+2, r18	; 0x02
    6f50:	33 83       	std	Z+3, r19	; 0x03
	(mNode->msg).pos.o = pos->o;
    6f52:	2b ed       	ldi	r18, 0xDB	; 219
    6f54:	3f e0       	ldi	r19, 0x0F	; 15
    6f56:	49 e4       	ldi	r20, 0x49	; 73
    6f58:	50 e4       	ldi	r21, 0x40	; 64
    6f5a:	c5 01       	movw	r24, r10
    6f5c:	b4 01       	movw	r22, r8
    6f5e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    6f62:	20 e0       	ldi	r18, 0x00	; 0
    6f64:	30 e0       	ldi	r19, 0x00	; 0
    6f66:	44 e3       	ldi	r20, 0x34	; 52
    6f68:	53 e4       	ldi	r21, 0x43	; 67
    6f6a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    6f6e:	20 e0       	ldi	r18, 0x00	; 0
    6f70:	30 e0       	ldi	r19, 0x00	; 0
    6f72:	40 e0       	ldi	r20, 0x00	; 0
    6f74:	5f e3       	ldi	r21, 0x3F	; 63
    6f76:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    6f7a:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    6f7e:	f8 01       	movw	r30, r16
    6f80:	64 83       	std	Z+4, r22	; 0x04
    6f82:	75 83       	std	Z+5, r23	; 0x05
    6f84:	fe 01       	movw	r30, r28
    6f86:	e3 50       	subi	r30, 0x03	; 3
    6f88:	ff 4f       	sbci	r31, 0xFF	; 255
    6f8a:	d8 01       	movw	r26, r16
    6f8c:	16 96       	adiw	r26, 0x06	; 6
    6f8e:	9f 01       	movw	r18, r30
    6f90:	24 5f       	subi	r18, 0xF4	; 244
    6f92:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t j=0;j<6;j++){
		(mNode->msg).covar[j].u =  (*covar)[j].u;
    6f94:	81 91       	ld	r24, Z+
    6f96:	91 91       	ld	r25, Z+
    6f98:	8d 93       	st	X+, r24
    6f9a:	9d 93       	st	X+, r25
	}
	mNode->msg.flag = BOT_MEAS_MSG_FLAG;
	(mNode->msg).pos.x = pos->x;
	(mNode->msg).pos.y = pos->y;
	(mNode->msg).pos.o = pos->o;
	for(uint8_t j=0;j<6;j++){
    6f9c:	2e 17       	cp	r18, r30
    6f9e:	3f 07       	cpc	r19, r31
    6fa0:	c9 f7       	brne	.-14     	; 0x6f94 <useRNBmeas+0x766>
		(mNode->msg).covar[j].u =  (*covar)[j].u;
	}
	sendBotMeasMsg(mNode);
    6fa2:	c8 01       	movw	r24, r16
    6fa4:	0e 94 a9 31 	call	0x6352	; 0x6352 <sendBotMeasMsg>
		pos.o = (rad_to_deg(x_you[2]-M_PI_2)+0.5);
		DensePosCovar covar;
		compressP(&yourP, &covar);
		prepBotMeasMsg(id, r, b, &pos, &covar);
	}
}
    6fa8:	c4 5c       	subi	r28, 0xC4	; 196
    6faa:	de 4f       	sbci	r29, 0xFE	; 254
    6fac:	cd bf       	out	0x3d, r28	; 61
    6fae:	de bf       	out	0x3e, r29	; 62
    6fb0:	df 91       	pop	r29
    6fb2:	cf 91       	pop	r28
    6fb4:	1f 91       	pop	r17
    6fb6:	0f 91       	pop	r16
    6fb8:	ff 90       	pop	r15
    6fba:	ef 90       	pop	r14
    6fbc:	df 90       	pop	r13
    6fbe:	cf 90       	pop	r12
    6fc0:	bf 90       	pop	r11
    6fc2:	af 90       	pop	r10
    6fc4:	9f 90       	pop	r9
    6fc6:	8f 90       	pop	r8
    6fc8:	7f 90       	pop	r7
    6fca:	6f 90       	pop	r6
    6fcc:	5f 90       	pop	r5
    6fce:	4f 90       	pop	r4
    6fd0:	3f 90       	pop	r3
    6fd2:	2f 90       	pop	r2
    6fd4:	08 95       	ret
 * droplet based on this droplet's position and position covariance, and the measurement.
 * It then prepares a message to be sent to the measured droplet, conveying this information.
 */
void useRNBmeas(id_t id, uint16_t r, int16_t b, int16_t h){
	if(!POS_DEFINED(&myPos)){
		POS_CALC_DEBUG_PRINT("Can't adjust others' positions until I know where I am.\r\n");
    6fd6:	89 e9       	ldi	r24, 0x99	; 153
    6fd8:	99 e0       	ldi	r25, 0x09	; 9
    6fda:	9f 93       	push	r25
    6fdc:	8f 93       	push	r24
    6fde:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		return;
    6fe2:	0f 90       	pop	r0
    6fe4:	0f 90       	pop	r0
    6fe6:	e0 cf       	rjmp	.-64     	; 0x6fa8 <useRNBmeas+0x77a>
}

inline float pretty_angle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    6fe8:	c5 01       	movw	r24, r10
    6fea:	b4 01       	movw	r22, r8
    6fec:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    6ff0:	2b ed       	ldi	r18, 0xDB	; 219
    6ff2:	3f e0       	ldi	r19, 0x0F	; 15
    6ff4:	49 ec       	ldi	r20, 0xC9	; 201
    6ff6:	50 e4       	ldi	r21, 0x40	; 64
    6ff8:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    6ffc:	2b ed       	ldi	r18, 0xDB	; 219
    6ffe:	3f e0       	ldi	r19, 0x0F	; 15
    7000:	49 e4       	ldi	r20, 0x49	; 73
    7002:	50 e4       	ldi	r21, 0x40	; 64
    7004:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7008:	94 cc       	rjmp	.-1752   	; 0x6932 <useRNBmeas+0x104>
		#if defined(POS_CALC_DEBUG_MODE) && defined(COVAR_DEBUG_MODE)
		POS_CALC_DEBUG_PRINT("Calc'd Covar:\r\n");
		printMatrixMathematica(&yourP);
		#endif
		BotPos pos;
		pos.x = x_you[0]>8191 ? 8191 : (x_you[0]<-8192 ? -8192 : x_you[0]);
    700a:	22 24       	eor	r2, r2
    700c:	2a 94       	dec	r2
    700e:	3f e1       	ldi	r19, 0x1F	; 31
    7010:	33 2e       	mov	r3, r19
    7012:	f3 ce       	rjmp	.-538    	; 0x6dfa <useRNBmeas+0x5cc>
    7014:	40 e0       	ldi	r20, 0x00	; 0
    7016:	50 e0       	ldi	r21, 0x00	; 0
	mNode->numTries = 0;
	mNode->tgt = id;
	mNode->range = r;
	mNode->dirMask = 0;
	for(int8_t j=-45;j<90;j+=45){
		mNode->dirMask |= 1<<dirFromAngle(pretty_angle_deg(b + j));
    7018:	84 1b       	sub	r24, r20
    701a:	95 0b       	sbc	r25, r21
    701c:	b7 01       	movw	r22, r14
    701e:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    7022:	77 ff       	sbrs	r23, 7
    7024:	77 cf       	rjmp	.-274    	; 0x6f14 <useRNBmeas+0x6e6>
    7026:	71 95       	neg	r23
    7028:	61 95       	neg	r22
    702a:	71 09       	sbc	r23, r1
    702c:	73 cf       	rjmp	.-282    	; 0x6f14 <useRNBmeas+0x6e6>
inline int8_t sgn(float x){
	return (0<x)-(x<0);
}

inline int16_t pretty_angle_deg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
    702e:	84 5b       	subi	r24, 0xB4	; 180
    7030:	91 09       	sbc	r25, r1
    7032:	b6 01       	movw	r22, r12
    7034:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    7038:	8c 54       	subi	r24, 0x4C	; 76
    703a:	9f 4f       	sbci	r25, 0xFF	; 255
    703c:	5e cf       	rjmp	.-324    	; 0x6efa <useRNBmeas+0x6cc>
}

inline float pretty_angle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    703e:	c5 01       	movw	r24, r10
    7040:	b4 01       	movw	r22, r8
    7042:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7046:	2b ed       	ldi	r18, 0xDB	; 219
    7048:	3f e0       	ldi	r19, 0x0F	; 15
    704a:	49 ec       	ldi	r20, 0xC9	; 201
    704c:	50 e4       	ldi	r21, 0x40	; 64
    704e:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    7052:	2b ed       	ldi	r18, 0xDB	; 219
    7054:	3f e0       	ldi	r19, 0x0F	; 15
    7056:	49 e4       	ldi	r20, 0x49	; 73
    7058:	50 e4       	ldi	r21, 0x40	; 64
    705a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    705e:	f0 cc       	rjmp	.-1568   	; 0x6a40 <useRNBmeas+0x212>
    7060:	c5 01       	movw	r24, r10
    7062:	b4 01       	movw	r22, r8
    7064:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7068:	2b ed       	ldi	r18, 0xDB	; 219
    706a:	3f e0       	ldi	r19, 0x0F	; 15
    706c:	49 ec       	ldi	r20, 0xC9	; 201
    706e:	50 e4       	ldi	r21, 0x40	; 64
    7070:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    7074:	2b ed       	ldi	r18, 0xDB	; 219
    7076:	3f e0       	ldi	r19, 0x0F	; 15
    7078:	49 e4       	ldi	r20, 0x49	; 73
    707a:	50 e4       	ldi	r21, 0x40	; 64
    707c:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7080:	a5 cc       	rjmp	.-1718   	; 0x69cc <useRNBmeas+0x19e>
		POS_CALC_DEBUG_PRINT("Calc'd Covar:\r\n");
		printMatrixMathematica(&yourP);
		#endif
		BotPos pos;
		pos.x = x_you[0]>8191 ? 8191 : (x_you[0]<-8192 ? -8192 : x_you[0]);
		pos.y = x_you[1]>8191 ? 8191 : (x_you[1]<-8192 ? -8192 : x_you[1]);
    7082:	8f ef       	ldi	r24, 0xFF	; 255
    7084:	9f e1       	ldi	r25, 0x1F	; 31
    7086:	c5 5c       	subi	r28, 0xC5	; 197
    7088:	de 4f       	sbci	r29, 0xFE	; 254
    708a:	88 83       	st	Y, r24
    708c:	99 83       	std	Y+1, r25	; 0x01
    708e:	cb 53       	subi	r28, 0x3B	; 59
    7090:	d1 40       	sbci	r29, 0x01	; 1
    7092:	da ce       	rjmp	.-588    	; 0x6e48 <useRNBmeas+0x61a>
    7094:	c5 01       	movw	r24, r10
    7096:	b4 01       	movw	r22, r8
    7098:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    709c:	2b ed       	ldi	r18, 0xDB	; 219
    709e:	3f e0       	ldi	r19, 0x0F	; 15
    70a0:	49 ec       	ldi	r20, 0xC9	; 201
    70a2:	50 e4       	ldi	r21, 0x40	; 64
    70a4:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    70a8:	2b ed       	ldi	r18, 0xDB	; 219
    70aa:	3f e0       	ldi	r19, 0x0F	; 15
    70ac:	49 e4       	ldi	r20, 0x49	; 73
    70ae:	50 e4       	ldi	r21, 0x40	; 64
    70b0:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    70b4:	2a ce       	rjmp	.-940    	; 0x6d0a <useRNBmeas+0x4dc>
    70b6:	c5 01       	movw	r24, r10
    70b8:	b4 01       	movw	r22, r8
    70ba:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    70be:	2b ed       	ldi	r18, 0xDB	; 219
    70c0:	3f e0       	ldi	r19, 0x0F	; 15
    70c2:	49 ec       	ldi	r20, 0xC9	; 201
    70c4:	50 e4       	ldi	r21, 0x40	; 64
    70c6:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    70ca:	2b ed       	ldi	r18, 0xDB	; 219
    70cc:	3f e0       	ldi	r19, 0x0F	; 15
    70ce:	49 e4       	ldi	r20, 0x49	; 73
    70d0:	50 e4       	ldi	r21, 0x40	; 64
    70d2:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    70d6:	4b 01       	movw	r8, r22
    70d8:	5c 01       	movw	r10, r24
    70da:	e3 ce       	rjmp	.-570    	; 0x6ea2 <useRNBmeas+0x674>
		#if defined(POS_CALC_DEBUG_MODE) && defined(COVAR_DEBUG_MODE)
		POS_CALC_DEBUG_PRINT("Calc'd Covar:\r\n");
		printMatrixMathematica(&yourP);
		#endif
		BotPos pos;
		pos.x = x_you[0]>8191 ? 8191 : (x_you[0]<-8192 ? -8192 : x_you[0]);
    70dc:	21 2c       	mov	r2, r1
    70de:	20 ee       	ldi	r18, 0xE0	; 224
    70e0:	32 2e       	mov	r3, r18
    70e2:	8b ce       	rjmp	.-746    	; 0x6dfa <useRNBmeas+0x5cc>
		pos.y = x_you[1]>8191 ? 8191 : (x_you[1]<-8192 ? -8192 : x_you[1]);
    70e4:	e0 e0       	ldi	r30, 0x00	; 0
    70e6:	f0 ee       	ldi	r31, 0xE0	; 224
    70e8:	c5 5c       	subi	r28, 0xC5	; 197
    70ea:	de 4f       	sbci	r29, 0xFE	; 254
    70ec:	e8 83       	st	Y, r30
    70ee:	f9 83       	std	Y+1, r31	; 0x01
    70f0:	cb 53       	subi	r28, 0x3B	; 59
    70f2:	d1 40       	sbci	r29, 0x01	; 1
    70f4:	a9 ce       	rjmp	.-686    	; 0x6e48 <useRNBmeas+0x61a>

000070f6 <handleBotMeasMsg>:
		mNode->numTries++;
	}

}

void handleBotMeasMsg(BotMeasMsg* msg, id_t senderID __attribute__ ((unused))){
    70f6:	cf 92       	push	r12
    70f8:	df 92       	push	r13
    70fa:	ef 92       	push	r14
    70fc:	ff 92       	push	r15
    70fe:	0f 93       	push	r16
    7100:	1f 93       	push	r17
    7102:	cf 93       	push	r28
    7104:	df 93       	push	r29
    7106:	cd b7       	in	r28, 0x3d	; 61
    7108:	de b7       	in	r29, 0x3e	; 62
    710a:	a4 97       	sbiw	r28, 0x24	; 36
    710c:	cd bf       	out	0x3d, r28	; 61
    710e:	de bf       	out	0x3e, r29	; 62
    7110:	8c 01       	movw	r16, r24
	if(seedFlag) return;
    7112:	90 91 7d 28 	lds	r25, 0x287D	; 0x80287d <seedFlag>
    7116:	91 11       	cpse	r25, r1
    7118:	46 c0       	rjmp	.+140    	; 0x71a6 <handleBotMeasMsg+0xb0>
    711a:	e7 2e       	mov	r14, r23
    711c:	f6 2e       	mov	r15, r22
	if(!POS_DEFINED(&(msg->pos))){
    711e:	f8 01       	movw	r30, r16
    7120:	80 81       	ld	r24, Z
    7122:	91 81       	ldd	r25, Z+1	; 0x01
    7124:	81 15       	cp	r24, r1
    7126:	90 48       	sbci	r25, 0x80	; 128
    7128:	09 f4       	brne	.+2      	; 0x712c <handleBotMeasMsg+0x36>
    712a:	49 c0       	rjmp	.+146    	; 0x71be <handleBotMeasMsg+0xc8>
    712c:	f8 01       	movw	r30, r16
    712e:	82 81       	ldd	r24, Z+2	; 0x02
    7130:	93 81       	ldd	r25, Z+3	; 0x03
    7132:	81 15       	cp	r24, r1
    7134:	90 48       	sbci	r25, 0x80	; 128
    7136:	09 f4       	brne	.+2      	; 0x713a <handleBotMeasMsg+0x44>
    7138:	42 c0       	rjmp	.+132    	; 0x71be <handleBotMeasMsg+0xc8>
    713a:	f8 01       	movw	r30, r16
    713c:	84 81       	ldd	r24, Z+4	; 0x04
    713e:	95 81       	ldd	r25, Z+5	; 0x05
    7140:	81 15       	cp	r24, r1
    7142:	90 48       	sbci	r25, 0x80	; 128
    7144:	e1 f1       	breq	.+120    	; 0x71be <handleBotMeasMsg+0xc8>
		MY_POS_DEBUG_PRINT("%04X sent me an undefined position.\r\n", senderID);
		return;
	}
	Matrix covar;
	decompressP(&covar, &(msg->covar));
    7146:	68 01       	movw	r12, r16
    7148:	26 e0       	ldi	r18, 0x06	; 6
    714a:	c2 0e       	add	r12, r18
    714c:	d1 1c       	adc	r13, r1
    714e:	b6 01       	movw	r22, r12
    7150:	ce 01       	movw	r24, r28
    7152:	01 96       	adiw	r24, 0x01	; 1
    7154:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <decompressP>
	if(!POS_DEFINED(&myPos)){
    7158:	80 91 34 2a 	lds	r24, 0x2A34	; 0x802a34 <myPos>
    715c:	90 91 35 2a 	lds	r25, 0x2A35	; 0x802a35 <myPos+0x1>
    7160:	81 15       	cp	r24, r1
    7162:	90 48       	sbci	r25, 0x80	; 128
    7164:	c9 f1       	breq	.+114    	; 0x71d8 <handleBotMeasMsg+0xe2>
    7166:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <myPos+0x2>
    716a:	90 91 37 2a 	lds	r25, 0x2A37	; 0x802a37 <myPos+0x3>
    716e:	81 15       	cp	r24, r1
    7170:	90 48       	sbci	r25, 0x80	; 128
    7172:	91 f1       	breq	.+100    	; 0x71d8 <handleBotMeasMsg+0xe2>
    7174:	80 91 38 2a 	lds	r24, 0x2A38	; 0x802a38 <myPos+0x4>
    7178:	90 91 39 2a 	lds	r25, 0x2A39	; 0x802a39 <myPos+0x5>
    717c:	81 15       	cp	r24, r1
    717e:	90 48       	sbci	r25, 0x80	; 128
    7180:	59 f1       	breq	.+86     	; 0x71d8 <handleBotMeasMsg+0xe2>
		#if defined(MY_POS_DEBUG_MODE) && defined(COVAR_DEBUG_MODE)
			MY_POS_DEBUG_PRINT("His Est Covar:\r\n");
			printMatrixMathematica(&covar);
		#endif
	}else{
		MY_POS_DEBUG_PRINT("%04X ", senderID);
    7182:	ef 92       	push	r14
    7184:	ff 92       	push	r15
    7186:	8e ea       	ldi	r24, 0xAE	; 174
    7188:	98 e0       	ldi	r25, 0x08	; 8
    718a:	9f 93       	push	r25
    718c:	8f 93       	push	r24
    718e:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		updatePos(&(msg->pos), &covar);
    7192:	be 01       	movw	r22, r28
    7194:	6f 5f       	subi	r22, 0xFF	; 255
    7196:	7f 4f       	sbci	r23, 0xFF	; 255
    7198:	c8 01       	movw	r24, r16
    719a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <updatePos>
    719e:	0f 90       	pop	r0
    71a0:	0f 90       	pop	r0
    71a2:	0f 90       	pop	r0
    71a4:	0f 90       	pop	r0
	}
}
    71a6:	a4 96       	adiw	r28, 0x24	; 36
    71a8:	cd bf       	out	0x3d, r28	; 61
    71aa:	de bf       	out	0x3e, r29	; 62
    71ac:	df 91       	pop	r29
    71ae:	cf 91       	pop	r28
    71b0:	1f 91       	pop	r17
    71b2:	0f 91       	pop	r16
    71b4:	ff 90       	pop	r15
    71b6:	ef 90       	pop	r14
    71b8:	df 90       	pop	r13
    71ba:	cf 90       	pop	r12
    71bc:	08 95       	ret
}

void handleBotMeasMsg(BotMeasMsg* msg, id_t senderID __attribute__ ((unused))){
	if(seedFlag) return;
	if(!POS_DEFINED(&(msg->pos))){
		MY_POS_DEBUG_PRINT("%04X sent me an undefined position.\r\n", senderID);
    71be:	ef 92       	push	r14
    71c0:	ff 92       	push	r15
    71c2:	8b ed       	ldi	r24, 0xDB	; 219
    71c4:	98 e0       	ldi	r25, 0x08	; 8
    71c6:	9f 93       	push	r25
    71c8:	8f 93       	push	r24
    71ca:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		return;
    71ce:	0f 90       	pop	r0
    71d0:	0f 90       	pop	r0
    71d2:	0f 90       	pop	r0
    71d4:	0f 90       	pop	r0
    71d6:	e7 cf       	rjmp	.-50     	; 0x71a6 <handleBotMeasMsg+0xb0>
	}
	Matrix covar;
	decompressP(&covar, &(msg->covar));
	if(!POS_DEFINED(&myPos)){
		MY_POS_DEBUG_PRINT("%04X initialized me to {%d, %d, %d}.\r\n", senderID, (msg->pos).x, (msg->pos).y, (msg->pos).o);
    71d8:	f8 01       	movw	r30, r16
    71da:	85 81       	ldd	r24, Z+5	; 0x05
    71dc:	8f 93       	push	r24
    71de:	84 81       	ldd	r24, Z+4	; 0x04
    71e0:	8f 93       	push	r24
    71e2:	83 81       	ldd	r24, Z+3	; 0x03
    71e4:	8f 93       	push	r24
    71e6:	82 81       	ldd	r24, Z+2	; 0x02
    71e8:	8f 93       	push	r24
    71ea:	81 81       	ldd	r24, Z+1	; 0x01
    71ec:	8f 93       	push	r24
    71ee:	80 81       	ld	r24, Z
    71f0:	8f 93       	push	r24
    71f2:	ef 92       	push	r14
    71f4:	ff 92       	push	r15
    71f6:	84 eb       	ldi	r24, 0xB4	; 180
    71f8:	98 e0       	ldi	r25, 0x08	; 8
    71fa:	9f 93       	push	r25
    71fc:	8f 93       	push	r24
    71fe:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		myPos.x = (msg->pos).x;
    7202:	f8 01       	movw	r30, r16
    7204:	80 81       	ld	r24, Z
    7206:	91 81       	ldd	r25, Z+1	; 0x01
    7208:	80 93 34 2a 	sts	0x2A34, r24	; 0x802a34 <myPos>
    720c:	90 93 35 2a 	sts	0x2A35, r25	; 0x802a35 <myPos+0x1>
		myPos.y = (msg->pos).y;
    7210:	82 81       	ldd	r24, Z+2	; 0x02
    7212:	93 81       	ldd	r25, Z+3	; 0x03
    7214:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <myPos+0x2>
    7218:	90 93 37 2a 	sts	0x2A37, r25	; 0x802a37 <myPos+0x3>
		myPos.o = (msg->pos).o;
    721c:	84 81       	ldd	r24, Z+4	; 0x04
    721e:	95 81       	ldd	r25, Z+5	; 0x05
    7220:	80 93 38 2a 	sts	0x2A38, r24	; 0x802a38 <myPos+0x4>
    7224:	90 93 39 2a 	sts	0x2A39, r25	; 0x802a39 <myPos+0x5>
    7228:	d6 01       	movw	r26, r12
    722a:	e2 ea       	ldi	r30, 0xA2	; 162
    722c:	f6 e2       	ldi	r31, 0x26	; 38
    722e:	cd bf       	out	0x3d, r28	; 61
    7230:	de bf       	out	0x3e, r29	; 62
		for(uint8_t i=0;i<6;i++){
			myPosCovar[i].u = msg->covar[i].u;
    7232:	8d 91       	ld	r24, X+
    7234:	9d 91       	ld	r25, X+
    7236:	81 93       	st	Z+, r24
    7238:	91 93       	st	Z+, r25
	if(!POS_DEFINED(&myPos)){
		MY_POS_DEBUG_PRINT("%04X initialized me to {%d, %d, %d}.\r\n", senderID, (msg->pos).x, (msg->pos).y, (msg->pos).o);
		myPos.x = (msg->pos).x;
		myPos.y = (msg->pos).y;
		myPos.o = (msg->pos).o;
		for(uint8_t i=0;i<6;i++){
    723a:	96 e2       	ldi	r25, 0x26	; 38
    723c:	ee 3a       	cpi	r30, 0xAE	; 174
    723e:	f9 07       	cpc	r31, r25
    7240:	c1 f7       	brne	.-16     	; 0x7232 <handleBotMeasMsg+0x13c>
    7242:	b1 cf       	rjmp	.-158    	; 0x71a6 <handleBotMeasMsg+0xb0>

00007244 <getPosColor>:
		secondTerm = 0;
	}
	return firstTerm - secondTerm;
}

void getPosColor(uint8_t* r, uint8_t* g, uint8_t* b){
    7244:	4f 92       	push	r4
    7246:	5f 92       	push	r5
    7248:	6f 92       	push	r6
    724a:	7f 92       	push	r7
    724c:	8f 92       	push	r8
    724e:	9f 92       	push	r9
    7250:	af 92       	push	r10
    7252:	bf 92       	push	r11
    7254:	cf 92       	push	r12
    7256:	df 92       	push	r13
    7258:	ef 92       	push	r14
    725a:	ff 92       	push	r15
    725c:	0f 93       	push	r16
    725e:	1f 93       	push	r17
    7260:	cf 93       	push	r28
    7262:	df 93       	push	r29
    7264:	dc 01       	movw	r26, r24
    7266:	fb 01       	movw	r30, r22
	if(POS_DEFINED(&myPos)){
    7268:	60 91 34 2a 	lds	r22, 0x2A34	; 0x802a34 <myPos>
    726c:	70 91 35 2a 	lds	r23, 0x2A35	; 0x802a35 <myPos+0x1>
    7270:	61 15       	cp	r22, r1
    7272:	20 e8       	ldi	r18, 0x80	; 128
    7274:	72 07       	cpc	r23, r18
    7276:	09 f4       	brne	.+2      	; 0x727a <getPosColor+0x36>
    7278:	66 c0       	rjmp	.+204    	; 0x7346 <getPosColor+0x102>
    727a:	c0 90 36 2a 	lds	r12, 0x2A36	; 0x802a36 <myPos+0x2>
    727e:	d0 90 37 2a 	lds	r13, 0x2A37	; 0x802a37 <myPos+0x3>
    7282:	c1 14       	cp	r12, r1
    7284:	80 e8       	ldi	r24, 0x80	; 128
    7286:	d8 06       	cpc	r13, r24
    7288:	09 f4       	brne	.+2      	; 0x728c <getPosColor+0x48>
    728a:	5d c0       	rjmp	.+186    	; 0x7346 <getPosColor+0x102>
    728c:	80 91 38 2a 	lds	r24, 0x2A38	; 0x802a38 <myPos+0x4>
    7290:	90 91 39 2a 	lds	r25, 0x2A39	; 0x802a39 <myPos+0x5>
    7294:	81 15       	cp	r24, r1
    7296:	90 48       	sbci	r25, 0x80	; 128
    7298:	09 f4       	brne	.+2      	; 0x729c <getPosColor+0x58>
    729a:	55 c0       	rjmp	.+170    	; 0x7346 <getPosColor+0x102>
    729c:	ea 01       	movw	r28, r20
    729e:	8f 01       	movw	r16, r30
    72a0:	7d 01       	movw	r14, r26
		int16_t xRange = MAX_X-MIN_X;
		int16_t yRange = MAX_Y-MIN_Y;
		int16_t xColVal = (int16_t)(6.0*pow(41.0,(myPos.x-MIN_X)/((float)xRange))+9.0);
    72a2:	07 2e       	mov	r0, r23
    72a4:	00 0c       	add	r0, r0
    72a6:	88 0b       	sbc	r24, r24
    72a8:	99 0b       	sbc	r25, r25
    72aa:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    72ae:	20 e0       	ldi	r18, 0x00	; 0
    72b0:	30 e0       	ldi	r19, 0x00	; 0
    72b2:	4a e7       	ldi	r20, 0x7A	; 122
    72b4:	53 e4       	ldi	r21, 0x43	; 67
    72b6:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    72ba:	9b 01       	movw	r18, r22
    72bc:	ac 01       	movw	r20, r24
    72be:	60 e0       	ldi	r22, 0x00	; 0
    72c0:	70 e0       	ldi	r23, 0x00	; 0
    72c2:	84 e2       	ldi	r24, 0x24	; 36
    72c4:	92 e4       	ldi	r25, 0x42	; 66
    72c6:	0e 94 51 76 	call	0xeca2	; 0xeca2 <pow>
    72ca:	4b 01       	movw	r8, r22
    72cc:	5c 01       	movw	r10, r24
		int16_t yColVal = (int16_t)(3.0*pow(84.0,(myPos.y-MIN_Y)/((float)yRange))+3.0);
    72ce:	b6 01       	movw	r22, r12
    72d0:	dd 0c       	add	r13, r13
    72d2:	88 0b       	sbc	r24, r24
    72d4:	99 0b       	sbc	r25, r25
    72d6:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    72da:	20 e0       	ldi	r18, 0x00	; 0
    72dc:	30 e0       	ldi	r19, 0x00	; 0
    72de:	4a e7       	ldi	r20, 0x7A	; 122
    72e0:	53 e4       	ldi	r21, 0x43	; 67
    72e2:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    72e6:	9b 01       	movw	r18, r22
    72e8:	ac 01       	movw	r20, r24
    72ea:	60 e0       	ldi	r22, 0x00	; 0
    72ec:	70 e0       	ldi	r23, 0x00	; 0
    72ee:	88 ea       	ldi	r24, 0xA8	; 168
    72f0:	92 e4       	ldi	r25, 0x42	; 66
    72f2:	0e 94 51 76 	call	0xeca2	; 0xeca2 <pow>
    72f6:	2b 01       	movw	r4, r22
    72f8:	3c 01       	movw	r6, r24
		*r = (uint8_t)(xColVal);
    72fa:	20 e0       	ldi	r18, 0x00	; 0
    72fc:	30 e0       	ldi	r19, 0x00	; 0
    72fe:	40 ec       	ldi	r20, 0xC0	; 192
    7300:	50 e4       	ldi	r21, 0x40	; 64
    7302:	c5 01       	movw	r24, r10
    7304:	b4 01       	movw	r22, r8
    7306:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    730a:	20 e0       	ldi	r18, 0x00	; 0
    730c:	30 e0       	ldi	r19, 0x00	; 0
    730e:	40 e1       	ldi	r20, 0x10	; 16
    7310:	51 e4       	ldi	r21, 0x41	; 65
    7312:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7316:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    731a:	f7 01       	movw	r30, r14
    731c:	60 83       	st	Z, r22
		*g = (uint8_t)(yColVal);
    731e:	20 e0       	ldi	r18, 0x00	; 0
    7320:	30 e0       	ldi	r19, 0x00	; 0
    7322:	40 e4       	ldi	r20, 0x40	; 64
    7324:	50 e4       	ldi	r21, 0x40	; 64
    7326:	c3 01       	movw	r24, r6
    7328:	b2 01       	movw	r22, r4
    732a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    732e:	20 e0       	ldi	r18, 0x00	; 0
    7330:	30 e0       	ldi	r19, 0x00	; 0
    7332:	40 e4       	ldi	r20, 0x40	; 64
    7334:	50 e4       	ldi	r21, 0x40	; 64
    7336:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    733a:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    733e:	f8 01       	movw	r30, r16
    7340:	60 83       	st	Z, r22
		*b = 0;
    7342:	18 82       	st	Y, r1
	}
	return firstTerm - secondTerm;
}

void getPosColor(uint8_t* r, uint8_t* g, uint8_t* b){
	if(POS_DEFINED(&myPos)){
    7344:	05 c0       	rjmp	.+10     	; 0x7350 <getPosColor+0x10c>
		int16_t yColVal = (int16_t)(3.0*pow(84.0,(myPos.y-MIN_Y)/((float)yRange))+3.0);
		*r = (uint8_t)(xColVal);
		*g = (uint8_t)(yColVal);
		*b = 0;
	}else{
		*r = 25;
    7346:	99 e1       	ldi	r25, 0x19	; 25
    7348:	9c 93       	st	X, r25
		*g = 25;
    734a:	90 83       	st	Z, r25
		*b = 25;
    734c:	fa 01       	movw	r30, r20
    734e:	90 83       	st	Z, r25
	}
}
    7350:	df 91       	pop	r29
    7352:	cf 91       	pop	r28
    7354:	1f 91       	pop	r17
    7356:	0f 91       	pop	r16
    7358:	ff 90       	pop	r15
    735a:	ef 90       	pop	r14
    735c:	df 90       	pop	r13
    735e:	cf 90       	pop	r12
    7360:	bf 90       	pop	r11
    7362:	af 90       	pop	r10
    7364:	9f 90       	pop	r9
    7366:	8f 90       	pop	r8
    7368:	7f 90       	pop	r7
    736a:	6f 90       	pop	r6
    736c:	5f 90       	pop	r5
    736e:	4f 90       	pop	r4
    7370:	08 95       	ret

00007372 <printPosCovar>:

void printPosCovar(DensePosCovar* denseP){
    7372:	cf 93       	push	r28
    7374:	df 93       	push	r29
    7376:	cd b7       	in	r28, 0x3d	; 61
    7378:	de b7       	in	r29, 0x3e	; 62
    737a:	a4 97       	sbiw	r28, 0x24	; 36
    737c:	cd bf       	out	0x3d, r28	; 61
    737e:	de bf       	out	0x3e, r29	; 62
	Matrix P;
	decompressP(&P, denseP);
    7380:	bc 01       	movw	r22, r24
    7382:	ce 01       	movw	r24, r28
    7384:	01 96       	adiw	r24, 0x01	; 1
    7386:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <decompressP>
	printf("\t{\r\n\t  {%7.1f, %7.1f, %7.3f},\r\n", P[0][0], P[0][1], P[0][2]);
    738a:	8c 85       	ldd	r24, Y+12	; 0x0c
    738c:	8f 93       	push	r24
    738e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7390:	8f 93       	push	r24
    7392:	8a 85       	ldd	r24, Y+10	; 0x0a
    7394:	8f 93       	push	r24
    7396:	89 85       	ldd	r24, Y+9	; 0x09
    7398:	8f 93       	push	r24
    739a:	88 85       	ldd	r24, Y+8	; 0x08
    739c:	8f 93       	push	r24
    739e:	8f 81       	ldd	r24, Y+7	; 0x07
    73a0:	8f 93       	push	r24
    73a2:	8e 81       	ldd	r24, Y+6	; 0x06
    73a4:	8f 93       	push	r24
    73a6:	8d 81       	ldd	r24, Y+5	; 0x05
    73a8:	8f 93       	push	r24
    73aa:	8c 81       	ldd	r24, Y+4	; 0x04
    73ac:	8f 93       	push	r24
    73ae:	8b 81       	ldd	r24, Y+3	; 0x03
    73b0:	8f 93       	push	r24
    73b2:	8a 81       	ldd	r24, Y+2	; 0x02
    73b4:	8f 93       	push	r24
    73b6:	89 81       	ldd	r24, Y+1	; 0x01
    73b8:	8f 93       	push	r24
    73ba:	88 ed       	ldi	r24, 0xD8	; 216
    73bc:	91 e2       	ldi	r25, 0x21	; 33
    73be:	9f 93       	push	r25
    73c0:	8f 93       	push	r24
    73c2:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
	printf("\t  {%7.1f, %7.1f, %7.3f},\r\n",	    P[1][0], P[1][1], P[1][2]);
    73c6:	88 8d       	ldd	r24, Y+24	; 0x18
    73c8:	8f 93       	push	r24
    73ca:	8f 89       	ldd	r24, Y+23	; 0x17
    73cc:	8f 93       	push	r24
    73ce:	8e 89       	ldd	r24, Y+22	; 0x16
    73d0:	8f 93       	push	r24
    73d2:	8d 89       	ldd	r24, Y+21	; 0x15
    73d4:	8f 93       	push	r24
    73d6:	8c 89       	ldd	r24, Y+20	; 0x14
    73d8:	8f 93       	push	r24
    73da:	8b 89       	ldd	r24, Y+19	; 0x13
    73dc:	8f 93       	push	r24
    73de:	8a 89       	ldd	r24, Y+18	; 0x12
    73e0:	8f 93       	push	r24
    73e2:	89 89       	ldd	r24, Y+17	; 0x11
    73e4:	8f 93       	push	r24
    73e6:	88 89       	ldd	r24, Y+16	; 0x10
    73e8:	8f 93       	push	r24
    73ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    73ec:	8f 93       	push	r24
    73ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    73f0:	8f 93       	push	r24
    73f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    73f4:	8f 93       	push	r24
    73f6:	8c ed       	ldi	r24, 0xDC	; 220
    73f8:	91 e2       	ldi	r25, 0x21	; 33
    73fa:	9f 93       	push	r25
    73fc:	8f 93       	push	r24
    73fe:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
	printf("\t  {%7.3f, %7.3f, %7.5f}\r\n\t}\r\n",  P[2][0], P[2][1], P[2][2]);
    7402:	8c a1       	ldd	r24, Y+36	; 0x24
    7404:	8f 93       	push	r24
    7406:	8b a1       	ldd	r24, Y+35	; 0x23
    7408:	8f 93       	push	r24
    740a:	8a a1       	ldd	r24, Y+34	; 0x22
    740c:	8f 93       	push	r24
    740e:	89 a1       	ldd	r24, Y+33	; 0x21
    7410:	8f 93       	push	r24
    7412:	88 a1       	ldd	r24, Y+32	; 0x20
    7414:	8f 93       	push	r24
    7416:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7418:	8f 93       	push	r24
    741a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    741c:	8f 93       	push	r24
    741e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7420:	8f 93       	push	r24
    7422:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7424:	8f 93       	push	r24
    7426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7428:	8f 93       	push	r24
    742a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    742c:	8f 93       	push	r24
    742e:	89 8d       	ldd	r24, Y+25	; 0x19
    7430:	8f 93       	push	r24
    7432:	88 ef       	ldi	r24, 0xF8	; 248
    7434:	91 e2       	ldi	r25, 0x21	; 33
    7436:	9f 93       	push	r25
    7438:	8f 93       	push	r24
    743a:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    743e:	cd bf       	out	0x3d, r28	; 61
    7440:	de bf       	out	0x3e, r29	; 62
    7442:	a4 96       	adiw	r28, 0x24	; 36
    7444:	cd bf       	out	0x3d, r28	; 61
    7446:	de bf       	out	0x3e, r29	; 62
    7448:	df 91       	pop	r29
    744a:	cf 91       	pop	r28
    744c:	08 95       	ret

0000744e <vectorAdd>:
const char matrix3str[] PROGMEM = "| %7.1f %7.1f %7.1f |\r\n";
void printMatrix(Matrix* A){
	printf_P(matrix3str, (*A)[0][0], (*A)[0][1], (*A)[0][2]);
	printf_P(matrix3str, (*A)[1][0], (*A)[1][1], (*A)[1][2]);
	printf_P(matrix3str, (*A)[2][0], (*A)[2][1], (*A)[2][2]);
}
    744e:	ef 92       	push	r14
    7450:	ff 92       	push	r15
    7452:	0f 93       	push	r16
    7454:	1f 93       	push	r17
    7456:	cf 93       	push	r28
    7458:	df 93       	push	r29
    745a:	ec 01       	movw	r28, r24
    745c:	8b 01       	movw	r16, r22
    745e:	7a 01       	movw	r14, r20
    7460:	fa 01       	movw	r30, r20
    7462:	20 81       	ld	r18, Z
    7464:	31 81       	ldd	r19, Z+1	; 0x01
    7466:	42 81       	ldd	r20, Z+2	; 0x02
    7468:	53 81       	ldd	r21, Z+3	; 0x03
    746a:	fb 01       	movw	r30, r22
    746c:	60 81       	ld	r22, Z
    746e:	71 81       	ldd	r23, Z+1	; 0x01
    7470:	82 81       	ldd	r24, Z+2	; 0x02
    7472:	93 81       	ldd	r25, Z+3	; 0x03
    7474:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7478:	68 83       	st	Y, r22
    747a:	79 83       	std	Y+1, r23	; 0x01
    747c:	8a 83       	std	Y+2, r24	; 0x02
    747e:	9b 83       	std	Y+3, r25	; 0x03
    7480:	f7 01       	movw	r30, r14
    7482:	24 81       	ldd	r18, Z+4	; 0x04
    7484:	35 81       	ldd	r19, Z+5	; 0x05
    7486:	46 81       	ldd	r20, Z+6	; 0x06
    7488:	57 81       	ldd	r21, Z+7	; 0x07
    748a:	f8 01       	movw	r30, r16
    748c:	64 81       	ldd	r22, Z+4	; 0x04
    748e:	75 81       	ldd	r23, Z+5	; 0x05
    7490:	86 81       	ldd	r24, Z+6	; 0x06
    7492:	97 81       	ldd	r25, Z+7	; 0x07
    7494:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7498:	6c 83       	std	Y+4, r22	; 0x04
    749a:	7d 83       	std	Y+5, r23	; 0x05
    749c:	8e 83       	std	Y+6, r24	; 0x06
    749e:	9f 83       	std	Y+7, r25	; 0x07
    74a0:	f7 01       	movw	r30, r14
    74a2:	20 85       	ldd	r18, Z+8	; 0x08
    74a4:	31 85       	ldd	r19, Z+9	; 0x09
    74a6:	42 85       	ldd	r20, Z+10	; 0x0a
    74a8:	53 85       	ldd	r21, Z+11	; 0x0b
    74aa:	f8 01       	movw	r30, r16
    74ac:	60 85       	ldd	r22, Z+8	; 0x08
    74ae:	71 85       	ldd	r23, Z+9	; 0x09
    74b0:	82 85       	ldd	r24, Z+10	; 0x0a
    74b2:	93 85       	ldd	r25, Z+11	; 0x0b
    74b4:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    74b8:	68 87       	std	Y+8, r22	; 0x08
    74ba:	79 87       	std	Y+9, r23	; 0x09
    74bc:	8a 87       	std	Y+10, r24	; 0x0a
    74be:	9b 87       	std	Y+11, r25	; 0x0b
    74c0:	df 91       	pop	r29
    74c2:	cf 91       	pop	r28
    74c4:	1f 91       	pop	r17
    74c6:	0f 91       	pop	r16
    74c8:	ff 90       	pop	r15
    74ca:	ef 90       	pop	r14
    74cc:	08 95       	ret

000074ce <vectorSubtract>:
    74ce:	ef 92       	push	r14
    74d0:	ff 92       	push	r15
    74d2:	0f 93       	push	r16
    74d4:	1f 93       	push	r17
    74d6:	cf 93       	push	r28
    74d8:	df 93       	push	r29
    74da:	ec 01       	movw	r28, r24
    74dc:	8b 01       	movw	r16, r22
    74de:	7a 01       	movw	r14, r20
    74e0:	fa 01       	movw	r30, r20
    74e2:	20 81       	ld	r18, Z
    74e4:	31 81       	ldd	r19, Z+1	; 0x01
    74e6:	42 81       	ldd	r20, Z+2	; 0x02
    74e8:	53 81       	ldd	r21, Z+3	; 0x03
    74ea:	fb 01       	movw	r30, r22
    74ec:	60 81       	ld	r22, Z
    74ee:	71 81       	ldd	r23, Z+1	; 0x01
    74f0:	82 81       	ldd	r24, Z+2	; 0x02
    74f2:	93 81       	ldd	r25, Z+3	; 0x03
    74f4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    74f8:	68 83       	st	Y, r22
    74fa:	79 83       	std	Y+1, r23	; 0x01
    74fc:	8a 83       	std	Y+2, r24	; 0x02
    74fe:	9b 83       	std	Y+3, r25	; 0x03
    7500:	f7 01       	movw	r30, r14
    7502:	24 81       	ldd	r18, Z+4	; 0x04
    7504:	35 81       	ldd	r19, Z+5	; 0x05
    7506:	46 81       	ldd	r20, Z+6	; 0x06
    7508:	57 81       	ldd	r21, Z+7	; 0x07
    750a:	f8 01       	movw	r30, r16
    750c:	64 81       	ldd	r22, Z+4	; 0x04
    750e:	75 81       	ldd	r23, Z+5	; 0x05
    7510:	86 81       	ldd	r24, Z+6	; 0x06
    7512:	97 81       	ldd	r25, Z+7	; 0x07
    7514:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7518:	6c 83       	std	Y+4, r22	; 0x04
    751a:	7d 83       	std	Y+5, r23	; 0x05
    751c:	8e 83       	std	Y+6, r24	; 0x06
    751e:	9f 83       	std	Y+7, r25	; 0x07
    7520:	f7 01       	movw	r30, r14
    7522:	20 85       	ldd	r18, Z+8	; 0x08
    7524:	31 85       	ldd	r19, Z+9	; 0x09
    7526:	42 85       	ldd	r20, Z+10	; 0x0a
    7528:	53 85       	ldd	r21, Z+11	; 0x0b
    752a:	f8 01       	movw	r30, r16
    752c:	60 85       	ldd	r22, Z+8	; 0x08
    752e:	71 85       	ldd	r23, Z+9	; 0x09
    7530:	82 85       	ldd	r24, Z+10	; 0x0a
    7532:	93 85       	ldd	r25, Z+11	; 0x0b
    7534:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7538:	68 87       	std	Y+8, r22	; 0x08
    753a:	79 87       	std	Y+9, r23	; 0x09
    753c:	8a 87       	std	Y+10, r24	; 0x0a
    753e:	9b 87       	std	Y+11, r25	; 0x0b
    7540:	df 91       	pop	r29
    7542:	cf 91       	pop	r28
    7544:	1f 91       	pop	r17
    7546:	0f 91       	pop	r16
    7548:	ff 90       	pop	r15
    754a:	ef 90       	pop	r14
    754c:	08 95       	ret

0000754e <vectorSquare>:
    754e:	8f 92       	push	r8
    7550:	9f 92       	push	r9
    7552:	af 92       	push	r10
    7554:	bf 92       	push	r11
    7556:	cf 92       	push	r12
    7558:	df 92       	push	r13
    755a:	ef 92       	push	r14
    755c:	ff 92       	push	r15
    755e:	0f 93       	push	r16
    7560:	1f 93       	push	r17
    7562:	cf 93       	push	r28
    7564:	df 93       	push	r29
    7566:	4b 01       	movw	r8, r22
    7568:	5c 01       	movw	r10, r24
    756a:	6b 01       	movw	r12, r22
    756c:	8c e0       	ldi	r24, 0x0C	; 12
    756e:	c8 0e       	add	r12, r24
    7570:	d1 1c       	adc	r13, r1
    7572:	7b 01       	movw	r14, r22
    7574:	85 01       	movw	r16, r10
    7576:	e4 01       	movw	r28, r8
    7578:	29 91       	ld	r18, Y+
    757a:	39 91       	ld	r19, Y+
    757c:	49 91       	ld	r20, Y+
    757e:	59 91       	ld	r21, Y+
    7580:	f7 01       	movw	r30, r14
    7582:	60 81       	ld	r22, Z
    7584:	71 81       	ldd	r23, Z+1	; 0x01
    7586:	82 81       	ldd	r24, Z+2	; 0x02
    7588:	93 81       	ldd	r25, Z+3	; 0x03
    758a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    758e:	f8 01       	movw	r30, r16
    7590:	61 93       	st	Z+, r22
    7592:	71 93       	st	Z+, r23
    7594:	81 93       	st	Z+, r24
    7596:	91 93       	st	Z+, r25
    7598:	8f 01       	movw	r16, r30
    759a:	cc 15       	cp	r28, r12
    759c:	dd 05       	cpc	r29, r13
    759e:	61 f7       	brne	.-40     	; 0x7578 <vectorSquare+0x2a>
    75a0:	fc e0       	ldi	r31, 0x0C	; 12
    75a2:	af 0e       	add	r10, r31
    75a4:	b1 1c       	adc	r11, r1
    75a6:	84 e0       	ldi	r24, 0x04	; 4
    75a8:	e8 0e       	add	r14, r24
    75aa:	f1 1c       	adc	r15, r1
    75ac:	ec 16       	cp	r14, r28
    75ae:	fd 06       	cpc	r15, r29
    75b0:	09 f7       	brne	.-62     	; 0x7574 <vectorSquare+0x26>
    75b2:	df 91       	pop	r29
    75b4:	cf 91       	pop	r28
    75b6:	1f 91       	pop	r17
    75b8:	0f 91       	pop	r16
    75ba:	ff 90       	pop	r15
    75bc:	ef 90       	pop	r14
    75be:	df 90       	pop	r13
    75c0:	cf 90       	pop	r12
    75c2:	bf 90       	pop	r11
    75c4:	af 90       	pop	r10
    75c6:	9f 90       	pop	r9
    75c8:	8f 90       	pop	r8
    75ca:	08 95       	ret

000075cc <matrixScale>:
    75cc:	8f 92       	push	r8
    75ce:	9f 92       	push	r9
    75d0:	af 92       	push	r10
    75d2:	bf 92       	push	r11
    75d4:	cf 92       	push	r12
    75d6:	df 92       	push	r13
    75d8:	ef 92       	push	r14
    75da:	ff 92       	push	r15
    75dc:	0f 93       	push	r16
    75de:	1f 93       	push	r17
    75e0:	cf 93       	push	r28
    75e2:	4a 01       	movw	r8, r20
    75e4:	5b 01       	movw	r10, r22
    75e6:	7c 01       	movw	r14, r24
    75e8:	6c 01       	movw	r12, r24
    75ea:	84 e2       	ldi	r24, 0x24	; 36
    75ec:	c8 0e       	add	r12, r24
    75ee:	d1 1c       	adc	r13, r1
    75f0:	87 01       	movw	r16, r14
    75f2:	c0 e0       	ldi	r28, 0x00	; 0
    75f4:	a5 01       	movw	r20, r10
    75f6:	94 01       	movw	r18, r8
    75f8:	f8 01       	movw	r30, r16
    75fa:	60 81       	ld	r22, Z
    75fc:	71 81       	ldd	r23, Z+1	; 0x01
    75fe:	82 81       	ldd	r24, Z+2	; 0x02
    7600:	93 81       	ldd	r25, Z+3	; 0x03
    7602:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7606:	f8 01       	movw	r30, r16
    7608:	61 93       	st	Z+, r22
    760a:	71 93       	st	Z+, r23
    760c:	81 93       	st	Z+, r24
    760e:	91 93       	st	Z+, r25
    7610:	8f 01       	movw	r16, r30
    7612:	cf 5f       	subi	r28, 0xFF	; 255
    7614:	c3 30       	cpi	r28, 0x03	; 3
    7616:	71 f7       	brne	.-36     	; 0x75f4 <matrixScale+0x28>
    7618:	fc e0       	ldi	r31, 0x0C	; 12
    761a:	ef 0e       	add	r14, r31
    761c:	f1 1c       	adc	r15, r1
    761e:	ec 14       	cp	r14, r12
    7620:	fd 04       	cpc	r15, r13
    7622:	31 f7       	brne	.-52     	; 0x75f0 <matrixScale+0x24>
    7624:	cf 91       	pop	r28
    7626:	1f 91       	pop	r17
    7628:	0f 91       	pop	r16
    762a:	ff 90       	pop	r15
    762c:	ef 90       	pop	r14
    762e:	df 90       	pop	r13
    7630:	cf 90       	pop	r12
    7632:	bf 90       	pop	r11
    7634:	af 90       	pop	r10
    7636:	9f 90       	pop	r9
    7638:	8f 90       	pop	r8
    763a:	08 95       	ret

0000763c <matrixTimesVector>:
    763c:	2f 92       	push	r2
    763e:	3f 92       	push	r3
    7640:	4f 92       	push	r4
    7642:	5f 92       	push	r5
    7644:	6f 92       	push	r6
    7646:	7f 92       	push	r7
    7648:	8f 92       	push	r8
    764a:	9f 92       	push	r9
    764c:	af 92       	push	r10
    764e:	bf 92       	push	r11
    7650:	cf 92       	push	r12
    7652:	df 92       	push	r13
    7654:	ef 92       	push	r14
    7656:	ff 92       	push	r15
    7658:	0f 93       	push	r16
    765a:	1f 93       	push	r17
    765c:	cf 93       	push	r28
    765e:	df 93       	push	r29
    7660:	4a 01       	movw	r8, r20
    7662:	8c 01       	movw	r16, r24
    7664:	6b 01       	movw	r12, r22
    7666:	1c 01       	movw	r2, r24
    7668:	8c e0       	ldi	r24, 0x0C	; 12
    766a:	28 0e       	add	r2, r24
    766c:	31 1c       	adc	r3, r1
    766e:	fa 01       	movw	r30, r20
    7670:	3c 96       	adiw	r30, 0x0c	; 12
    7672:	5f 01       	movw	r10, r30
    7674:	f8 01       	movw	r30, r16
    7676:	10 82       	st	Z, r1
    7678:	11 82       	std	Z+1, r1	; 0x01
    767a:	12 82       	std	Z+2, r1	; 0x02
    767c:	13 82       	std	Z+3, r1	; 0x03
    767e:	e4 01       	movw	r28, r8
    7680:	76 01       	movw	r14, r12
    7682:	41 2c       	mov	r4, r1
    7684:	51 2c       	mov	r5, r1
    7686:	32 01       	movw	r6, r4
    7688:	f7 01       	movw	r30, r14
    768a:	61 91       	ld	r22, Z+
    768c:	71 91       	ld	r23, Z+
    768e:	81 91       	ld	r24, Z+
    7690:	91 91       	ld	r25, Z+
    7692:	7f 01       	movw	r14, r30
    7694:	29 91       	ld	r18, Y+
    7696:	39 91       	ld	r19, Y+
    7698:	49 91       	ld	r20, Y+
    769a:	59 91       	ld	r21, Y+
    769c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    76a0:	9b 01       	movw	r18, r22
    76a2:	ac 01       	movw	r20, r24
    76a4:	c3 01       	movw	r24, r6
    76a6:	b2 01       	movw	r22, r4
    76a8:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    76ac:	2b 01       	movw	r4, r22
    76ae:	3c 01       	movw	r6, r24
    76b0:	f8 01       	movw	r30, r16
    76b2:	60 83       	st	Z, r22
    76b4:	71 83       	std	Z+1, r23	; 0x01
    76b6:	82 83       	std	Z+2, r24	; 0x02
    76b8:	93 83       	std	Z+3, r25	; 0x03
    76ba:	ca 15       	cp	r28, r10
    76bc:	db 05       	cpc	r29, r11
    76be:	21 f7       	brne	.-56     	; 0x7688 <matrixTimesVector+0x4c>
    76c0:	0c 5f       	subi	r16, 0xFC	; 252
    76c2:	1f 4f       	sbci	r17, 0xFF	; 255
    76c4:	fc e0       	ldi	r31, 0x0C	; 12
    76c6:	cf 0e       	add	r12, r31
    76c8:	d1 1c       	adc	r13, r1
    76ca:	02 15       	cp	r16, r2
    76cc:	13 05       	cpc	r17, r3
    76ce:	91 f6       	brne	.-92     	; 0x7674 <matrixTimesVector+0x38>
    76d0:	df 91       	pop	r29
    76d2:	cf 91       	pop	r28
    76d4:	1f 91       	pop	r17
    76d6:	0f 91       	pop	r16
    76d8:	ff 90       	pop	r15
    76da:	ef 90       	pop	r14
    76dc:	df 90       	pop	r13
    76de:	cf 90       	pop	r12
    76e0:	bf 90       	pop	r11
    76e2:	af 90       	pop	r10
    76e4:	9f 90       	pop	r9
    76e6:	8f 90       	pop	r8
    76e8:	7f 90       	pop	r7
    76ea:	6f 90       	pop	r6
    76ec:	5f 90       	pop	r5
    76ee:	4f 90       	pop	r4
    76f0:	3f 90       	pop	r3
    76f2:	2f 90       	pop	r2
    76f4:	08 95       	ret

000076f6 <matrixAdd>:
    76f6:	5f 92       	push	r5
    76f8:	6f 92       	push	r6
    76fa:	7f 92       	push	r7
    76fc:	8f 92       	push	r8
    76fe:	9f 92       	push	r9
    7700:	af 92       	push	r10
    7702:	bf 92       	push	r11
    7704:	cf 92       	push	r12
    7706:	df 92       	push	r13
    7708:	ef 92       	push	r14
    770a:	ff 92       	push	r15
    770c:	0f 93       	push	r16
    770e:	1f 93       	push	r17
    7710:	cf 93       	push	r28
    7712:	df 93       	push	r29
    7714:	6b 01       	movw	r12, r22
    7716:	5a 01       	movw	r10, r20
    7718:	4c 01       	movw	r8, r24
    771a:	3b 01       	movw	r6, r22
    771c:	84 e2       	ldi	r24, 0x24	; 36
    771e:	68 0e       	add	r6, r24
    7720:	71 1c       	adc	r7, r1
    7722:	74 01       	movw	r14, r8
    7724:	85 01       	movw	r16, r10
    7726:	e6 01       	movw	r28, r12
    7728:	51 2c       	mov	r5, r1
    772a:	69 91       	ld	r22, Y+
    772c:	79 91       	ld	r23, Y+
    772e:	89 91       	ld	r24, Y+
    7730:	99 91       	ld	r25, Y+
    7732:	f8 01       	movw	r30, r16
    7734:	21 91       	ld	r18, Z+
    7736:	31 91       	ld	r19, Z+
    7738:	41 91       	ld	r20, Z+
    773a:	51 91       	ld	r21, Z+
    773c:	8f 01       	movw	r16, r30
    773e:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7742:	f7 01       	movw	r30, r14
    7744:	61 93       	st	Z+, r22
    7746:	71 93       	st	Z+, r23
    7748:	81 93       	st	Z+, r24
    774a:	91 93       	st	Z+, r25
    774c:	7f 01       	movw	r14, r30
    774e:	53 94       	inc	r5
    7750:	f3 e0       	ldi	r31, 0x03	; 3
    7752:	5f 12       	cpse	r5, r31
    7754:	ea cf       	rjmp	.-44     	; 0x772a <matrixAdd+0x34>
    7756:	8c e0       	ldi	r24, 0x0C	; 12
    7758:	c8 0e       	add	r12, r24
    775a:	d1 1c       	adc	r13, r1
    775c:	ec e0       	ldi	r30, 0x0C	; 12
    775e:	ae 0e       	add	r10, r30
    7760:	b1 1c       	adc	r11, r1
    7762:	fc e0       	ldi	r31, 0x0C	; 12
    7764:	8f 0e       	add	r8, r31
    7766:	91 1c       	adc	r9, r1
    7768:	c6 14       	cp	r12, r6
    776a:	d7 04       	cpc	r13, r7
    776c:	d1 f6       	brne	.-76     	; 0x7722 <matrixAdd+0x2c>
    776e:	df 91       	pop	r29
    7770:	cf 91       	pop	r28
    7772:	1f 91       	pop	r17
    7774:	0f 91       	pop	r16
    7776:	ff 90       	pop	r15
    7778:	ef 90       	pop	r14
    777a:	df 90       	pop	r13
    777c:	cf 90       	pop	r12
    777e:	bf 90       	pop	r11
    7780:	af 90       	pop	r10
    7782:	9f 90       	pop	r9
    7784:	8f 90       	pop	r8
    7786:	7f 90       	pop	r7
    7788:	6f 90       	pop	r6
    778a:	5f 90       	pop	r5
    778c:	08 95       	ret

0000778e <matrixMultiply>:
    778e:	2f 92       	push	r2
    7790:	3f 92       	push	r3
    7792:	4f 92       	push	r4
    7794:	5f 92       	push	r5
    7796:	6f 92       	push	r6
    7798:	7f 92       	push	r7
    779a:	8f 92       	push	r8
    779c:	9f 92       	push	r9
    779e:	af 92       	push	r10
    77a0:	bf 92       	push	r11
    77a2:	cf 92       	push	r12
    77a4:	df 92       	push	r13
    77a6:	ef 92       	push	r14
    77a8:	ff 92       	push	r15
    77aa:	0f 93       	push	r16
    77ac:	1f 93       	push	r17
    77ae:	cf 93       	push	r28
    77b0:	df 93       	push	r29
    77b2:	cd b7       	in	r28, 0x3d	; 61
    77b4:	de b7       	in	r29, 0x3e	; 62
    77b6:	2a 97       	sbiw	r28, 0x0a	; 10
    77b8:	cd bf       	out	0x3d, r28	; 61
    77ba:	de bf       	out	0x3e, r29	; 62
    77bc:	4b 83       	std	Y+3, r20	; 0x03
    77be:	5c 83       	std	Y+4, r21	; 0x04
    77c0:	5b 01       	movw	r10, r22
    77c2:	4c 01       	movw	r8, r24
    77c4:	cb 01       	movw	r24, r22
    77c6:	84 96       	adiw	r24, 0x24	; 36
    77c8:	8d 83       	std	Y+5, r24	; 0x05
    77ca:	9e 83       	std	Y+6, r25	; 0x06
    77cc:	fa 01       	movw	r30, r20
    77ce:	3c 96       	adiw	r30, 0x0c	; 12
    77d0:	ef 83       	std	Y+7, r30	; 0x07
    77d2:	f8 87       	std	Y+8, r31	; 0x08
    77d4:	cb 80       	ldd	r12, Y+3	; 0x03
    77d6:	dc 80       	ldd	r13, Y+4	; 0x04
    77d8:	74 01       	movw	r14, r8
    77da:	89 82       	std	Y+1, r8	; 0x01
    77dc:	9a 82       	std	Y+2, r9	; 0x02
    77de:	2f 80       	ldd	r2, Y+7	; 0x07
    77e0:	38 84       	ldd	r3, Y+8	; 0x08
    77e2:	f7 01       	movw	r30, r14
    77e4:	10 82       	st	Z, r1
    77e6:	11 82       	std	Z+1, r1	; 0x01
    77e8:	12 82       	std	Z+2, r1	; 0x02
    77ea:	13 82       	std	Z+3, r1	; 0x03
    77ec:	c9 86       	std	Y+9, r12	; 0x09
    77ee:	da 86       	std	Y+10, r13	; 0x0a
    77f0:	85 01       	movw	r16, r10
    77f2:	83 e0       	ldi	r24, 0x03	; 3
    77f4:	98 2e       	mov	r9, r24
    77f6:	41 2c       	mov	r4, r1
    77f8:	51 2c       	mov	r5, r1
    77fa:	32 01       	movw	r6, r4
    77fc:	f8 01       	movw	r30, r16
    77fe:	61 91       	ld	r22, Z+
    7800:	71 91       	ld	r23, Z+
    7802:	81 91       	ld	r24, Z+
    7804:	91 91       	ld	r25, Z+
    7806:	8f 01       	movw	r16, r30
    7808:	e9 85       	ldd	r30, Y+9	; 0x09
    780a:	fa 85       	ldd	r31, Y+10	; 0x0a
    780c:	20 81       	ld	r18, Z
    780e:	31 81       	ldd	r19, Z+1	; 0x01
    7810:	42 81       	ldd	r20, Z+2	; 0x02
    7812:	53 81       	ldd	r21, Z+3	; 0x03
    7814:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7818:	9b 01       	movw	r18, r22
    781a:	ac 01       	movw	r20, r24
    781c:	c3 01       	movw	r24, r6
    781e:	b2 01       	movw	r22, r4
    7820:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7824:	2b 01       	movw	r4, r22
    7826:	3c 01       	movw	r6, r24
    7828:	f7 01       	movw	r30, r14
    782a:	60 83       	st	Z, r22
    782c:	71 83       	std	Z+1, r23	; 0x01
    782e:	82 83       	std	Z+2, r24	; 0x02
    7830:	93 83       	std	Z+3, r25	; 0x03
    7832:	9a 94       	dec	r9
    7834:	89 85       	ldd	r24, Y+9	; 0x09
    7836:	9a 85       	ldd	r25, Y+10	; 0x0a
    7838:	0c 96       	adiw	r24, 0x0c	; 12
    783a:	89 87       	std	Y+9, r24	; 0x09
    783c:	9a 87       	std	Y+10, r25	; 0x0a
    783e:	91 10       	cpse	r9, r1
    7840:	dd cf       	rjmp	.-70     	; 0x77fc <matrixMultiply+0x6e>
    7842:	94 e0       	ldi	r25, 0x04	; 4
    7844:	e9 0e       	add	r14, r25
    7846:	f1 1c       	adc	r15, r1
    7848:	e4 e0       	ldi	r30, 0x04	; 4
    784a:	ce 0e       	add	r12, r30
    784c:	d1 1c       	adc	r13, r1
    784e:	c2 14       	cp	r12, r2
    7850:	d3 04       	cpc	r13, r3
    7852:	39 f6       	brne	.-114    	; 0x77e2 <matrixMultiply+0x54>
    7854:	89 80       	ldd	r8, Y+1	; 0x01
    7856:	9a 80       	ldd	r9, Y+2	; 0x02
    7858:	fc e0       	ldi	r31, 0x0C	; 12
    785a:	af 0e       	add	r10, r31
    785c:	b1 1c       	adc	r11, r1
    785e:	8c e0       	ldi	r24, 0x0C	; 12
    7860:	88 0e       	add	r8, r24
    7862:	91 1c       	adc	r9, r1
    7864:	ed 81       	ldd	r30, Y+5	; 0x05
    7866:	fe 81       	ldd	r31, Y+6	; 0x06
    7868:	ae 16       	cp	r10, r30
    786a:	bf 06       	cpc	r11, r31
    786c:	09 f0       	breq	.+2      	; 0x7870 <matrixMultiply+0xe2>
    786e:	b2 cf       	rjmp	.-156    	; 0x77d4 <matrixMultiply+0x46>
    7870:	2a 96       	adiw	r28, 0x0a	; 10
    7872:	cd bf       	out	0x3d, r28	; 61
    7874:	de bf       	out	0x3e, r29	; 62
    7876:	df 91       	pop	r29
    7878:	cf 91       	pop	r28
    787a:	1f 91       	pop	r17
    787c:	0f 91       	pop	r16
    787e:	ff 90       	pop	r15
    7880:	ef 90       	pop	r14
    7882:	df 90       	pop	r13
    7884:	cf 90       	pop	r12
    7886:	bf 90       	pop	r11
    7888:	af 90       	pop	r10
    788a:	9f 90       	pop	r9
    788c:	8f 90       	pop	r8
    788e:	7f 90       	pop	r7
    7890:	6f 90       	pop	r6
    7892:	5f 90       	pop	r5
    7894:	4f 90       	pop	r4
    7896:	3f 90       	pop	r3
    7898:	2f 90       	pop	r2
    789a:	08 95       	ret

0000789c <matrixInplaceMultiply>:
    789c:	2f 92       	push	r2
    789e:	3f 92       	push	r3
    78a0:	4f 92       	push	r4
    78a2:	5f 92       	push	r5
    78a4:	6f 92       	push	r6
    78a6:	7f 92       	push	r7
    78a8:	8f 92       	push	r8
    78aa:	9f 92       	push	r9
    78ac:	af 92       	push	r10
    78ae:	bf 92       	push	r11
    78b0:	cf 92       	push	r12
    78b2:	df 92       	push	r13
    78b4:	ef 92       	push	r14
    78b6:	ff 92       	push	r15
    78b8:	0f 93       	push	r16
    78ba:	1f 93       	push	r17
    78bc:	cf 93       	push	r28
    78be:	df 93       	push	r29
    78c0:	cd b7       	in	r28, 0x3d	; 61
    78c2:	de b7       	in	r29, 0x3e	; 62
    78c4:	ae 97       	sbiw	r28, 0x2e	; 46
    78c6:	cd bf       	out	0x3d, r28	; 61
    78c8:	de bf       	out	0x3e, r29	; 62
    78ca:	9c 01       	movw	r18, r24
    78cc:	49 a7       	std	Y+41, r20	; 0x29
    78ce:	5a a7       	std	Y+42, r21	; 0x2a
    78d0:	68 17       	cp	r22, r24
    78d2:	79 07       	cpc	r23, r25
    78d4:	09 f4       	brne	.+2      	; 0x78d8 <matrixInplaceMultiply+0x3c>
    78d6:	75 c0       	rjmp	.+234    	; 0x79c2 <matrixInplaceMultiply+0x126>
    78d8:	e9 a5       	ldd	r30, Y+41	; 0x29
    78da:	fa a5       	ldd	r31, Y+42	; 0x2a
    78dc:	8e 17       	cp	r24, r30
    78de:	9f 07       	cpc	r25, r31
    78e0:	09 f4       	brne	.+2      	; 0x78e4 <matrixInplaceMultiply+0x48>
    78e2:	8e c0       	rjmp	.+284    	; 0x7a00 <matrixInplaceMultiply+0x164>
    78e4:	4b 01       	movw	r8, r22
    78e6:	2f a3       	std	Y+39, r18	; 0x27
    78e8:	38 a7       	std	Y+40, r19	; 0x28
    78ea:	fb 01       	movw	r30, r22
    78ec:	b4 96       	adiw	r30, 0x24	; 36
    78ee:	eb a7       	std	Y+43, r30	; 0x2b
    78f0:	fc a7       	std	Y+44, r31	; 0x2c
    78f2:	89 a5       	ldd	r24, Y+41	; 0x29
    78f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    78f6:	0c 96       	adiw	r24, 0x0c	; 12
    78f8:	8d a7       	std	Y+45, r24	; 0x2d
    78fa:	9e a7       	std	Y+46, r25	; 0x2e
    78fc:	c9 a4       	ldd	r12, Y+41	; 0x29
    78fe:	da a4       	ldd	r13, Y+42	; 0x2a
    7900:	ef a0       	ldd	r14, Y+39	; 0x27
    7902:	f8 a4       	ldd	r15, Y+40	; 0x28
    7904:	8d a2       	std	Y+37, r8	; 0x25
    7906:	9e a2       	std	Y+38, r9	; 0x26
    7908:	2d a4       	ldd	r2, Y+45	; 0x2d
    790a:	3e a4       	ldd	r3, Y+46	; 0x2e
    790c:	f7 01       	movw	r30, r14
    790e:	10 82       	st	Z, r1
    7910:	11 82       	std	Z+1, r1	; 0x01
    7912:	12 82       	std	Z+2, r1	; 0x02
    7914:	13 82       	std	Z+3, r1	; 0x03
    7916:	26 01       	movw	r4, r12
    7918:	ad a0       	ldd	r10, Y+37	; 0x25
    791a:	be a0       	ldd	r11, Y+38	; 0x26
    791c:	61 2c       	mov	r6, r1
    791e:	71 2c       	mov	r7, r1
    7920:	43 01       	movw	r8, r6
    7922:	10 e0       	ldi	r17, 0x00	; 0
    7924:	f5 01       	movw	r30, r10
    7926:	61 91       	ld	r22, Z+
    7928:	71 91       	ld	r23, Z+
    792a:	81 91       	ld	r24, Z+
    792c:	91 91       	ld	r25, Z+
    792e:	5f 01       	movw	r10, r30
    7930:	f2 01       	movw	r30, r4
    7932:	20 81       	ld	r18, Z
    7934:	31 81       	ldd	r19, Z+1	; 0x01
    7936:	42 81       	ldd	r20, Z+2	; 0x02
    7938:	53 81       	ldd	r21, Z+3	; 0x03
    793a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    793e:	9b 01       	movw	r18, r22
    7940:	ac 01       	movw	r20, r24
    7942:	c4 01       	movw	r24, r8
    7944:	b3 01       	movw	r22, r6
    7946:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    794a:	3b 01       	movw	r6, r22
    794c:	4c 01       	movw	r8, r24
    794e:	f7 01       	movw	r30, r14
    7950:	60 83       	st	Z, r22
    7952:	71 83       	std	Z+1, r23	; 0x01
    7954:	82 83       	std	Z+2, r24	; 0x02
    7956:	93 83       	std	Z+3, r25	; 0x03
    7958:	1f 5f       	subi	r17, 0xFF	; 255
    795a:	fc e0       	ldi	r31, 0x0C	; 12
    795c:	4f 0e       	add	r4, r31
    795e:	51 1c       	adc	r5, r1
    7960:	13 30       	cpi	r17, 0x03	; 3
    7962:	01 f7       	brne	.-64     	; 0x7924 <matrixInplaceMultiply+0x88>
    7964:	84 e0       	ldi	r24, 0x04	; 4
    7966:	e8 0e       	add	r14, r24
    7968:	f1 1c       	adc	r15, r1
    796a:	94 e0       	ldi	r25, 0x04	; 4
    796c:	c9 0e       	add	r12, r25
    796e:	d1 1c       	adc	r13, r1
    7970:	c2 14       	cp	r12, r2
    7972:	d3 04       	cpc	r13, r3
    7974:	59 f6       	brne	.-106    	; 0x790c <matrixInplaceMultiply+0x70>
    7976:	8d a0       	ldd	r8, Y+37	; 0x25
    7978:	9e a0       	ldd	r9, Y+38	; 0x26
    797a:	ec e0       	ldi	r30, 0x0C	; 12
    797c:	8e 0e       	add	r8, r30
    797e:	91 1c       	adc	r9, r1
    7980:	8f a1       	ldd	r24, Y+39	; 0x27
    7982:	98 a5       	ldd	r25, Y+40	; 0x28
    7984:	0c 96       	adiw	r24, 0x0c	; 12
    7986:	8f a3       	std	Y+39, r24	; 0x27
    7988:	98 a7       	std	Y+40, r25	; 0x28
    798a:	eb a5       	ldd	r30, Y+43	; 0x2b
    798c:	fc a5       	ldd	r31, Y+44	; 0x2c
    798e:	e8 15       	cp	r30, r8
    7990:	f9 05       	cpc	r31, r9
    7992:	09 f0       	breq	.+2      	; 0x7996 <matrixInplaceMultiply+0xfa>
    7994:	b3 cf       	rjmp	.-154    	; 0x78fc <matrixInplaceMultiply+0x60>
    7996:	ae 96       	adiw	r28, 0x2e	; 46
    7998:	cd bf       	out	0x3d, r28	; 61
    799a:	de bf       	out	0x3e, r29	; 62
    799c:	df 91       	pop	r29
    799e:	cf 91       	pop	r28
    79a0:	1f 91       	pop	r17
    79a2:	0f 91       	pop	r16
    79a4:	ff 90       	pop	r15
    79a6:	ef 90       	pop	r14
    79a8:	df 90       	pop	r13
    79aa:	cf 90       	pop	r12
    79ac:	bf 90       	pop	r11
    79ae:	af 90       	pop	r10
    79b0:	9f 90       	pop	r9
    79b2:	8f 90       	pop	r8
    79b4:	7f 90       	pop	r7
    79b6:	6f 90       	pop	r6
    79b8:	5f 90       	pop	r5
    79ba:	4f 90       	pop	r4
    79bc:	3f 90       	pop	r3
    79be:	2f 90       	pop	r2
    79c0:	08 95       	ret
    79c2:	bc 01       	movw	r22, r24
    79c4:	8e 01       	movw	r16, r28
    79c6:	0f 5f       	subi	r16, 0xFF	; 255
    79c8:	1f 4f       	sbci	r17, 0xFF	; 255
    79ca:	a8 01       	movw	r20, r16
    79cc:	7e 01       	movw	r14, r28
    79ce:	85 e2       	ldi	r24, 0x25	; 37
    79d0:	e8 0e       	add	r14, r24
    79d2:	f1 1c       	adc	r15, r1
    79d4:	da 01       	movw	r26, r20
    79d6:	fb 01       	movw	r30, r22
    79d8:	83 e0       	ldi	r24, 0x03	; 3
    79da:	81 90       	ld	r8, Z+
    79dc:	91 90       	ld	r9, Z+
    79de:	a1 90       	ld	r10, Z+
    79e0:	b1 90       	ld	r11, Z+
    79e2:	8d 92       	st	X+, r8
    79e4:	9d 92       	st	X+, r9
    79e6:	ad 92       	st	X+, r10
    79e8:	bd 92       	st	X+, r11
    79ea:	81 50       	subi	r24, 0x01	; 1
    79ec:	b1 f7       	brne	.-20     	; 0x79da <matrixInplaceMultiply+0x13e>
    79ee:	64 5f       	subi	r22, 0xF4	; 244
    79f0:	7f 4f       	sbci	r23, 0xFF	; 255
    79f2:	44 5f       	subi	r20, 0xF4	; 244
    79f4:	5f 4f       	sbci	r21, 0xFF	; 255
    79f6:	4e 15       	cp	r20, r14
    79f8:	5f 05       	cpc	r21, r15
    79fa:	61 f7       	brne	.-40     	; 0x79d4 <matrixInplaceMultiply+0x138>
    79fc:	b8 01       	movw	r22, r16
    79fe:	72 cf       	rjmp	.-284    	; 0x78e4 <matrixInplaceMultiply+0x48>
    7a00:	7c 01       	movw	r14, r24
    7a02:	8e 01       	movw	r16, r28
    7a04:	0f 5f       	subi	r16, 0xFF	; 255
    7a06:	1f 4f       	sbci	r17, 0xFF	; 255
    7a08:	a8 01       	movw	r20, r16
    7a0a:	6e 01       	movw	r12, r28
    7a0c:	85 e2       	ldi	r24, 0x25	; 37
    7a0e:	c8 0e       	add	r12, r24
    7a10:	d1 1c       	adc	r13, r1
    7a12:	da 01       	movw	r26, r20
    7a14:	f7 01       	movw	r30, r14
    7a16:	83 e0       	ldi	r24, 0x03	; 3
    7a18:	81 90       	ld	r8, Z+
    7a1a:	91 90       	ld	r9, Z+
    7a1c:	a1 90       	ld	r10, Z+
    7a1e:	b1 90       	ld	r11, Z+
    7a20:	8d 92       	st	X+, r8
    7a22:	9d 92       	st	X+, r9
    7a24:	ad 92       	st	X+, r10
    7a26:	bd 92       	st	X+, r11
    7a28:	81 50       	subi	r24, 0x01	; 1
    7a2a:	b1 f7       	brne	.-20     	; 0x7a18 <matrixInplaceMultiply+0x17c>
    7a2c:	fc e0       	ldi	r31, 0x0C	; 12
    7a2e:	ef 0e       	add	r14, r31
    7a30:	f1 1c       	adc	r15, r1
    7a32:	44 5f       	subi	r20, 0xF4	; 244
    7a34:	5f 4f       	sbci	r21, 0xFF	; 255
    7a36:	4c 15       	cp	r20, r12
    7a38:	5d 05       	cpc	r21, r13
    7a3a:	59 f7       	brne	.-42     	; 0x7a12 <matrixInplaceMultiply+0x176>
    7a3c:	09 a7       	std	Y+41, r16	; 0x29
    7a3e:	1a a7       	std	Y+42, r17	; 0x2a
    7a40:	51 cf       	rjmp	.-350    	; 0x78e4 <matrixInplaceMultiply+0x48>

00007a42 <matrixTranspose>:
    7a42:	0f 93       	push	r16
    7a44:	1f 93       	push	r17
    7a46:	cf 93       	push	r28
    7a48:	df 93       	push	r29
    7a4a:	9b 01       	movw	r18, r22
    7a4c:	ec 01       	movw	r28, r24
    7a4e:	8b 01       	movw	r16, r22
    7a50:	0c 5d       	subi	r16, 0xDC	; 220
    7a52:	1f 4f       	sbci	r17, 0xFF	; 255
    7a54:	fe 01       	movw	r30, r28
    7a56:	d9 01       	movw	r26, r18
    7a58:	90 e0       	ldi	r25, 0x00	; 0
    7a5a:	4d 91       	ld	r20, X+
    7a5c:	5d 91       	ld	r21, X+
    7a5e:	6d 91       	ld	r22, X+
    7a60:	7d 91       	ld	r23, X+
    7a62:	40 83       	st	Z, r20
    7a64:	51 83       	std	Z+1, r21	; 0x01
    7a66:	62 83       	std	Z+2, r22	; 0x02
    7a68:	73 83       	std	Z+3, r23	; 0x03
    7a6a:	9f 5f       	subi	r25, 0xFF	; 255
    7a6c:	3c 96       	adiw	r30, 0x0c	; 12
    7a6e:	93 30       	cpi	r25, 0x03	; 3
    7a70:	a1 f7       	brne	.-24     	; 0x7a5a <matrixTranspose+0x18>
    7a72:	24 5f       	subi	r18, 0xF4	; 244
    7a74:	3f 4f       	sbci	r19, 0xFF	; 255
    7a76:	24 96       	adiw	r28, 0x04	; 4
    7a78:	20 17       	cp	r18, r16
    7a7a:	31 07       	cpc	r19, r17
    7a7c:	59 f7       	brne	.-42     	; 0x7a54 <matrixTranspose+0x12>
    7a7e:	df 91       	pop	r29
    7a80:	cf 91       	pop	r28
    7a82:	1f 91       	pop	r17
    7a84:	0f 91       	pop	r16
    7a86:	08 95       	ret

00007a88 <matrixInplaceTranspose>:
    7a88:	cf 92       	push	r12
    7a8a:	df 92       	push	r13
    7a8c:	ef 92       	push	r14
    7a8e:	ff 92       	push	r15
    7a90:	0f 93       	push	r16
    7a92:	1f 93       	push	r17
    7a94:	cf 93       	push	r28
    7a96:	df 93       	push	r29
    7a98:	ac 01       	movw	r20, r24
    7a9a:	60 e0       	ldi	r22, 0x00	; 0
    7a9c:	70 e0       	ldi	r23, 0x00	; 0
    7a9e:	80 e0       	ldi	r24, 0x00	; 0
    7aa0:	8f 5f       	subi	r24, 0xFF	; 255
    7aa2:	98 2f       	mov	r25, r24
    7aa4:	eb 01       	movw	r28, r22
    7aa6:	cc 0f       	add	r28, r28
    7aa8:	dd 1f       	adc	r29, r29
    7aaa:	c6 0f       	add	r28, r22
    7aac:	d7 1f       	adc	r29, r23
    7aae:	29 2f       	mov	r18, r25
    7ab0:	30 e0       	ldi	r19, 0x00	; 0
    7ab2:	de 01       	movw	r26, r28
    7ab4:	a2 0f       	add	r26, r18
    7ab6:	b3 1f       	adc	r27, r19
    7ab8:	aa 0f       	add	r26, r26
    7aba:	bb 1f       	adc	r27, r27
    7abc:	aa 0f       	add	r26, r26
    7abe:	bb 1f       	adc	r27, r27
    7ac0:	a4 0f       	add	r26, r20
    7ac2:	b5 1f       	adc	r27, r21
    7ac4:	cd 90       	ld	r12, X+
    7ac6:	dd 90       	ld	r13, X+
    7ac8:	ed 90       	ld	r14, X+
    7aca:	fc 90       	ld	r15, X
    7acc:	13 97       	sbiw	r26, 0x03	; 3
    7ace:	f9 01       	movw	r30, r18
    7ad0:	ee 0f       	add	r30, r30
    7ad2:	ff 1f       	adc	r31, r31
    7ad4:	e2 0f       	add	r30, r18
    7ad6:	f3 1f       	adc	r31, r19
    7ad8:	e6 0f       	add	r30, r22
    7ada:	f7 1f       	adc	r31, r23
    7adc:	ee 0f       	add	r30, r30
    7ade:	ff 1f       	adc	r31, r31
    7ae0:	ee 0f       	add	r30, r30
    7ae2:	ff 1f       	adc	r31, r31
    7ae4:	e4 0f       	add	r30, r20
    7ae6:	f5 1f       	adc	r31, r21
    7ae8:	00 81       	ld	r16, Z
    7aea:	11 81       	ldd	r17, Z+1	; 0x01
    7aec:	22 81       	ldd	r18, Z+2	; 0x02
    7aee:	33 81       	ldd	r19, Z+3	; 0x03
    7af0:	0d 93       	st	X+, r16
    7af2:	1d 93       	st	X+, r17
    7af4:	2d 93       	st	X+, r18
    7af6:	3c 93       	st	X, r19
    7af8:	13 97       	sbiw	r26, 0x03	; 3
    7afa:	c0 82       	st	Z, r12
    7afc:	d1 82       	std	Z+1, r13	; 0x01
    7afe:	e2 82       	std	Z+2, r14	; 0x02
    7b00:	f3 82       	std	Z+3, r15	; 0x03
    7b02:	9f 5f       	subi	r25, 0xFF	; 255
    7b04:	92 30       	cpi	r25, 0x02	; 2
    7b06:	99 f2       	breq	.-90     	; 0x7aae <matrixInplaceTranspose+0x26>
    7b08:	6f 5f       	subi	r22, 0xFF	; 255
    7b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0c:	82 30       	cpi	r24, 0x02	; 2
    7b0e:	41 f6       	brne	.-112    	; 0x7aa0 <matrixInplaceTranspose+0x18>
    7b10:	df 91       	pop	r29
    7b12:	cf 91       	pop	r28
    7b14:	1f 91       	pop	r17
    7b16:	0f 91       	pop	r16
    7b18:	ff 90       	pop	r15
    7b1a:	ef 90       	pop	r14
    7b1c:	df 90       	pop	r13
    7b1e:	cf 90       	pop	r12
    7b20:	08 95       	ret

00007b22 <choleskyDecomposition>:
    7b22:	4f 92       	push	r4
    7b24:	5f 92       	push	r5
    7b26:	6f 92       	push	r6
    7b28:	7f 92       	push	r7
    7b2a:	8f 92       	push	r8
    7b2c:	9f 92       	push	r9
    7b2e:	af 92       	push	r10
    7b30:	bf 92       	push	r11
    7b32:	cf 92       	push	r12
    7b34:	df 92       	push	r13
    7b36:	ef 92       	push	r14
    7b38:	ff 92       	push	r15
    7b3a:	0f 93       	push	r16
    7b3c:	1f 93       	push	r17
    7b3e:	cf 93       	push	r28
    7b40:	df 93       	push	r29
    7b42:	ec 01       	movw	r28, r24
    7b44:	8b 01       	movw	r16, r22
    7b46:	fb 01       	movw	r30, r22
    7b48:	60 81       	ld	r22, Z
    7b4a:	71 81       	ldd	r23, Z+1	; 0x01
    7b4c:	82 81       	ldd	r24, Z+2	; 0x02
    7b4e:	93 81       	ldd	r25, Z+3	; 0x03
    7b50:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    7b54:	6b 01       	movw	r12, r22
    7b56:	7c 01       	movw	r14, r24
    7b58:	68 83       	st	Y, r22
    7b5a:	79 83       	std	Y+1, r23	; 0x01
    7b5c:	8a 83       	std	Y+2, r24	; 0x02
    7b5e:	9b 83       	std	Y+3, r25	; 0x03
    7b60:	9b 01       	movw	r18, r22
    7b62:	ac 01       	movw	r20, r24
    7b64:	f8 01       	movw	r30, r16
    7b66:	64 81       	ldd	r22, Z+4	; 0x04
    7b68:	75 81       	ldd	r23, Z+5	; 0x05
    7b6a:	86 81       	ldd	r24, Z+6	; 0x06
    7b6c:	97 81       	ldd	r25, Z+7	; 0x07
    7b6e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    7b72:	4b 01       	movw	r8, r22
    7b74:	5c 01       	movw	r10, r24
    7b76:	6c 83       	std	Y+4, r22	; 0x04
    7b78:	7d 83       	std	Y+5, r23	; 0x05
    7b7a:	8e 83       	std	Y+6, r24	; 0x06
    7b7c:	9f 83       	std	Y+7, r25	; 0x07
    7b7e:	a7 01       	movw	r20, r14
    7b80:	96 01       	movw	r18, r12
    7b82:	f8 01       	movw	r30, r16
    7b84:	60 85       	ldd	r22, Z+8	; 0x08
    7b86:	71 85       	ldd	r23, Z+9	; 0x09
    7b88:	82 85       	ldd	r24, Z+10	; 0x0a
    7b8a:	93 85       	ldd	r25, Z+11	; 0x0b
    7b8c:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    7b90:	6b 01       	movw	r12, r22
    7b92:	7c 01       	movw	r14, r24
    7b94:	68 87       	std	Y+8, r22	; 0x08
    7b96:	79 87       	std	Y+9, r23	; 0x09
    7b98:	8a 87       	std	Y+10, r24	; 0x0a
    7b9a:	9b 87       	std	Y+11, r25	; 0x0b
    7b9c:	1c 86       	std	Y+12, r1	; 0x0c
    7b9e:	1d 86       	std	Y+13, r1	; 0x0d
    7ba0:	1e 86       	std	Y+14, r1	; 0x0e
    7ba2:	1f 86       	std	Y+15, r1	; 0x0f
    7ba4:	a5 01       	movw	r20, r10
    7ba6:	94 01       	movw	r18, r8
    7ba8:	c5 01       	movw	r24, r10
    7baa:	b4 01       	movw	r22, r8
    7bac:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7bb0:	9b 01       	movw	r18, r22
    7bb2:	ac 01       	movw	r20, r24
    7bb4:	f8 01       	movw	r30, r16
    7bb6:	60 89       	ldd	r22, Z+16	; 0x10
    7bb8:	71 89       	ldd	r23, Z+17	; 0x11
    7bba:	82 89       	ldd	r24, Z+18	; 0x12
    7bbc:	93 89       	ldd	r25, Z+19	; 0x13
    7bbe:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7bc2:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    7bc6:	2b 01       	movw	r4, r22
    7bc8:	3c 01       	movw	r6, r24
    7bca:	68 8b       	std	Y+16, r22	; 0x10
    7bcc:	79 8b       	std	Y+17, r23	; 0x11
    7bce:	8a 8b       	std	Y+18, r24	; 0x12
    7bd0:	9b 8b       	std	Y+19, r25	; 0x13
    7bd2:	a7 01       	movw	r20, r14
    7bd4:	96 01       	movw	r18, r12
    7bd6:	c5 01       	movw	r24, r10
    7bd8:	b4 01       	movw	r22, r8
    7bda:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7bde:	9b 01       	movw	r18, r22
    7be0:	ac 01       	movw	r20, r24
    7be2:	f8 01       	movw	r30, r16
    7be4:	64 89       	ldd	r22, Z+20	; 0x14
    7be6:	75 89       	ldd	r23, Z+21	; 0x15
    7be8:	86 89       	ldd	r24, Z+22	; 0x16
    7bea:	97 89       	ldd	r25, Z+23	; 0x17
    7bec:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7bf0:	a3 01       	movw	r20, r6
    7bf2:	92 01       	movw	r18, r4
    7bf4:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    7bf8:	4b 01       	movw	r8, r22
    7bfa:	5c 01       	movw	r10, r24
    7bfc:	6c 8b       	std	Y+20, r22	; 0x14
    7bfe:	7d 8b       	std	Y+21, r23	; 0x15
    7c00:	8e 8b       	std	Y+22, r24	; 0x16
    7c02:	9f 8b       	std	Y+23, r25	; 0x17
    7c04:	18 8e       	std	Y+24, r1	; 0x18
    7c06:	19 8e       	std	Y+25, r1	; 0x19
    7c08:	1a 8e       	std	Y+26, r1	; 0x1a
    7c0a:	1b 8e       	std	Y+27, r1	; 0x1b
    7c0c:	1c 8e       	std	Y+28, r1	; 0x1c
    7c0e:	1d 8e       	std	Y+29, r1	; 0x1d
    7c10:	1e 8e       	std	Y+30, r1	; 0x1e
    7c12:	1f 8e       	std	Y+31, r1	; 0x1f
    7c14:	a7 01       	movw	r20, r14
    7c16:	96 01       	movw	r18, r12
    7c18:	c7 01       	movw	r24, r14
    7c1a:	b6 01       	movw	r22, r12
    7c1c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7c20:	9b 01       	movw	r18, r22
    7c22:	ac 01       	movw	r20, r24
    7c24:	f8 01       	movw	r30, r16
    7c26:	60 a1       	ldd	r22, Z+32	; 0x20
    7c28:	71 a1       	ldd	r23, Z+33	; 0x21
    7c2a:	82 a1       	ldd	r24, Z+34	; 0x22
    7c2c:	93 a1       	ldd	r25, Z+35	; 0x23
    7c2e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7c32:	6b 01       	movw	r12, r22
    7c34:	7c 01       	movw	r14, r24
    7c36:	a5 01       	movw	r20, r10
    7c38:	94 01       	movw	r18, r8
    7c3a:	c5 01       	movw	r24, r10
    7c3c:	b4 01       	movw	r22, r8
    7c3e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7c42:	9b 01       	movw	r18, r22
    7c44:	ac 01       	movw	r20, r24
    7c46:	c7 01       	movw	r24, r14
    7c48:	b6 01       	movw	r22, r12
    7c4a:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7c4e:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    7c52:	68 a3       	std	Y+32, r22	; 0x20
    7c54:	79 a3       	std	Y+33, r23	; 0x21
    7c56:	8a a3       	std	Y+34, r24	; 0x22
    7c58:	9b a3       	std	Y+35, r25	; 0x23
    7c5a:	df 91       	pop	r29
    7c5c:	cf 91       	pop	r28
    7c5e:	1f 91       	pop	r17
    7c60:	0f 91       	pop	r16
    7c62:	ff 90       	pop	r15
    7c64:	ef 90       	pop	r14
    7c66:	df 90       	pop	r13
    7c68:	cf 90       	pop	r12
    7c6a:	bf 90       	pop	r11
    7c6c:	af 90       	pop	r10
    7c6e:	9f 90       	pop	r9
    7c70:	8f 90       	pop	r8
    7c72:	7f 90       	pop	r7
    7c74:	6f 90       	pop	r6
    7c76:	5f 90       	pop	r5
    7c78:	4f 90       	pop	r4
    7c7a:	08 95       	ret

00007c7c <getEigenvector>:
    7c7c:	4f 92       	push	r4
    7c7e:	5f 92       	push	r5
    7c80:	6f 92       	push	r6
    7c82:	7f 92       	push	r7
    7c84:	9f 92       	push	r9
    7c86:	af 92       	push	r10
    7c88:	bf 92       	push	r11
    7c8a:	cf 92       	push	r12
    7c8c:	df 92       	push	r13
    7c8e:	ef 92       	push	r14
    7c90:	ff 92       	push	r15
    7c92:	0f 93       	push	r16
    7c94:	1f 93       	push	r17
    7c96:	cf 93       	push	r28
    7c98:	df 93       	push	r29
    7c9a:	98 2e       	mov	r9, r24
    7c9c:	d9 2f       	mov	r29, r25
    7c9e:	5b 01       	movw	r10, r22
    7ca0:	6b 01       	movw	r12, r22
    7ca2:	e1 2c       	mov	r14, r1
    7ca4:	f1 2c       	mov	r15, r1
    7ca6:	86 01       	movw	r16, r12
    7ca8:	c0 e0       	ldi	r28, 0x00	; 0
    7caa:	41 2c       	mov	r4, r1
    7cac:	51 2c       	mov	r5, r1
    7cae:	32 01       	movw	r6, r4
    7cb0:	f8 01       	movw	r30, r16
    7cb2:	60 81       	ld	r22, Z
    7cb4:	71 81       	ldd	r23, Z+1	; 0x01
    7cb6:	82 81       	ldd	r24, Z+2	; 0x02
    7cb8:	93 81       	ldd	r25, Z+3	; 0x03
    7cba:	9b 01       	movw	r18, r22
    7cbc:	ac 01       	movw	r20, r24
    7cbe:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7cc2:	9b 01       	movw	r18, r22
    7cc4:	ac 01       	movw	r20, r24
    7cc6:	c3 01       	movw	r24, r6
    7cc8:	b2 01       	movw	r22, r4
    7cca:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    7cce:	2b 01       	movw	r4, r22
    7cd0:	3c 01       	movw	r6, r24
    7cd2:	cf 5f       	subi	r28, 0xFF	; 255
    7cd4:	04 5f       	subi	r16, 0xF4	; 244
    7cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    7cd8:	c3 30       	cpi	r28, 0x03	; 3
    7cda:	51 f7       	brne	.-44     	; 0x7cb0 <getEigenvector+0x34>
    7cdc:	20 e0       	ldi	r18, 0x00	; 0
    7cde:	30 e0       	ldi	r19, 0x00	; 0
    7ce0:	a9 01       	movw	r20, r18
    7ce2:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    7ce6:	18 16       	cp	r1, r24
    7ce8:	d4 f0       	brlt	.+52     	; 0x7d1e <getEigenvector+0xa2>
    7cea:	8f ef       	ldi	r24, 0xFF	; 255
    7cec:	e8 1a       	sub	r14, r24
    7cee:	f8 0a       	sbc	r15, r24
    7cf0:	e4 e0       	ldi	r30, 0x04	; 4
    7cf2:	ce 0e       	add	r12, r30
    7cf4:	d1 1c       	adc	r13, r1
    7cf6:	f3 e0       	ldi	r31, 0x03	; 3
    7cf8:	ef 16       	cp	r14, r31
    7cfa:	f1 04       	cpc	r15, r1
    7cfc:	a1 f6       	brne	.-88     	; 0x7ca6 <getEigenvector+0x2a>
    7cfe:	df 91       	pop	r29
    7d00:	cf 91       	pop	r28
    7d02:	1f 91       	pop	r17
    7d04:	0f 91       	pop	r16
    7d06:	ff 90       	pop	r15
    7d08:	ef 90       	pop	r14
    7d0a:	df 90       	pop	r13
    7d0c:	cf 90       	pop	r12
    7d0e:	bf 90       	pop	r11
    7d10:	af 90       	pop	r10
    7d12:	9f 90       	pop	r9
    7d14:	7f 90       	pop	r7
    7d16:	6f 90       	pop	r6
    7d18:	5f 90       	pop	r5
    7d1a:	4f 90       	pop	r4
    7d1c:	08 95       	ret
    7d1e:	c3 01       	movw	r24, r6
    7d20:	b2 01       	movw	r22, r4
    7d22:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    7d26:	2b 01       	movw	r4, r22
    7d28:	3c 01       	movw	r6, r24
    7d2a:	ee 0c       	add	r14, r14
    7d2c:	ff 1c       	adc	r15, r15
    7d2e:	ee 0c       	add	r14, r14
    7d30:	ff 1c       	adc	r15, r15
    7d32:	ae 0c       	add	r10, r14
    7d34:	bf 1c       	adc	r11, r15
    7d36:	09 2d       	mov	r16, r9
    7d38:	1d 2f       	mov	r17, r29
    7d3a:	e8 01       	movw	r28, r16
    7d3c:	2c 96       	adiw	r28, 0x0c	; 12
    7d3e:	a3 01       	movw	r20, r6
    7d40:	92 01       	movw	r18, r4
    7d42:	f5 01       	movw	r30, r10
    7d44:	60 81       	ld	r22, Z
    7d46:	71 81       	ldd	r23, Z+1	; 0x01
    7d48:	82 81       	ldd	r24, Z+2	; 0x02
    7d4a:	93 81       	ldd	r25, Z+3	; 0x03
    7d4c:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    7d50:	f8 01       	movw	r30, r16
    7d52:	61 93       	st	Z+, r22
    7d54:	71 93       	st	Z+, r23
    7d56:	81 93       	st	Z+, r24
    7d58:	91 93       	st	Z+, r25
    7d5a:	8f 01       	movw	r16, r30
    7d5c:	fc e0       	ldi	r31, 0x0C	; 12
    7d5e:	af 0e       	add	r10, r31
    7d60:	b1 1c       	adc	r11, r1
    7d62:	0c 17       	cp	r16, r28
    7d64:	1d 07       	cpc	r17, r29
    7d66:	59 f7       	brne	.-42     	; 0x7d3e <getEigenvector+0xc2>
    7d68:	ca cf       	rjmp	.-108    	; 0x7cfe <getEigenvector+0x82>

00007d6a <matrixInverse>:
    7d6a:	4f 92       	push	r4
    7d6c:	5f 92       	push	r5
    7d6e:	6f 92       	push	r6
    7d70:	7f 92       	push	r7
    7d72:	8f 92       	push	r8
    7d74:	9f 92       	push	r9
    7d76:	af 92       	push	r10
    7d78:	bf 92       	push	r11
    7d7a:	cf 92       	push	r12
    7d7c:	df 92       	push	r13
    7d7e:	ef 92       	push	r14
    7d80:	ff 92       	push	r15
    7d82:	0f 93       	push	r16
    7d84:	1f 93       	push	r17
    7d86:	cf 93       	push	r28
    7d88:	df 93       	push	r29
    7d8a:	cd b7       	in	r28, 0x3d	; 61
    7d8c:	de b7       	in	r29, 0x3e	; 62
    7d8e:	6e 97       	sbiw	r28, 0x1e	; 30
    7d90:	cd bf       	out	0x3d, r28	; 61
    7d92:	de bf       	out	0x3e, r29	; 62
    7d94:	8c 01       	movw	r16, r24
    7d96:	6d 8f       	std	Y+29, r22	; 0x1d
    7d98:	7e 8f       	std	Y+30, r23	; 0x1e
    7d9a:	db 01       	movw	r26, r22
    7d9c:	50 96       	adiw	r26, 0x10	; 16
    7d9e:	8d 91       	ld	r24, X+
    7da0:	9d 91       	ld	r25, X+
    7da2:	0d 90       	ld	r0, X+
    7da4:	bc 91       	ld	r27, X
    7da6:	a0 2d       	mov	r26, r0
    7da8:	89 87       	std	Y+9, r24	; 0x09
    7daa:	9a 87       	std	Y+10, r25	; 0x0a
    7dac:	ab 87       	std	Y+11, r26	; 0x0b
    7dae:	bc 87       	std	Y+12, r27	; 0x0c
    7db0:	db 01       	movw	r26, r22
    7db2:	90 96       	adiw	r26, 0x20	; 32
    7db4:	8d 91       	ld	r24, X+
    7db6:	9d 91       	ld	r25, X+
    7db8:	0d 90       	ld	r0, X+
    7dba:	bc 91       	ld	r27, X
    7dbc:	a0 2d       	mov	r26, r0
    7dbe:	8d 83       	std	Y+5, r24	; 0x05
    7dc0:	9e 83       	std	Y+6, r25	; 0x06
    7dc2:	af 83       	std	Y+7, r26	; 0x07
    7dc4:	b8 87       	std	Y+8, r27	; 0x08
    7dc6:	db 01       	movw	r26, r22
    7dc8:	54 96       	adiw	r26, 0x14	; 20
    7dca:	8d 91       	ld	r24, X+
    7dcc:	9d 91       	ld	r25, X+
    7dce:	0d 90       	ld	r0, X+
    7dd0:	bc 91       	ld	r27, X
    7dd2:	a0 2d       	mov	r26, r0
    7dd4:	89 83       	std	Y+1, r24	; 0x01
    7dd6:	9a 83       	std	Y+2, r25	; 0x02
    7dd8:	ab 83       	std	Y+3, r26	; 0x03
    7dda:	bc 83       	std	Y+4, r27	; 0x04
    7ddc:	db 01       	movw	r26, r22
    7dde:	5c 96       	adiw	r26, 0x1c	; 28
    7de0:	8d 91       	ld	r24, X+
    7de2:	9d 91       	ld	r25, X+
    7de4:	0d 90       	ld	r0, X+
    7de6:	bc 91       	ld	r27, X
    7de8:	a0 2d       	mov	r26, r0
    7dea:	8d 87       	std	Y+13, r24	; 0x0d
    7dec:	9e 87       	std	Y+14, r25	; 0x0e
    7dee:	af 87       	std	Y+15, r26	; 0x0f
    7df0:	b8 8b       	std	Y+16, r27	; 0x10
    7df2:	2d 81       	ldd	r18, Y+5	; 0x05
    7df4:	3e 81       	ldd	r19, Y+6	; 0x06
    7df6:	4f 81       	ldd	r20, Y+7	; 0x07
    7df8:	58 85       	ldd	r21, Y+8	; 0x08
    7dfa:	69 85       	ldd	r22, Y+9	; 0x09
    7dfc:	7a 85       	ldd	r23, Y+10	; 0x0a
    7dfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e00:	9c 85       	ldd	r25, Y+12	; 0x0c
    7e02:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7e06:	6b 01       	movw	r12, r22
    7e08:	7c 01       	movw	r14, r24
    7e0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    7e0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    7e0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    7e10:	58 89       	ldd	r21, Y+16	; 0x10
    7e12:	69 81       	ldd	r22, Y+1	; 0x01
    7e14:	7a 81       	ldd	r23, Y+2	; 0x02
    7e16:	8b 81       	ldd	r24, Y+3	; 0x03
    7e18:	9c 81       	ldd	r25, Y+4	; 0x04
    7e1a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7e1e:	9b 01       	movw	r18, r22
    7e20:	ac 01       	movw	r20, r24
    7e22:	c7 01       	movw	r24, r14
    7e24:	b6 01       	movw	r22, r12
    7e26:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7e2a:	2b 01       	movw	r4, r22
    7e2c:	3c 01       	movw	r6, r24
    7e2e:	f8 01       	movw	r30, r16
    7e30:	60 83       	st	Z, r22
    7e32:	71 83       	std	Z+1, r23	; 0x01
    7e34:	82 83       	std	Z+2, r24	; 0x02
    7e36:	93 83       	std	Z+3, r25	; 0x03
    7e38:	ad 8d       	ldd	r26, Y+29	; 0x1d
    7e3a:	be 8d       	ldd	r27, Y+30	; 0x1e
    7e3c:	18 96       	adiw	r26, 0x08	; 8
    7e3e:	cd 90       	ld	r12, X+
    7e40:	dd 90       	ld	r13, X+
    7e42:	ed 90       	ld	r14, X+
    7e44:	fc 90       	ld	r15, X
    7e46:	1b 97       	sbiw	r26, 0x0b	; 11
    7e48:	a7 01       	movw	r20, r14
    7e4a:	96 01       	movw	r18, r12
    7e4c:	6d 85       	ldd	r22, Y+13	; 0x0d
    7e4e:	7e 85       	ldd	r23, Y+14	; 0x0e
    7e50:	8f 85       	ldd	r24, Y+15	; 0x0f
    7e52:	98 89       	ldd	r25, Y+16	; 0x10
    7e54:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7e58:	4b 01       	movw	r8, r22
    7e5a:	5c 01       	movw	r10, r24
    7e5c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7e5e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7e60:	24 81       	ldd	r18, Z+4	; 0x04
    7e62:	35 81       	ldd	r19, Z+5	; 0x05
    7e64:	46 81       	ldd	r20, Z+6	; 0x06
    7e66:	57 81       	ldd	r21, Z+7	; 0x07
    7e68:	6d 81       	ldd	r22, Y+5	; 0x05
    7e6a:	7e 81       	ldd	r23, Y+6	; 0x06
    7e6c:	8f 81       	ldd	r24, Y+7	; 0x07
    7e6e:	98 85       	ldd	r25, Y+8	; 0x08
    7e70:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7e74:	9b 01       	movw	r18, r22
    7e76:	ac 01       	movw	r20, r24
    7e78:	c5 01       	movw	r24, r10
    7e7a:	b4 01       	movw	r22, r8
    7e7c:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7e80:	d8 01       	movw	r26, r16
    7e82:	14 96       	adiw	r26, 0x04	; 4
    7e84:	6d 93       	st	X+, r22
    7e86:	7d 93       	st	X+, r23
    7e88:	8d 93       	st	X+, r24
    7e8a:	9c 93       	st	X, r25
    7e8c:	17 97       	sbiw	r26, 0x07	; 7
    7e8e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    7e90:	be 8d       	ldd	r27, Y+30	; 0x1e
    7e92:	14 96       	adiw	r26, 0x04	; 4
    7e94:	8d 91       	ld	r24, X+
    7e96:	9d 91       	ld	r25, X+
    7e98:	0d 90       	ld	r0, X+
    7e9a:	bc 91       	ld	r27, X
    7e9c:	a0 2d       	mov	r26, r0
    7e9e:	89 8b       	std	Y+17, r24	; 0x11
    7ea0:	9a 8b       	std	Y+18, r25	; 0x12
    7ea2:	ab 8b       	std	Y+19, r26	; 0x13
    7ea4:	bc 8b       	std	Y+20, r27	; 0x14
    7ea6:	9c 01       	movw	r18, r24
    7ea8:	ad 01       	movw	r20, r26
    7eaa:	69 81       	ldd	r22, Y+1	; 0x01
    7eac:	7a 81       	ldd	r23, Y+2	; 0x02
    7eae:	8b 81       	ldd	r24, Y+3	; 0x03
    7eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    7eb2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7eb6:	4b 01       	movw	r8, r22
    7eb8:	5c 01       	movw	r10, r24
    7eba:	a7 01       	movw	r20, r14
    7ebc:	96 01       	movw	r18, r12
    7ebe:	69 85       	ldd	r22, Y+9	; 0x09
    7ec0:	7a 85       	ldd	r23, Y+10	; 0x0a
    7ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ec4:	9c 85       	ldd	r25, Y+12	; 0x0c
    7ec6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7eca:	9b 01       	movw	r18, r22
    7ecc:	ac 01       	movw	r20, r24
    7ece:	c5 01       	movw	r24, r10
    7ed0:	b4 01       	movw	r22, r8
    7ed2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7ed6:	f8 01       	movw	r30, r16
    7ed8:	60 87       	std	Z+8, r22	; 0x08
    7eda:	71 87       	std	Z+9, r23	; 0x09
    7edc:	82 87       	std	Z+10, r24	; 0x0a
    7ede:	93 87       	std	Z+11, r25	; 0x0b
    7ee0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    7ee2:	be 8d       	ldd	r27, Y+30	; 0x1e
    7ee4:	58 96       	adiw	r26, 0x18	; 24
    7ee6:	8d 91       	ld	r24, X+
    7ee8:	9d 91       	ld	r25, X+
    7eea:	0d 90       	ld	r0, X+
    7eec:	bc 91       	ld	r27, X
    7eee:	a0 2d       	mov	r26, r0
    7ef0:	89 87       	std	Y+9, r24	; 0x09
    7ef2:	9a 87       	std	Y+10, r25	; 0x0a
    7ef4:	ab 87       	std	Y+11, r26	; 0x0b
    7ef6:	bc 87       	std	Y+12, r27	; 0x0c
    7ef8:	9c 01       	movw	r18, r24
    7efa:	ad 01       	movw	r20, r26
    7efc:	69 81       	ldd	r22, Y+1	; 0x01
    7efe:	7a 81       	ldd	r23, Y+2	; 0x02
    7f00:	8b 81       	ldd	r24, Y+3	; 0x03
    7f02:	9c 81       	ldd	r25, Y+4	; 0x04
    7f04:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7f08:	6b 01       	movw	r12, r22
    7f0a:	7c 01       	movw	r14, r24
    7f0c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7f0e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7f10:	24 85       	ldd	r18, Z+12	; 0x0c
    7f12:	35 85       	ldd	r19, Z+13	; 0x0d
    7f14:	46 85       	ldd	r20, Z+14	; 0x0e
    7f16:	57 85       	ldd	r21, Z+15	; 0x0f
    7f18:	6d 81       	ldd	r22, Y+5	; 0x05
    7f1a:	7e 81       	ldd	r23, Y+6	; 0x06
    7f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    7f1e:	98 85       	ldd	r25, Y+8	; 0x08
    7f20:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7f24:	9b 01       	movw	r18, r22
    7f26:	ac 01       	movw	r20, r24
    7f28:	c7 01       	movw	r24, r14
    7f2a:	b6 01       	movw	r22, r12
    7f2c:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7f30:	69 8f       	std	Y+25, r22	; 0x19
    7f32:	7a 8f       	std	Y+26, r23	; 0x1a
    7f34:	8b 8f       	std	Y+27, r24	; 0x1b
    7f36:	9c 8f       	std	Y+28, r25	; 0x1c
    7f38:	d8 01       	movw	r26, r16
    7f3a:	1c 96       	adiw	r26, 0x0c	; 12
    7f3c:	6d 93       	st	X+, r22
    7f3e:	7d 93       	st	X+, r23
    7f40:	8d 93       	st	X+, r24
    7f42:	9c 93       	st	X, r25
    7f44:	1f 97       	sbiw	r26, 0x0f	; 15
    7f46:	ed 8d       	ldd	r30, Y+29	; 0x1d
    7f48:	fe 8d       	ldd	r31, Y+30	; 0x1e
    7f4a:	80 80       	ld	r8, Z
    7f4c:	91 80       	ldd	r9, Z+1	; 0x01
    7f4e:	a2 80       	ldd	r10, Z+2	; 0x02
    7f50:	b3 80       	ldd	r11, Z+3	; 0x03
    7f52:	80 85       	ldd	r24, Z+8	; 0x08
    7f54:	91 85       	ldd	r25, Z+9	; 0x09
    7f56:	a2 85       	ldd	r26, Z+10	; 0x0a
    7f58:	b3 85       	ldd	r27, Z+11	; 0x0b
    7f5a:	8d 8b       	std	Y+21, r24	; 0x15
    7f5c:	9e 8b       	std	Y+22, r25	; 0x16
    7f5e:	af 8b       	std	Y+23, r26	; 0x17
    7f60:	b8 8f       	std	Y+24, r27	; 0x18
    7f62:	a5 01       	movw	r20, r10
    7f64:	94 01       	movw	r18, r8
    7f66:	6d 81       	ldd	r22, Y+5	; 0x05
    7f68:	7e 81       	ldd	r23, Y+6	; 0x06
    7f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    7f6c:	98 85       	ldd	r25, Y+8	; 0x08
    7f6e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7f72:	6b 01       	movw	r12, r22
    7f74:	7c 01       	movw	r14, r24
    7f76:	2d 89       	ldd	r18, Y+21	; 0x15
    7f78:	3e 89       	ldd	r19, Y+22	; 0x16
    7f7a:	4f 89       	ldd	r20, Y+23	; 0x17
    7f7c:	58 8d       	ldd	r21, Y+24	; 0x18
    7f7e:	69 85       	ldd	r22, Y+9	; 0x09
    7f80:	7a 85       	ldd	r23, Y+10	; 0x0a
    7f82:	8b 85       	ldd	r24, Y+11	; 0x0b
    7f84:	9c 85       	ldd	r25, Y+12	; 0x0c
    7f86:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7f8a:	9b 01       	movw	r18, r22
    7f8c:	ac 01       	movw	r20, r24
    7f8e:	c7 01       	movw	r24, r14
    7f90:	b6 01       	movw	r22, r12
    7f92:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7f96:	f8 01       	movw	r30, r16
    7f98:	60 8b       	std	Z+16, r22	; 0x10
    7f9a:	71 8b       	std	Z+17, r23	; 0x11
    7f9c:	82 8b       	std	Z+18, r24	; 0x12
    7f9e:	93 8b       	std	Z+19, r25	; 0x13
    7fa0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    7fa2:	be 8d       	ldd	r27, Y+30	; 0x1e
    7fa4:	1c 96       	adiw	r26, 0x0c	; 12
    7fa6:	8d 91       	ld	r24, X+
    7fa8:	9d 91       	ld	r25, X+
    7faa:	0d 90       	ld	r0, X+
    7fac:	bc 91       	ld	r27, X
    7fae:	a0 2d       	mov	r26, r0
    7fb0:	8d 83       	std	Y+5, r24	; 0x05
    7fb2:	9e 83       	std	Y+6, r25	; 0x06
    7fb4:	af 83       	std	Y+7, r26	; 0x07
    7fb6:	b8 87       	std	Y+8, r27	; 0x08
    7fb8:	9c 01       	movw	r18, r24
    7fba:	ad 01       	movw	r20, r26
    7fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    7fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    7fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    7fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    7fc4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7fc8:	6b 01       	movw	r12, r22
    7fca:	7c 01       	movw	r14, r24
    7fcc:	a5 01       	movw	r20, r10
    7fce:	94 01       	movw	r18, r8
    7fd0:	69 81       	ldd	r22, Y+1	; 0x01
    7fd2:	7a 81       	ldd	r23, Y+2	; 0x02
    7fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    7fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    7fd8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    7fdc:	9b 01       	movw	r18, r22
    7fde:	ac 01       	movw	r20, r24
    7fe0:	c7 01       	movw	r24, r14
    7fe2:	b6 01       	movw	r22, r12
    7fe4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    7fe8:	f8 01       	movw	r30, r16
    7fea:	64 8b       	std	Z+20, r22	; 0x14
    7fec:	75 8b       	std	Z+21, r23	; 0x15
    7fee:	86 8b       	std	Z+22, r24	; 0x16
    7ff0:	97 8b       	std	Z+23, r25	; 0x17
    7ff2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    7ff4:	be 8d       	ldd	r27, Y+30	; 0x1e
    7ff6:	50 96       	adiw	r26, 0x10	; 16
    7ff8:	cd 90       	ld	r12, X+
    7ffa:	dd 90       	ld	r13, X+
    7ffc:	ed 90       	ld	r14, X+
    7ffe:	fc 90       	ld	r15, X
    8000:	53 97       	sbiw	r26, 0x13	; 19
    8002:	2d 81       	ldd	r18, Y+5	; 0x05
    8004:	3e 81       	ldd	r19, Y+6	; 0x06
    8006:	4f 81       	ldd	r20, Y+7	; 0x07
    8008:	58 85       	ldd	r21, Y+8	; 0x08
    800a:	6d 85       	ldd	r22, Y+13	; 0x0d
    800c:	7e 85       	ldd	r23, Y+14	; 0x0e
    800e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8010:	98 89       	ldd	r25, Y+16	; 0x10
    8012:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8016:	69 83       	std	Y+1, r22	; 0x01
    8018:	7a 83       	std	Y+2, r23	; 0x02
    801a:	8b 83       	std	Y+3, r24	; 0x03
    801c:	9c 83       	std	Y+4, r25	; 0x04
    801e:	a7 01       	movw	r20, r14
    8020:	96 01       	movw	r18, r12
    8022:	69 85       	ldd	r22, Y+9	; 0x09
    8024:	7a 85       	ldd	r23, Y+10	; 0x0a
    8026:	8b 85       	ldd	r24, Y+11	; 0x0b
    8028:	9c 85       	ldd	r25, Y+12	; 0x0c
    802a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    802e:	9b 01       	movw	r18, r22
    8030:	ac 01       	movw	r20, r24
    8032:	69 81       	ldd	r22, Y+1	; 0x01
    8034:	7a 81       	ldd	r23, Y+2	; 0x02
    8036:	8b 81       	ldd	r24, Y+3	; 0x03
    8038:	9c 81       	ldd	r25, Y+4	; 0x04
    803a:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    803e:	69 83       	std	Y+1, r22	; 0x01
    8040:	7a 83       	std	Y+2, r23	; 0x02
    8042:	8b 83       	std	Y+3, r24	; 0x03
    8044:	9c 83       	std	Y+4, r25	; 0x04
    8046:	f8 01       	movw	r30, r16
    8048:	60 8f       	std	Z+24, r22	; 0x18
    804a:	71 8f       	std	Z+25, r23	; 0x19
    804c:	82 8f       	std	Z+26, r24	; 0x1a
    804e:	93 8f       	std	Z+27, r25	; 0x1b
    8050:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8052:	be 8d       	ldd	r27, Y+30	; 0x1e
    8054:	58 96       	adiw	r26, 0x18	; 24
    8056:	2d 91       	ld	r18, X+
    8058:	3d 91       	ld	r19, X+
    805a:	4d 91       	ld	r20, X+
    805c:	5c 91       	ld	r21, X
    805e:	5b 97       	sbiw	r26, 0x1b	; 27
    8060:	69 89       	ldd	r22, Y+17	; 0x11
    8062:	7a 89       	ldd	r23, Y+18	; 0x12
    8064:	8b 89       	ldd	r24, Y+19	; 0x13
    8066:	9c 89       	ldd	r25, Y+20	; 0x14
    8068:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    806c:	69 87       	std	Y+9, r22	; 0x09
    806e:	7a 87       	std	Y+10, r23	; 0x0a
    8070:	8b 87       	std	Y+11, r24	; 0x0b
    8072:	9c 87       	std	Y+12, r25	; 0x0c
    8074:	a5 01       	movw	r20, r10
    8076:	94 01       	movw	r18, r8
    8078:	6d 85       	ldd	r22, Y+13	; 0x0d
    807a:	7e 85       	ldd	r23, Y+14	; 0x0e
    807c:	8f 85       	ldd	r24, Y+15	; 0x0f
    807e:	98 89       	ldd	r25, Y+16	; 0x10
    8080:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8084:	9b 01       	movw	r18, r22
    8086:	ac 01       	movw	r20, r24
    8088:	69 85       	ldd	r22, Y+9	; 0x09
    808a:	7a 85       	ldd	r23, Y+10	; 0x0a
    808c:	8b 85       	ldd	r24, Y+11	; 0x0b
    808e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8090:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8094:	f8 01       	movw	r30, r16
    8096:	64 8f       	std	Z+28, r22	; 0x1c
    8098:	75 8f       	std	Z+29, r23	; 0x1d
    809a:	86 8f       	std	Z+30, r24	; 0x1e
    809c:	97 8f       	std	Z+31, r25	; 0x1f
    809e:	a7 01       	movw	r20, r14
    80a0:	96 01       	movw	r18, r12
    80a2:	c5 01       	movw	r24, r10
    80a4:	b4 01       	movw	r22, r8
    80a6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    80aa:	6b 01       	movw	r12, r22
    80ac:	7c 01       	movw	r14, r24
    80ae:	2d 81       	ldd	r18, Y+5	; 0x05
    80b0:	3e 81       	ldd	r19, Y+6	; 0x06
    80b2:	4f 81       	ldd	r20, Y+7	; 0x07
    80b4:	58 85       	ldd	r21, Y+8	; 0x08
    80b6:	69 89       	ldd	r22, Y+17	; 0x11
    80b8:	7a 89       	ldd	r23, Y+18	; 0x12
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	9c 89       	ldd	r25, Y+20	; 0x14
    80be:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    80c2:	9b 01       	movw	r18, r22
    80c4:	ac 01       	movw	r20, r24
    80c6:	c7 01       	movw	r24, r14
    80c8:	b6 01       	movw	r22, r12
    80ca:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    80ce:	d8 01       	movw	r26, r16
    80d0:	90 96       	adiw	r26, 0x20	; 32
    80d2:	6d 93       	st	X+, r22
    80d4:	7d 93       	st	X+, r23
    80d6:	8d 93       	st	X+, r24
    80d8:	9c 93       	st	X, r25
    80da:	93 97       	sbiw	r26, 0x23	; 35
    80dc:	a5 01       	movw	r20, r10
    80de:	94 01       	movw	r18, r8
    80e0:	c3 01       	movw	r24, r6
    80e2:	b2 01       	movw	r22, r4
    80e4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    80e8:	6b 01       	movw	r12, r22
    80ea:	7c 01       	movw	r14, r24
    80ec:	29 8d       	ldd	r18, Y+25	; 0x19
    80ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    80f0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    80f2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    80f4:	69 89       	ldd	r22, Y+17	; 0x11
    80f6:	7a 89       	ldd	r23, Y+18	; 0x12
    80f8:	8b 89       	ldd	r24, Y+19	; 0x13
    80fa:	9c 89       	ldd	r25, Y+20	; 0x14
    80fc:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8100:	9b 01       	movw	r18, r22
    8102:	ac 01       	movw	r20, r24
    8104:	c7 01       	movw	r24, r14
    8106:	b6 01       	movw	r22, r12
    8108:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    810c:	6b 01       	movw	r12, r22
    810e:	7c 01       	movw	r14, r24
    8110:	29 81       	ldd	r18, Y+1	; 0x01
    8112:	3a 81       	ldd	r19, Y+2	; 0x02
    8114:	4b 81       	ldd	r20, Y+3	; 0x03
    8116:	5c 81       	ldd	r21, Y+4	; 0x04
    8118:	6d 89       	ldd	r22, Y+21	; 0x15
    811a:	7e 89       	ldd	r23, Y+22	; 0x16
    811c:	8f 89       	ldd	r24, Y+23	; 0x17
    811e:	98 8d       	ldd	r25, Y+24	; 0x18
    8120:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8124:	9b 01       	movw	r18, r22
    8126:	ac 01       	movw	r20, r24
    8128:	c7 01       	movw	r24, r14
    812a:	b6 01       	movw	r22, r12
    812c:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8130:	6b 01       	movw	r12, r22
    8132:	7c 01       	movw	r14, r24
    8134:	58 01       	movw	r10, r16
    8136:	b4 e2       	ldi	r27, 0x24	; 36
    8138:	ab 0e       	add	r10, r27
    813a:	b1 1c       	adc	r11, r1
    813c:	48 01       	movw	r8, r16
    813e:	19 82       	std	Y+1, r1	; 0x01
    8140:	a7 01       	movw	r20, r14
    8142:	96 01       	movw	r18, r12
    8144:	c3 01       	movw	r24, r6
    8146:	b2 01       	movw	r22, r4
    8148:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    814c:	d4 01       	movw	r26, r8
    814e:	6d 93       	st	X+, r22
    8150:	7d 93       	st	X+, r23
    8152:	8d 93       	st	X+, r24
    8154:	9d 93       	st	X+, r25
    8156:	4d 01       	movw	r8, r26
    8158:	b9 81       	ldd	r27, Y+1	; 0x01
    815a:	bf 5f       	subi	r27, 0xFF	; 255
    815c:	b9 83       	std	Y+1, r27	; 0x01
    815e:	b3 30       	cpi	r27, 0x03	; 3
    8160:	31 f0       	breq	.+12     	; 0x816e <matrixInverse+0x404>
    8162:	f4 01       	movw	r30, r8
    8164:	40 80       	ld	r4, Z
    8166:	51 80       	ldd	r5, Z+1	; 0x01
    8168:	62 80       	ldd	r6, Z+2	; 0x02
    816a:	73 80       	ldd	r7, Z+3	; 0x03
    816c:	e9 cf       	rjmp	.-46     	; 0x8140 <matrixInverse+0x3d6>
    816e:	04 5f       	subi	r16, 0xF4	; 244
    8170:	1f 4f       	sbci	r17, 0xFF	; 255
    8172:	0a 15       	cp	r16, r10
    8174:	1b 05       	cpc	r17, r11
    8176:	31 f0       	breq	.+12     	; 0x8184 <matrixInverse+0x41a>
    8178:	f8 01       	movw	r30, r16
    817a:	40 80       	ld	r4, Z
    817c:	51 80       	ldd	r5, Z+1	; 0x01
    817e:	62 80       	ldd	r6, Z+2	; 0x02
    8180:	73 80       	ldd	r7, Z+3	; 0x03
    8182:	dc cf       	rjmp	.-72     	; 0x813c <matrixInverse+0x3d2>
    8184:	6e 96       	adiw	r28, 0x1e	; 30
    8186:	cd bf       	out	0x3d, r28	; 61
    8188:	de bf       	out	0x3e, r29	; 62
    818a:	df 91       	pop	r29
    818c:	cf 91       	pop	r28
    818e:	1f 91       	pop	r17
    8190:	0f 91       	pop	r16
    8192:	ff 90       	pop	r15
    8194:	ef 90       	pop	r14
    8196:	df 90       	pop	r13
    8198:	cf 90       	pop	r12
    819a:	bf 90       	pop	r11
    819c:	af 90       	pop	r10
    819e:	9f 90       	pop	r9
    81a0:	8f 90       	pop	r8
    81a2:	7f 90       	pop	r7
    81a4:	6f 90       	pop	r6
    81a6:	5f 90       	pop	r5
    81a8:	4f 90       	pop	r4
    81aa:	08 95       	ret

000081ac <matrixInplaceInverse>:
    81ac:	2f 92       	push	r2
    81ae:	3f 92       	push	r3
    81b0:	4f 92       	push	r4
    81b2:	5f 92       	push	r5
    81b4:	6f 92       	push	r6
    81b6:	7f 92       	push	r7
    81b8:	8f 92       	push	r8
    81ba:	9f 92       	push	r9
    81bc:	af 92       	push	r10
    81be:	bf 92       	push	r11
    81c0:	cf 92       	push	r12
    81c2:	df 92       	push	r13
    81c4:	ef 92       	push	r14
    81c6:	ff 92       	push	r15
    81c8:	0f 93       	push	r16
    81ca:	1f 93       	push	r17
    81cc:	cf 93       	push	r28
    81ce:	df 93       	push	r29
    81d0:	cd b7       	in	r28, 0x3d	; 61
    81d2:	de b7       	in	r29, 0x3e	; 62
    81d4:	c4 54       	subi	r28, 0x44	; 68
    81d6:	d1 09       	sbc	r29, r1
    81d8:	cd bf       	out	0x3d, r28	; 61
    81da:	de bf       	out	0x3e, r29	; 62
    81dc:	1c 01       	movw	r2, r24
    81de:	8c 01       	movw	r16, r24
    81e0:	9e 01       	movw	r18, r28
    81e2:	2f 5f       	subi	r18, 0xFF	; 255
    81e4:	3f 4f       	sbci	r19, 0xFF	; 255
    81e6:	be 01       	movw	r22, r28
    81e8:	6b 5d       	subi	r22, 0xDB	; 219
    81ea:	7f 4f       	sbci	r23, 0xFF	; 255
    81ec:	ac 01       	movw	r20, r24
    81ee:	d9 01       	movw	r26, r18
    81f0:	fa 01       	movw	r30, r20
    81f2:	83 e0       	ldi	r24, 0x03	; 3
    81f4:	c1 90       	ld	r12, Z+
    81f6:	d1 90       	ld	r13, Z+
    81f8:	e1 90       	ld	r14, Z+
    81fa:	f1 90       	ld	r15, Z+
    81fc:	cd 92       	st	X+, r12
    81fe:	dd 92       	st	X+, r13
    8200:	ed 92       	st	X+, r14
    8202:	fd 92       	st	X+, r15
    8204:	81 50       	subi	r24, 0x01	; 1
    8206:	b1 f7       	brne	.-20     	; 0x81f4 <matrixInplaceInverse+0x48>
    8208:	44 5f       	subi	r20, 0xF4	; 244
    820a:	5f 4f       	sbci	r21, 0xFF	; 255
    820c:	24 5f       	subi	r18, 0xF4	; 244
    820e:	3f 4f       	sbci	r19, 0xFF	; 255
    8210:	26 17       	cp	r18, r22
    8212:	37 07       	cpc	r19, r23
    8214:	61 f7       	brne	.-40     	; 0x81ee <matrixInplaceInverse+0x42>
    8216:	89 89       	ldd	r24, Y+17	; 0x11
    8218:	9a 89       	ldd	r25, Y+18	; 0x12
    821a:	ab 89       	ldd	r26, Y+19	; 0x13
    821c:	bc 89       	ldd	r27, Y+20	; 0x14
    821e:	89 ab       	std	Y+49, r24	; 0x31
    8220:	9a ab       	std	Y+50, r25	; 0x32
    8222:	ab ab       	std	Y+51, r26	; 0x33
    8224:	bc ab       	std	Y+52, r27	; 0x34
    8226:	49 a0       	ldd	r4, Y+33	; 0x21
    8228:	5a a0       	ldd	r5, Y+34	; 0x22
    822a:	6b a0       	ldd	r6, Y+35	; 0x23
    822c:	7c a0       	ldd	r7, Y+36	; 0x24
    822e:	8d 89       	ldd	r24, Y+21	; 0x15
    8230:	9e 89       	ldd	r25, Y+22	; 0x16
    8232:	af 89       	ldd	r26, Y+23	; 0x17
    8234:	b8 8d       	ldd	r27, Y+24	; 0x18
    8236:	8d a3       	std	Y+37, r24	; 0x25
    8238:	9e a3       	std	Y+38, r25	; 0x26
    823a:	af a3       	std	Y+39, r26	; 0x27
    823c:	b8 a7       	std	Y+40, r27	; 0x28
    823e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8240:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8242:	af 8d       	ldd	r26, Y+31	; 0x1f
    8244:	b8 a1       	ldd	r27, Y+32	; 0x20
    8246:	8d ab       	std	Y+53, r24	; 0x35
    8248:	9e ab       	std	Y+54, r25	; 0x36
    824a:	af ab       	std	Y+55, r26	; 0x37
    824c:	b8 af       	std	Y+56, r27	; 0x38
    824e:	a3 01       	movw	r20, r6
    8250:	92 01       	movw	r18, r4
    8252:	69 a9       	ldd	r22, Y+49	; 0x31
    8254:	7a a9       	ldd	r23, Y+50	; 0x32
    8256:	8b a9       	ldd	r24, Y+51	; 0x33
    8258:	9c a9       	ldd	r25, Y+52	; 0x34
    825a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    825e:	6b 01       	movw	r12, r22
    8260:	7c 01       	movw	r14, r24
    8262:	2d a9       	ldd	r18, Y+53	; 0x35
    8264:	3e a9       	ldd	r19, Y+54	; 0x36
    8266:	4f a9       	ldd	r20, Y+55	; 0x37
    8268:	58 ad       	ldd	r21, Y+56	; 0x38
    826a:	6d a1       	ldd	r22, Y+37	; 0x25
    826c:	7e a1       	ldd	r23, Y+38	; 0x26
    826e:	8f a1       	ldd	r24, Y+39	; 0x27
    8270:	98 a5       	ldd	r25, Y+40	; 0x28
    8272:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8276:	9b 01       	movw	r18, r22
    8278:	ac 01       	movw	r20, r24
    827a:	c7 01       	movw	r24, r14
    827c:	b6 01       	movw	r22, r12
    827e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8282:	6b 01       	movw	r12, r22
    8284:	7c 01       	movw	r14, r24
    8286:	d1 01       	movw	r26, r2
    8288:	6d 93       	st	X+, r22
    828a:	7d 93       	st	X+, r23
    828c:	8d 93       	st	X+, r24
    828e:	9c 93       	st	X, r25
    8290:	13 97       	sbiw	r26, 0x03	; 3
    8292:	89 85       	ldd	r24, Y+9	; 0x09
    8294:	9a 85       	ldd	r25, Y+10	; 0x0a
    8296:	ab 85       	ldd	r26, Y+11	; 0x0b
    8298:	bc 85       	ldd	r27, Y+12	; 0x0c
    829a:	89 a7       	std	Y+41, r24	; 0x29
    829c:	9a a7       	std	Y+42, r25	; 0x2a
    829e:	ab a7       	std	Y+43, r26	; 0x2b
    82a0:	bc a7       	std	Y+44, r27	; 0x2c
    82a2:	8d 81       	ldd	r24, Y+5	; 0x05
    82a4:	9e 81       	ldd	r25, Y+6	; 0x06
    82a6:	af 81       	ldd	r26, Y+7	; 0x07
    82a8:	b8 85       	ldd	r27, Y+8	; 0x08
    82aa:	8d a7       	std	Y+45, r24	; 0x2d
    82ac:	9e a7       	std	Y+46, r25	; 0x2e
    82ae:	af a7       	std	Y+47, r26	; 0x2f
    82b0:	b8 ab       	std	Y+48, r27	; 0x30
    82b2:	29 a5       	ldd	r18, Y+41	; 0x29
    82b4:	3a a5       	ldd	r19, Y+42	; 0x2a
    82b6:	4b a5       	ldd	r20, Y+43	; 0x2b
    82b8:	5c a5       	ldd	r21, Y+44	; 0x2c
    82ba:	6d a9       	ldd	r22, Y+53	; 0x35
    82bc:	7e a9       	ldd	r23, Y+54	; 0x36
    82be:	8f a9       	ldd	r24, Y+55	; 0x37
    82c0:	98 ad       	ldd	r25, Y+56	; 0x38
    82c2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    82c6:	4b 01       	movw	r8, r22
    82c8:	5c 01       	movw	r10, r24
    82ca:	2d a5       	ldd	r18, Y+45	; 0x2d
    82cc:	3e a5       	ldd	r19, Y+46	; 0x2e
    82ce:	4f a5       	ldd	r20, Y+47	; 0x2f
    82d0:	58 a9       	ldd	r21, Y+48	; 0x30
    82d2:	c3 01       	movw	r24, r6
    82d4:	b2 01       	movw	r22, r4
    82d6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    82da:	9b 01       	movw	r18, r22
    82dc:	ac 01       	movw	r20, r24
    82de:	c5 01       	movw	r24, r10
    82e0:	b4 01       	movw	r22, r8
    82e2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    82e6:	d1 01       	movw	r26, r2
    82e8:	14 96       	adiw	r26, 0x04	; 4
    82ea:	6d 93       	st	X+, r22
    82ec:	7d 93       	st	X+, r23
    82ee:	8d 93       	st	X+, r24
    82f0:	9c 93       	st	X, r25
    82f2:	17 97       	sbiw	r26, 0x07	; 7
    82f4:	2d a5       	ldd	r18, Y+45	; 0x2d
    82f6:	3e a5       	ldd	r19, Y+46	; 0x2e
    82f8:	4f a5       	ldd	r20, Y+47	; 0x2f
    82fa:	58 a9       	ldd	r21, Y+48	; 0x30
    82fc:	6d a1       	ldd	r22, Y+37	; 0x25
    82fe:	7e a1       	ldd	r23, Y+38	; 0x26
    8300:	8f a1       	ldd	r24, Y+39	; 0x27
    8302:	98 a5       	ldd	r25, Y+40	; 0x28
    8304:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8308:	4b 01       	movw	r8, r22
    830a:	5c 01       	movw	r10, r24
    830c:	29 a5       	ldd	r18, Y+41	; 0x29
    830e:	3a a5       	ldd	r19, Y+42	; 0x2a
    8310:	4b a5       	ldd	r20, Y+43	; 0x2b
    8312:	5c a5       	ldd	r21, Y+44	; 0x2c
    8314:	69 a9       	ldd	r22, Y+49	; 0x31
    8316:	7a a9       	ldd	r23, Y+50	; 0x32
    8318:	8b a9       	ldd	r24, Y+51	; 0x33
    831a:	9c a9       	ldd	r25, Y+52	; 0x34
    831c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8320:	9b 01       	movw	r18, r22
    8322:	ac 01       	movw	r20, r24
    8324:	c5 01       	movw	r24, r10
    8326:	b4 01       	movw	r22, r8
    8328:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    832c:	f1 01       	movw	r30, r2
    832e:	60 87       	std	Z+8, r22	; 0x08
    8330:	71 87       	std	Z+9, r23	; 0x09
    8332:	82 87       	std	Z+10, r24	; 0x0a
    8334:	93 87       	std	Z+11, r25	; 0x0b
    8336:	89 8d       	ldd	r24, Y+25	; 0x19
    8338:	9a 8d       	ldd	r25, Y+26	; 0x1a
    833a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    833c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    833e:	89 af       	std	Y+57, r24	; 0x39
    8340:	9a af       	std	Y+58, r25	; 0x3a
    8342:	ab af       	std	Y+59, r26	; 0x3b
    8344:	bc af       	std	Y+60, r27	; 0x3c
    8346:	8d 85       	ldd	r24, Y+13	; 0x0d
    8348:	9e 85       	ldd	r25, Y+14	; 0x0e
    834a:	af 85       	ldd	r26, Y+15	; 0x0f
    834c:	b8 89       	ldd	r27, Y+16	; 0x10
    834e:	21 96       	adiw	r28, 0x01	; 1
    8350:	8c af       	std	Y+60, r24	; 0x3c
    8352:	9d af       	std	Y+61, r25	; 0x3d
    8354:	ae af       	std	Y+62, r26	; 0x3e
    8356:	bf af       	std	Y+63, r27	; 0x3f
    8358:	21 97       	sbiw	r28, 0x01	; 1
    835a:	29 ad       	ldd	r18, Y+57	; 0x39
    835c:	3a ad       	ldd	r19, Y+58	; 0x3a
    835e:	4b ad       	ldd	r20, Y+59	; 0x3b
    8360:	5c ad       	ldd	r21, Y+60	; 0x3c
    8362:	6d a1       	ldd	r22, Y+37	; 0x25
    8364:	7e a1       	ldd	r23, Y+38	; 0x26
    8366:	8f a1       	ldd	r24, Y+39	; 0x27
    8368:	98 a5       	ldd	r25, Y+40	; 0x28
    836a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    836e:	4b 01       	movw	r8, r22
    8370:	5c 01       	movw	r10, r24
    8372:	21 96       	adiw	r28, 0x01	; 1
    8374:	2c ad       	ldd	r18, Y+60	; 0x3c
    8376:	3d ad       	ldd	r19, Y+61	; 0x3d
    8378:	4e ad       	ldd	r20, Y+62	; 0x3e
    837a:	5f ad       	ldd	r21, Y+63	; 0x3f
    837c:	21 97       	sbiw	r28, 0x01	; 1
    837e:	c3 01       	movw	r24, r6
    8380:	b2 01       	movw	r22, r4
    8382:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8386:	9b 01       	movw	r18, r22
    8388:	ac 01       	movw	r20, r24
    838a:	c5 01       	movw	r24, r10
    838c:	b4 01       	movw	r22, r8
    838e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8392:	25 96       	adiw	r28, 0x05	; 5
    8394:	6c af       	std	Y+60, r22	; 0x3c
    8396:	7d af       	std	Y+61, r23	; 0x3d
    8398:	8e af       	std	Y+62, r24	; 0x3e
    839a:	9f af       	std	Y+63, r25	; 0x3f
    839c:	25 97       	sbiw	r28, 0x05	; 5
    839e:	d1 01       	movw	r26, r2
    83a0:	1c 96       	adiw	r26, 0x0c	; 12
    83a2:	6d 93       	st	X+, r22
    83a4:	7d 93       	st	X+, r23
    83a6:	8d 93       	st	X+, r24
    83a8:	9c 93       	st	X, r25
    83aa:	1f 97       	sbiw	r26, 0x0f	; 15
    83ac:	89 80       	ldd	r8, Y+1	; 0x01
    83ae:	9a 80       	ldd	r9, Y+2	; 0x02
    83b0:	ab 80       	ldd	r10, Y+3	; 0x03
    83b2:	bc 80       	ldd	r11, Y+4	; 0x04
    83b4:	a5 01       	movw	r20, r10
    83b6:	94 01       	movw	r18, r8
    83b8:	c3 01       	movw	r24, r6
    83ba:	b2 01       	movw	r22, r4
    83bc:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    83c0:	2b 01       	movw	r4, r22
    83c2:	3c 01       	movw	r6, r24
    83c4:	29 ad       	ldd	r18, Y+57	; 0x39
    83c6:	3a ad       	ldd	r19, Y+58	; 0x3a
    83c8:	4b ad       	ldd	r20, Y+59	; 0x3b
    83ca:	5c ad       	ldd	r21, Y+60	; 0x3c
    83cc:	69 a5       	ldd	r22, Y+41	; 0x29
    83ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    83d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    83d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    83d4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    83d8:	9b 01       	movw	r18, r22
    83da:	ac 01       	movw	r20, r24
    83dc:	c3 01       	movw	r24, r6
    83de:	b2 01       	movw	r22, r4
    83e0:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    83e4:	f1 01       	movw	r30, r2
    83e6:	60 8b       	std	Z+16, r22	; 0x10
    83e8:	71 8b       	std	Z+17, r23	; 0x11
    83ea:	82 8b       	std	Z+18, r24	; 0x12
    83ec:	93 8b       	std	Z+19, r25	; 0x13
    83ee:	21 96       	adiw	r28, 0x01	; 1
    83f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    83f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    83f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    83f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    83f8:	21 97       	sbiw	r28, 0x01	; 1
    83fa:	69 a5       	ldd	r22, Y+41	; 0x29
    83fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    83fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    8400:	9c a5       	ldd	r25, Y+44	; 0x2c
    8402:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8406:	2b 01       	movw	r4, r22
    8408:	3c 01       	movw	r6, r24
    840a:	a5 01       	movw	r20, r10
    840c:	94 01       	movw	r18, r8
    840e:	6d a1       	ldd	r22, Y+37	; 0x25
    8410:	7e a1       	ldd	r23, Y+38	; 0x26
    8412:	8f a1       	ldd	r24, Y+39	; 0x27
    8414:	98 a5       	ldd	r25, Y+40	; 0x28
    8416:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    841a:	9b 01       	movw	r18, r22
    841c:	ac 01       	movw	r20, r24
    841e:	c3 01       	movw	r24, r6
    8420:	b2 01       	movw	r22, r4
    8422:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8426:	d1 01       	movw	r26, r2
    8428:	54 96       	adiw	r26, 0x14	; 20
    842a:	6d 93       	st	X+, r22
    842c:	7d 93       	st	X+, r23
    842e:	8d 93       	st	X+, r24
    8430:	9c 93       	st	X, r25
    8432:	57 97       	sbiw	r26, 0x17	; 23
    8434:	21 96       	adiw	r28, 0x01	; 1
    8436:	2c ad       	ldd	r18, Y+60	; 0x3c
    8438:	3d ad       	ldd	r19, Y+61	; 0x3d
    843a:	4e ad       	ldd	r20, Y+62	; 0x3e
    843c:	5f ad       	ldd	r21, Y+63	; 0x3f
    843e:	21 97       	sbiw	r28, 0x01	; 1
    8440:	6d a9       	ldd	r22, Y+53	; 0x35
    8442:	7e a9       	ldd	r23, Y+54	; 0x36
    8444:	8f a9       	ldd	r24, Y+55	; 0x37
    8446:	98 ad       	ldd	r25, Y+56	; 0x38
    8448:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    844c:	2b 01       	movw	r4, r22
    844e:	3c 01       	movw	r6, r24
    8450:	29 ad       	ldd	r18, Y+57	; 0x39
    8452:	3a ad       	ldd	r19, Y+58	; 0x3a
    8454:	4b ad       	ldd	r20, Y+59	; 0x3b
    8456:	5c ad       	ldd	r21, Y+60	; 0x3c
    8458:	69 a9       	ldd	r22, Y+49	; 0x31
    845a:	7a a9       	ldd	r23, Y+50	; 0x32
    845c:	8b a9       	ldd	r24, Y+51	; 0x33
    845e:	9c a9       	ldd	r25, Y+52	; 0x34
    8460:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8464:	9b 01       	movw	r18, r22
    8466:	ac 01       	movw	r20, r24
    8468:	c3 01       	movw	r24, r6
    846a:	b2 01       	movw	r22, r4
    846c:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8470:	6d a3       	std	Y+37, r22	; 0x25
    8472:	7e a3       	std	Y+38, r23	; 0x26
    8474:	8f a3       	std	Y+39, r24	; 0x27
    8476:	98 a7       	std	Y+40, r25	; 0x28
    8478:	f1 01       	movw	r30, r2
    847a:	60 8f       	std	Z+24, r22	; 0x18
    847c:	71 8f       	std	Z+25, r23	; 0x19
    847e:	82 8f       	std	Z+26, r24	; 0x1a
    8480:	93 8f       	std	Z+27, r25	; 0x1b
    8482:	29 ad       	ldd	r18, Y+57	; 0x39
    8484:	3a ad       	ldd	r19, Y+58	; 0x3a
    8486:	4b ad       	ldd	r20, Y+59	; 0x3b
    8488:	5c ad       	ldd	r21, Y+60	; 0x3c
    848a:	6d a5       	ldd	r22, Y+45	; 0x2d
    848c:	7e a5       	ldd	r23, Y+46	; 0x2e
    848e:	8f a5       	ldd	r24, Y+47	; 0x2f
    8490:	98 a9       	ldd	r25, Y+48	; 0x30
    8492:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8496:	2b 01       	movw	r4, r22
    8498:	3c 01       	movw	r6, r24
    849a:	a5 01       	movw	r20, r10
    849c:	94 01       	movw	r18, r8
    849e:	6d a9       	ldd	r22, Y+53	; 0x35
    84a0:	7e a9       	ldd	r23, Y+54	; 0x36
    84a2:	8f a9       	ldd	r24, Y+55	; 0x37
    84a4:	98 ad       	ldd	r25, Y+56	; 0x38
    84a6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    84aa:	9b 01       	movw	r18, r22
    84ac:	ac 01       	movw	r20, r24
    84ae:	c3 01       	movw	r24, r6
    84b0:	b2 01       	movw	r22, r4
    84b2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    84b6:	d1 01       	movw	r26, r2
    84b8:	5c 96       	adiw	r26, 0x1c	; 28
    84ba:	6d 93       	st	X+, r22
    84bc:	7d 93       	st	X+, r23
    84be:	8d 93       	st	X+, r24
    84c0:	9c 93       	st	X, r25
    84c2:	5f 97       	sbiw	r26, 0x1f	; 31
    84c4:	a5 01       	movw	r20, r10
    84c6:	94 01       	movw	r18, r8
    84c8:	69 a9       	ldd	r22, Y+49	; 0x31
    84ca:	7a a9       	ldd	r23, Y+50	; 0x32
    84cc:	8b a9       	ldd	r24, Y+51	; 0x33
    84ce:	9c a9       	ldd	r25, Y+52	; 0x34
    84d0:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    84d4:	2b 01       	movw	r4, r22
    84d6:	3c 01       	movw	r6, r24
    84d8:	21 96       	adiw	r28, 0x01	; 1
    84da:	2c ad       	ldd	r18, Y+60	; 0x3c
    84dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    84de:	4e ad       	ldd	r20, Y+62	; 0x3e
    84e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    84e2:	21 97       	sbiw	r28, 0x01	; 1
    84e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    84e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    84e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    84ea:	98 a9       	ldd	r25, Y+48	; 0x30
    84ec:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    84f0:	9b 01       	movw	r18, r22
    84f2:	ac 01       	movw	r20, r24
    84f4:	c3 01       	movw	r24, r6
    84f6:	b2 01       	movw	r22, r4
    84f8:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    84fc:	f1 01       	movw	r30, r2
    84fe:	60 a3       	std	Z+32, r22	; 0x20
    8500:	71 a3       	std	Z+33, r23	; 0x21
    8502:	82 a3       	std	Z+34, r24	; 0x22
    8504:	93 a3       	std	Z+35, r25	; 0x23
    8506:	a5 01       	movw	r20, r10
    8508:	94 01       	movw	r18, r8
    850a:	c7 01       	movw	r24, r14
    850c:	b6 01       	movw	r22, r12
    850e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8512:	4b 01       	movw	r8, r22
    8514:	5c 01       	movw	r10, r24
    8516:	25 96       	adiw	r28, 0x05	; 5
    8518:	2c ad       	ldd	r18, Y+60	; 0x3c
    851a:	3d ad       	ldd	r19, Y+61	; 0x3d
    851c:	4e ad       	ldd	r20, Y+62	; 0x3e
    851e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8520:	25 97       	sbiw	r28, 0x05	; 5
    8522:	6d a5       	ldd	r22, Y+45	; 0x2d
    8524:	7e a5       	ldd	r23, Y+46	; 0x2e
    8526:	8f a5       	ldd	r24, Y+47	; 0x2f
    8528:	98 a9       	ldd	r25, Y+48	; 0x30
    852a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    852e:	9b 01       	movw	r18, r22
    8530:	ac 01       	movw	r20, r24
    8532:	c5 01       	movw	r24, r10
    8534:	b4 01       	movw	r22, r8
    8536:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    853a:	4b 01       	movw	r8, r22
    853c:	5c 01       	movw	r10, r24
    853e:	2d a1       	ldd	r18, Y+37	; 0x25
    8540:	3e a1       	ldd	r19, Y+38	; 0x26
    8542:	4f a1       	ldd	r20, Y+39	; 0x27
    8544:	58 a5       	ldd	r21, Y+40	; 0x28
    8546:	69 a5       	ldd	r22, Y+41	; 0x29
    8548:	7a a5       	ldd	r23, Y+42	; 0x2a
    854a:	8b a5       	ldd	r24, Y+43	; 0x2b
    854c:	9c a5       	ldd	r25, Y+44	; 0x2c
    854e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8552:	9b 01       	movw	r18, r22
    8554:	ac 01       	movw	r20, r24
    8556:	c5 01       	movw	r24, r10
    8558:	b4 01       	movw	r22, r8
    855a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    855e:	2b 01       	movw	r4, r22
    8560:	3c 01       	movw	r6, r24
    8562:	41 01       	movw	r8, r2
    8564:	f4 e2       	ldi	r31, 0x24	; 36
    8566:	8f 0e       	add	r8, r31
    8568:	91 1c       	adc	r9, r1
    856a:	18 01       	movw	r2, r16
    856c:	b1 2c       	mov	r11, r1
    856e:	a3 01       	movw	r20, r6
    8570:	92 01       	movw	r18, r4
    8572:	c7 01       	movw	r24, r14
    8574:	b6 01       	movw	r22, r12
    8576:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    857a:	f1 01       	movw	r30, r2
    857c:	61 93       	st	Z+, r22
    857e:	71 93       	st	Z+, r23
    8580:	81 93       	st	Z+, r24
    8582:	91 93       	st	Z+, r25
    8584:	1f 01       	movw	r2, r30
    8586:	b3 94       	inc	r11
    8588:	f3 e0       	ldi	r31, 0x03	; 3
    858a:	bf 16       	cp	r11, r31
    858c:	31 f0       	breq	.+12     	; 0x859a <matrixInplaceInverse+0x3ee>
    858e:	d1 01       	movw	r26, r2
    8590:	cd 90       	ld	r12, X+
    8592:	dd 90       	ld	r13, X+
    8594:	ed 90       	ld	r14, X+
    8596:	fc 90       	ld	r15, X
    8598:	ea cf       	rjmp	.-44     	; 0x856e <matrixInplaceInverse+0x3c2>
    859a:	04 5f       	subi	r16, 0xF4	; 244
    859c:	1f 4f       	sbci	r17, 0xFF	; 255
    859e:	08 15       	cp	r16, r8
    85a0:	19 05       	cpc	r17, r9
    85a2:	31 f0       	breq	.+12     	; 0x85b0 <matrixInplaceInverse+0x404>
    85a4:	d8 01       	movw	r26, r16
    85a6:	cd 90       	ld	r12, X+
    85a8:	dd 90       	ld	r13, X+
    85aa:	ed 90       	ld	r14, X+
    85ac:	fc 90       	ld	r15, X
    85ae:	dd cf       	rjmp	.-70     	; 0x856a <matrixInplaceInverse+0x3be>
    85b0:	cc 5b       	subi	r28, 0xBC	; 188
    85b2:	df 4f       	sbci	r29, 0xFF	; 255
    85b4:	cd bf       	out	0x3d, r28	; 61
    85b6:	de bf       	out	0x3e, r29	; 62
    85b8:	df 91       	pop	r29
    85ba:	cf 91       	pop	r28
    85bc:	1f 91       	pop	r17
    85be:	0f 91       	pop	r16
    85c0:	ff 90       	pop	r15
    85c2:	ef 90       	pop	r14
    85c4:	df 90       	pop	r13
    85c6:	cf 90       	pop	r12
    85c8:	bf 90       	pop	r11
    85ca:	af 90       	pop	r10
    85cc:	9f 90       	pop	r9
    85ce:	8f 90       	pop	r8
    85d0:	7f 90       	pop	r7
    85d2:	6f 90       	pop	r6
    85d4:	5f 90       	pop	r5
    85d6:	4f 90       	pop	r4
    85d8:	3f 90       	pop	r3
    85da:	2f 90       	pop	r2
    85dc:	08 95       	ret

000085de <matrixDet>:
    85de:	4f 92       	push	r4
    85e0:	5f 92       	push	r5
    85e2:	6f 92       	push	r6
    85e4:	7f 92       	push	r7
    85e6:	8f 92       	push	r8
    85e8:	9f 92       	push	r9
    85ea:	af 92       	push	r10
    85ec:	bf 92       	push	r11
    85ee:	cf 92       	push	r12
    85f0:	df 92       	push	r13
    85f2:	ef 92       	push	r14
    85f4:	ff 92       	push	r15
    85f6:	cf 93       	push	r28
    85f8:	df 93       	push	r29
    85fa:	cd b7       	in	r28, 0x3d	; 61
    85fc:	de b7       	in	r29, 0x3e	; 62
    85fe:	62 97       	sbiw	r28, 0x12	; 18
    8600:	cd bf       	out	0x3d, r28	; 61
    8602:	de bf       	out	0x3e, r29	; 62
    8604:	89 8b       	std	Y+17, r24	; 0x11
    8606:	9a 8b       	std	Y+18, r25	; 0x12
    8608:	dc 01       	movw	r26, r24
    860a:	50 96       	adiw	r26, 0x10	; 16
    860c:	8d 91       	ld	r24, X+
    860e:	9d 91       	ld	r25, X+
    8610:	0d 90       	ld	r0, X+
    8612:	bc 91       	ld	r27, X
    8614:	a0 2d       	mov	r26, r0
    8616:	89 83       	std	Y+1, r24	; 0x01
    8618:	9a 83       	std	Y+2, r25	; 0x02
    861a:	ab 83       	std	Y+3, r26	; 0x03
    861c:	bc 83       	std	Y+4, r27	; 0x04
    861e:	a9 89       	ldd	r26, Y+17	; 0x11
    8620:	ba 89       	ldd	r27, Y+18	; 0x12
    8622:	90 96       	adiw	r26, 0x20	; 32
    8624:	8d 91       	ld	r24, X+
    8626:	9d 91       	ld	r25, X+
    8628:	0d 90       	ld	r0, X+
    862a:	bc 91       	ld	r27, X
    862c:	a0 2d       	mov	r26, r0
    862e:	8d 83       	std	Y+5, r24	; 0x05
    8630:	9e 83       	std	Y+6, r25	; 0x06
    8632:	af 83       	std	Y+7, r26	; 0x07
    8634:	b8 87       	std	Y+8, r27	; 0x08
    8636:	e9 89       	ldd	r30, Y+17	; 0x11
    8638:	fa 89       	ldd	r31, Y+18	; 0x12
    863a:	84 88       	ldd	r8, Z+20	; 0x14
    863c:	95 88       	ldd	r9, Z+21	; 0x15
    863e:	a6 88       	ldd	r10, Z+22	; 0x16
    8640:	b7 88       	ldd	r11, Z+23	; 0x17
    8642:	84 8d       	ldd	r24, Z+28	; 0x1c
    8644:	95 8d       	ldd	r25, Z+29	; 0x1d
    8646:	a6 8d       	ldd	r26, Z+30	; 0x1e
    8648:	b7 8d       	ldd	r27, Z+31	; 0x1f
    864a:	89 87       	std	Y+9, r24	; 0x09
    864c:	9a 87       	std	Y+10, r25	; 0x0a
    864e:	ab 87       	std	Y+11, r26	; 0x0b
    8650:	bc 87       	std	Y+12, r27	; 0x0c
    8652:	80 8d       	ldd	r24, Z+24	; 0x18
    8654:	91 8d       	ldd	r25, Z+25	; 0x19
    8656:	a2 8d       	ldd	r26, Z+26	; 0x1a
    8658:	b3 8d       	ldd	r27, Z+27	; 0x1b
    865a:	8d 87       	std	Y+13, r24	; 0x0d
    865c:	9e 87       	std	Y+14, r25	; 0x0e
    865e:	af 87       	std	Y+15, r26	; 0x0f
    8660:	b8 8b       	std	Y+16, r27	; 0x10
    8662:	c4 84       	ldd	r12, Z+12	; 0x0c
    8664:	d5 84       	ldd	r13, Z+13	; 0x0d
    8666:	e6 84       	ldd	r14, Z+14	; 0x0e
    8668:	f7 84       	ldd	r15, Z+15	; 0x0f
    866a:	2d 81       	ldd	r18, Y+5	; 0x05
    866c:	3e 81       	ldd	r19, Y+6	; 0x06
    866e:	4f 81       	ldd	r20, Y+7	; 0x07
    8670:	58 85       	ldd	r21, Y+8	; 0x08
    8672:	69 81       	ldd	r22, Y+1	; 0x01
    8674:	7a 81       	ldd	r23, Y+2	; 0x02
    8676:	8b 81       	ldd	r24, Y+3	; 0x03
    8678:	9c 81       	ldd	r25, Y+4	; 0x04
    867a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    867e:	2b 01       	movw	r4, r22
    8680:	3c 01       	movw	r6, r24
    8682:	29 85       	ldd	r18, Y+9	; 0x09
    8684:	3a 85       	ldd	r19, Y+10	; 0x0a
    8686:	4b 85       	ldd	r20, Y+11	; 0x0b
    8688:	5c 85       	ldd	r21, Y+12	; 0x0c
    868a:	c5 01       	movw	r24, r10
    868c:	b4 01       	movw	r22, r8
    868e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8692:	9b 01       	movw	r18, r22
    8694:	ac 01       	movw	r20, r24
    8696:	c3 01       	movw	r24, r6
    8698:	b2 01       	movw	r22, r4
    869a:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    869e:	e9 89       	ldd	r30, Y+17	; 0x11
    86a0:	fa 89       	ldd	r31, Y+18	; 0x12
    86a2:	20 81       	ld	r18, Z
    86a4:	31 81       	ldd	r19, Z+1	; 0x01
    86a6:	42 81       	ldd	r20, Z+2	; 0x02
    86a8:	53 81       	ldd	r21, Z+3	; 0x03
    86aa:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    86ae:	2b 01       	movw	r4, r22
    86b0:	3c 01       	movw	r6, r24
    86b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    86b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    86b6:	4f 85       	ldd	r20, Y+15	; 0x0f
    86b8:	58 89       	ldd	r21, Y+16	; 0x10
    86ba:	c5 01       	movw	r24, r10
    86bc:	b4 01       	movw	r22, r8
    86be:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    86c2:	4b 01       	movw	r8, r22
    86c4:	5c 01       	movw	r10, r24
    86c6:	a7 01       	movw	r20, r14
    86c8:	96 01       	movw	r18, r12
    86ca:	6d 81       	ldd	r22, Y+5	; 0x05
    86cc:	7e 81       	ldd	r23, Y+6	; 0x06
    86ce:	8f 81       	ldd	r24, Y+7	; 0x07
    86d0:	98 85       	ldd	r25, Y+8	; 0x08
    86d2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    86d6:	9b 01       	movw	r18, r22
    86d8:	ac 01       	movw	r20, r24
    86da:	c5 01       	movw	r24, r10
    86dc:	b4 01       	movw	r22, r8
    86de:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    86e2:	a9 89       	ldd	r26, Y+17	; 0x11
    86e4:	ba 89       	ldd	r27, Y+18	; 0x12
    86e6:	14 96       	adiw	r26, 0x04	; 4
    86e8:	2d 91       	ld	r18, X+
    86ea:	3d 91       	ld	r19, X+
    86ec:	4d 91       	ld	r20, X+
    86ee:	5c 91       	ld	r21, X
    86f0:	17 97       	sbiw	r26, 0x07	; 7
    86f2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    86f6:	9b 01       	movw	r18, r22
    86f8:	ac 01       	movw	r20, r24
    86fa:	c3 01       	movw	r24, r6
    86fc:	b2 01       	movw	r22, r4
    86fe:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8702:	4b 01       	movw	r8, r22
    8704:	5c 01       	movw	r10, r24
    8706:	a7 01       	movw	r20, r14
    8708:	96 01       	movw	r18, r12
    870a:	69 85       	ldd	r22, Y+9	; 0x09
    870c:	7a 85       	ldd	r23, Y+10	; 0x0a
    870e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8710:	9c 85       	ldd	r25, Y+12	; 0x0c
    8712:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8716:	6b 01       	movw	r12, r22
    8718:	7c 01       	movw	r14, r24
    871a:	2d 85       	ldd	r18, Y+13	; 0x0d
    871c:	3e 85       	ldd	r19, Y+14	; 0x0e
    871e:	4f 85       	ldd	r20, Y+15	; 0x0f
    8720:	58 89       	ldd	r21, Y+16	; 0x10
    8722:	69 81       	ldd	r22, Y+1	; 0x01
    8724:	7a 81       	ldd	r23, Y+2	; 0x02
    8726:	8b 81       	ldd	r24, Y+3	; 0x03
    8728:	9c 81       	ldd	r25, Y+4	; 0x04
    872a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    872e:	9b 01       	movw	r18, r22
    8730:	ac 01       	movw	r20, r24
    8732:	c7 01       	movw	r24, r14
    8734:	b6 01       	movw	r22, r12
    8736:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    873a:	e9 89       	ldd	r30, Y+17	; 0x11
    873c:	fa 89       	ldd	r31, Y+18	; 0x12
    873e:	20 85       	ldd	r18, Z+8	; 0x08
    8740:	31 85       	ldd	r19, Z+9	; 0x09
    8742:	42 85       	ldd	r20, Z+10	; 0x0a
    8744:	53 85       	ldd	r21, Z+11	; 0x0b
    8746:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    874a:	9b 01       	movw	r18, r22
    874c:	ac 01       	movw	r20, r24
    874e:	c5 01       	movw	r24, r10
    8750:	b4 01       	movw	r22, r8
    8752:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8756:	62 96       	adiw	r28, 0x12	; 18
    8758:	cd bf       	out	0x3d, r28	; 61
    875a:	de bf       	out	0x3e, r29	; 62
    875c:	df 91       	pop	r29
    875e:	cf 91       	pop	r28
    8760:	ff 90       	pop	r15
    8762:	ef 90       	pop	r14
    8764:	df 90       	pop	r13
    8766:	cf 90       	pop	r12
    8768:	bf 90       	pop	r11
    876a:	af 90       	pop	r10
    876c:	9f 90       	pop	r9
    876e:	8f 90       	pop	r8
    8770:	7f 90       	pop	r7
    8772:	6f 90       	pop	r6
    8774:	5f 90       	pop	r5
    8776:	4f 90       	pop	r4
    8778:	08 95       	ret

0000877a <eigenvalues>:
    877a:	2f 92       	push	r2
    877c:	3f 92       	push	r3
    877e:	4f 92       	push	r4
    8780:	5f 92       	push	r5
    8782:	6f 92       	push	r6
    8784:	7f 92       	push	r7
    8786:	8f 92       	push	r8
    8788:	9f 92       	push	r9
    878a:	af 92       	push	r10
    878c:	bf 92       	push	r11
    878e:	cf 92       	push	r12
    8790:	df 92       	push	r13
    8792:	ef 92       	push	r14
    8794:	ff 92       	push	r15
    8796:	0f 93       	push	r16
    8798:	1f 93       	push	r17
    879a:	cf 93       	push	r28
    879c:	df 93       	push	r29
    879e:	cd b7       	in	r28, 0x3d	; 61
    87a0:	de b7       	in	r29, 0x3e	; 62
    87a2:	e7 97       	sbiw	r28, 0x37	; 55
    87a4:	cd bf       	out	0x3d, r28	; 61
    87a6:	de bf       	out	0x3e, r29	; 62
    87a8:	8e a7       	std	Y+46, r24	; 0x2e
    87aa:	9f a7       	std	Y+47, r25	; 0x2f
    87ac:	1b 01       	movw	r2, r22
    87ae:	db 01       	movw	r26, r22
    87b0:	14 96       	adiw	r26, 0x04	; 4
    87b2:	8d 90       	ld	r8, X+
    87b4:	9d 90       	ld	r9, X+
    87b6:	ad 90       	ld	r10, X+
    87b8:	bc 90       	ld	r11, X
    87ba:	17 97       	sbiw	r26, 0x07	; 7
    87bc:	18 96       	adiw	r26, 0x08	; 8
    87be:	6d 91       	ld	r22, X+
    87c0:	7d 91       	ld	r23, X+
    87c2:	8d 91       	ld	r24, X+
    87c4:	9c 91       	ld	r25, X
    87c6:	1b 97       	sbiw	r26, 0x0b	; 11
    87c8:	54 96       	adiw	r26, 0x14	; 20
    87ca:	cd 90       	ld	r12, X+
    87cc:	dd 90       	ld	r13, X+
    87ce:	ed 90       	ld	r14, X+
    87d0:	fc 90       	ld	r15, X
    87d2:	57 97       	sbiw	r26, 0x17	; 23
    87d4:	9b 01       	movw	r18, r22
    87d6:	ac 01       	movw	r20, r24
    87d8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    87dc:	2b 01       	movw	r4, r22
    87de:	3c 01       	movw	r6, r24
    87e0:	a5 01       	movw	r20, r10
    87e2:	94 01       	movw	r18, r8
    87e4:	c5 01       	movw	r24, r10
    87e6:	b4 01       	movw	r22, r8
    87e8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    87ec:	9b 01       	movw	r18, r22
    87ee:	ac 01       	movw	r20, r24
    87f0:	c3 01       	movw	r24, r6
    87f2:	b2 01       	movw	r22, r4
    87f4:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    87f8:	4b 01       	movw	r8, r22
    87fa:	5c 01       	movw	r10, r24
    87fc:	a7 01       	movw	r20, r14
    87fe:	96 01       	movw	r18, r12
    8800:	c7 01       	movw	r24, r14
    8802:	b6 01       	movw	r22, r12
    8804:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8808:	9b 01       	movw	r18, r22
    880a:	ac 01       	movw	r20, r24
    880c:	c5 01       	movw	r24, r10
    880e:	b4 01       	movw	r22, r8
    8810:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8814:	6a a7       	std	Y+42, r22	; 0x2a
    8816:	7b a7       	std	Y+43, r23	; 0x2b
    8818:	8c a7       	std	Y+44, r24	; 0x2c
    881a:	9d a7       	std	Y+45, r25	; 0x2d
    881c:	20 e0       	ldi	r18, 0x00	; 0
    881e:	30 e0       	ldi	r19, 0x00	; 0
    8820:	a9 01       	movw	r20, r18
    8822:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    8826:	88 23       	and	r24, r24
    8828:	09 f4       	brne	.+2      	; 0x882c <eigenvalues+0xb2>
    882a:	b4 c1       	rjmp	.+872    	; 0x8b94 <eigenvalues+0x41a>
    882c:	d1 01       	movw	r26, r2
    882e:	cd 90       	ld	r12, X+
    8830:	dd 90       	ld	r13, X+
    8832:	ed 90       	ld	r14, X+
    8834:	fc 90       	ld	r15, X
    8836:	13 97       	sbiw	r26, 0x03	; 3
    8838:	50 96       	adiw	r26, 0x10	; 16
    883a:	8d 90       	ld	r8, X+
    883c:	9d 90       	ld	r9, X+
    883e:	ad 90       	ld	r10, X+
    8840:	bc 90       	ld	r11, X
    8842:	53 97       	sbiw	r26, 0x13	; 19
    8844:	90 96       	adiw	r26, 0x20	; 32
    8846:	8d 91       	ld	r24, X+
    8848:	9d 91       	ld	r25, X+
    884a:	0d 90       	ld	r0, X+
    884c:	bc 91       	ld	r27, X
    884e:	a0 2d       	mov	r26, r0
    8850:	88 ab       	std	Y+48, r24	; 0x30
    8852:	99 ab       	std	Y+49, r25	; 0x31
    8854:	aa ab       	std	Y+50, r26	; 0x32
    8856:	bb ab       	std	Y+51, r27	; 0x33
    8858:	a5 01       	movw	r20, r10
    885a:	94 01       	movw	r18, r8
    885c:	c7 01       	movw	r24, r14
    885e:	b6 01       	movw	r22, r12
    8860:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8864:	28 a9       	ldd	r18, Y+48	; 0x30
    8866:	39 a9       	ldd	r19, Y+49	; 0x31
    8868:	4a a9       	ldd	r20, Y+50	; 0x32
    886a:	5b a9       	ldd	r21, Y+51	; 0x33
    886c:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8870:	20 e0       	ldi	r18, 0x00	; 0
    8872:	30 e0       	ldi	r19, 0x00	; 0
    8874:	40 e4       	ldi	r20, 0x40	; 64
    8876:	50 e4       	ldi	r21, 0x40	; 64
    8878:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    887c:	06 2f       	mov	r16, r22
    887e:	7f a3       	std	Y+39, r23	; 0x27
    8880:	88 a7       	std	Y+40, r24	; 0x28
    8882:	99 a7       	std	Y+41, r25	; 0x29
    8884:	26 2f       	mov	r18, r22
    8886:	37 2f       	mov	r19, r23
    8888:	ac 01       	movw	r20, r24
    888a:	c7 01       	movw	r24, r14
    888c:	b6 01       	movw	r22, r12
    888e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8892:	2b 01       	movw	r4, r22
    8894:	3c 01       	movw	r6, r24
    8896:	20 2f       	mov	r18, r16
    8898:	3f a1       	ldd	r19, Y+39	; 0x27
    889a:	48 a5       	ldd	r20, Y+40	; 0x28
    889c:	59 a5       	ldd	r21, Y+41	; 0x29
    889e:	c5 01       	movw	r24, r10
    88a0:	b4 01       	movw	r22, r8
    88a2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    88a6:	6c ab       	std	Y+52, r22	; 0x34
    88a8:	7d ab       	std	Y+53, r23	; 0x35
    88aa:	8e ab       	std	Y+54, r24	; 0x36
    88ac:	9f ab       	std	Y+55, r25	; 0x37
    88ae:	20 2f       	mov	r18, r16
    88b0:	3f a1       	ldd	r19, Y+39	; 0x27
    88b2:	48 a5       	ldd	r20, Y+40	; 0x28
    88b4:	59 a5       	ldd	r21, Y+41	; 0x29
    88b6:	68 a9       	ldd	r22, Y+48	; 0x30
    88b8:	79 a9       	ldd	r23, Y+49	; 0x31
    88ba:	8a a9       	ldd	r24, Y+50	; 0x32
    88bc:	9b a9       	ldd	r25, Y+51	; 0x33
    88be:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    88c2:	4b 01       	movw	r8, r22
    88c4:	5c 01       	movw	r10, r24
    88c6:	a3 01       	movw	r20, r6
    88c8:	92 01       	movw	r18, r4
    88ca:	c3 01       	movw	r24, r6
    88cc:	b2 01       	movw	r22, r4
    88ce:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    88d2:	2b 01       	movw	r4, r22
    88d4:	3c 01       	movw	r6, r24
    88d6:	2c a9       	ldd	r18, Y+52	; 0x34
    88d8:	3d a9       	ldd	r19, Y+53	; 0x35
    88da:	4e a9       	ldd	r20, Y+54	; 0x36
    88dc:	5f a9       	ldd	r21, Y+55	; 0x37
    88de:	ca 01       	movw	r24, r20
    88e0:	b9 01       	movw	r22, r18
    88e2:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    88e6:	9b 01       	movw	r18, r22
    88e8:	ac 01       	movw	r20, r24
    88ea:	c3 01       	movw	r24, r6
    88ec:	b2 01       	movw	r22, r4
    88ee:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    88f2:	2b 01       	movw	r4, r22
    88f4:	3c 01       	movw	r6, r24
    88f6:	a5 01       	movw	r20, r10
    88f8:	94 01       	movw	r18, r8
    88fa:	c5 01       	movw	r24, r10
    88fc:	b4 01       	movw	r22, r8
    88fe:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8902:	9b 01       	movw	r18, r22
    8904:	ac 01       	movw	r20, r24
    8906:	c3 01       	movw	r24, r6
    8908:	b2 01       	movw	r22, r4
    890a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    890e:	4b 01       	movw	r8, r22
    8910:	5c 01       	movw	r10, r24
    8912:	2a a5       	ldd	r18, Y+42	; 0x2a
    8914:	3b a5       	ldd	r19, Y+43	; 0x2b
    8916:	4c a5       	ldd	r20, Y+44	; 0x2c
    8918:	5d a5       	ldd	r21, Y+45	; 0x2d
    891a:	ca 01       	movw	r24, r20
    891c:	b9 01       	movw	r22, r18
    891e:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8922:	9b 01       	movw	r18, r22
    8924:	ac 01       	movw	r20, r24
    8926:	c5 01       	movw	r24, r10
    8928:	b4 01       	movw	r22, r8
    892a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    892e:	20 e0       	ldi	r18, 0x00	; 0
    8930:	30 e0       	ldi	r19, 0x00	; 0
    8932:	40 ec       	ldi	r20, 0xC0	; 192
    8934:	50 e4       	ldi	r21, 0x40	; 64
    8936:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    893a:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    893e:	6a a7       	std	Y+42, r22	; 0x2a
    8940:	7b a7       	std	Y+43, r23	; 0x2b
    8942:	8c a7       	std	Y+44, r24	; 0x2c
    8944:	9d a7       	std	Y+45, r25	; 0x2d
    8946:	80 2f       	mov	r24, r16
    8948:	9f a1       	ldd	r25, Y+39	; 0x27
    894a:	a8 a5       	ldd	r26, Y+40	; 0x28
    894c:	b9 a5       	ldd	r27, Y+41	; 0x29
    894e:	89 83       	std	Y+1, r24	; 0x01
    8950:	9a 83       	std	Y+2, r25	; 0x02
    8952:	ab 83       	std	Y+3, r26	; 0x03
    8954:	bc 83       	std	Y+4, r27	; 0x04
    8956:	1d 82       	std	Y+5, r1	; 0x05
    8958:	1e 82       	std	Y+6, r1	; 0x06
    895a:	1f 82       	std	Y+7, r1	; 0x07
    895c:	18 86       	std	Y+8, r1	; 0x08
    895e:	19 86       	std	Y+9, r1	; 0x09
    8960:	1a 86       	std	Y+10, r1	; 0x0a
    8962:	1b 86       	std	Y+11, r1	; 0x0b
    8964:	1c 86       	std	Y+12, r1	; 0x0c
    8966:	1d 86       	std	Y+13, r1	; 0x0d
    8968:	1e 86       	std	Y+14, r1	; 0x0e
    896a:	1f 86       	std	Y+15, r1	; 0x0f
    896c:	18 8a       	std	Y+16, r1	; 0x10
    896e:	89 8b       	std	Y+17, r24	; 0x11
    8970:	9a 8b       	std	Y+18, r25	; 0x12
    8972:	ab 8b       	std	Y+19, r26	; 0x13
    8974:	bc 8b       	std	Y+20, r27	; 0x14
    8976:	1d 8a       	std	Y+21, r1	; 0x15
    8978:	1e 8a       	std	Y+22, r1	; 0x16
    897a:	1f 8a       	std	Y+23, r1	; 0x17
    897c:	18 8e       	std	Y+24, r1	; 0x18
    897e:	19 8e       	std	Y+25, r1	; 0x19
    8980:	1a 8e       	std	Y+26, r1	; 0x1a
    8982:	1b 8e       	std	Y+27, r1	; 0x1b
    8984:	1c 8e       	std	Y+28, r1	; 0x1c
    8986:	1d 8e       	std	Y+29, r1	; 0x1d
    8988:	1e 8e       	std	Y+30, r1	; 0x1e
    898a:	1f 8e       	std	Y+31, r1	; 0x1f
    898c:	18 a2       	std	Y+32, r1	; 0x20
    898e:	89 a3       	std	Y+33, r24	; 0x21
    8990:	9a a3       	std	Y+34, r25	; 0x22
    8992:	ab a3       	std	Y+35, r26	; 0x23
    8994:	bc a3       	std	Y+36, r27	; 0x24
    8996:	fe 01       	movw	r30, r28
    8998:	31 96       	adiw	r30, 0x01	; 1
    899a:	2f 01       	movw	r4, r30
    899c:	f4 e0       	ldi	r31, 0x04	; 4
    899e:	2f 0e       	add	r2, r31
    89a0:	31 1c       	adc	r3, r1
    89a2:	ce 01       	movw	r24, r28
    89a4:	85 96       	adiw	r24, 0x25	; 37
    89a6:	8d a3       	std	Y+37, r24	; 0x25
    89a8:	9e a3       	std	Y+38, r25	; 0x26
    89aa:	32 01       	movw	r6, r4
    89ac:	70 2f       	mov	r23, r16
    89ae:	6f a1       	ldd	r22, Y+39	; 0x27
    89b0:	98 a5       	ldd	r25, Y+40	; 0x28
    89b2:	89 a5       	ldd	r24, Y+41	; 0x29
    89b4:	41 01       	movw	r8, r2
    89b6:	53 01       	movw	r10, r6
    89b8:	10 e0       	ldi	r17, 0x00	; 0
    89ba:	27 2f       	mov	r18, r23
    89bc:	36 2f       	mov	r19, r22
    89be:	49 2f       	mov	r20, r25
    89c0:	58 2f       	mov	r21, r24
    89c2:	c7 01       	movw	r24, r14
    89c4:	b6 01       	movw	r22, r12
    89c6:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    89ca:	f5 01       	movw	r30, r10
    89cc:	61 93       	st	Z+, r22
    89ce:	71 93       	st	Z+, r23
    89d0:	81 93       	st	Z+, r24
    89d2:	91 93       	st	Z+, r25
    89d4:	5f 01       	movw	r10, r30
    89d6:	1f 5f       	subi	r17, 0xFF	; 255
    89d8:	13 30       	cpi	r17, 0x03	; 3
    89da:	89 f0       	breq	.+34     	; 0x89fe <eigenvalues+0x284>
    89dc:	f4 01       	movw	r30, r8
    89de:	c1 90       	ld	r12, Z+
    89e0:	d1 90       	ld	r13, Z+
    89e2:	e1 90       	ld	r14, Z+
    89e4:	f1 90       	ld	r15, Z+
    89e6:	4f 01       	movw	r8, r30
    89e8:	d5 01       	movw	r26, r10
    89ea:	7c 91       	ld	r23, X
    89ec:	11 96       	adiw	r26, 0x01	; 1
    89ee:	6c 91       	ld	r22, X
    89f0:	11 97       	sbiw	r26, 0x01	; 1
    89f2:	12 96       	adiw	r26, 0x02	; 2
    89f4:	9c 91       	ld	r25, X
    89f6:	12 97       	sbiw	r26, 0x02	; 2
    89f8:	13 96       	adiw	r26, 0x03	; 3
    89fa:	8c 91       	ld	r24, X
    89fc:	de cf       	rjmp	.-68     	; 0x89ba <eigenvalues+0x240>
    89fe:	fc e0       	ldi	r31, 0x0C	; 12
    8a00:	6f 0e       	add	r6, r31
    8a02:	71 1c       	adc	r7, r1
    8a04:	8d a1       	ldd	r24, Y+37	; 0x25
    8a06:	9e a1       	ldd	r25, Y+38	; 0x26
    8a08:	86 15       	cp	r24, r6
    8a0a:	97 05       	cpc	r25, r7
    8a0c:	81 f0       	breq	.+32     	; 0x8a2e <eigenvalues+0x2b4>
    8a0e:	d1 01       	movw	r26, r2
    8a10:	18 96       	adiw	r26, 0x08	; 8
    8a12:	cd 90       	ld	r12, X+
    8a14:	dd 90       	ld	r13, X+
    8a16:	ed 90       	ld	r14, X+
    8a18:	fc 90       	ld	r15, X
    8a1a:	1b 97       	sbiw	r26, 0x0b	; 11
    8a1c:	f3 01       	movw	r30, r6
    8a1e:	70 81       	ld	r23, Z
    8a20:	61 81       	ldd	r22, Z+1	; 0x01
    8a22:	92 81       	ldd	r25, Z+2	; 0x02
    8a24:	83 81       	ldd	r24, Z+3	; 0x03
    8a26:	fc e0       	ldi	r31, 0x0C	; 12
    8a28:	2f 0e       	add	r2, r31
    8a2a:	31 1c       	adc	r3, r1
    8a2c:	c3 cf       	rjmp	.-122    	; 0x89b4 <eigenvalues+0x23a>
    8a2e:	2a a5       	ldd	r18, Y+42	; 0x2a
    8a30:	3b a5       	ldd	r19, Y+43	; 0x2b
    8a32:	4c a5       	ldd	r20, Y+44	; 0x2c
    8a34:	5d a5       	ldd	r21, Y+45	; 0x2d
    8a36:	60 e0       	ldi	r22, 0x00	; 0
    8a38:	70 e0       	ldi	r23, 0x00	; 0
    8a3a:	80 e8       	ldi	r24, 0x80	; 128
    8a3c:	9f e3       	ldi	r25, 0x3F	; 63
    8a3e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    8a42:	4b 01       	movw	r8, r22
    8a44:	5c 01       	movw	r10, r24
    8a46:	72 01       	movw	r14, r4
    8a48:	13 e0       	ldi	r17, 0x03	; 3
    8a4a:	a5 01       	movw	r20, r10
    8a4c:	94 01       	movw	r18, r8
    8a4e:	d7 01       	movw	r26, r14
    8a50:	6d 91       	ld	r22, X+
    8a52:	7d 91       	ld	r23, X+
    8a54:	8d 91       	ld	r24, X+
    8a56:	9c 91       	ld	r25, X
    8a58:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8a5c:	f7 01       	movw	r30, r14
    8a5e:	61 93       	st	Z+, r22
    8a60:	71 93       	st	Z+, r23
    8a62:	81 93       	st	Z+, r24
    8a64:	91 93       	st	Z+, r25
    8a66:	7f 01       	movw	r14, r30
    8a68:	11 50       	subi	r17, 0x01	; 1
    8a6a:	79 f7       	brne	.-34     	; 0x8a4a <eigenvalues+0x2d0>
    8a6c:	fc e0       	ldi	r31, 0x0C	; 12
    8a6e:	4f 0e       	add	r4, r31
    8a70:	51 1c       	adc	r5, r1
    8a72:	8d a1       	ldd	r24, Y+37	; 0x25
    8a74:	9e a1       	ldd	r25, Y+38	; 0x26
    8a76:	48 16       	cp	r4, r24
    8a78:	59 06       	cpc	r5, r25
    8a7a:	29 f7       	brne	.-54     	; 0x8a46 <eigenvalues+0x2cc>
    8a7c:	ce 01       	movw	r24, r28
    8a7e:	01 96       	adiw	r24, 0x01	; 1
    8a80:	0e 94 ef 42 	call	0x85de	; 0x85de <matrixDet>
    8a84:	20 e0       	ldi	r18, 0x00	; 0
    8a86:	30 e0       	ldi	r19, 0x00	; 0
    8a88:	40 e0       	ldi	r20, 0x00	; 0
    8a8a:	5f e3       	ldi	r21, 0x3F	; 63
    8a8c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8a90:	6b 01       	movw	r12, r22
    8a92:	7c 01       	movw	r14, r24
    8a94:	20 e0       	ldi	r18, 0x00	; 0
    8a96:	30 e0       	ldi	r19, 0x00	; 0
    8a98:	40 e8       	ldi	r20, 0x80	; 128
    8a9a:	5f eb       	ldi	r21, 0xBF	; 191
    8a9c:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    8aa0:	18 16       	cp	r1, r24
    8aa2:	0c f0       	brlt	.+2      	; 0x8aa6 <eigenvalues+0x32c>
    8aa4:	99 c0       	rjmp	.+306    	; 0x8bd8 <eigenvalues+0x45e>
    8aa6:	20 e0       	ldi	r18, 0x00	; 0
    8aa8:	30 e0       	ldi	r19, 0x00	; 0
    8aaa:	40 e8       	ldi	r20, 0x80	; 128
    8aac:	5f e3       	ldi	r21, 0x3F	; 63
    8aae:	c7 01       	movw	r24, r14
    8ab0:	b6 01       	movw	r22, r12
    8ab2:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    8ab6:	87 fd       	sbrc	r24, 7
    8ab8:	9c c0       	rjmp	.+312    	; 0x8bf2 <eigenvalues+0x478>
    8aba:	cc 24       	eor	r12, r12
    8abc:	c3 94       	inc	r12
    8abe:	d1 2c       	mov	r13, r1
    8ac0:	e1 2c       	mov	r14, r1
    8ac2:	8f eb       	ldi	r24, 0xBF	; 191
    8ac4:	f8 2e       	mov	r15, r24
    8ac6:	81 2c       	mov	r8, r1
    8ac8:	91 2c       	mov	r9, r1
    8aca:	90 e8       	ldi	r25, 0x80	; 128
    8acc:	a9 2e       	mov	r10, r25
    8ace:	9f e3       	ldi	r25, 0x3F	; 63
    8ad0:	b9 2e       	mov	r11, r25
    8ad2:	2a a5       	ldd	r18, Y+42	; 0x2a
    8ad4:	3b a5       	ldd	r19, Y+43	; 0x2b
    8ad6:	4c a5       	ldd	r20, Y+44	; 0x2c
    8ad8:	5d a5       	ldd	r21, Y+45	; 0x2d
    8ada:	ca 01       	movw	r24, r20
    8adc:	b9 01       	movw	r22, r18
    8ade:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8ae2:	2b 01       	movw	r4, r22
    8ae4:	3c 01       	movw	r6, r24
    8ae6:	a5 01       	movw	r20, r10
    8ae8:	94 01       	movw	r18, r8
    8aea:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8aee:	20 2f       	mov	r18, r16
    8af0:	3f a1       	ldd	r19, Y+39	; 0x27
    8af2:	48 a5       	ldd	r20, Y+40	; 0x28
    8af4:	59 a5       	ldd	r21, Y+41	; 0x29
    8af6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8afa:	4b 01       	movw	r8, r22
    8afc:	5c 01       	movw	r10, r24
    8afe:	ae a5       	ldd	r26, Y+46	; 0x2e
    8b00:	bf a5       	ldd	r27, Y+47	; 0x2f
    8b02:	6d 93       	st	X+, r22
    8b04:	7d 93       	st	X+, r23
    8b06:	8d 93       	st	X+, r24
    8b08:	9c 93       	st	X, r25
    8b0a:	13 97       	sbiw	r26, 0x03	; 3
    8b0c:	a7 01       	movw	r20, r14
    8b0e:	96 01       	movw	r18, r12
    8b10:	c3 01       	movw	r24, r6
    8b12:	b2 01       	movw	r22, r4
    8b14:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8b18:	20 2f       	mov	r18, r16
    8b1a:	3f a1       	ldd	r19, Y+39	; 0x27
    8b1c:	48 a5       	ldd	r20, Y+40	; 0x28
    8b1e:	59 a5       	ldd	r21, Y+41	; 0x29
    8b20:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8b24:	6b 01       	movw	r12, r22
    8b26:	7c 01       	movw	r14, r24
    8b28:	ee a5       	ldd	r30, Y+46	; 0x2e
    8b2a:	ff a5       	ldd	r31, Y+47	; 0x2f
    8b2c:	60 87       	std	Z+8, r22	; 0x08
    8b2e:	71 87       	std	Z+9, r23	; 0x09
    8b30:	82 87       	std	Z+10, r24	; 0x0a
    8b32:	93 87       	std	Z+11, r25	; 0x0b
    8b34:	20 e0       	ldi	r18, 0x00	; 0
    8b36:	30 e0       	ldi	r19, 0x00	; 0
    8b38:	40 e4       	ldi	r20, 0x40	; 64
    8b3a:	50 e4       	ldi	r21, 0x40	; 64
    8b3c:	60 2f       	mov	r22, r16
    8b3e:	7f a1       	ldd	r23, Y+39	; 0x27
    8b40:	88 a5       	ldd	r24, Y+40	; 0x28
    8b42:	99 a5       	ldd	r25, Y+41	; 0x29
    8b44:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8b48:	a5 01       	movw	r20, r10
    8b4a:	94 01       	movw	r18, r8
    8b4c:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8b50:	a7 01       	movw	r20, r14
    8b52:	96 01       	movw	r18, r12
    8b54:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8b58:	ae a5       	ldd	r26, Y+46	; 0x2e
    8b5a:	bf a5       	ldd	r27, Y+47	; 0x2f
    8b5c:	14 96       	adiw	r26, 0x04	; 4
    8b5e:	6d 93       	st	X+, r22
    8b60:	7d 93       	st	X+, r23
    8b62:	8d 93       	st	X+, r24
    8b64:	9c 93       	st	X, r25
    8b66:	17 97       	sbiw	r26, 0x07	; 7
    8b68:	e7 96       	adiw	r28, 0x37	; 55
    8b6a:	cd bf       	out	0x3d, r28	; 61
    8b6c:	de bf       	out	0x3e, r29	; 62
    8b6e:	df 91       	pop	r29
    8b70:	cf 91       	pop	r28
    8b72:	1f 91       	pop	r17
    8b74:	0f 91       	pop	r16
    8b76:	ff 90       	pop	r15
    8b78:	ef 90       	pop	r14
    8b7a:	df 90       	pop	r13
    8b7c:	cf 90       	pop	r12
    8b7e:	bf 90       	pop	r11
    8b80:	af 90       	pop	r10
    8b82:	9f 90       	pop	r9
    8b84:	8f 90       	pop	r8
    8b86:	7f 90       	pop	r7
    8b88:	6f 90       	pop	r6
    8b8a:	5f 90       	pop	r5
    8b8c:	4f 90       	pop	r4
    8b8e:	3f 90       	pop	r3
    8b90:	2f 90       	pop	r2
    8b92:	08 95       	ret
    8b94:	f1 01       	movw	r30, r2
    8b96:	80 81       	ld	r24, Z
    8b98:	91 81       	ldd	r25, Z+1	; 0x01
    8b9a:	a2 81       	ldd	r26, Z+2	; 0x02
    8b9c:	b3 81       	ldd	r27, Z+3	; 0x03
    8b9e:	ee a5       	ldd	r30, Y+46	; 0x2e
    8ba0:	ff a5       	ldd	r31, Y+47	; 0x2f
    8ba2:	80 83       	st	Z, r24
    8ba4:	91 83       	std	Z+1, r25	; 0x01
    8ba6:	a2 83       	std	Z+2, r26	; 0x02
    8ba8:	b3 83       	std	Z+3, r27	; 0x03
    8baa:	f1 01       	movw	r30, r2
    8bac:	80 89       	ldd	r24, Z+16	; 0x10
    8bae:	91 89       	ldd	r25, Z+17	; 0x11
    8bb0:	a2 89       	ldd	r26, Z+18	; 0x12
    8bb2:	b3 89       	ldd	r27, Z+19	; 0x13
    8bb4:	ee a5       	ldd	r30, Y+46	; 0x2e
    8bb6:	ff a5       	ldd	r31, Y+47	; 0x2f
    8bb8:	84 83       	std	Z+4, r24	; 0x04
    8bba:	95 83       	std	Z+5, r25	; 0x05
    8bbc:	a6 83       	std	Z+6, r26	; 0x06
    8bbe:	b7 83       	std	Z+7, r27	; 0x07
    8bc0:	f1 01       	movw	r30, r2
    8bc2:	80 a1       	ldd	r24, Z+32	; 0x20
    8bc4:	91 a1       	ldd	r25, Z+33	; 0x21
    8bc6:	a2 a1       	ldd	r26, Z+34	; 0x22
    8bc8:	b3 a1       	ldd	r27, Z+35	; 0x23
    8bca:	ee a5       	ldd	r30, Y+46	; 0x2e
    8bcc:	ff a5       	ldd	r31, Y+47	; 0x2f
    8bce:	80 87       	std	Z+8, r24	; 0x08
    8bd0:	91 87       	std	Z+9, r25	; 0x09
    8bd2:	a2 87       	std	Z+10, r26	; 0x0a
    8bd4:	b3 87       	std	Z+11, r27	; 0x0b
    8bd6:	c8 cf       	rjmp	.-112    	; 0x8b68 <eigenvalues+0x3ee>
    8bd8:	c1 2c       	mov	r12, r1
    8bda:	d1 2c       	mov	r13, r1
    8bdc:	20 e8       	ldi	r18, 0x80	; 128
    8bde:	e2 2e       	mov	r14, r18
    8be0:	2f eb       	ldi	r18, 0xBF	; 191
    8be2:	f2 2e       	mov	r15, r18
    8be4:	88 24       	eor	r8, r8
    8be6:	8a 94       	dec	r8
    8be8:	98 2c       	mov	r9, r8
    8bea:	a8 2c       	mov	r10, r8
    8bec:	3e e3       	ldi	r19, 0x3E	; 62
    8bee:	b3 2e       	mov	r11, r19
    8bf0:	70 cf       	rjmp	.-288    	; 0x8ad2 <eigenvalues+0x358>
    8bf2:	c7 01       	movw	r24, r14
    8bf4:	b6 01       	movw	r22, r12
    8bf6:	0e 94 36 71 	call	0xe26c	; 0xe26c <acos>
    8bfa:	20 e0       	ldi	r18, 0x00	; 0
    8bfc:	30 e0       	ldi	r19, 0x00	; 0
    8bfe:	40 e4       	ldi	r20, 0x40	; 64
    8c00:	50 e4       	ldi	r21, 0x40	; 64
    8c02:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    8c06:	6b 01       	movw	r12, r22
    8c08:	7c 01       	movw	r14, r24
    8c0a:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    8c0e:	4b 01       	movw	r8, r22
    8c10:	5c 01       	movw	r10, r24
    8c12:	22 e9       	ldi	r18, 0x92	; 146
    8c14:	3a e0       	ldi	r19, 0x0A	; 10
    8c16:	46 e0       	ldi	r20, 0x06	; 6
    8c18:	50 e4       	ldi	r21, 0x40	; 64
    8c1a:	c7 01       	movw	r24, r14
    8c1c:	b6 01       	movw	r22, r12
    8c1e:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8c22:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    8c26:	6b 01       	movw	r12, r22
    8c28:	7c 01       	movw	r14, r24
    8c2a:	53 cf       	rjmp	.-346    	; 0x8ad2 <eigenvalues+0x358>

00008c2c <eigensystem>:
    8c2c:	2f 92       	push	r2
    8c2e:	3f 92       	push	r3
    8c30:	4f 92       	push	r4
    8c32:	5f 92       	push	r5
    8c34:	6f 92       	push	r6
    8c36:	7f 92       	push	r7
    8c38:	8f 92       	push	r8
    8c3a:	9f 92       	push	r9
    8c3c:	af 92       	push	r10
    8c3e:	bf 92       	push	r11
    8c40:	cf 92       	push	r12
    8c42:	df 92       	push	r13
    8c44:	ef 92       	push	r14
    8c46:	ff 92       	push	r15
    8c48:	0f 93       	push	r16
    8c4a:	1f 93       	push	r17
    8c4c:	cf 93       	push	r28
    8c4e:	df 93       	push	r29
    8c50:	cd b7       	in	r28, 0x3d	; 61
    8c52:	de b7       	in	r29, 0x3e	; 62
    8c54:	c2 5a       	subi	r28, 0xA2	; 162
    8c56:	d1 09       	sbc	r29, r1
    8c58:	cd bf       	out	0x3d, r28	; 61
    8c5a:	de bf       	out	0x3e, r29	; 62
    8c5c:	8c 01       	movw	r16, r24
    8c5e:	cf 55       	subi	r28, 0x5F	; 95
    8c60:	df 4f       	sbci	r29, 0xFF	; 255
    8c62:	68 83       	st	Y, r22
    8c64:	79 83       	std	Y+1, r23	; 0x01
    8c66:	c1 5a       	subi	r28, 0xA1	; 161
    8c68:	d0 40       	sbci	r29, 0x00	; 0
    8c6a:	2a 01       	movw	r4, r20
    8c6c:	ba 01       	movw	r22, r20
    8c6e:	0e 94 bd 43 	call	0x877a	; 0x877a <eigenvalues>
    8c72:	d8 01       	movw	r26, r16
    8c74:	ad 90       	ld	r10, X+
    8c76:	bd 90       	ld	r11, X+
    8c78:	cd 90       	ld	r12, X+
    8c7a:	dc 90       	ld	r13, X
    8c7c:	13 97       	sbiw	r26, 0x03	; 3
    8c7e:	14 96       	adiw	r26, 0x04	; 4
    8c80:	6d 90       	ld	r6, X+
    8c82:	7d 90       	ld	r7, X+
    8c84:	8d 90       	ld	r8, X+
    8c86:	9c 90       	ld	r9, X
    8c88:	17 97       	sbiw	r26, 0x07	; 7
    8c8a:	a4 01       	movw	r20, r8
    8c8c:	93 01       	movw	r18, r6
    8c8e:	c6 01       	movw	r24, r12
    8c90:	b5 01       	movw	r22, r10
    8c92:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    8c96:	88 23       	and	r24, r24
    8c98:	b9 f0       	breq	.+46     	; 0x8cc8 <eigensystem+0x9c>
    8c9a:	d8 01       	movw	r26, r16
    8c9c:	18 96       	adiw	r26, 0x08	; 8
    8c9e:	8d 91       	ld	r24, X+
    8ca0:	9d 91       	ld	r25, X+
    8ca2:	0d 90       	ld	r0, X+
    8ca4:	bc 91       	ld	r27, X
    8ca6:	a0 2d       	mov	r26, r0
    8ca8:	c9 56       	subi	r28, 0x69	; 105
    8caa:	df 4f       	sbci	r29, 0xFF	; 255
    8cac:	88 83       	st	Y, r24
    8cae:	99 83       	std	Y+1, r25	; 0x01
    8cb0:	aa 83       	std	Y+2, r26	; 0x02
    8cb2:	bb 83       	std	Y+3, r27	; 0x03
    8cb4:	c7 59       	subi	r28, 0x97	; 151
    8cb6:	d0 40       	sbci	r29, 0x00	; 0
    8cb8:	9c 01       	movw	r18, r24
    8cba:	ad 01       	movw	r20, r26
    8cbc:	c6 01       	movw	r24, r12
    8cbe:	b5 01       	movw	r22, r10
    8cc0:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    8cc4:	81 11       	cpse	r24, r1
    8cc6:	46 c2       	rjmp	.+1164   	; 0x9154 <eigensystem+0x528>
    8cc8:	8b e9       	ldi	r24, 0x9B	; 155
    8cca:	92 e2       	ldi	r25, 0x22	; 34
    8ccc:	9f 93       	push	r25
    8cce:	8f 93       	push	r24
    8cd0:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    8cd4:	f8 01       	movw	r30, r16
    8cd6:	a0 80       	ld	r10, Z
    8cd8:	b1 80       	ldd	r11, Z+1	; 0x01
    8cda:	c2 80       	ldd	r12, Z+2	; 0x02
    8cdc:	d3 80       	ldd	r13, Z+3	; 0x03
    8cde:	0f 90       	pop	r0
    8ce0:	0f 90       	pop	r0
    8ce2:	8c e6       	ldi	r24, 0x6C	; 108
    8ce4:	e4 e8       	ldi	r30, 0x84	; 132
    8ce6:	f0 e2       	ldi	r31, 0x20	; 32
    8ce8:	de 01       	movw	r26, r28
    8cea:	11 96       	adiw	r26, 0x01	; 1
    8cec:	01 90       	ld	r0, Z+
    8cee:	0d 92       	st	X+, r0
    8cf0:	8a 95       	dec	r24
    8cf2:	e1 f7       	brne	.-8      	; 0x8cec <eigensystem+0xc0>
    8cf4:	c8 01       	movw	r24, r16
    8cf6:	04 96       	adiw	r24, 0x04	; 4
    8cf8:	c9 56       	subi	r28, 0x69	; 105
    8cfa:	df 4f       	sbci	r29, 0xFF	; 255
    8cfc:	88 83       	st	Y, r24
    8cfe:	99 83       	std	Y+1, r25	; 0x01
    8d00:	c7 59       	subi	r28, 0x97	; 151
    8d02:	d0 40       	sbci	r29, 0x00	; 0
    8d04:	de 01       	movw	r26, r28
    8d06:	a3 59       	subi	r26, 0x93	; 147
    8d08:	bf 4f       	sbci	r27, 0xFF	; 255
    8d0a:	cb 56       	subi	r28, 0x6B	; 107
    8d0c:	df 4f       	sbci	r29, 0xFF	; 255
    8d0e:	a8 83       	st	Y, r26
    8d10:	b9 83       	std	Y+1, r27	; 0x01
    8d12:	c5 59       	subi	r28, 0x95	; 149
    8d14:	d0 40       	sbci	r29, 0x00	; 0
    8d16:	fe 01       	movw	r30, r28
    8d18:	31 96       	adiw	r30, 0x01	; 1
    8d1a:	4f 01       	movw	r8, r30
    8d1c:	c2 01       	movw	r24, r4
    8d1e:	84 96       	adiw	r24, 0x24	; 36
    8d20:	3c 01       	movw	r6, r24
    8d22:	74 01       	movw	r14, r8
    8d24:	93 e0       	ldi	r25, 0x03	; 3
    8d26:	39 2e       	mov	r3, r25
    8d28:	87 01       	movw	r16, r14
    8d2a:	21 2c       	mov	r2, r1
    8d2c:	a6 01       	movw	r20, r12
    8d2e:	95 01       	movw	r18, r10
    8d30:	d8 01       	movw	r26, r16
    8d32:	6d 91       	ld	r22, X+
    8d34:	7d 91       	ld	r23, X+
    8d36:	8d 91       	ld	r24, X+
    8d38:	9c 91       	ld	r25, X
    8d3a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8d3e:	f8 01       	movw	r30, r16
    8d40:	61 93       	st	Z+, r22
    8d42:	71 93       	st	Z+, r23
    8d44:	81 93       	st	Z+, r24
    8d46:	91 93       	st	Z+, r25
    8d48:	8f 01       	movw	r16, r30
    8d4a:	23 94       	inc	r2
    8d4c:	f3 e0       	ldi	r31, 0x03	; 3
    8d4e:	2f 12       	cpse	r2, r31
    8d50:	ed cf       	rjmp	.-38     	; 0x8d2c <eigensystem+0x100>
    8d52:	3a 94       	dec	r3
    8d54:	8c e0       	ldi	r24, 0x0C	; 12
    8d56:	e8 0e       	add	r14, r24
    8d58:	f1 1c       	adc	r15, r1
    8d5a:	31 10       	cpse	r3, r1
    8d5c:	e5 cf       	rjmp	.-54     	; 0x8d28 <eigensystem+0xfc>
    8d5e:	62 01       	movw	r12, r4
    8d60:	54 01       	movw	r10, r8
    8d62:	85 01       	movw	r16, r10
    8d64:	76 01       	movw	r14, r12
    8d66:	31 2c       	mov	r3, r1
    8d68:	d7 01       	movw	r26, r14
    8d6a:	6d 91       	ld	r22, X+
    8d6c:	7d 91       	ld	r23, X+
    8d6e:	8d 91       	ld	r24, X+
    8d70:	9d 91       	ld	r25, X+
    8d72:	7d 01       	movw	r14, r26
    8d74:	f8 01       	movw	r30, r16
    8d76:	20 81       	ld	r18, Z
    8d78:	31 81       	ldd	r19, Z+1	; 0x01
    8d7a:	42 81       	ldd	r20, Z+2	; 0x02
    8d7c:	53 81       	ldd	r21, Z+3	; 0x03
    8d7e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    8d82:	d8 01       	movw	r26, r16
    8d84:	6d 93       	st	X+, r22
    8d86:	7d 93       	st	X+, r23
    8d88:	8d 93       	st	X+, r24
    8d8a:	9d 93       	st	X+, r25
    8d8c:	8d 01       	movw	r16, r26
    8d8e:	33 94       	inc	r3
    8d90:	b3 e0       	ldi	r27, 0x03	; 3
    8d92:	3b 12       	cpse	r3, r27
    8d94:	e9 cf       	rjmp	.-46     	; 0x8d68 <eigensystem+0x13c>
    8d96:	ec e0       	ldi	r30, 0x0C	; 12
    8d98:	ce 0e       	add	r12, r30
    8d9a:	d1 1c       	adc	r13, r1
    8d9c:	fc e0       	ldi	r31, 0x0C	; 12
    8d9e:	af 0e       	add	r10, r31
    8da0:	b1 1c       	adc	r11, r1
    8da2:	c6 14       	cp	r12, r6
    8da4:	d7 04       	cpc	r13, r7
    8da6:	e9 f6       	brne	.-70     	; 0x8d62 <eigensystem+0x136>
    8da8:	84 e2       	ldi	r24, 0x24	; 36
    8daa:	88 0e       	add	r8, r24
    8dac:	91 1c       	adc	r9, r1
    8dae:	cb 56       	subi	r28, 0x6B	; 107
    8db0:	df 4f       	sbci	r29, 0xFF	; 255
    8db2:	a8 81       	ld	r26, Y
    8db4:	b9 81       	ldd	r27, Y+1	; 0x01
    8db6:	c5 59       	subi	r28, 0x95	; 149
    8db8:	d0 40       	sbci	r29, 0x00	; 0
    8dba:	a8 15       	cp	r26, r8
    8dbc:	b9 05       	cpc	r27, r9
    8dbe:	89 f0       	breq	.+34     	; 0x8de2 <eigensystem+0x1b6>
    8dc0:	c9 56       	subi	r28, 0x69	; 105
    8dc2:	df 4f       	sbci	r29, 0xFF	; 255
    8dc4:	e8 81       	ld	r30, Y
    8dc6:	f9 81       	ldd	r31, Y+1	; 0x01
    8dc8:	c7 59       	subi	r28, 0x97	; 151
    8dca:	d0 40       	sbci	r29, 0x00	; 0
    8dcc:	a1 90       	ld	r10, Z+
    8dce:	b1 90       	ld	r11, Z+
    8dd0:	c1 90       	ld	r12, Z+
    8dd2:	d1 90       	ld	r13, Z+
    8dd4:	c9 56       	subi	r28, 0x69	; 105
    8dd6:	df 4f       	sbci	r29, 0xFF	; 255
    8dd8:	e8 83       	st	Y, r30
    8dda:	f9 83       	std	Y+1, r31	; 0x01
    8ddc:	c7 59       	subi	r28, 0x97	; 151
    8dde:	d0 40       	sbci	r29, 0x00	; 0
    8de0:	a0 cf       	rjmp	.-192    	; 0x8d22 <eigensystem+0xf6>
    8de2:	cf 55       	subi	r28, 0x5F	; 95
    8de4:	df 4f       	sbci	r29, 0xFF	; 255
    8de6:	e8 80       	ld	r14, Y
    8de8:	f9 80       	ldd	r15, Y+1	; 0x01
    8dea:	c1 5a       	subi	r28, 0xA1	; 161
    8dec:	d0 40       	sbci	r29, 0x00	; 0
    8dee:	67 01       	movw	r12, r14
    8df0:	84 e2       	ldi	r24, 0x24	; 36
    8df2:	c8 0e       	add	r12, r24
    8df4:	d1 1c       	adc	r13, r1
    8df6:	57 01       	movw	r10, r14
    8df8:	13 e0       	ldi	r17, 0x03	; 3
    8dfa:	20 e0       	ldi	r18, 0x00	; 0
    8dfc:	30 e0       	ldi	r19, 0x00	; 0
    8dfe:	a9 01       	movw	r20, r18
    8e00:	d5 01       	movw	r26, r10
    8e02:	6d 91       	ld	r22, X+
    8e04:	7d 91       	ld	r23, X+
    8e06:	8d 91       	ld	r24, X+
    8e08:	9c 91       	ld	r25, X
    8e0a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8e0e:	f5 01       	movw	r30, r10
    8e10:	61 93       	st	Z+, r22
    8e12:	71 93       	st	Z+, r23
    8e14:	81 93       	st	Z+, r24
    8e16:	91 93       	st	Z+, r25
    8e18:	5f 01       	movw	r10, r30
    8e1a:	11 50       	subi	r17, 0x01	; 1
    8e1c:	71 f7       	brne	.-36     	; 0x8dfa <eigensystem+0x1ce>
    8e1e:	fc e0       	ldi	r31, 0x0C	; 12
    8e20:	ef 0e       	add	r14, r31
    8e22:	f1 1c       	adc	r15, r1
    8e24:	ec 14       	cp	r14, r12
    8e26:	fd 04       	cpc	r15, r13
    8e28:	31 f7       	brne	.-52     	; 0x8df6 <eigensystem+0x1ca>
    8e2a:	de 01       	movw	r26, r28
    8e2c:	95 96       	adiw	r26, 0x25	; 37
    8e2e:	cf 56       	subi	r28, 0x6F	; 111
    8e30:	df 4f       	sbci	r29, 0xFF	; 255
    8e32:	a8 83       	st	Y, r26
    8e34:	b9 83       	std	Y+1, r27	; 0x01
    8e36:	c1 59       	subi	r28, 0x91	; 145
    8e38:	d0 40       	sbci	r29, 0x00	; 0
    8e3a:	fe 01       	movw	r30, r28
    8e3c:	e3 59       	subi	r30, 0x93	; 147
    8e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    8e40:	c5 56       	subi	r28, 0x65	; 101
    8e42:	df 4f       	sbci	r29, 0xFF	; 255
    8e44:	e8 83       	st	Y, r30
    8e46:	f9 83       	std	Y+1, r31	; 0x01
    8e48:	cb 59       	subi	r28, 0x9B	; 155
    8e4a:	d0 40       	sbci	r29, 0x00	; 0
    8e4c:	1f 01       	movw	r2, r30
    8e4e:	f4 e2       	ldi	r31, 0x24	; 36
    8e50:	2f 0e       	add	r2, r31
    8e52:	31 1c       	adc	r3, r1
    8e54:	ce 01       	movw	r24, r28
    8e56:	83 59       	subi	r24, 0x93	; 147
    8e58:	9f 4f       	sbci	r25, 0xFF	; 255
    8e5a:	5c 01       	movw	r10, r24
    8e5c:	fe 01       	movw	r30, r28
    8e5e:	eb 5a       	subi	r30, 0xAB	; 171
    8e60:	ff 4f       	sbci	r31, 0xFF	; 255
    8e62:	cd 56       	subi	r28, 0x6D	; 109
    8e64:	df 4f       	sbci	r29, 0xFF	; 255
    8e66:	e8 83       	st	Y, r30
    8e68:	f9 83       	std	Y+1, r31	; 0x01
    8e6a:	c3 59       	subi	r28, 0x93	; 147
    8e6c:	d0 40       	sbci	r29, 0x00	; 0
    8e6e:	c3 56       	subi	r28, 0x63	; 99
    8e70:	df 4f       	sbci	r29, 0xFF	; 255
    8e72:	a8 83       	st	Y, r26
    8e74:	b9 83       	std	Y+1, r27	; 0x01
    8e76:	cd 59       	subi	r28, 0x9D	; 157
    8e78:	d0 40       	sbci	r29, 0x00	; 0
    8e7a:	ce 01       	movw	r24, r28
    8e7c:	87 5b       	subi	r24, 0xB7	; 183
    8e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e80:	6c 01       	movw	r12, r24
    8e82:	c9 56       	subi	r28, 0x69	; 105
    8e84:	df 4f       	sbci	r29, 0xFF	; 255
    8e86:	a8 82       	st	Y, r10
    8e88:	b9 82       	std	Y+1, r11	; 0x01
    8e8a:	c7 59       	subi	r28, 0x97	; 151
    8e8c:	d0 40       	sbci	r29, 0x00	; 0
    8e8e:	c3 56       	subi	r28, 0x63	; 99
    8e90:	df 4f       	sbci	r29, 0xFF	; 255
    8e92:	68 80       	ld	r6, Y
    8e94:	79 80       	ldd	r7, Y+1	; 0x01
    8e96:	cd 59       	subi	r28, 0x9D	; 157
    8e98:	d0 40       	sbci	r29, 0x00	; 0
    8e9a:	c1 56       	subi	r28, 0x61	; 97
    8e9c:	df 4f       	sbci	r29, 0xFF	; 255
    8e9e:	a8 82       	st	Y, r10
    8ea0:	b9 82       	std	Y+1, r11	; 0x01
    8ea2:	cf 59       	subi	r28, 0x9F	; 159
    8ea4:	d0 40       	sbci	r29, 0x00	; 0
    8ea6:	86 01       	movw	r16, r12
    8ea8:	73 01       	movw	r14, r6
    8eaa:	83 e0       	ldi	r24, 0x03	; 3
    8eac:	58 2e       	mov	r5, r24
    8eae:	81 2c       	mov	r8, r1
    8eb0:	91 2c       	mov	r9, r1
    8eb2:	54 01       	movw	r10, r8
    8eb4:	d7 01       	movw	r26, r14
    8eb6:	6d 91       	ld	r22, X+
    8eb8:	7d 91       	ld	r23, X+
    8eba:	8d 91       	ld	r24, X+
    8ebc:	9d 91       	ld	r25, X+
    8ebe:	7d 01       	movw	r14, r26
    8ec0:	f8 01       	movw	r30, r16
    8ec2:	20 81       	ld	r18, Z
    8ec4:	31 81       	ldd	r19, Z+1	; 0x01
    8ec6:	42 81       	ldd	r20, Z+2	; 0x02
    8ec8:	53 81       	ldd	r21, Z+3	; 0x03
    8eca:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8ece:	9b 01       	movw	r18, r22
    8ed0:	ac 01       	movw	r20, r24
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	b4 01       	movw	r22, r8
    8ed6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8eda:	4b 01       	movw	r8, r22
    8edc:	5c 01       	movw	r10, r24
    8ede:	5a 94       	dec	r5
    8ee0:	04 5f       	subi	r16, 0xF4	; 244
    8ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ee4:	51 10       	cpse	r5, r1
    8ee6:	e6 cf       	rjmp	.-52     	; 0x8eb4 <eigensystem+0x288>
    8ee8:	c9 56       	subi	r28, 0x69	; 105
    8eea:	df 4f       	sbci	r29, 0xFF	; 255
    8eec:	a8 81       	ld	r26, Y
    8eee:	b9 81       	ldd	r27, Y+1	; 0x01
    8ef0:	c7 59       	subi	r28, 0x97	; 151
    8ef2:	d0 40       	sbci	r29, 0x00	; 0
    8ef4:	6d 93       	st	X+, r22
    8ef6:	7d 93       	st	X+, r23
    8ef8:	8d 93       	st	X+, r24
    8efa:	9d 93       	st	X+, r25
    8efc:	c9 56       	subi	r28, 0x69	; 105
    8efe:	df 4f       	sbci	r29, 0xFF	; 255
    8f00:	a8 83       	st	Y, r26
    8f02:	b9 83       	std	Y+1, r27	; 0x01
    8f04:	c7 59       	subi	r28, 0x97	; 151
    8f06:	d0 40       	sbci	r29, 0x00	; 0
    8f08:	b4 e0       	ldi	r27, 0x04	; 4
    8f0a:	cb 0e       	add	r12, r27
    8f0c:	d1 1c       	adc	r13, r1
    8f0e:	cd 56       	subi	r28, 0x6D	; 109
    8f10:	df 4f       	sbci	r29, 0xFF	; 255
    8f12:	e8 81       	ld	r30, Y
    8f14:	f9 81       	ldd	r31, Y+1	; 0x01
    8f16:	c3 59       	subi	r28, 0x93	; 147
    8f18:	d0 40       	sbci	r29, 0x00	; 0
    8f1a:	ec 15       	cp	r30, r12
    8f1c:	fd 05       	cpc	r31, r13
    8f1e:	19 f6       	brne	.-122    	; 0x8ea6 <eigensystem+0x27a>
    8f20:	c1 56       	subi	r28, 0x61	; 97
    8f22:	df 4f       	sbci	r29, 0xFF	; 255
    8f24:	a8 80       	ld	r10, Y
    8f26:	b9 80       	ldd	r11, Y+1	; 0x01
    8f28:	cf 59       	subi	r28, 0x9F	; 159
    8f2a:	d0 40       	sbci	r29, 0x00	; 0
    8f2c:	c3 56       	subi	r28, 0x63	; 99
    8f2e:	df 4f       	sbci	r29, 0xFF	; 255
    8f30:	88 81       	ld	r24, Y
    8f32:	99 81       	ldd	r25, Y+1	; 0x01
    8f34:	cd 59       	subi	r28, 0x9D	; 157
    8f36:	d0 40       	sbci	r29, 0x00	; 0
    8f38:	0c 96       	adiw	r24, 0x0c	; 12
    8f3a:	c3 56       	subi	r28, 0x63	; 99
    8f3c:	df 4f       	sbci	r29, 0xFF	; 255
    8f3e:	88 83       	st	Y, r24
    8f40:	99 83       	std	Y+1, r25	; 0x01
    8f42:	cd 59       	subi	r28, 0x9D	; 157
    8f44:	d0 40       	sbci	r29, 0x00	; 0
    8f46:	9c e0       	ldi	r25, 0x0C	; 12
    8f48:	a9 0e       	add	r10, r25
    8f4a:	b1 1c       	adc	r11, r1
    8f4c:	2a 14       	cp	r2, r10
    8f4e:	3b 04       	cpc	r3, r11
    8f50:	09 f0       	breq	.+2      	; 0x8f54 <eigensystem+0x328>
    8f52:	93 cf       	rjmp	.-218    	; 0x8e7a <eigensystem+0x24e>
    8f54:	be 01       	movw	r22, r28
    8f56:	63 59       	subi	r22, 0x93	; 147
    8f58:	7f 4f       	sbci	r23, 0xFF	; 255
    8f5a:	cf 55       	subi	r28, 0x5F	; 95
    8f5c:	df 4f       	sbci	r29, 0xFF	; 255
    8f5e:	88 81       	ld	r24, Y
    8f60:	99 81       	ldd	r25, Y+1	; 0x01
    8f62:	c1 5a       	subi	r28, 0xA1	; 161
    8f64:	d0 40       	sbci	r29, 0x00	; 0
    8f66:	0e 94 3e 3e 	call	0x7c7c	; 0x7c7c <getEigenvector>
    8f6a:	de 01       	movw	r26, r28
    8f6c:	a3 59       	subi	r26, 0x93	; 147
    8f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    8f70:	c9 56       	subi	r28, 0x69	; 105
    8f72:	df 4f       	sbci	r29, 0xFF	; 255
    8f74:	a8 83       	st	Y, r26
    8f76:	b9 83       	std	Y+1, r27	; 0x01
    8f78:	c7 59       	subi	r28, 0x97	; 151
    8f7a:	d0 40       	sbci	r29, 0x00	; 0
    8f7c:	fe 01       	movw	r30, r28
    8f7e:	31 96       	adiw	r30, 0x01	; 1
    8f80:	4f 01       	movw	r8, r30
    8f82:	fe 01       	movw	r30, r28
    8f84:	e7 5b       	subi	r30, 0xB7	; 183
    8f86:	ff 4f       	sbci	r31, 0xFF	; 255
    8f88:	7f 01       	movw	r14, r30
    8f8a:	c9 56       	subi	r28, 0x69	; 105
    8f8c:	df 4f       	sbci	r29, 0xFF	; 255
    8f8e:	c8 80       	ld	r12, Y
    8f90:	d9 80       	ldd	r13, Y+1	; 0x01
    8f92:	c7 59       	subi	r28, 0x97	; 151
    8f94:	d0 40       	sbci	r29, 0x00	; 0
    8f96:	57 01       	movw	r10, r14
    8f98:	34 01       	movw	r6, r8
    8f9a:	21 2c       	mov	r2, r1
    8f9c:	31 2c       	mov	r3, r1
    8f9e:	21 01       	movw	r4, r2
    8fa0:	10 e0       	ldi	r17, 0x00	; 0
    8fa2:	d3 01       	movw	r26, r6
    8fa4:	6d 91       	ld	r22, X+
    8fa6:	7d 91       	ld	r23, X+
    8fa8:	8d 91       	ld	r24, X+
    8faa:	9d 91       	ld	r25, X+
    8fac:	3d 01       	movw	r6, r26
    8fae:	f5 01       	movw	r30, r10
    8fb0:	20 81       	ld	r18, Z
    8fb2:	31 81       	ldd	r19, Z+1	; 0x01
    8fb4:	42 81       	ldd	r20, Z+2	; 0x02
    8fb6:	53 81       	ldd	r21, Z+3	; 0x03
    8fb8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    8fbc:	9b 01       	movw	r18, r22
    8fbe:	ac 01       	movw	r20, r24
    8fc0:	c2 01       	movw	r24, r4
    8fc2:	b1 01       	movw	r22, r2
    8fc4:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    8fc8:	1b 01       	movw	r2, r22
    8fca:	2c 01       	movw	r4, r24
    8fcc:	1f 5f       	subi	r17, 0xFF	; 255
    8fce:	fc e0       	ldi	r31, 0x0C	; 12
    8fd0:	af 0e       	add	r10, r31
    8fd2:	b1 1c       	adc	r11, r1
    8fd4:	13 30       	cpi	r17, 0x03	; 3
    8fd6:	29 f7       	brne	.-54     	; 0x8fa2 <eigensystem+0x376>
    8fd8:	d6 01       	movw	r26, r12
    8fda:	6d 93       	st	X+, r22
    8fdc:	7d 93       	st	X+, r23
    8fde:	8d 93       	st	X+, r24
    8fe0:	9d 93       	st	X+, r25
    8fe2:	6d 01       	movw	r12, r26
    8fe4:	b4 e0       	ldi	r27, 0x04	; 4
    8fe6:	eb 0e       	add	r14, r27
    8fe8:	f1 1c       	adc	r15, r1
    8fea:	cd 56       	subi	r28, 0x6D	; 109
    8fec:	df 4f       	sbci	r29, 0xFF	; 255
    8fee:	e8 81       	ld	r30, Y
    8ff0:	f9 81       	ldd	r31, Y+1	; 0x01
    8ff2:	c3 59       	subi	r28, 0x93	; 147
    8ff4:	d0 40       	sbci	r29, 0x00	; 0
    8ff6:	ee 16       	cp	r14, r30
    8ff8:	ff 06       	cpc	r15, r31
    8ffa:	69 f6       	brne	.-102    	; 0x8f96 <eigensystem+0x36a>
    8ffc:	fc e0       	ldi	r31, 0x0C	; 12
    8ffe:	8f 0e       	add	r8, r31
    9000:	91 1c       	adc	r9, r1
    9002:	c9 56       	subi	r28, 0x69	; 105
    9004:	df 4f       	sbci	r29, 0xFF	; 255
    9006:	88 81       	ld	r24, Y
    9008:	99 81       	ldd	r25, Y+1	; 0x01
    900a:	c7 59       	subi	r28, 0x97	; 151
    900c:	d0 40       	sbci	r29, 0x00	; 0
    900e:	0c 96       	adiw	r24, 0x0c	; 12
    9010:	c9 56       	subi	r28, 0x69	; 105
    9012:	df 4f       	sbci	r29, 0xFF	; 255
    9014:	88 83       	st	Y, r24
    9016:	99 83       	std	Y+1, r25	; 0x01
    9018:	c7 59       	subi	r28, 0x97	; 151
    901a:	d0 40       	sbci	r29, 0x00	; 0
    901c:	cf 56       	subi	r28, 0x6F	; 111
    901e:	df 4f       	sbci	r29, 0xFF	; 255
    9020:	a8 81       	ld	r26, Y
    9022:	b9 81       	ldd	r27, Y+1	; 0x01
    9024:	c1 59       	subi	r28, 0x91	; 145
    9026:	d0 40       	sbci	r29, 0x00	; 0
    9028:	a8 15       	cp	r26, r8
    902a:	b9 05       	cpc	r27, r9
    902c:	09 f0       	breq	.+2      	; 0x9030 <eigensystem+0x404>
    902e:	a9 cf       	rjmp	.-174    	; 0x8f82 <eigensystem+0x356>
    9030:	be 01       	movw	r22, r28
    9032:	63 59       	subi	r22, 0x93	; 147
    9034:	7f 4f       	sbci	r23, 0xFF	; 255
    9036:	cf 55       	subi	r28, 0x5F	; 95
    9038:	df 4f       	sbci	r29, 0xFF	; 255
    903a:	88 81       	ld	r24, Y
    903c:	99 81       	ldd	r25, Y+1	; 0x01
    903e:	c1 5a       	subi	r28, 0xA1	; 161
    9040:	d0 40       	sbci	r29, 0x00	; 0
    9042:	0c 96       	adiw	r24, 0x0c	; 12
    9044:	0e 94 3e 3e 	call	0x7c7c	; 0x7c7c <getEigenvector>
    9048:	ce 01       	movw	r24, r28
    904a:	01 96       	adiw	r24, 0x01	; 1
    904c:	4c 01       	movw	r8, r24
    904e:	de 01       	movw	r26, r28
    9050:	1d 96       	adiw	r26, 0x0d	; 13
    9052:	cd 56       	subi	r28, 0x6D	; 109
    9054:	df 4f       	sbci	r29, 0xFF	; 255
    9056:	a8 83       	st	Y, r26
    9058:	b9 83       	std	Y+1, r27	; 0x01
    905a:	c3 59       	subi	r28, 0x93	; 147
    905c:	d0 40       	sbci	r29, 0x00	; 0
    905e:	ce 01       	movw	r24, r28
    9060:	01 96       	adiw	r24, 0x01	; 1
    9062:	7c 01       	movw	r14, r24
    9064:	c5 56       	subi	r28, 0x65	; 101
    9066:	df 4f       	sbci	r29, 0xFF	; 255
    9068:	c8 80       	ld	r12, Y
    906a:	d9 80       	ldd	r13, Y+1	; 0x01
    906c:	cb 59       	subi	r28, 0x9B	; 155
    906e:	d0 40       	sbci	r29, 0x00	; 0
    9070:	57 01       	movw	r10, r14
    9072:	34 01       	movw	r6, r8
    9074:	21 2c       	mov	r2, r1
    9076:	31 2c       	mov	r3, r1
    9078:	21 01       	movw	r4, r2
    907a:	10 e0       	ldi	r17, 0x00	; 0
    907c:	f3 01       	movw	r30, r6
    907e:	61 91       	ld	r22, Z+
    9080:	71 91       	ld	r23, Z+
    9082:	81 91       	ld	r24, Z+
    9084:	91 91       	ld	r25, Z+
    9086:	3f 01       	movw	r6, r30
    9088:	d5 01       	movw	r26, r10
    908a:	94 96       	adiw	r26, 0x24	; 36
    908c:	2d 91       	ld	r18, X+
    908e:	3d 91       	ld	r19, X+
    9090:	4d 91       	ld	r20, X+
    9092:	5c 91       	ld	r21, X
    9094:	97 97       	sbiw	r26, 0x27	; 39
    9096:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    909a:	9b 01       	movw	r18, r22
    909c:	ac 01       	movw	r20, r24
    909e:	c2 01       	movw	r24, r4
    90a0:	b1 01       	movw	r22, r2
    90a2:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    90a6:	1b 01       	movw	r2, r22
    90a8:	2c 01       	movw	r4, r24
    90aa:	1f 5f       	subi	r17, 0xFF	; 255
    90ac:	bc e0       	ldi	r27, 0x0C	; 12
    90ae:	ab 0e       	add	r10, r27
    90b0:	b1 1c       	adc	r11, r1
    90b2:	13 30       	cpi	r17, 0x03	; 3
    90b4:	19 f7       	brne	.-58     	; 0x907c <eigensystem+0x450>
    90b6:	f6 01       	movw	r30, r12
    90b8:	61 93       	st	Z+, r22
    90ba:	71 93       	st	Z+, r23
    90bc:	81 93       	st	Z+, r24
    90be:	91 93       	st	Z+, r25
    90c0:	6f 01       	movw	r12, r30
    90c2:	f4 e0       	ldi	r31, 0x04	; 4
    90c4:	ef 0e       	add	r14, r31
    90c6:	f1 1c       	adc	r15, r1
    90c8:	cd 56       	subi	r28, 0x6D	; 109
    90ca:	df 4f       	sbci	r29, 0xFF	; 255
    90cc:	88 81       	ld	r24, Y
    90ce:	99 81       	ldd	r25, Y+1	; 0x01
    90d0:	c3 59       	subi	r28, 0x93	; 147
    90d2:	d0 40       	sbci	r29, 0x00	; 0
    90d4:	8e 15       	cp	r24, r14
    90d6:	9f 05       	cpc	r25, r15
    90d8:	59 f6       	brne	.-106    	; 0x9070 <eigensystem+0x444>
    90da:	9c e0       	ldi	r25, 0x0C	; 12
    90dc:	89 0e       	add	r8, r25
    90de:	91 1c       	adc	r9, r1
    90e0:	c5 56       	subi	r28, 0x65	; 101
    90e2:	df 4f       	sbci	r29, 0xFF	; 255
    90e4:	a8 81       	ld	r26, Y
    90e6:	b9 81       	ldd	r27, Y+1	; 0x01
    90e8:	cb 59       	subi	r28, 0x9B	; 155
    90ea:	d0 40       	sbci	r29, 0x00	; 0
    90ec:	1c 96       	adiw	r26, 0x0c	; 12
    90ee:	c5 56       	subi	r28, 0x65	; 101
    90f0:	df 4f       	sbci	r29, 0xFF	; 255
    90f2:	a8 83       	st	Y, r26
    90f4:	b9 83       	std	Y+1, r27	; 0x01
    90f6:	cb 59       	subi	r28, 0x9B	; 155
    90f8:	d0 40       	sbci	r29, 0x00	; 0
    90fa:	cf 56       	subi	r28, 0x6F	; 111
    90fc:	df 4f       	sbci	r29, 0xFF	; 255
    90fe:	e8 81       	ld	r30, Y
    9100:	f9 81       	ldd	r31, Y+1	; 0x01
    9102:	c1 59       	subi	r28, 0x91	; 145
    9104:	d0 40       	sbci	r29, 0x00	; 0
    9106:	e8 15       	cp	r30, r8
    9108:	f9 05       	cpc	r31, r9
    910a:	09 f0       	breq	.+2      	; 0x910e <eigensystem+0x4e2>
    910c:	a8 cf       	rjmp	.-176    	; 0x905e <eigensystem+0x432>
    910e:	be 01       	movw	r22, r28
    9110:	63 59       	subi	r22, 0x93	; 147
    9112:	7f 4f       	sbci	r23, 0xFF	; 255
    9114:	cf 55       	subi	r28, 0x5F	; 95
    9116:	df 4f       	sbci	r29, 0xFF	; 255
    9118:	88 81       	ld	r24, Y
    911a:	99 81       	ldd	r25, Y+1	; 0x01
    911c:	c1 5a       	subi	r28, 0xA1	; 161
    911e:	d0 40       	sbci	r29, 0x00	; 0
    9120:	48 96       	adiw	r24, 0x18	; 24
    9122:	0e 94 3e 3e 	call	0x7c7c	; 0x7c7c <getEigenvector>
    9126:	ce 55       	subi	r28, 0x5E	; 94
    9128:	df 4f       	sbci	r29, 0xFF	; 255
    912a:	cd bf       	out	0x3d, r28	; 61
    912c:	de bf       	out	0x3e, r29	; 62
    912e:	df 91       	pop	r29
    9130:	cf 91       	pop	r28
    9132:	1f 91       	pop	r17
    9134:	0f 91       	pop	r16
    9136:	ff 90       	pop	r15
    9138:	ef 90       	pop	r14
    913a:	df 90       	pop	r13
    913c:	cf 90       	pop	r12
    913e:	bf 90       	pop	r11
    9140:	af 90       	pop	r10
    9142:	9f 90       	pop	r9
    9144:	8f 90       	pop	r8
    9146:	7f 90       	pop	r7
    9148:	6f 90       	pop	r6
    914a:	5f 90       	pop	r5
    914c:	4f 90       	pop	r4
    914e:	3f 90       	pop	r3
    9150:	2f 90       	pop	r2
    9152:	08 95       	ret
    9154:	c9 56       	subi	r28, 0x69	; 105
    9156:	df 4f       	sbci	r29, 0xFF	; 255
    9158:	28 81       	ld	r18, Y
    915a:	39 81       	ldd	r19, Y+1	; 0x01
    915c:	4a 81       	ldd	r20, Y+2	; 0x02
    915e:	5b 81       	ldd	r21, Y+3	; 0x03
    9160:	c7 59       	subi	r28, 0x97	; 151
    9162:	d0 40       	sbci	r29, 0x00	; 0
    9164:	c4 01       	movw	r24, r8
    9166:	b3 01       	movw	r22, r6
    9168:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    916c:	81 11       	cpse	r24, r1
    916e:	b9 cd       	rjmp	.-1166   	; 0x8ce2 <eigensystem+0xb6>
    9170:	ab cd       	rjmp	.-1194   	; 0x8cc8 <eigensystem+0x9c>

00009172 <matrixCopy>:
    9172:	0f 93       	push	r16
    9174:	1f 93       	push	r17
    9176:	cf 93       	push	r28
    9178:	df 93       	push	r29
    917a:	9b 01       	movw	r18, r22
    917c:	ec 01       	movw	r28, r24
    917e:	8b 01       	movw	r16, r22
    9180:	0c 5d       	subi	r16, 0xDC	; 220
    9182:	1f 4f       	sbci	r17, 0xFF	; 255
    9184:	de 01       	movw	r26, r28
    9186:	f9 01       	movw	r30, r18
    9188:	90 e0       	ldi	r25, 0x00	; 0
    918a:	41 91       	ld	r20, Z+
    918c:	51 91       	ld	r21, Z+
    918e:	61 91       	ld	r22, Z+
    9190:	71 91       	ld	r23, Z+
    9192:	4d 93       	st	X+, r20
    9194:	5d 93       	st	X+, r21
    9196:	6d 93       	st	X+, r22
    9198:	7d 93       	st	X+, r23
    919a:	9f 5f       	subi	r25, 0xFF	; 255
    919c:	93 30       	cpi	r25, 0x03	; 3
    919e:	a9 f7       	brne	.-22     	; 0x918a <matrixCopy+0x18>
    91a0:	24 5f       	subi	r18, 0xF4	; 244
    91a2:	3f 4f       	sbci	r19, 0xFF	; 255
    91a4:	2c 96       	adiw	r28, 0x0c	; 12
    91a6:	20 17       	cp	r18, r16
    91a8:	31 07       	cpc	r19, r17
    91aa:	61 f7       	brne	.-40     	; 0x9184 <matrixCopy+0x12>
    91ac:	df 91       	pop	r29
    91ae:	cf 91       	pop	r28
    91b0:	1f 91       	pop	r17
    91b2:	0f 91       	pop	r16
    91b4:	08 95       	ret

000091b6 <printMatrixMathematica>:

const char matrix3mathStartStr[] PROGMEM = "{\r\n  {%9.4f, %9.4f, %9.4f},\r\n";
const char matrix3mathStr[] PROGMEM = "  {%9.4f, %9.4f, %9.4f},\r\n";
const char matrix3mathEndStr[] PROGMEM = "  {%9.4f, %9.4f, %9.4f}\r\n};\r\n";
void printMatrixMathematica(Matrix* A){
    91b6:	cf 93       	push	r28
    91b8:	df 93       	push	r29
    91ba:	ec 01       	movw	r28, r24
	printf_P(matrix3mathStartStr, (*A)[0][0], (*A)[0][1], (*A)[0][2]);
    91bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    91be:	8f 93       	push	r24
    91c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    91c2:	8f 93       	push	r24
    91c4:	89 85       	ldd	r24, Y+9	; 0x09
    91c6:	8f 93       	push	r24
    91c8:	88 85       	ldd	r24, Y+8	; 0x08
    91ca:	8f 93       	push	r24
    91cc:	8f 81       	ldd	r24, Y+7	; 0x07
    91ce:	8f 93       	push	r24
    91d0:	8e 81       	ldd	r24, Y+6	; 0x06
    91d2:	8f 93       	push	r24
    91d4:	8d 81       	ldd	r24, Y+5	; 0x05
    91d6:	8f 93       	push	r24
    91d8:	8c 81       	ldd	r24, Y+4	; 0x04
    91da:	8f 93       	push	r24
    91dc:	8b 81       	ldd	r24, Y+3	; 0x03
    91de:	8f 93       	push	r24
    91e0:	8a 81       	ldd	r24, Y+2	; 0x02
    91e2:	8f 93       	push	r24
    91e4:	89 81       	ldd	r24, Y+1	; 0x01
    91e6:	8f 93       	push	r24
    91e8:	88 81       	ld	r24, Y
    91ea:	8f 93       	push	r24
    91ec:	8c e0       	ldi	r24, 0x0C	; 12
    91ee:	9a e0       	ldi	r25, 0x0A	; 10
    91f0:	9f 93       	push	r25
    91f2:	8f 93       	push	r24
    91f4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	printf_P(matrix3mathStr,	  (*A)[1][0], (*A)[1][1], (*A)[1][2]);
    91f8:	8f 89       	ldd	r24, Y+23	; 0x17
    91fa:	8f 93       	push	r24
    91fc:	8e 89       	ldd	r24, Y+22	; 0x16
    91fe:	8f 93       	push	r24
    9200:	8d 89       	ldd	r24, Y+21	; 0x15
    9202:	8f 93       	push	r24
    9204:	8c 89       	ldd	r24, Y+20	; 0x14
    9206:	8f 93       	push	r24
    9208:	8b 89       	ldd	r24, Y+19	; 0x13
    920a:	8f 93       	push	r24
    920c:	8a 89       	ldd	r24, Y+18	; 0x12
    920e:	8f 93       	push	r24
    9210:	89 89       	ldd	r24, Y+17	; 0x11
    9212:	8f 93       	push	r24
    9214:	88 89       	ldd	r24, Y+16	; 0x10
    9216:	8f 93       	push	r24
    9218:	8f 85       	ldd	r24, Y+15	; 0x0f
    921a:	8f 93       	push	r24
    921c:	8e 85       	ldd	r24, Y+14	; 0x0e
    921e:	8f 93       	push	r24
    9220:	8d 85       	ldd	r24, Y+13	; 0x0d
    9222:	8f 93       	push	r24
    9224:	8c 85       	ldd	r24, Y+12	; 0x0c
    9226:	8f 93       	push	r24
    9228:	81 ef       	ldi	r24, 0xF1	; 241
    922a:	99 e0       	ldi	r25, 0x09	; 9
    922c:	9f 93       	push	r25
    922e:	8f 93       	push	r24
    9230:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	printf_P(matrix3mathEndStr,   (*A)[2][0], (*A)[2][1], (*A)[2][2]);
    9234:	8b a1       	ldd	r24, Y+35	; 0x23
    9236:	8f 93       	push	r24
    9238:	8a a1       	ldd	r24, Y+34	; 0x22
    923a:	8f 93       	push	r24
    923c:	89 a1       	ldd	r24, Y+33	; 0x21
    923e:	8f 93       	push	r24
    9240:	88 a1       	ldd	r24, Y+32	; 0x20
    9242:	8f 93       	push	r24
    9244:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9246:	8f 93       	push	r24
    9248:	8e 8d       	ldd	r24, Y+30	; 0x1e
    924a:	8f 93       	push	r24
    924c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    924e:	8f 93       	push	r24
    9250:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9252:	8f 93       	push	r24
    9254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9256:	8f 93       	push	r24
    9258:	8a 8d       	ldd	r24, Y+26	; 0x1a
    925a:	8f 93       	push	r24
    925c:	89 8d       	ldd	r24, Y+25	; 0x19
    925e:	8f 93       	push	r24
    9260:	88 8d       	ldd	r24, Y+24	; 0x18
    9262:	8f 93       	push	r24
    9264:	83 ed       	ldi	r24, 0xD3	; 211
    9266:	99 e0       	ldi	r25, 0x09	; 9
    9268:	9f 93       	push	r25
    926a:	8f 93       	push	r24
    926c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    9270:	8d b7       	in	r24, 0x3d	; 61
    9272:	9e b7       	in	r25, 0x3e	; 62
    9274:	8a 96       	adiw	r24, 0x2a	; 42
    9276:	8d bf       	out	0x3d, r24	; 61
    9278:	9e bf       	out	0x3e, r25	; 62
    927a:	df 91       	pop	r29
    927c:	cf 91       	pop	r28
    927e:	08 95       	ret

00009280 <positiveDefiniteQ>:
			(*A)[j][i] = tmp;
		}
	}
}

uint8_t positiveDefiniteQ(Matrix* A){
    9280:	2f 92       	push	r2
    9282:	3f 92       	push	r3
    9284:	4f 92       	push	r4
    9286:	5f 92       	push	r5
    9288:	6f 92       	push	r6
    928a:	7f 92       	push	r7
    928c:	8f 92       	push	r8
    928e:	9f 92       	push	r9
    9290:	af 92       	push	r10
    9292:	bf 92       	push	r11
    9294:	cf 92       	push	r12
    9296:	df 92       	push	r13
    9298:	ef 92       	push	r14
    929a:	ff 92       	push	r15
    929c:	0f 93       	push	r16
    929e:	1f 93       	push	r17
    92a0:	cf 93       	push	r28
    92a2:	df 93       	push	r29
    92a4:	cd b7       	in	r28, 0x3d	; 61
    92a6:	de b7       	in	r29, 0x3e	; 62
    92a8:	ae 97       	sbiw	r28, 0x2e	; 46
    92aa:	cd bf       	out	0x3d, r28	; 61
    92ac:	de bf       	out	0x3e, r29	; 62
    92ae:	5c 01       	movw	r10, r24
    92b0:	9e 01       	movw	r18, r28
    92b2:	2f 5f       	subi	r18, 0xFF	; 255
    92b4:	3f 4f       	sbci	r19, 0xFF	; 255
    92b6:	2c a7       	std	Y+44, r18	; 0x2c
    92b8:	3d a7       	std	Y+45, r19	; 0x2d
    92ba:	ce 01       	movw	r24, r28
    92bc:	85 96       	adiw	r24, 0x25	; 37
    92be:	f9 01       	movw	r30, r18
	Matrix L;
	uint8_t flag=0;
	for(uint8_t i=0;i<3;i++){
		for(uint8_t j=0;j<3;j++){
			L[i][j] = 0;
    92c0:	10 82       	st	Z, r1
    92c2:	11 82       	std	Z+1, r1	; 0x01
    92c4:	12 82       	std	Z+2, r1	; 0x02
    92c6:	13 82       	std	Z+3, r1	; 0x03
    92c8:	14 82       	std	Z+4, r1	; 0x04
    92ca:	15 82       	std	Z+5, r1	; 0x05
    92cc:	16 82       	std	Z+6, r1	; 0x06
    92ce:	17 82       	std	Z+7, r1	; 0x07
    92d0:	10 86       	std	Z+8, r1	; 0x08
    92d2:	11 86       	std	Z+9, r1	; 0x09
    92d4:	12 86       	std	Z+10, r1	; 0x0a
    92d6:	13 86       	std	Z+11, r1	; 0x0b
    92d8:	3c 96       	adiw	r30, 0x0c	; 12
}

uint8_t positiveDefiniteQ(Matrix* A){
	Matrix L;
	uint8_t flag=0;
	for(uint8_t i=0;i<3;i++){
    92da:	8e 17       	cp	r24, r30
    92dc:	9f 07       	cpc	r25, r31
    92de:	81 f7       	brne	.-32     	; 0x92c0 <positiveDefiniteQ+0x40>
    92e0:	21 2c       	mov	r2, r1
    92e2:	31 2c       	mov	r3, r1
    92e4:	1e a6       	std	Y+46, r1	; 0x2e
    92e6:	2b a6       	std	Y+43, r2	; 0x2b
		for(uint8_t j=0;j<3;j++){
			L[i][j] = 0;
		}
	}
	for(uint8_t i=0;i<3;i++){
		for(uint8_t j=0;j<(i+1);j++){
    92e8:	00 e0       	ldi	r16, 0x00	; 0
    92ea:	10 e0       	ldi	r17, 0x00	; 0
    92ec:	91 2c       	mov	r9, r1
    92ee:	41 2c       	mov	r4, r1
    92f0:	51 2c       	mov	r5, r1
    92f2:	32 01       	movw	r6, r4
    92f4:	c1 01       	movw	r24, r2
    92f6:	88 0f       	add	r24, r24
    92f8:	99 1f       	adc	r25, r25
			if(i==j){
				float tmp = (*A)[i][j]-s;
				if(tmp<=0 || isnan(tmp)) flag=1;
				L[i][j] = sqrtf(tmp);
			}else{
				L[i][j] = (1.0/ L[j][j] * ( (*A)[i][j] - s ));
    92fa:	fc 01       	movw	r30, r24
    92fc:	e2 0d       	add	r30, r2
    92fe:	f3 1d       	adc	r31, r3
    9300:	e9 a7       	std	Y+41, r30	; 0x29
    9302:	fa a7       	std	Y+42, r31	; 0x2a
		for(uint8_t j=0;j<(i+1);j++){
			float s = 0;
			for(uint8_t k=0; k<j; k++){
				s += L[i][k] * L[j][k];
			}
			if(i==j){
    9304:	fb a5       	ldd	r31, Y+43	; 0x2b
    9306:	f9 15       	cp	r31, r9
    9308:	09 f4       	brne	.+2      	; 0x930c <positiveDefiniteQ+0x8c>
    930a:	74 c0       	rjmp	.+232    	; 0x93f4 <positiveDefiniteQ+0x174>
				float tmp = (*A)[i][j]-s;
				if(tmp<=0 || isnan(tmp)) flag=1;
				L[i][j] = sqrtf(tmp);
			}else{
				L[i][j] = (1.0/ L[j][j] * ( (*A)[i][j] - s ));
    930c:	e9 a4       	ldd	r14, Y+41	; 0x29
    930e:	fa a4       	ldd	r15, Y+42	; 0x2a
    9310:	e0 0e       	add	r14, r16
    9312:	f1 1e       	adc	r15, r17
    9314:	ee 0c       	add	r14, r14
    9316:	ff 1c       	adc	r15, r15
    9318:	ee 0c       	add	r14, r14
    931a:	ff 1c       	adc	r15, r15
    931c:	cc 24       	eor	r12, r12
    931e:	c3 94       	inc	r12
    9320:	d1 2c       	mov	r13, r1
    9322:	cc 0e       	add	r12, r28
    9324:	dd 1e       	adc	r13, r29
    9326:	ce 0c       	add	r12, r14
    9328:	df 1c       	adc	r13, r15
    932a:	02 95       	swap	r16
    932c:	12 95       	swap	r17
    932e:	10 7f       	andi	r17, 0xF0	; 240
    9330:	10 27       	eor	r17, r16
    9332:	00 7f       	andi	r16, 0xF0	; 240
    9334:	10 27       	eor	r17, r16
    9336:	e1 e0       	ldi	r30, 0x01	; 1
    9338:	f0 e0       	ldi	r31, 0x00	; 0
    933a:	ec 0f       	add	r30, r28
    933c:	fd 1f       	adc	r31, r29
    933e:	e0 0f       	add	r30, r16
    9340:	f1 1f       	adc	r31, r17
    9342:	20 81       	ld	r18, Z
    9344:	31 81       	ldd	r19, Z+1	; 0x01
    9346:	42 81       	ldd	r20, Z+2	; 0x02
    9348:	53 81       	ldd	r21, Z+3	; 0x03
    934a:	60 e0       	ldi	r22, 0x00	; 0
    934c:	70 e0       	ldi	r23, 0x00	; 0
    934e:	80 e8       	ldi	r24, 0x80	; 128
    9350:	9f e3       	ldi	r25, 0x3F	; 63
    9352:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    9356:	6d a3       	std	Y+37, r22	; 0x25
    9358:	7e a3       	std	Y+38, r23	; 0x26
    935a:	8f a3       	std	Y+39, r24	; 0x27
    935c:	98 a7       	std	Y+40, r25	; 0x28
    935e:	f5 01       	movw	r30, r10
    9360:	ee 0d       	add	r30, r14
    9362:	ff 1d       	adc	r31, r15
    9364:	a3 01       	movw	r20, r6
    9366:	92 01       	movw	r18, r4
    9368:	60 81       	ld	r22, Z
    936a:	71 81       	ldd	r23, Z+1	; 0x01
    936c:	82 81       	ldd	r24, Z+2	; 0x02
    936e:	93 81       	ldd	r25, Z+3	; 0x03
    9370:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    9374:	9b 01       	movw	r18, r22
    9376:	ac 01       	movw	r20, r24
    9378:	6d a1       	ldd	r22, Y+37	; 0x25
    937a:	7e a1       	ldd	r23, Y+38	; 0x26
    937c:	8f a1       	ldd	r24, Y+39	; 0x27
    937e:	98 a5       	ldd	r25, Y+40	; 0x28
    9380:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    9384:	f6 01       	movw	r30, r12
    9386:	60 83       	st	Z, r22
    9388:	71 83       	std	Z+1, r23	; 0x01
    938a:	82 83       	std	Z+2, r24	; 0x02
    938c:	93 83       	std	Z+3, r25	; 0x03
		for(uint8_t j=0;j<3;j++){
			L[i][j] = 0;
		}
	}
	for(uint8_t i=0;i<3;i++){
		for(uint8_t j=0;j<(i+1);j++){
    938e:	93 94       	inc	r9
    9390:	09 2d       	mov	r16, r9
    9392:	10 e0       	ldi	r17, 0x00	; 0
    9394:	20 16       	cp	r2, r16
    9396:	31 06       	cpc	r3, r17
    9398:	0c f4       	brge	.+2      	; 0x939c <positiveDefiniteQ+0x11c>
    939a:	6d c0       	rjmp	.+218    	; 0x9476 <positiveDefiniteQ+0x1f6>
    939c:	cc 24       	eor	r12, r12
    939e:	c3 94       	inc	r12
    93a0:	d1 2c       	mov	r13, r1
    93a2:	cc 0e       	add	r12, r28
    93a4:	dd 1e       	adc	r13, r29
    93a6:	fc e0       	ldi	r31, 0x0C	; 12
    93a8:	9f 9e       	mul	r9, r31
    93aa:	c0 0c       	add	r12, r0
    93ac:	d1 1c       	adc	r13, r1
    93ae:	11 24       	eor	r1, r1
    93b0:	ec a4       	ldd	r14, Y+44	; 0x2c
    93b2:	fd a4       	ldd	r15, Y+45	; 0x2d
    93b4:	81 2c       	mov	r8, r1
    93b6:	41 2c       	mov	r4, r1
    93b8:	51 2c       	mov	r5, r1
    93ba:	32 01       	movw	r6, r4
			float s = 0;
			for(uint8_t k=0; k<j; k++){
				s += L[i][k] * L[j][k];
    93bc:	f7 01       	movw	r30, r14
    93be:	61 91       	ld	r22, Z+
    93c0:	71 91       	ld	r23, Z+
    93c2:	81 91       	ld	r24, Z+
    93c4:	91 91       	ld	r25, Z+
    93c6:	7f 01       	movw	r14, r30
    93c8:	f6 01       	movw	r30, r12
    93ca:	21 91       	ld	r18, Z+
    93cc:	31 91       	ld	r19, Z+
    93ce:	41 91       	ld	r20, Z+
    93d0:	51 91       	ld	r21, Z+
    93d2:	6f 01       	movw	r12, r30
    93d4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    93d8:	9b 01       	movw	r18, r22
    93da:	ac 01       	movw	r20, r24
    93dc:	c3 01       	movw	r24, r6
    93de:	b2 01       	movw	r22, r4
    93e0:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    93e4:	2b 01       	movw	r4, r22
    93e6:	3c 01       	movw	r6, r24
		}
	}
	for(uint8_t i=0;i<3;i++){
		for(uint8_t j=0;j<(i+1);j++){
			float s = 0;
			for(uint8_t k=0; k<j; k++){
    93e8:	83 94       	inc	r8
    93ea:	89 14       	cp	r8, r9
    93ec:	38 f3       	brcs	.-50     	; 0x93bc <positiveDefiniteQ+0x13c>
				s += L[i][k] * L[j][k];
			}
			if(i==j){
    93ee:	fb a5       	ldd	r31, Y+43	; 0x2b
    93f0:	f9 11       	cpse	r31, r9
    93f2:	8c cf       	rjmp	.-232    	; 0x930c <positiveDefiniteQ+0x8c>
				float tmp = (*A)[i][j]-s;
    93f4:	e9 a5       	ldd	r30, Y+41	; 0x29
    93f6:	fa a5       	ldd	r31, Y+42	; 0x2a
    93f8:	e0 0f       	add	r30, r16
    93fa:	f1 1f       	adc	r31, r17
    93fc:	ee 0f       	add	r30, r30
    93fe:	ff 1f       	adc	r31, r31
    9400:	ee 0f       	add	r30, r30
    9402:	ff 1f       	adc	r31, r31
    9404:	ea 0d       	add	r30, r10
    9406:	fb 1d       	adc	r31, r11
    9408:	a3 01       	movw	r20, r6
    940a:	92 01       	movw	r18, r4
    940c:	60 81       	ld	r22, Z
    940e:	71 81       	ldd	r23, Z+1	; 0x01
    9410:	82 81       	ldd	r24, Z+2	; 0x02
    9412:	93 81       	ldd	r25, Z+3	; 0x03
    9414:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    9418:	6b 01       	movw	r12, r22
    941a:	7c 01       	movw	r14, r24
				if(tmp<=0 || isnan(tmp)) flag=1;
    941c:	20 e0       	ldi	r18, 0x00	; 0
    941e:	30 e0       	ldi	r19, 0x00	; 0
    9420:	a9 01       	movw	r20, r18
    9422:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    9426:	18 16       	cp	r1, r24
    9428:	0c f0       	brlt	.+2      	; 0x942c <positiveDefiniteQ+0x1ac>
    942a:	4c c0       	rjmp	.+152    	; 0x94c4 <positiveDefiniteQ+0x244>
    942c:	a7 01       	movw	r20, r14
    942e:	96 01       	movw	r18, r12
    9430:	c7 01       	movw	r24, r14
    9432:	b6 01       	movw	r22, r12
    9434:	0e 94 f3 76 	call	0xede6	; 0xede6 <__unordsf2>
    9438:	81 11       	cpse	r24, r1
    943a:	47 c0       	rjmp	.+142    	; 0x94ca <positiveDefiniteQ+0x24a>
				L[i][j] = sqrtf(tmp);
    943c:	c7 01       	movw	r24, r14
    943e:	b6 01       	movw	r22, r12
    9440:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    9444:	e9 a5       	ldd	r30, Y+41	; 0x29
    9446:	fa a5       	ldd	r31, Y+42	; 0x2a
    9448:	e0 0f       	add	r30, r16
    944a:	f1 1f       	adc	r31, r17
    944c:	ee 0f       	add	r30, r30
    944e:	ff 1f       	adc	r31, r31
    9450:	ee 0f       	add	r30, r30
    9452:	ff 1f       	adc	r31, r31
    9454:	21 e0       	ldi	r18, 0x01	; 1
    9456:	30 e0       	ldi	r19, 0x00	; 0
    9458:	2c 0f       	add	r18, r28
    945a:	3d 1f       	adc	r19, r29
    945c:	e2 0f       	add	r30, r18
    945e:	f3 1f       	adc	r31, r19
    9460:	60 83       	st	Z, r22
    9462:	71 83       	std	Z+1, r23	; 0x01
    9464:	82 83       	std	Z+2, r24	; 0x02
    9466:	93 83       	std	Z+3, r25	; 0x03
		for(uint8_t j=0;j<3;j++){
			L[i][j] = 0;
		}
	}
	for(uint8_t i=0;i<3;i++){
		for(uint8_t j=0;j<(i+1);j++){
    9468:	93 94       	inc	r9
    946a:	09 2d       	mov	r16, r9
    946c:	10 e0       	ldi	r17, 0x00	; 0
    946e:	20 16       	cp	r2, r16
    9470:	31 06       	cpc	r3, r17
    9472:	0c f0       	brlt	.+2      	; 0x9476 <positiveDefiniteQ+0x1f6>
    9474:	93 cf       	rjmp	.-218    	; 0x939c <positiveDefiniteQ+0x11c>
    9476:	2f ef       	ldi	r18, 0xFF	; 255
    9478:	22 1a       	sub	r2, r18
    947a:	32 0a       	sbc	r3, r18
    947c:	8c a5       	ldd	r24, Y+44	; 0x2c
    947e:	9d a5       	ldd	r25, Y+45	; 0x2d
    9480:	0c 96       	adiw	r24, 0x0c	; 12
    9482:	8c a7       	std	Y+44, r24	; 0x2c
    9484:	9d a7       	std	Y+45, r25	; 0x2d
	for(uint8_t i=0;i<3;i++){
		for(uint8_t j=0;j<3;j++){
			L[i][j] = 0;
		}
	}
	for(uint8_t i=0;i<3;i++){
    9486:	93 e0       	ldi	r25, 0x03	; 3
    9488:	29 16       	cp	r2, r25
    948a:	31 04       	cpc	r3, r1
    948c:	09 f0       	breq	.+2      	; 0x9490 <positiveDefiniteQ+0x210>
    948e:	2b cf       	rjmp	.-426    	; 0x92e6 <positiveDefiniteQ+0x66>
			}else{
				L[i][j] = (1.0/ L[j][j] * ( (*A)[i][j] - s ));
			}
		}
	}
	if(flag){
    9490:	fe a5       	ldd	r31, Y+46	; 0x2e
    9492:	f1 11       	cpse	r31, r1
    9494:	1d c0       	rjmp	.+58     	; 0x94d0 <positiveDefiniteQ+0x250>
		printMatrixMathematica(A);
		printf("Cholesky Decomposition:\r\n");
		printMatrixMathematica(&L);
		return 0;
	}
	return 1;
    9496:	81 e0       	ldi	r24, 0x01	; 1
}
    9498:	ae 96       	adiw	r28, 0x2e	; 46
    949a:	cd bf       	out	0x3d, r28	; 61
    949c:	de bf       	out	0x3e, r29	; 62
    949e:	df 91       	pop	r29
    94a0:	cf 91       	pop	r28
    94a2:	1f 91       	pop	r17
    94a4:	0f 91       	pop	r16
    94a6:	ff 90       	pop	r15
    94a8:	ef 90       	pop	r14
    94aa:	df 90       	pop	r13
    94ac:	cf 90       	pop	r12
    94ae:	bf 90       	pop	r11
    94b0:	af 90       	pop	r10
    94b2:	9f 90       	pop	r9
    94b4:	8f 90       	pop	r8
    94b6:	7f 90       	pop	r7
    94b8:	6f 90       	pop	r6
    94ba:	5f 90       	pop	r5
    94bc:	4f 90       	pop	r4
    94be:	3f 90       	pop	r3
    94c0:	2f 90       	pop	r2
    94c2:	08 95       	ret
			for(uint8_t k=0; k<j; k++){
				s += L[i][k] * L[j][k];
			}
			if(i==j){
				float tmp = (*A)[i][j]-s;
				if(tmp<=0 || isnan(tmp)) flag=1;
    94c4:	21 e0       	ldi	r18, 0x01	; 1
    94c6:	2e a7       	std	Y+46, r18	; 0x2e
    94c8:	b9 cf       	rjmp	.-142    	; 0x943c <positiveDefiniteQ+0x1bc>
    94ca:	31 e0       	ldi	r19, 0x01	; 1
    94cc:	3e a7       	std	Y+46, r19	; 0x2e
    94ce:	b6 cf       	rjmp	.-148    	; 0x943c <positiveDefiniteQ+0x1bc>
				L[i][j] = (1.0/ L[j][j] * ( (*A)[i][j] - s ));
			}
		}
	}
	if(flag){
		printf("Non-Positive Definite Matrix Detected!\r\n");
    94d0:	80 e5       	ldi	r24, 0x50	; 80
    94d2:	93 e2       	ldi	r25, 0x23	; 35
    94d4:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
		printMatrixMathematica(A);
    94d8:	c5 01       	movw	r24, r10
    94da:	0e 94 db 48 	call	0x91b6	; 0x91b6 <printMatrixMathematica>
		printf("Cholesky Decomposition:\r\n");
    94de:	88 e7       	ldi	r24, 0x78	; 120
    94e0:	93 e2       	ldi	r25, 0x23	; 35
    94e2:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
		printMatrixMathematica(&L);
    94e6:	ce 01       	movw	r24, r28
    94e8:	01 96       	adiw	r24, 0x01	; 1
    94ea:	0e 94 db 48 	call	0x91b6	; 0x91b6 <printMatrixMathematica>
		return 0;
    94ee:	80 e0       	ldi	r24, 0x00	; 0
    94f0:	d3 cf       	rjmp	.-90     	; 0x9498 <positiveDefiniteQ+0x218>

000094f2 <stop_move>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    94f2:	e0 e0       	ldi	r30, 0x00	; 0
    94f4:	f8 e0       	ldi	r31, 0x08	; 8
    94f6:	81 81       	ldd	r24, Z+1	; 0x01
    94f8:	8f 7c       	andi	r24, 0xCF	; 207
    94fa:	81 83       	std	Z+1, r24	; 0x01
    94fc:	10 82       	st	Z, r1
    94fe:	e0 e4       	ldi	r30, 0x40	; 64
    9500:	f8 e0       	ldi	r31, 0x08	; 8
    9502:	81 81       	ldd	r24, Z+1	; 0x01
    9504:	8f 7c       	andi	r24, 0xCF	; 207
    9506:	81 83       	std	Z+1, r24	; 0x01
    9508:	10 82       	st	Z, r1
    950a:	e0 e0       	ldi	r30, 0x00	; 0
    950c:	f9 e0       	ldi	r31, 0x09	; 9
    950e:	81 81       	ldd	r24, Z+1	; 0x01
    9510:	8f 7c       	andi	r24, 0xCF	; 207
    9512:	81 83       	std	Z+1, r24	; 0x01
    9514:	10 82       	st	Z, r1
    9516:	83 e3       	ldi	r24, 0x33	; 51
    9518:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    951c:	83 e0       	ldi	r24, 0x03	; 3
    951e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    9522:	10 92 73 25 	sts	0x2573, r1	; 0x802573 <motor_status>
    9526:	80 91 71 25 	lds	r24, 0x2571	; 0x802571 <current_motor_task>
    952a:	90 91 72 25 	lds	r25, 0x2572	; 0x802572 <current_motor_task+0x1>
    952e:	0e 94 b7 5e 	call	0xbd6e	; 0xbd6e <remove_task>
    9532:	10 92 71 25 	sts	0x2571, r1	; 0x802571 <current_motor_task>
    9536:	10 92 72 25 	sts	0x2572, r1	; 0x802572 <current_motor_task+0x1>
    953a:	08 95       	ret

0000953c <move_steps>:
    953c:	8f 92       	push	r8
    953e:	9f 92       	push	r9
    9540:	af 92       	push	r10
    9542:	bf 92       	push	r11
    9544:	cf 92       	push	r12
    9546:	df 92       	push	r13
    9548:	ef 92       	push	r14
    954a:	ff 92       	push	r15
    954c:	0f 93       	push	r16
    954e:	1f 93       	push	r17
    9550:	cf 93       	push	r28
    9552:	df 93       	push	r29
    9554:	cd b7       	in	r28, 0x3d	; 61
    9556:	de b7       	in	r29, 0x3e	; 62
    9558:	29 97       	sbiw	r28, 0x09	; 9
    955a:	cd bf       	out	0x3d, r28	; 61
    955c:	de bf       	out	0x3e, r29	; 62
    955e:	6b 01       	movw	r12, r22
    9560:	90 91 73 25 	lds	r25, 0x2573	; 0x802573 <motor_status>
    9564:	97 fd       	sbrc	r25, 7
    9566:	1b c1       	rjmp	.+566    	; 0x979e <move_steps+0x262>
    9568:	98 2f       	mov	r25, r24
    956a:	97 70       	andi	r25, 0x07	; 7
    956c:	90 68       	ori	r25, 0x80	; 128
    956e:	90 93 73 25 	sts	0x2573, r25	; 0x802573 <motor_status>
    9572:	60 91 6f 25 	lds	r22, 0x256F	; 0x80256f <motor_on_time>
    9576:	70 91 70 25 	lds	r23, 0x2570	; 0x802570 <motor_on_time+0x1>
    957a:	66 0f       	add	r22, r22
    957c:	77 1f       	adc	r23, r23
    957e:	62 95       	swap	r22
    9580:	72 95       	swap	r23
    9582:	70 7f       	andi	r23, 0xF0	; 240
    9584:	76 27       	eor	r23, r22
    9586:	60 7f       	andi	r22, 0xF0	; 240
    9588:	76 27       	eor	r23, r22
    958a:	a0 90 6d 25 	lds	r10, 0x256D	; 0x80256d <motor_off_time>
    958e:	b0 90 6e 25 	lds	r11, 0x256E	; 0x80256e <motor_off_time+0x1>
    9592:	aa 0c       	add	r10, r10
    9594:	bb 1c       	adc	r11, r11
    9596:	a2 94       	swap	r10
    9598:	b2 94       	swap	r11
    959a:	40 ef       	ldi	r20, 0xF0	; 240
    959c:	b4 22       	and	r11, r20
    959e:	ba 24       	eor	r11, r10
    95a0:	a4 22       	and	r10, r20
    95a2:	ba 24       	eor	r11, r10
    95a4:	96 e0       	ldi	r25, 0x06	; 6
    95a6:	89 9f       	mul	r24, r25
    95a8:	f0 01       	movw	r30, r0
    95aa:	11 24       	eor	r1, r1
    95ac:	df 01       	movw	r26, r30
    95ae:	ad 50       	subi	r26, 0x0D	; 13
    95b0:	b6 4d       	sbci	r27, 0xD6	; 214
    95b2:	4d 01       	movw	r8, r26
    95b4:	de 01       	movw	r26, r28
    95b6:	11 96       	adiw	r26, 0x01	; 1
    95b8:	7e 01       	movw	r14, r28
    95ba:	e7 e0       	ldi	r30, 0x07	; 7
    95bc:	ee 0e       	add	r14, r30
    95be:	f1 1c       	adc	r15, r1
    95c0:	c7 01       	movw	r24, r14
    95c2:	00 e0       	ldi	r16, 0x00	; 0
    95c4:	10 e0       	ldi	r17, 0x00	; 0
    95c6:	f4 01       	movw	r30, r8
    95c8:	21 91       	ld	r18, Z+
    95ca:	31 91       	ld	r19, Z+
    95cc:	4f 01       	movw	r8, r30
    95ce:	21 15       	cp	r18, r1
    95d0:	31 05       	cpc	r19, r1
    95d2:	09 f0       	breq	.+2      	; 0x95d6 <move_steps+0x9a>
    95d4:	66 c0       	rjmp	.+204    	; 0x96a2 <move_steps+0x166>
    95d6:	1d 92       	st	X+, r1
    95d8:	1c 92       	st	X, r1
    95da:	11 97       	sbiw	r26, 0x01	; 1
    95dc:	fc 01       	movw	r30, r24
    95de:	10 82       	st	Z, r1
    95e0:	12 96       	adiw	r26, 0x02	; 2
    95e2:	01 96       	adiw	r24, 0x01	; 1
    95e4:	ae 15       	cp	r26, r14
    95e6:	bf 05       	cpc	r27, r15
    95e8:	71 f7       	brne	.-36     	; 0x95c6 <move_steps+0x8a>
    95ea:	00 93 26 09 	sts	0x0926, r16	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    95ee:	10 93 27 09 	sts	0x0927, r17	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    95f2:	00 93 66 08 	sts	0x0866, r16	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    95f6:	10 93 67 08 	sts	0x0867, r17	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    95fa:	00 93 26 08 	sts	0x0826, r16	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    95fe:	10 93 27 08 	sts	0x0827, r17	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    9602:	e9 81       	ldd	r30, Y+1	; 0x01
    9604:	fa 81       	ldd	r31, Y+2	; 0x02
    9606:	e0 93 2a 08 	sts	0x082A, r30	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    960a:	f0 93 2b 08 	sts	0x082B, r31	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    960e:	e0 93 28 08 	sts	0x0828, r30	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    9612:	f0 93 29 08 	sts	0x0829, r31	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    9616:	8b 81       	ldd	r24, Y+3	; 0x03
    9618:	9c 81       	ldd	r25, Y+4	; 0x04
    961a:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    961e:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    9622:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    9626:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    962a:	8d 81       	ldd	r24, Y+5	; 0x05
    962c:	9e 81       	ldd	r25, Y+6	; 0x06
    962e:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    9632:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    9636:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    963a:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    963e:	80 90 6d 25 	lds	r8, 0x256D	; 0x80256d <motor_off_time>
    9642:	90 90 6e 25 	lds	r9, 0x256E	; 0x80256e <motor_off_time+0x1>
    9646:	88 0c       	add	r8, r8
    9648:	99 1c       	adc	r9, r9
    964a:	82 94       	swap	r8
    964c:	92 94       	swap	r9
    964e:	50 ef       	ldi	r21, 0xF0	; 240
    9650:	95 22       	and	r9, r21
    9652:	98 24       	eor	r9, r8
    9654:	85 22       	and	r8, r21
    9656:	98 24       	eor	r9, r8
    9658:	5e 01       	movw	r10, r28
    965a:	83 e0       	ldi	r24, 0x03	; 3
    965c:	a8 0e       	add	r10, r24
    965e:	b1 1c       	adc	r11, r1
    9660:	20 e0       	ldi	r18, 0x00	; 0
    9662:	30 e0       	ldi	r19, 0x00	; 0
    9664:	40 e0       	ldi	r20, 0x00	; 0
    9666:	30 97       	sbiw	r30, 0x00	; 0
    9668:	a1 f0       	breq	.+40     	; 0x9692 <move_steps+0x156>
    966a:	c8 01       	movw	r24, r16
    966c:	82 1b       	sub	r24, r18
    966e:	93 0b       	sbc	r25, r19
    9670:	b8 01       	movw	r22, r16
    9672:	0e 94 13 77 	call	0xee26	; 0xee26 <__udivmodhi4>
    9676:	41 30       	cpi	r20, 0x01	; 1
    9678:	09 f4       	brne	.+2      	; 0x967c <move_steps+0x140>
    967a:	a9 c0       	rjmp	.+338    	; 0x97ce <move_steps+0x292>
    967c:	42 30       	cpi	r20, 0x02	; 2
    967e:	09 f4       	brne	.+2      	; 0x9682 <move_steps+0x146>
    9680:	92 c0       	rjmp	.+292    	; 0x97a6 <move_steps+0x26a>
    9682:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    9686:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    968a:	2e 0f       	add	r18, r30
    968c:	3f 1f       	adc	r19, r31
    968e:	28 0d       	add	r18, r8
    9690:	39 1d       	adc	r19, r9
    9692:	4f 5f       	subi	r20, 0xFF	; 255
    9694:	43 30       	cpi	r20, 0x03	; 3
    9696:	c9 f0       	breq	.+50     	; 0x96ca <move_steps+0x18e>
    9698:	d5 01       	movw	r26, r10
    969a:	ed 91       	ld	r30, X+
    969c:	fd 91       	ld	r31, X+
    969e:	5d 01       	movw	r10, r26
    96a0:	e2 cf       	rjmp	.-60     	; 0x9666 <move_steps+0x12a>
    96a2:	a9 01       	movw	r20, r18
    96a4:	37 fd       	sbrc	r19, 7
    96a6:	8e c0       	rjmp	.+284    	; 0x97c4 <move_steps+0x288>
    96a8:	46 0f       	add	r20, r22
    96aa:	57 1f       	adc	r21, r23
    96ac:	4d 93       	st	X+, r20
    96ae:	5c 93       	st	X, r21
    96b0:	11 97       	sbiw	r26, 0x01	; 1
    96b2:	23 2f       	mov	r18, r19
    96b4:	22 0f       	add	r18, r18
    96b6:	22 0b       	sbc	r18, r18
    96b8:	22 0f       	add	r18, r18
    96ba:	2f 5f       	subi	r18, 0xFF	; 255
    96bc:	fc 01       	movw	r30, r24
    96be:	20 83       	st	Z, r18
    96c0:	0a 0d       	add	r16, r10
    96c2:	1b 1d       	adc	r17, r11
    96c4:	04 0f       	add	r16, r20
    96c6:	15 1f       	adc	r17, r21
    96c8:	8b cf       	rjmp	.-234    	; 0x95e0 <move_steps+0xa4>
    96ca:	02 17       	cp	r16, r18
    96cc:	13 07       	cpc	r17, r19
    96ce:	81 f0       	breq	.+32     	; 0x96f0 <move_steps+0x1b4>
    96d0:	1f 93       	push	r17
    96d2:	0f 93       	push	r16
    96d4:	3f 93       	push	r19
    96d6:	2f 93       	push	r18
    96d8:	89 e0       	ldi	r24, 0x09	; 9
    96da:	9b e0       	ldi	r25, 0x0B	; 11
    96dc:	9f 93       	push	r25
    96de:	8f 93       	push	r24
    96e0:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    96e4:	0f 90       	pop	r0
    96e6:	0f 90       	pop	r0
    96e8:	0f 90       	pop	r0
    96ea:	0f 90       	pop	r0
    96ec:	0f 90       	pop	r0
    96ee:	0f 90       	pop	r0
    96f0:	80 e0       	ldi	r24, 0x00	; 0
    96f2:	90 e0       	ldi	r25, 0x00	; 0
    96f4:	47 e0       	ldi	r20, 0x07	; 7
    96f6:	38 2f       	mov	r19, r24
    96f8:	f7 01       	movw	r30, r14
    96fa:	21 91       	ld	r18, Z+
    96fc:	7f 01       	movw	r14, r30
    96fe:	01 96       	adiw	r24, 0x01	; 1
    9700:	27 fd       	sbrc	r18, 7
    9702:	13 c0       	rjmp	.+38     	; 0x972a <move_steps+0x1ee>
    9704:	22 23       	and	r18, r18
    9706:	01 f1       	breq	.+64     	; 0x9748 <move_steps+0x20c>
    9708:	31 30       	cpi	r19, 0x01	; 1
    970a:	09 f4       	brne	.+2      	; 0x970e <move_steps+0x1d2>
    970c:	65 c0       	rjmp	.+202    	; 0x97d8 <move_steps+0x29c>
    970e:	32 30       	cpi	r19, 0x02	; 2
    9710:	09 f0       	breq	.+2      	; 0x9714 <move_steps+0x1d8>
    9712:	4e c0       	rjmp	.+156    	; 0x97b0 <move_steps+0x274>
    9714:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    9718:	80 62       	ori	r24, 0x20	; 32
    971a:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    971e:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    9722:	87 e0       	ldi	r24, 0x07	; 7
    9724:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    9728:	11 c0       	rjmp	.+34     	; 0x974c <move_steps+0x210>
    972a:	31 30       	cpi	r19, 0x01	; 1
    972c:	09 f4       	brne	.+2      	; 0x9730 <move_steps+0x1f4>
    972e:	72 c0       	rjmp	.+228    	; 0x9814 <move_steps+0x2d8>
    9730:	32 30       	cpi	r19, 0x02	; 2
    9732:	09 f4       	brne	.+2      	; 0x9736 <move_steps+0x1fa>
    9734:	5b c0       	rjmp	.+182    	; 0x97ec <move_steps+0x2b0>
    9736:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    973a:	20 61       	ori	r18, 0x10	; 16
    973c:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    9740:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    9744:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    9748:	83 30       	cpi	r24, 0x03	; 3
    974a:	a9 f6       	brne	.-86     	; 0x96f6 <move_steps+0x1ba>
    974c:	98 01       	movw	r18, r16
    974e:	d6 01       	movw	r26, r12
    9750:	0e 94 65 77 	call	0xeeca	; 0xeeca <__umulhisi3>
    9754:	25 e0       	ldi	r18, 0x05	; 5
    9756:	96 95       	lsr	r25
    9758:	87 95       	ror	r24
    975a:	77 95       	ror	r23
    975c:	67 95       	ror	r22
    975e:	2a 95       	dec	r18
    9760:	d1 f7       	brne	.-12     	; 0x9756 <move_steps+0x21a>
    9762:	20 e0       	ldi	r18, 0x00	; 0
    9764:	30 e0       	ldi	r19, 0x00	; 0
    9766:	49 e7       	ldi	r20, 0x79	; 121
    9768:	5a e4       	ldi	r21, 0x4A	; 74
    976a:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    976e:	80 93 71 25 	sts	0x2571, r24	; 0x802571 <current_motor_task>
    9772:	90 93 72 25 	sts	0x2572, r25	; 0x802572 <current_motor_task+0x1>
    9776:	89 2b       	or	r24, r25
    9778:	09 f4       	brne	.+2      	; 0x977c <move_steps+0x240>
    977a:	43 c0       	rjmp	.+134    	; 0x9802 <move_steps+0x2c6>
    977c:	81 e0       	ldi	r24, 0x01	; 1
    977e:	29 96       	adiw	r28, 0x09	; 9
    9780:	cd bf       	out	0x3d, r28	; 61
    9782:	de bf       	out	0x3e, r29	; 62
    9784:	df 91       	pop	r29
    9786:	cf 91       	pop	r28
    9788:	1f 91       	pop	r17
    978a:	0f 91       	pop	r16
    978c:	ff 90       	pop	r15
    978e:	ef 90       	pop	r14
    9790:	df 90       	pop	r13
    9792:	cf 90       	pop	r12
    9794:	bf 90       	pop	r11
    9796:	af 90       	pop	r10
    9798:	9f 90       	pop	r9
    979a:	8f 90       	pop	r8
    979c:	08 95       	ret
    979e:	80 91 73 25 	lds	r24, 0x2573	; 0x802573 <motor_status>
    97a2:	80 e0       	ldi	r24, 0x00	; 0
    97a4:	ec cf       	rjmp	.-40     	; 0x977e <move_steps+0x242>
    97a6:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
    97aa:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
    97ae:	6d cf       	rjmp	.-294    	; 0x968a <move_steps+0x14e>
    97b0:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    97b4:	20 62       	ori	r18, 0x20	; 32
    97b6:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    97ba:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    97be:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    97c2:	c2 cf       	rjmp	.-124    	; 0x9748 <move_steps+0x20c>
    97c4:	44 27       	eor	r20, r20
    97c6:	55 27       	eor	r21, r21
    97c8:	42 1b       	sub	r20, r18
    97ca:	53 0b       	sbc	r21, r19
    97cc:	6d cf       	rjmp	.-294    	; 0x96a8 <move_steps+0x16c>
    97ce:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    97d2:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    97d6:	59 cf       	rjmp	.-334    	; 0x968a <move_steps+0x14e>
    97d8:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    97dc:	20 62       	ori	r18, 0x20	; 32
    97de:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    97e2:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    97e6:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    97ea:	85 cf       	rjmp	.-246    	; 0x96f6 <move_steps+0x1ba>
    97ec:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    97f0:	80 61       	ori	r24, 0x10	; 16
    97f2:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    97f6:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    97fa:	87 e0       	ldi	r24, 0x07	; 7
    97fc:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    9800:	a5 cf       	rjmp	.-182    	; 0x974c <move_steps+0x210>
    9802:	8f ed       	ldi	r24, 0xDF	; 223
    9804:	9a e0       	ldi	r25, 0x0A	; 10
    9806:	9f 93       	push	r25
    9808:	8f 93       	push	r24
    980a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    980e:	0f 90       	pop	r0
    9810:	0f 90       	pop	r0
    9812:	b4 cf       	rjmp	.-152    	; 0x977c <move_steps+0x240>
    9814:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    9818:	20 61       	ori	r18, 0x10	; 16
    981a:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    981e:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    9822:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    9826:	67 cf       	rjmp	.-306    	; 0x96f6 <move_steps+0x1ba>

00009828 <walk>:
    9828:	cf 92       	push	r12
    982a:	df 92       	push	r13
    982c:	ef 92       	push	r14
    982e:	ff 92       	push	r15
    9830:	0f 93       	push	r16
    9832:	1f 93       	push	r17
    9834:	cf 93       	push	r28
    9836:	df 93       	push	r29
    9838:	18 2f       	mov	r17, r24
    983a:	eb 01       	movw	r28, r22
    983c:	e8 2f       	mov	r30, r24
    983e:	f0 e0       	ldi	r31, 0x00	; 0
    9840:	ee 0f       	add	r30, r30
    9842:	ff 1f       	adc	r31, r31
    9844:	e5 57       	subi	r30, 0x75	; 117
    9846:	f7 4d       	sbci	r31, 0xD7	; 215
    9848:	60 81       	ld	r22, Z
    984a:	71 81       	ldd	r23, Z+1	; 0x01
    984c:	67 3e       	cpi	r22, 0xE7	; 231
    984e:	83 e0       	ldi	r24, 0x03	; 3
    9850:	78 07       	cpc	r23, r24
    9852:	2c f4       	brge	.+10     	; 0x985e <walk+0x36>
    9854:	68 31       	cpi	r22, 0x18	; 24
    9856:	9c ef       	ldi	r25, 0xFC	; 252
    9858:	79 07       	cpc	r23, r25
    985a:	0c f0       	brlt	.+2      	; 0x985e <walk+0x36>
    985c:	43 c0       	rjmp	.+134    	; 0x98e4 <walk+0xbc>
    985e:	80 e0       	ldi	r24, 0x00	; 0
    9860:	90 e0       	ldi	r25, 0x00	; 0
    9862:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    9866:	20 e0       	ldi	r18, 0x00	; 0
    9868:	30 e0       	ldi	r19, 0x00	; 0
    986a:	4a e7       	ldi	r20, 0x7A	; 122
    986c:	54 e4       	ldi	r21, 0x44	; 68
    986e:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    9872:	6b 01       	movw	r12, r22
    9874:	7c 01       	movw	r14, r24
    9876:	be 01       	movw	r22, r28
    9878:	80 e0       	ldi	r24, 0x00	; 0
    987a:	90 e0       	ldi	r25, 0x00	; 0
    987c:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    9880:	a7 01       	movw	r20, r14
    9882:	96 01       	movw	r18, r12
    9884:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    9888:	6b 01       	movw	r12, r22
    988a:	7c 01       	movw	r14, r24
    988c:	8a e0       	ldi	r24, 0x0A	; 10
    988e:	90 e0       	ldi	r25, 0x00	; 0
    9890:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    9894:	c7 01       	movw	r24, r14
    9896:	b6 01       	movw	r22, r12
    9898:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    989c:	f6 2e       	mov	r15, r22
    989e:	07 2f       	mov	r16, r23
    98a0:	7f 93       	push	r23
    98a2:	6f 93       	push	r22
    98a4:	df 93       	push	r29
    98a6:	cf 93       	push	r28
    98a8:	1f 92       	push	r1
    98aa:	1f 93       	push	r17
    98ac:	87 e6       	ldi	r24, 0x67	; 103
    98ae:	9a e0       	ldi	r25, 0x0A	; 10
    98b0:	9f 93       	push	r25
    98b2:	8f 93       	push	r24
    98b4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    98b8:	8a e0       	ldi	r24, 0x0A	; 10
    98ba:	90 e0       	ldi	r25, 0x00	; 0
    98bc:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    98c0:	8d b7       	in	r24, 0x3d	; 61
    98c2:	9e b7       	in	r25, 0x3e	; 62
    98c4:	08 96       	adiw	r24, 0x08	; 8
    98c6:	8d bf       	out	0x3d, r24	; 61
    98c8:	9e bf       	out	0x3e, r25	; 62
    98ca:	6f 2d       	mov	r22, r15
    98cc:	70 2f       	mov	r23, r16
    98ce:	81 2f       	mov	r24, r17
    98d0:	df 91       	pop	r29
    98d2:	cf 91       	pop	r28
    98d4:	1f 91       	pop	r17
    98d6:	0f 91       	pop	r16
    98d8:	ff 90       	pop	r15
    98da:	ef 90       	pop	r14
    98dc:	df 90       	pop	r13
    98de:	cf 90       	pop	r12
    98e0:	0c 94 9e 4a 	jmp	0x953c	; 0x953c <move_steps>
    98e4:	85 ea       	ldi	r24, 0xA5	; 165
    98e6:	9a e0       	ldi	r25, 0x0A	; 10
    98e8:	9f 93       	push	r25
    98ea:	8f 93       	push	r24
    98ec:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    98f0:	0f 90       	pop	r0
    98f2:	0f 90       	pop	r0
    98f4:	16 30       	cpi	r17, 0x06	; 6
    98f6:	48 f4       	brcc	.+18     	; 0x990a <walk+0xe2>
    98f8:	8a e9       	ldi	r24, 0x9A	; 154
    98fa:	c8 2e       	mov	r12, r24
    98fc:	89 e9       	ldi	r24, 0x99	; 153
    98fe:	d8 2e       	mov	r13, r24
    9900:	89 e1       	ldi	r24, 0x19	; 25
    9902:	e8 2e       	mov	r14, r24
    9904:	8f e3       	ldi	r24, 0x3F	; 63
    9906:	f8 2e       	mov	r15, r24
    9908:	b6 cf       	rjmp	.-148    	; 0x9876 <walk+0x4e>
    990a:	c1 2c       	mov	r12, r1
    990c:	d1 2c       	mov	r13, r1
    990e:	e1 2c       	mov	r14, r1
    9910:	90 e4       	ldi	r25, 0x40	; 64
    9912:	f9 2e       	mov	r15, r25
    9914:	b0 cf       	rjmp	.-160    	; 0x9876 <walk+0x4e>

00009916 <set_mm_per_kilostep>:
    9916:	e8 2f       	mov	r30, r24
    9918:	f0 e0       	ldi	r31, 0x00	; 0
    991a:	ee 0f       	add	r30, r30
    991c:	ff 1f       	adc	r31, r31
    991e:	e5 57       	subi	r30, 0x75	; 117
    9920:	f7 4d       	sbci	r31, 0xD7	; 215
    9922:	60 83       	st	Z, r22
    9924:	71 83       	std	Z+1, r23	; 0x01
    9926:	08 95       	ret

00009928 <read_motor_settings>:
    9928:	df 92       	push	r13
    992a:	ef 92       	push	r14
    992c:	ff 92       	push	r15
    992e:	0f 93       	push	r16
    9930:	1f 93       	push	r17
    9932:	cf 93       	push	r28
    9934:	df 93       	push	r29
    9936:	50 e1       	ldi	r21, 0x10	; 16
    9938:	e5 2e       	mov	r14, r21
    993a:	f1 2c       	mov	r15, r1
    993c:	87 01       	movw	r16, r14
    993e:	0d 51       	subi	r16, 0x1D	; 29
    9940:	16 4d       	sbci	r17, 0xD6	; 214
    9942:	e7 01       	movw	r28, r14
    9944:	26 96       	adiw	r28, 0x06	; 6
    9946:	c7 01       	movw	r24, r14
    9948:	0e 94 91 15 	call	0x2b22	; 0x2b22 <EEPROM_read_byte>
    994c:	d8 2e       	mov	r13, r24
    994e:	c7 01       	movw	r24, r14
    9950:	01 96       	adiw	r24, 0x01	; 1
    9952:	0e 94 91 15 	call	0x2b22	; 0x2b22 <EEPROM_read_byte>
    9956:	2d 2d       	mov	r18, r13
    9958:	30 e0       	ldi	r19, 0x00	; 0
    995a:	32 2f       	mov	r19, r18
    995c:	22 27       	eor	r18, r18
    995e:	28 2b       	or	r18, r24
    9960:	f8 01       	movw	r30, r16
    9962:	21 93       	st	Z+, r18
    9964:	31 93       	st	Z+, r19
    9966:	8f 01       	movw	r16, r30
    9968:	f2 e0       	ldi	r31, 0x02	; 2
    996a:	ef 0e       	add	r14, r31
    996c:	f1 1c       	adc	r15, r1
    996e:	ec 16       	cp	r14, r28
    9970:	fd 06       	cpc	r15, r29
    9972:	49 f7       	brne	.-46     	; 0x9946 <read_motor_settings+0x1e>
    9974:	7e 01       	movw	r14, r28
    9976:	c0 34       	cpi	r28, 0x40	; 64
    9978:	d1 05       	cpc	r29, r1
    997a:	01 f7       	brne	.-64     	; 0x993c <read_motor_settings+0x14>
    997c:	2b e8       	ldi	r18, 0x8B	; 139
    997e:	e2 2e       	mov	r14, r18
    9980:	28 e2       	ldi	r18, 0x28	; 40
    9982:	f2 2e       	mov	r15, r18
    9984:	ce 01       	movw	r24, r28
    9986:	0e 94 91 15 	call	0x2b22	; 0x2b22 <EEPROM_read_byte>
    998a:	18 2f       	mov	r17, r24
    998c:	ce 01       	movw	r24, r28
    998e:	01 96       	adiw	r24, 0x01	; 1
    9990:	0e 94 91 15 	call	0x2b22	; 0x2b22 <EEPROM_read_byte>
    9994:	21 2f       	mov	r18, r17
    9996:	30 e0       	ldi	r19, 0x00	; 0
    9998:	32 2f       	mov	r19, r18
    999a:	22 27       	eor	r18, r18
    999c:	28 2b       	or	r18, r24
    999e:	f7 01       	movw	r30, r14
    99a0:	21 93       	st	Z+, r18
    99a2:	31 93       	st	Z+, r19
    99a4:	7f 01       	movw	r14, r30
    99a6:	22 96       	adiw	r28, 0x02	; 2
    99a8:	c0 35       	cpi	r28, 0x50	; 80
    99aa:	d1 05       	cpc	r29, r1
    99ac:	59 f7       	brne	.-42     	; 0x9984 <read_motor_settings+0x5c>
    99ae:	df 91       	pop	r29
    99b0:	cf 91       	pop	r28
    99b2:	1f 91       	pop	r17
    99b4:	0f 91       	pop	r16
    99b6:	ff 90       	pop	r15
    99b8:	ef 90       	pop	r14
    99ba:	df 90       	pop	r13
    99bc:	08 95       	ret

000099be <motor_init>:
    99be:	cf 93       	push	r28
    99c0:	df 93       	push	r29
    99c2:	e0 e4       	ldi	r30, 0x40	; 64
    99c4:	f6 e0       	ldi	r31, 0x06	; 6
    99c6:	83 e3       	ldi	r24, 0x33	; 51
    99c8:	81 83       	std	Z+1, r24	; 0x01
    99ca:	a0 e6       	ldi	r26, 0x60	; 96
    99cc:	b6 e0       	ldi	r27, 0x06	; 6
    99ce:	83 e0       	ldi	r24, 0x03	; 3
    99d0:	11 96       	adiw	r26, 0x01	; 1
    99d2:	8c 93       	st	X, r24
    99d4:	11 97       	sbiw	r26, 0x01	; 1
    99d6:	c0 e0       	ldi	r28, 0x00	; 0
    99d8:	d8 e0       	ldi	r29, 0x08	; 8
    99da:	18 82       	st	Y, r1
    99dc:	89 83       	std	Y+1, r24	; 0x01
    99de:	c0 e4       	ldi	r28, 0x40	; 64
    99e0:	d8 e0       	ldi	r29, 0x08	; 8
    99e2:	18 82       	st	Y, r1
    99e4:	89 83       	std	Y+1, r24	; 0x01
    99e6:	c0 e0       	ldi	r28, 0x00	; 0
    99e8:	d9 e0       	ldi	r29, 0x09	; 9
    99ea:	18 82       	st	Y, r1
    99ec:	89 83       	std	Y+1, r24	; 0x01
    99ee:	90 e4       	ldi	r25, 0x40	; 64
    99f0:	90 8b       	std	Z+16, r25	; 0x10
    99f2:	91 8b       	std	Z+17, r25	; 0x11
    99f4:	94 8b       	std	Z+20, r25	; 0x14
    99f6:	95 8b       	std	Z+21, r25	; 0x15
    99f8:	50 96       	adiw	r26, 0x10	; 16
    99fa:	9c 93       	st	X, r25
    99fc:	50 97       	sbiw	r26, 0x10	; 16
    99fe:	51 96       	adiw	r26, 0x11	; 17
    9a00:	9c 93       	st	X, r25
    9a02:	51 97       	sbiw	r26, 0x11	; 17
    9a04:	86 83       	std	Z+6, r24	; 0x06
    9a06:	90 e3       	ldi	r25, 0x30	; 48
    9a08:	96 83       	std	Z+6, r25	; 0x06
    9a0a:	16 96       	adiw	r26, 0x06	; 6
    9a0c:	8c 93       	st	X, r24
    9a0e:	10 92 73 25 	sts	0x2573, r1	; 0x802573 <motor_status>
    9a12:	84 e1       	ldi	r24, 0x14	; 20
    9a14:	90 e0       	ldi	r25, 0x00	; 0
    9a16:	80 93 6f 25 	sts	0x256F, r24	; 0x80256f <motor_on_time>
    9a1a:	90 93 70 25 	sts	0x2570, r25	; 0x802570 <motor_on_time+0x1>
    9a1e:	88 e2       	ldi	r24, 0x28	; 40
    9a20:	90 e0       	ldi	r25, 0x00	; 0
    9a22:	80 93 6d 25 	sts	0x256D, r24	; 0x80256d <motor_off_time>
    9a26:	90 93 6e 25 	sts	0x256E, r25	; 0x80256e <motor_off_time+0x1>
    9a2a:	df 91       	pop	r29
    9a2c:	cf 91       	pop	r28
    9a2e:	0c 94 94 4c 	jmp	0x9928	; 0x9928 <read_motor_settings>

00009a32 <write_motor_settings>:
    9a32:	df 92       	push	r13
    9a34:	ef 92       	push	r14
    9a36:	ff 92       	push	r15
    9a38:	0f 93       	push	r16
    9a3a:	1f 93       	push	r17
    9a3c:	cf 93       	push	r28
    9a3e:	df 93       	push	r29
    9a40:	c0 e1       	ldi	r28, 0x10	; 16
    9a42:	d0 e0       	ldi	r29, 0x00	; 0
    9a44:	8e 01       	movw	r16, r28
    9a46:	0d 51       	subi	r16, 0x1D	; 29
    9a48:	16 4d       	sbci	r17, 0xD6	; 214
    9a4a:	7e 01       	movw	r14, r28
    9a4c:	86 e0       	ldi	r24, 0x06	; 6
    9a4e:	e8 0e       	add	r14, r24
    9a50:	f1 1c       	adc	r15, r1
    9a52:	f8 01       	movw	r30, r16
    9a54:	d0 80       	ld	r13, Z
    9a56:	61 81       	ldd	r22, Z+1	; 0x01
    9a58:	0e 5f       	subi	r16, 0xFE	; 254
    9a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    9a5c:	ce 01       	movw	r24, r28
    9a5e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <EEPROM_write_byte>
    9a62:	6d 2d       	mov	r22, r13
    9a64:	ce 01       	movw	r24, r28
    9a66:	01 96       	adiw	r24, 0x01	; 1
    9a68:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <EEPROM_write_byte>
    9a6c:	22 96       	adiw	r28, 0x02	; 2
    9a6e:	ce 15       	cp	r28, r14
    9a70:	df 05       	cpc	r29, r15
    9a72:	79 f7       	brne	.-34     	; 0x9a52 <write_motor_settings+0x20>
    9a74:	e7 01       	movw	r28, r14
    9a76:	f0 e4       	ldi	r31, 0x40	; 64
    9a78:	ef 16       	cp	r14, r31
    9a7a:	f1 04       	cpc	r15, r1
    9a7c:	19 f7       	brne	.-58     	; 0x9a44 <write_motor_settings+0x12>
    9a7e:	cb e8       	ldi	r28, 0x8B	; 139
    9a80:	d8 e2       	ldi	r29, 0x28	; 40
    9a82:	18 81       	ld	r17, Y
    9a84:	69 81       	ldd	r22, Y+1	; 0x01
    9a86:	22 96       	adiw	r28, 0x02	; 2
    9a88:	c7 01       	movw	r24, r14
    9a8a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <EEPROM_write_byte>
    9a8e:	61 2f       	mov	r22, r17
    9a90:	c7 01       	movw	r24, r14
    9a92:	01 96       	adiw	r24, 0x01	; 1
    9a94:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <EEPROM_write_byte>
    9a98:	e2 e0       	ldi	r30, 0x02	; 2
    9a9a:	ee 0e       	add	r14, r30
    9a9c:	f1 1c       	adc	r15, r1
    9a9e:	f0 e5       	ldi	r31, 0x50	; 80
    9aa0:	ef 16       	cp	r14, r31
    9aa2:	f1 04       	cpc	r15, r1
    9aa4:	71 f7       	brne	.-36     	; 0x9a82 <write_motor_settings+0x50>
    9aa6:	df 91       	pop	r29
    9aa8:	cf 91       	pop	r28
    9aaa:	1f 91       	pop	r17
    9aac:	0f 91       	pop	r16
    9aae:	ff 90       	pop	r15
    9ab0:	ef 90       	pop	r14
    9ab2:	df 90       	pop	r13
    9ab4:	08 95       	ret

00009ab6 <print_motor_values>:
    9ab6:	8f 92       	push	r8
    9ab8:	9f 92       	push	r9
    9aba:	af 92       	push	r10
    9abc:	bf 92       	push	r11
    9abe:	cf 92       	push	r12
    9ac0:	df 92       	push	r13
    9ac2:	ef 92       	push	r14
    9ac4:	ff 92       	push	r15
    9ac6:	1f 93       	push	r17
    9ac8:	cf 93       	push	r28
    9aca:	df 93       	push	r29
    9acc:	88 e5       	ldi	r24, 0x58	; 88
    9ace:	9a e0       	ldi	r25, 0x0A	; 10
    9ad0:	9f 93       	push	r25
    9ad2:	8f 93       	push	r24
    9ad4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    9ad8:	83 ef       	ldi	r24, 0xF3	; 243
    9ada:	a8 2e       	mov	r10, r24
    9adc:	89 e2       	ldi	r24, 0x29	; 41
    9ade:	b8 2e       	mov	r11, r24
    9ae0:	0f 90       	pop	r0
    9ae2:	0f 90       	pop	r0
    9ae4:	c1 2c       	mov	r12, r1
    9ae6:	d1 2c       	mov	r13, r1
    9ae8:	9d e4       	ldi	r25, 0x4D	; 77
    9aea:	89 2e       	mov	r8, r25
    9aec:	9a e0       	ldi	r25, 0x0A	; 10
    9aee:	99 2e       	mov	r9, r25
    9af0:	21 e9       	ldi	r18, 0x91	; 145
    9af2:	e2 2e       	mov	r14, r18
    9af4:	23 e2       	ldi	r18, 0x23	; 35
    9af6:	f2 2e       	mov	r15, r18
    9af8:	df 92       	push	r13
    9afa:	cf 92       	push	r12
    9afc:	9f 92       	push	r9
    9afe:	8f 92       	push	r8
    9b00:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    9b04:	0f 90       	pop	r0
    9b06:	0f 90       	pop	r0
    9b08:	0f 90       	pop	r0
    9b0a:	0f 90       	pop	r0
    9b0c:	e5 01       	movw	r28, r10
    9b0e:	13 e0       	ldi	r17, 0x03	; 3
    9b10:	88 81       	ld	r24, Y
    9b12:	99 81       	ldd	r25, Y+1	; 0x01
    9b14:	22 96       	adiw	r28, 0x02	; 2
    9b16:	9f 93       	push	r25
    9b18:	8f 93       	push	r24
    9b1a:	ff 92       	push	r15
    9b1c:	ef 92       	push	r14
    9b1e:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    9b22:	11 50       	subi	r17, 0x01	; 1
    9b24:	0f 90       	pop	r0
    9b26:	0f 90       	pop	r0
    9b28:	0f 90       	pop	r0
    9b2a:	0f 90       	pop	r0
    9b2c:	89 f7       	brne	.-30     	; 0x9b10 <print_motor_values+0x5a>
    9b2e:	80 e3       	ldi	r24, 0x30	; 48
    9b30:	91 e2       	ldi	r25, 0x21	; 33
    9b32:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
    9b36:	8f ef       	ldi	r24, 0xFF	; 255
    9b38:	c8 1a       	sub	r12, r24
    9b3a:	d8 0a       	sbc	r13, r24
    9b3c:	86 e0       	ldi	r24, 0x06	; 6
    9b3e:	a8 0e       	add	r10, r24
    9b40:	b1 1c       	adc	r11, r1
    9b42:	88 e0       	ldi	r24, 0x08	; 8
    9b44:	c8 16       	cp	r12, r24
    9b46:	d1 04       	cpc	r13, r1
    9b48:	b9 f6       	brne	.-82     	; 0x9af8 <print_motor_values+0x42>
    9b4a:	80 e3       	ldi	r24, 0x30	; 48
    9b4c:	91 e2       	ldi	r25, 0x21	; 33
    9b4e:	df 91       	pop	r29
    9b50:	cf 91       	pop	r28
    9b52:	1f 91       	pop	r17
    9b54:	ff 90       	pop	r15
    9b56:	ef 90       	pop	r14
    9b58:	df 90       	pop	r13
    9b5a:	cf 90       	pop	r12
    9b5c:	bf 90       	pop	r11
    9b5e:	af 90       	pop	r10
    9b60:	9f 90       	pop	r9
    9b62:	8f 90       	pop	r8
    9b64:	0c 94 1a 7e 	jmp	0xfc34	; 0xfc34 <puts>

00009b68 <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    9b68:	ef 92       	push	r14
    9b6a:	ff 92       	push	r15
    9b6c:	0f 93       	push	r16
    9b6e:	1f 93       	push	r17
    9b70:	cf 93       	push	r28
    9b72:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    9b74:	84 e3       	ldi	r24, 0x34	; 52
    9b76:	9a e0       	ldi	r25, 0x0A	; 10
    9b78:	9f 93       	push	r25
    9b7a:	8f 93       	push	r24
    9b7c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    9b80:	0b e8       	ldi	r16, 0x8B	; 139
    9b82:	18 e2       	ldi	r17, 0x28	; 40
    9b84:	0f 90       	pop	r0
    9b86:	0f 90       	pop	r0
    9b88:	c0 e0       	ldi	r28, 0x00	; 0
    9b8a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mm_per_kilostep[direction]);	
    9b8c:	8a e2       	ldi	r24, 0x2A	; 42
    9b8e:	e8 2e       	mov	r14, r24
    9b90:	8a e0       	ldi	r24, 0x0A	; 10
    9b92:	f8 2e       	mov	r15, r24
    9b94:	f8 01       	movw	r30, r16
    9b96:	80 81       	ld	r24, Z
    9b98:	91 81       	ldd	r25, Z+1	; 0x01
    9b9a:	0e 5f       	subi	r16, 0xFE	; 254
    9b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    9b9e:	9f 93       	push	r25
    9ba0:	8f 93       	push	r24
    9ba2:	df 93       	push	r29
    9ba4:	cf 93       	push	r28
    9ba6:	ff 92       	push	r15
    9ba8:	ef 92       	push	r14
    9baa:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    9bae:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    9bb0:	0f 90       	pop	r0
    9bb2:	0f 90       	pop	r0
    9bb4:	0f 90       	pop	r0
    9bb6:	0f 90       	pop	r0
    9bb8:	0f 90       	pop	r0
    9bba:	0f 90       	pop	r0
    9bbc:	c8 30       	cpi	r28, 0x08	; 8
    9bbe:	d1 05       	cpc	r29, r1
    9bc0:	49 f7       	brne	.-46     	; 0x9b94 <print_dist_per_step+0x2c>
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mm_per_kilostep[direction]);	
	}
}
    9bc2:	df 91       	pop	r29
    9bc4:	cf 91       	pop	r28
    9bc6:	1f 91       	pop	r17
    9bc8:	0f 91       	pop	r16
    9bca:	ff 90       	pop	r15
    9bcc:	ef 90       	pop	r14
    9bce:	08 95       	ret

00009bd0 <pc_comm_putchar>:
				
	serial_in_index = temp_index;
}

static int pc_comm_putchar(char c, FILE *stream __attribute__ ((unused))){
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    9bd0:	90 91 b1 09 	lds	r25, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7009b1>
    9bd4:	95 ff       	sbrs	r25, 5
    9bd6:	fc cf       	rjmp	.-8      	; 0x9bd0 <pc_comm_putchar>
	PC_USART.DATA = c;
    9bd8:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	return 1;
}
    9bdc:	81 e0       	ldi	r24, 0x01	; 1
    9bde:	90 e0       	ldi	r25, 0x00	; 0
    9be0:	08 95       	ret

00009be2 <pc_comm_init>:
static int pc_comm_putchar(char c, FILE *stream);
static void handle_up_arrow(void);
static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init(){
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    9be2:	e0 e6       	ldi	r30, 0x60	; 96
    9be4:	f6 e0       	ldi	r31, 0x06	; 6
    9be6:	80 e8       	ldi	r24, 0x80	; 128
    9be8:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    9bea:	80 e4       	ldi	r24, 0x40	; 64
    9bec:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    9bee:	e0 eb       	ldi	r30, 0xB0	; 176
    9bf0:	f9 e0       	ldi	r31, 0x09	; 9
    9bf2:	83 e0       	ldi	r24, 0x03	; 3
    9bf4:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    9bf6:	87 e1       	ldi	r24, 0x17	; 23
    9bf8:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    9bfa:	84 ea       	ldi	r24, 0xA4	; 164
    9bfc:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    9bfe:	84 81       	ldd	r24, Z+4	; 0x04
    9c00:	80 61       	ori	r24, 0x10	; 16
    9c02:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    9c04:	84 81       	ldd	r24, Z+4	; 0x04
    9c06:	88 60       	ori	r24, 0x08	; 8
    9c08:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    9c0a:	82 e1       	ldi	r24, 0x12	; 18
    9c0c:	90 e2       	ldi	r25, 0x20	; 32
    9c0e:	80 93 50 2a 	sts	0x2A50, r24	; 0x802a50 <__iob+0x2>
    9c12:	90 93 51 2a 	sts	0x2A51, r25	; 0x802a51 <__iob+0x3>
	serial_in_index = 0;
    9c16:	10 92 74 25 	sts	0x2574, r1	; 0x802574 <serial_in_index>
    9c1a:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <serial_in_index+0x1>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    9c1e:	80 e2       	ldi	r24, 0x20	; 32
    9c20:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    9c22:	8a e0       	ldi	r24, 0x0A	; 10
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	0c 94 14 7e 	jmp	0xfc28	; 0xfc28 <putchar>

00009c2a <__vector_91>:
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    9c2a:	1f 92       	push	r1
    9c2c:	0f 92       	push	r0
    9c2e:	0f b6       	in	r0, 0x3f	; 63
    9c30:	0f 92       	push	r0
    9c32:	11 24       	eor	r1, r1
    9c34:	0b b6       	in	r0, 0x3b	; 59
    9c36:	0f 92       	push	r0
    9c38:	2f 93       	push	r18
    9c3a:	3f 93       	push	r19
    9c3c:	4f 93       	push	r20
    9c3e:	5f 93       	push	r21
    9c40:	6f 93       	push	r22
    9c42:	7f 93       	push	r23
    9c44:	8f 93       	push	r24
    9c46:	9f 93       	push	r25
    9c48:	af 93       	push	r26
    9c4a:	bf 93       	push	r27
    9c4c:	cf 93       	push	r28
    9c4e:	ef 93       	push	r30
    9c50:	ff 93       	push	r31

static void handle_serial_input(void){
	char data = PC_USART.DATA;
    9c52:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	if(escaped_arrow==1){
    9c56:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <escaped_arrow>
    9c5a:	91 30       	cpi	r25, 0x01	; 1
    9c5c:	09 f4       	brne	.+2      	; 0x9c60 <__vector_91+0x36>
    9c5e:	47 c0       	rjmp	.+142    	; 0x9cee <__vector_91+0xc4>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
    9c60:	90 91 77 25 	lds	r25, 0x2577	; 0x802577 <escaped>
    9c64:	91 11       	cpse	r25, r1
    9c66:	28 c0       	rjmp	.+80     	; 0x9cb8 <__vector_91+0x8e>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
    9c68:	8d 30       	cpi	r24, 0x0D	; 13
    9c6a:	09 f4       	brne	.+2      	; 0x9c6e <__vector_91+0x44>
    9c6c:	59 c0       	rjmp	.+178    	; 0x9d20 <__vector_91+0xf6>
    9c6e:	8a 30       	cpi	r24, 0x0A	; 10
    9c70:	09 f4       	brne	.+2      	; 0x9c74 <__vector_91+0x4a>
    9c72:	56 c0       	rjmp	.+172    	; 0x9d20 <__vector_91+0xf6>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handle_serial_command(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
    9c74:	88 30       	cpi	r24, 0x08	; 8
    9c76:	09 f4       	brne	.+2      	; 0x9c7a <__vector_91+0x50>
    9c78:	3f c0       	rjmp	.+126    	; 0x9cf8 <__vector_91+0xce>
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
    9c7a:	8b 31       	cpi	r24, 0x1B	; 27
    9c7c:	09 f4       	brne	.+2      	; 0x9c80 <__vector_91+0x56>
    9c7e:	88 c0       	rjmp	.+272    	; 0x9d90 <__vector_91+0x166>
		escaped = 1;
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
    9c80:	20 91 74 25 	lds	r18, 0x2574	; 0x802574 <serial_in_index>
    9c84:	30 91 75 25 	lds	r19, 0x2575	; 0x802575 <serial_in_index+0x1>
    9c88:	20 34       	cpi	r18, 0x40	; 64
    9c8a:	31 05       	cpc	r19, r1
    9c8c:	09 f4       	brne	.+2      	; 0x9c90 <__vector_91+0x66>
    9c8e:	84 c0       	rjmp	.+264    	; 0x9d98 <__vector_91+0x16e>
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
		serial_in_index = 0;
	}else{ //Everything is fine. Add the character to the buffer.
		serial_in_buffer[serial_in_index] = data;
    9c90:	f9 01       	movw	r30, r18
    9c92:	e8 58       	subi	r30, 0x88	; 136
    9c94:	fa 4d       	sbci	r31, 0xDA	; 218
    9c96:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    9c98:	2f 5f       	subi	r18, 0xFF	; 255
    9c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    9c9c:	20 93 74 25 	sts	0x2574, r18	; 0x802574 <serial_in_index>
    9ca0:	30 93 75 25 	sts	0x2575, r19	; 0x802575 <serial_in_index+0x1>
		putchar(data);
    9ca4:	60 91 50 2a 	lds	r22, 0x2A50	; 0x802a50 <__iob+0x2>
    9ca8:	70 91 51 2a 	lds	r23, 0x2A51	; 0x802a51 <__iob+0x3>
    9cac:	08 2e       	mov	r0, r24
    9cae:	00 0c       	add	r0, r0
    9cb0:	99 0b       	sbc	r25, r25
    9cb2:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    9cb6:	07 c0       	rjmp	.+14     	; 0x9cc6 <__vector_91+0x9c>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
		if(data == 91){
    9cb8:	8b 35       	cpi	r24, 0x5B	; 91
    9cba:	19 f4       	brne	.+6      	; 0x9cc2 <__vector_91+0x98>
			escaped_arrow=1;	
    9cbc:	81 e0       	ldi	r24, 0x01	; 1
    9cbe:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <escaped_arrow>
		}
		escaped=0;
    9cc2:	10 92 77 25 	sts	0x2577, r1	; 0x802577 <escaped>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    9cc6:	ff 91       	pop	r31
    9cc8:	ef 91       	pop	r30
    9cca:	cf 91       	pop	r28
    9ccc:	bf 91       	pop	r27
    9cce:	af 91       	pop	r26
    9cd0:	9f 91       	pop	r25
    9cd2:	8f 91       	pop	r24
    9cd4:	7f 91       	pop	r23
    9cd6:	6f 91       	pop	r22
    9cd8:	5f 91       	pop	r21
    9cda:	4f 91       	pop	r20
    9cdc:	3f 91       	pop	r19
    9cde:	2f 91       	pop	r18
    9ce0:	0f 90       	pop	r0
    9ce2:	0b be       	out	0x3b, r0	; 59
    9ce4:	0f 90       	pop	r0
    9ce6:	0f be       	out	0x3f, r0	; 63
    9ce8:	0f 90       	pop	r0
    9cea:	1f 90       	pop	r1
    9cec:	18 95       	reti

static void handle_serial_input(void){
	char data = PC_USART.DATA;
	if(escaped_arrow==1){
		if(data == 65){
    9cee:	81 34       	cpi	r24, 0x41	; 65
    9cf0:	61 f1       	breq	.+88     	; 0x9d4a <__vector_91+0x120>
			handle_up_arrow();
		}
		escaped_arrow=0;
    9cf2:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <escaped_arrow>
    9cf6:	e7 cf       	rjmp	.-50     	; 0x9cc6 <__vector_91+0x9c>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handle_serial_command(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
    9cf8:	80 91 74 25 	lds	r24, 0x2574	; 0x802574 <serial_in_index>
    9cfc:	90 91 75 25 	lds	r25, 0x2575	; 0x802575 <serial_in_index+0x1>
    9d00:	00 97       	sbiw	r24, 0x00	; 0
    9d02:	29 f0       	breq	.+10     	; 0x9d0e <__vector_91+0xe4>
    9d04:	01 97       	sbiw	r24, 0x01	; 1
    9d06:	80 93 74 25 	sts	0x2574, r24	; 0x802574 <serial_in_index>
    9d0a:	90 93 75 25 	sts	0x2575, r25	; 0x802575 <serial_in_index+0x1>
		printf("\b \b");
    9d0e:	85 e9       	ldi	r24, 0x95	; 149
    9d10:	93 e2       	ldi	r25, 0x23	; 35
    9d12:	9f 93       	push	r25
    9d14:	8f 93       	push	r24
    9d16:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    9d1a:	0f 90       	pop	r0
    9d1c:	0f 90       	pop	r0
    9d1e:	d3 cf       	rjmp	.-90     	; 0x9cc6 <__vector_91+0x9c>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
		printf("\r\n");
    9d20:	80 e3       	ldi	r24, 0x30	; 48
    9d22:	91 e2       	ldi	r25, 0x21	; 33
    9d24:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
		serial_in_buffer[serial_in_index]='\0';
    9d28:	60 91 74 25 	lds	r22, 0x2574	; 0x802574 <serial_in_index>
    9d2c:	70 91 75 25 	lds	r23, 0x2575	; 0x802575 <serial_in_index+0x1>
    9d30:	fb 01       	movw	r30, r22
    9d32:	e8 58       	subi	r30, 0x88	; 136
    9d34:	fa 4d       	sbci	r31, 0xDA	; 218
    9d36:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    9d38:	88 e7       	ldi	r24, 0x78	; 120
    9d3a:	95 e2       	ldi	r25, 0x25	; 37
    9d3c:	0e 94 b7 63 	call	0xc76e	; 0xc76e <handle_serial_command>
		serial_in_index = 0;
    9d40:	10 92 74 25 	sts	0x2574, r1	; 0x802574 <serial_in_index>
    9d44:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <serial_in_index+0x1>
    9d48:	be cf       	rjmp	.-132    	; 0x9cc6 <__vector_91+0x9c>
		putchar(data);
	}
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
    9d4a:	80 91 74 25 	lds	r24, 0x2574	; 0x802574 <serial_in_index>
    9d4e:	90 91 75 25 	lds	r25, 0x2575	; 0x802575 <serial_in_index+0x1>
    9d52:	c8 2f       	mov	r28, r24
			
	while(serial_in_buffer[temp_index] != '\0'){
    9d54:	99 27       	eor	r25, r25
    9d56:	fc 01       	movw	r30, r24
    9d58:	e8 58       	subi	r30, 0x88	; 136
    9d5a:	fa 4d       	sbci	r31, 0xDA	; 218
    9d5c:	80 81       	ld	r24, Z
    9d5e:	88 23       	and	r24, r24
    9d60:	69 f1       	breq	.+90     	; 0x9dbc <__vector_91+0x192>
		putchar(serial_in_buffer[temp_index]);
    9d62:	60 91 50 2a 	lds	r22, 0x2A50	; 0x802a50 <__iob+0x2>
    9d66:	70 91 51 2a 	lds	r23, 0x2A51	; 0x802a51 <__iob+0x3>
    9d6a:	08 2e       	mov	r0, r24
    9d6c:	00 0c       	add	r0, r0
    9d6e:	99 0b       	sbc	r25, r25
    9d70:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
		temp_index++;
    9d74:	cf 5f       	subi	r28, 0xFF	; 255
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0'){
    9d76:	2c 2f       	mov	r18, r28
    9d78:	30 e0       	ldi	r19, 0x00	; 0
    9d7a:	f9 01       	movw	r30, r18
    9d7c:	e8 58       	subi	r30, 0x88	; 136
    9d7e:	fa 4d       	sbci	r31, 0xDA	; 218
    9d80:	80 81       	ld	r24, Z
    9d82:	81 11       	cpse	r24, r1
    9d84:	ee cf       	rjmp	.-36     	; 0x9d62 <__vector_91+0x138>
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    9d86:	20 93 74 25 	sts	0x2574, r18	; 0x802574 <serial_in_index>
    9d8a:	30 93 75 25 	sts	0x2575, r19	; 0x802575 <serial_in_index+0x1>
    9d8e:	b1 cf       	rjmp	.-158    	; 0x9cf2 <__vector_91+0xc8>
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
		escaped = 1;
    9d90:	81 e0       	ldi	r24, 0x01	; 1
    9d92:	80 93 77 25 	sts	0x2577, r24	; 0x802577 <escaped>
    9d96:	97 cf       	rjmp	.-210    	; 0x9cc6 <__vector_91+0x9c>
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
    9d98:	1f 92       	push	r1
    9d9a:	80 e4       	ldi	r24, 0x40	; 64
    9d9c:	8f 93       	push	r24
    9d9e:	83 e4       	ldi	r24, 0x43	; 67
    9da0:	9b e0       	ldi	r25, 0x0B	; 11
    9da2:	9f 93       	push	r25
    9da4:	8f 93       	push	r24
    9da6:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		serial_in_index = 0;
    9daa:	10 92 74 25 	sts	0x2574, r1	; 0x802574 <serial_in_index>
    9dae:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <serial_in_index+0x1>
    9db2:	0f 90       	pop	r0
    9db4:	0f 90       	pop	r0
    9db6:	0f 90       	pop	r0
    9db8:	0f 90       	pop	r0
    9dba:	85 cf       	rjmp	.-246    	; 0x9cc6 <__vector_91+0x9c>
    9dbc:	2c 2f       	mov	r18, r28
    9dbe:	30 e0       	ldi	r19, 0x00	; 0
    9dc0:	e2 cf       	rjmp	.-60     	; 0x9d86 <__vector_91+0x15c>

00009dc2 <power_init>:
	leg_monitor_init();
}

void cap_monitor_init()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    9dc2:	83 e0       	ldi	r24, 0x03	; 3
    9dc4:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    9dc8:	e0 e9       	ldi	r30, 0x90	; 144
    9dca:	f3 e0       	ldi	r31, 0x03	; 3
    9dcc:	81 e0       	ldi	r24, 0x01	; 1
    9dce:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    9dd0:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    9dd2:	88 e0       	ldi	r24, 0x08	; 8
    9dd4:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    9dd6:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    9dd8:	90 e1       	ldi	r25, 0x10	; 16
    9dda:	96 83       	std	Z+6, r25	; 0x06
}

void leg_monitor_init()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    9ddc:	e0 e0       	ldi	r30, 0x00	; 0
    9dde:	f6 e0       	ldi	r31, 0x06	; 6
    9de0:	8f e1       	ldi	r24, 0x1F	; 31
    9de2:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    9de4:	87 e0       	ldi	r24, 0x07	; 7
    9de6:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    9de8:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    9dea:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    9dec:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    9dee:	84 8b       	std	Z+20, r24	; 0x14
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    9df0:	e0 e8       	ldi	r30, 0x80	; 128
    9df2:	f3 e0       	ldi	r31, 0x03	; 3
    9df4:	96 83       	std	Z+6, r25	; 0x06
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;	// PA0 is VREF_HI
    9df6:	92 83       	std	Z+2, r25	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;	// PA1 is VREF_LO
    9df8:	81 e1       	ldi	r24, 0x11	; 17
    9dfa:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    9dfc:	89 e0       	ldi	r24, 0x09	; 9
    9dfe:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    9e00:	81 83       	std	Z+1, r24	; 0x01
    9e02:	08 95       	ret

00009e04 <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    9e04:	80 e2       	ldi	r24, 0x20	; 32
    9e06:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    9e0a:	88 b1       	in	r24, 0x08	; 8
    9e0c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    9e10:	89 b1       	in	r24, 0x09	; 9
    9e12:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    9e16:	8a b1       	in	r24, 0x0a	; 10
    9e18:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    9e1c:	8b b1       	in	r24, 0x0b	; 11
    9e1e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    9e22:	8c b1       	in	r24, 0x0c	; 12
    9e24:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    9e28:	8d b1       	in	r24, 0x0d	; 13
    9e2a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_WAFNUM;
    9e2e:	80 b3       	in	r24, 0x10	; 16
    9e30:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDX0;
    9e34:	82 b3       	in	r24, 0x12	; 18
    9e36:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_COORDX1;
    9e3a:	83 b3       	in	r24, 0x13	; 19
    9e3c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY0;
    9e40:	84 b3       	in	r24, 0x14	; 20
    9e42:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY1;
    9e46:	85 b3       	in	r24, 0x15	; 21
    9e48:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH0.RESL;
    9e4c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    9e50:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = ADCA.CH1.RESL;
    9e54:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    9e58:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH2.RESL;
    9e5c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    9e60:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH0.RESL;
    9e64:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    9e68:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH1.RESL;
    9e6c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    9e70:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	r_round = 1;
    9e74:	81 e0       	ldi	r24, 0x01	; 1
    9e76:	80 93 ba 25 	sts	0x25BA, r24	; 0x8025ba <r_round>
    9e7a:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    9e7c:	91 e0       	ldi	r25, 0x01	; 1
    9e7e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    9e82:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    9e84:	e1 f7       	brne	.-8      	; 0x9e7e <random_init+0x7a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    9e86:	84 e8       	ldi	r24, 0x84	; 132
    9e88:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

	r_position = 0;
    9e8c:	10 92 b9 25 	sts	0x25B9, r1	; 0x8025b9 <r_position>
	randNormHasSaved = 0;
    9e90:	10 92 b8 25 	sts	0x25B8, r1	; 0x8025b8 <randNormHasSaved>
    9e94:	08 95       	ret

00009e96 <rand_byte>:
}

uint8_t rand_byte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    9e96:	90 91 b9 25 	lds	r25, 0x25B9	; 0x8025b9 <r_position>
    9e9a:	99 23       	and	r25, r25
    9e9c:	a1 f0       	breq	.+40     	; 0x9ec6 <rand_byte+0x30>
	r = AES.STATE;
    9e9e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    9ea2:	9f 5f       	subi	r25, 0xFF	; 255
    9ea4:	90 93 b9 25 	sts	0x25B9, r25	; 0x8025b9 <r_position>
	if (r_position > 15){
    9ea8:	90 31       	cpi	r25, 0x10	; 16
    9eaa:	b0 f0       	brcs	.+44     	; 0x9ed8 <rand_byte+0x42>
    9eac:	20 91 ba 25 	lds	r18, 0x25BA	; 0x8025ba <r_round>
    9eb0:	90 e1       	ldi	r25, 0x10	; 16
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    9eb2:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    9eb6:	91 50       	subi	r25, 0x01	; 1
    9eb8:	e1 f7       	brne	.-8      	; 0x9eb2 <rand_byte+0x1c>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    9eba:	94 e8       	ldi	r25, 0x84	; 132
    9ebc:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		r_position = 0;
    9ec0:	10 92 b9 25 	sts	0x25B9, r1	; 0x8025b9 <r_position>
    9ec4:	08 95       	ret
	randNormHasSaved = 0;
}

uint8_t rand_byte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    9ec6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    9eca:	80 ff       	sbrs	r24, 0
    9ecc:	fc cf       	rjmp	.-8      	; 0x9ec6 <rand_byte+0x30>
	r = AES.STATE;
    9ece:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    9ed2:	91 e0       	ldi	r25, 0x01	; 1
    9ed4:	90 93 b9 25 	sts	0x25B9, r25	; 0x8025b9 <r_position>
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    9ed8:	08 95       	ret

00009eda <rand_short>:

uint16_t rand_short(){
    9eda:	cf 93       	push	r28
	return ((uint16_t)rand_byte()<<8)|((uint16_t)rand_byte());
    9edc:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rand_byte>
    9ee0:	c8 2f       	mov	r28, r24
    9ee2:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rand_byte>
    9ee6:	2c 2f       	mov	r18, r28
    9ee8:	30 e0       	ldi	r19, 0x00	; 0
    9eea:	32 2f       	mov	r19, r18
    9eec:	22 27       	eor	r18, r18
}
    9eee:	a9 01       	movw	r20, r18
    9ef0:	48 2b       	or	r20, r24
    9ef2:	ca 01       	movw	r24, r20
    9ef4:	cf 91       	pop	r28
    9ef6:	08 95       	ret

00009ef8 <rand_quad>:

uint32_t rand_quad(){
    9ef8:	0f 93       	push	r16
    9efa:	1f 93       	push	r17
    9efc:	cf 93       	push	r28
    9efe:	df 93       	push	r29
	}
	return r;
}

uint16_t rand_short(){
	return ((uint16_t)rand_byte()<<8)|((uint16_t)rand_byte());
    9f00:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rand_byte>
    9f04:	18 2f       	mov	r17, r24
    9f06:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rand_byte>
    9f0a:	d8 2f       	mov	r29, r24
    9f0c:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rand_byte>
    9f10:	c8 2f       	mov	r28, r24
    9f12:	0e 94 4b 4f 	call	0x9e96	; 0x9e96 <rand_byte>
}

uint32_t rand_quad(){
	return ((uint32_t)rand_short()<<16)|((uint32_t)rand_short());
    9f16:	4d 2f       	mov	r20, r29
    9f18:	50 e0       	ldi	r21, 0x00	; 0
    9f1a:	51 2b       	or	r21, r17
    9f1c:	60 e0       	ldi	r22, 0x00	; 0
    9f1e:	70 e0       	ldi	r23, 0x00	; 0
    9f20:	ba 01       	movw	r22, r20
    9f22:	55 27       	eor	r21, r21
    9f24:	44 27       	eor	r20, r20
    9f26:	2c 2f       	mov	r18, r28
    9f28:	30 e0       	ldi	r19, 0x00	; 0
    9f2a:	32 2f       	mov	r19, r18
    9f2c:	22 27       	eor	r18, r18
    9f2e:	89 01       	movw	r16, r18
    9f30:	08 2b       	or	r16, r24
    9f32:	c8 01       	movw	r24, r16
    9f34:	a0 e0       	ldi	r26, 0x00	; 0
    9f36:	b0 e0       	ldi	r27, 0x00	; 0
    9f38:	8a 01       	movw	r16, r20
    9f3a:	9b 01       	movw	r18, r22
    9f3c:	08 2b       	or	r16, r24
    9f3e:	19 2b       	or	r17, r25
    9f40:	2a 2b       	or	r18, r26
    9f42:	3b 2b       	or	r19, r27
    9f44:	c9 01       	movw	r24, r18
    9f46:	b8 01       	movw	r22, r16
}
    9f48:	df 91       	pop	r29
    9f4a:	cf 91       	pop	r28
    9f4c:	1f 91       	pop	r17
    9f4e:	0f 91       	pop	r16
    9f50:	08 95       	ret

00009f52 <rand_real>:

float rand_real(){
	return (((float)rand_quad())/4294967295.0);
    9f52:	0e 94 7c 4f 	call	0x9ef8	; 0x9ef8 <rand_quad>
    9f56:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    9f5a:	20 e0       	ldi	r18, 0x00	; 0
    9f5c:	30 e0       	ldi	r19, 0x00	; 0
    9f5e:	40 e8       	ldi	r20, 0x80	; 128
    9f60:	5f e2       	ldi	r21, 0x2F	; 47
    9f62:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
}
    9f66:	08 95       	ret

00009f68 <magicRangeFunc>:
	}
	set_all_ir_powers(prevPower);
}


static float magicRangeFunc(float a){
    9f68:	cf 92       	push	r12
    9f6a:	df 92       	push	r13
    9f6c:	ef 92       	push	r14
    9f6e:	ff 92       	push	r15
    9f70:	6b 01       	movw	r12, r22
    9f72:	7c 01       	movw	r14, r24
	if(a<=0){
    9f74:	20 e0       	ldi	r18, 0x00	; 0
    9f76:	30 e0       	ldi	r19, 0x00	; 0
    9f78:	a9 01       	movw	r20, r18
    9f7a:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    9f7e:	18 16       	cp	r1, r24
    9f80:	7c f5       	brge	.+94     	; 0x9fe0 <magicRangeFunc+0x78>
		return NAN;
		}else{
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
    9f82:	20 e0       	ldi	r18, 0x00	; 0
    9f84:	30 e0       	ldi	r19, 0x00	; 0
    9f86:	40 e0       	ldi	r20, 0x00	; 0
    9f88:	5f eb       	ldi	r21, 0xBF	; 191
    9f8a:	c7 01       	movw	r24, r14
    9f8c:	b6 01       	movw	r22, r12
    9f8e:	0e 94 51 76 	call	0xeca2	; 0xeca2 <pow>
		result = 1 + exp(result);
    9f92:	28 e9       	ldi	r18, 0x98	; 152
    9f94:	37 ef       	ldi	r19, 0xF7	; 247
    9f96:	44 ed       	ldi	r20, 0xD4	; 212
    9f98:	5c e3       	ldi	r21, 0x3C	; 60
    9f9a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    9f9e:	2e ec       	ldi	r18, 0xCE	; 206
    9fa0:	30 ef       	ldi	r19, 0xF0	; 240
    9fa2:	42 ec       	ldi	r20, 0xC2	; 194
    9fa4:	51 ec       	ldi	r21, 0xC1	; 193
    9fa6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    9faa:	0e 94 aa 72 	call	0xe554	; 0xe554 <exp>
		result = (778.0270114700/result) - 528.0270114700;
    9fae:	20 e0       	ldi	r18, 0x00	; 0
    9fb0:	30 e0       	ldi	r19, 0x00	; 0
    9fb2:	40 e8       	ldi	r20, 0x80	; 128
    9fb4:	5f e3       	ldi	r21, 0x3F	; 63
    9fb6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    9fba:	9b 01       	movw	r18, r22
    9fbc:	ac 01       	movw	r20, r24
    9fbe:	6b eb       	ldi	r22, 0xBB	; 187
    9fc0:	71 e8       	ldi	r23, 0x81	; 129
    9fc2:	82 e4       	ldi	r24, 0x42	; 66
    9fc4:	94 e4       	ldi	r25, 0x44	; 68
    9fc6:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    9fca:	2b eb       	ldi	r18, 0xBB	; 187
    9fcc:	31 e0       	ldi	r19, 0x01	; 1
    9fce:	44 e0       	ldi	r20, 0x04	; 4
    9fd0:	54 e4       	ldi	r21, 0x44	; 68
    9fd2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
		return result;
	}
}
    9fd6:	ff 90       	pop	r15
    9fd8:	ef 90       	pop	r14
    9fda:	df 90       	pop	r13
    9fdc:	cf 90       	pop	r12
    9fde:	08 95       	ret
}


static float magicRangeFunc(float a){
	if(a<=0){
		return NAN;
    9fe0:	60 e0       	ldi	r22, 0x00	; 0
    9fe2:	70 e0       	ldi	r23, 0x00	; 0
    9fe4:	80 ec       	ldi	r24, 0xC0	; 192
    9fe6:	9f e7       	ldi	r25, 0x7F	; 127
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
		result = 1 + exp(result);
		result = (778.0270114700/result) - 528.0270114700;
		return result;
	}
}
    9fe8:	ff 90       	pop	r15
    9fea:	ef 90       	pop	r14
    9fec:	df 90       	pop	r13
    9fee:	cf 90       	pop	r12
    9ff0:	08 95       	ret

00009ff2 <range_algs_init>:
//static float invMagicRangeFunc(float r);

//static void print_brightMeas(void);
												
void range_algs_init(){
	sensorHealthHistory = 0;
    9ff2:	10 92 03 26 	sts	0x2603, r1	; 0x802603 <sensorHealthHistory>
    9ff6:	10 92 04 26 	sts	0x2604, r1	; 0x802604 <sensorHealthHistory+0x1>
    9ffa:	10 92 05 26 	sts	0x2605, r1	; 0x802605 <sensorHealthHistory+0x2>
    9ffe:	10 92 06 26 	sts	0x2606, r1	; 0x802606 <sensorHealthHistory+0x3>
    a002:	eb eb       	ldi	r30, 0xBB	; 187
    a004:	f5 e2       	ldi	r31, 0x25	; 37
    a006:	83 e0       	ldi	r24, 0x03	; 3
    a008:	96 e2       	ldi	r25, 0x26	; 38
	for(uint8_t i=0 ; i<6 ;i++){
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
    a00a:	10 82       	st	Z, r1
    a00c:	11 82       	std	Z+1, r1	; 0x01
    a00e:	12 82       	std	Z+2, r1	; 0x02
    a010:	13 82       	std	Z+3, r1	; 0x03
    a012:	14 82       	std	Z+4, r1	; 0x04
    a014:	15 82       	std	Z+5, r1	; 0x05
    a016:	16 82       	std	Z+6, r1	; 0x06
    a018:	17 82       	std	Z+7, r1	; 0x07
    a01a:	10 86       	std	Z+8, r1	; 0x08
    a01c:	11 86       	std	Z+9, r1	; 0x09
    a01e:	12 86       	std	Z+10, r1	; 0x0a
    a020:	13 86       	std	Z+11, r1	; 0x0b
    a022:	3c 96       	adiw	r30, 0x0c	; 12

//static void print_brightMeas(void);
												
void range_algs_init(){
	sensorHealthHistory = 0;
	for(uint8_t i=0 ; i<6 ;i++){
    a024:	8e 17       	cp	r24, r30
    a026:	9f 07       	cpc	r25, r31
    a028:	81 f7       	brne	.-32     	; 0xa00a <range_algs_init+0x18>
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
		}
	}
	rnbCmdID=0;
    a02a:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <rnbCmdID>
    a02e:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <rnbCmdID+0x1>
	rnbProcessingFlag=0;
    a032:	10 92 79 28 	sts	0x2879, r1	; 0x802879 <rnbProcessingFlag>
    a036:	08 95       	ret

0000a038 <calculate_range>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		rnbProcessingFlag=0;
	}
}

float calculate_range(float iRange, float bearing, float heading){
    a038:	2f 92       	push	r2
    a03a:	3f 92       	push	r3
    a03c:	4f 92       	push	r4
    a03e:	5f 92       	push	r5
    a040:	6f 92       	push	r6
    a042:	7f 92       	push	r7
    a044:	8f 92       	push	r8
    a046:	9f 92       	push	r9
    a048:	af 92       	push	r10
    a04a:	bf 92       	push	r11
    a04c:	cf 92       	push	r12
    a04e:	df 92       	push	r13
    a050:	ef 92       	push	r14
    a052:	ff 92       	push	r15
    a054:	0f 93       	push	r16
    a056:	1f 93       	push	r17
    a058:	cf 93       	push	r28
    a05a:	df 93       	push	r29
    a05c:	cd b7       	in	r28, 0x3d	; 61
    a05e:	de b7       	in	r29, 0x3e	; 62
    a060:	cc 54       	subi	r28, 0x4C	; 76
    a062:	d1 09       	sbc	r29, r1
    a064:	cd bf       	out	0x3d, r28	; 61
    a066:	de bf       	out	0x3e, r29	; 62
    a068:	4b 01       	movw	r8, r22
    a06a:	5c 01       	movw	r10, r24
    a06c:	29 01       	movw	r4, r18
    a06e:	3a 01       	movw	r6, r20
    a070:	67 01       	movw	r12, r14
    a072:	78 01       	movw	r14, r16
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
    a074:	ca 01       	movw	r24, r20
    a076:	b9 01       	movw	r22, r18
    a078:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    a07c:	9b 01       	movw	r18, r22
    a07e:	ac 01       	movw	r20, r24
    a080:	c5 01       	movw	r24, r10
    a082:	b4 01       	movw	r22, r8
    a084:	90 58       	subi	r25, 0x80	; 128
    a086:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a08a:	29 96       	adiw	r28, 0x09	; 9
    a08c:	6c af       	std	Y+60, r22	; 0x3c
    a08e:	7d af       	std	Y+61, r23	; 0x3d
    a090:	8e af       	std	Y+62, r24	; 0x3e
    a092:	9f af       	std	Y+63, r25	; 0x3f
    a094:	29 97       	sbiw	r28, 0x09	; 9
    a096:	c3 01       	movw	r24, r6
    a098:	b2 01       	movw	r22, r4
    a09a:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    a09e:	9b 01       	movw	r18, r22
    a0a0:	ac 01       	movw	r20, r24
    a0a2:	c5 01       	movw	r24, r10
    a0a4:	b4 01       	movw	r22, r8
    a0a6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a0aa:	2d 96       	adiw	r28, 0x0d	; 13
    a0ac:	6c af       	std	Y+60, r22	; 0x3c
    a0ae:	7d af       	std	Y+61, r23	; 0x3d
    a0b0:	8e af       	std	Y+62, r24	; 0x3e
    a0b2:	9f af       	std	Y+63, r25	; 0x3f
    a0b4:	2d 97       	sbiw	r28, 0x0d	; 13
    a0b6:	c7 01       	movw	r24, r14
    a0b8:	b6 01       	movw	r22, r12
    a0ba:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    a0be:	4b 01       	movw	r8, r22
    a0c0:	5c 01       	movw	r10, r24
    a0c2:	c7 01       	movw	r24, r14
    a0c4:	b6 01       	movw	r22, r12
    a0c6:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    a0ca:	6b ab       	std	Y+51, r22	; 0x33
    a0cc:	7c ab       	std	Y+52, r23	; 0x34
    a0ce:	8d ab       	std	Y+53, r24	; 0x35
    a0d0:	9e ab       	std	Y+54, r25	; 0x36
    a0d2:	8e 01       	movw	r16, r28
    a0d4:	0f 5f       	subi	r16, 0xFF	; 255
    a0d6:	1f 4f       	sbci	r17, 0xFF	; 255
    a0d8:	39 ec       	ldi	r19, 0xC9	; 201
    a0da:	23 2e       	mov	r2, r19
    a0dc:	33 e2       	ldi	r19, 0x23	; 35
    a0de:	33 2e       	mov	r3, r19
    a0e0:	ce 01       	movw	r24, r28
    a0e2:	c1 96       	adiw	r24, 0x31	; 49
    a0e4:	89 ab       	std	Y+49, r24	; 0x31
    a0e6:	9a ab       	std	Y+50, r25	; 0x32
    a0e8:	44 ea       	ldi	r20, 0xA4	; 164
    a0ea:	44 2e       	mov	r4, r20
    a0ec:	4b e6       	ldi	r20, 0x6B	; 107
    a0ee:	54 2e       	mov	r5, r20
    a0f0:	48 e9       	ldi	r20, 0x98	; 152
    a0f2:	64 2e       	mov	r6, r20
    a0f4:	41 e4       	ldi	r20, 0x41	; 65
    a0f6:	74 2e       	mov	r7, r20
    a0f8:	c1 2c       	mov	r12, r1
    a0fa:	d1 2c       	mov	r13, r1
    a0fc:	50 e3       	ldi	r21, 0x30	; 48
    a0fe:	e5 2e       	mov	r14, r21
    a100:	51 e4       	ldi	r21, 0x41	; 65
    a102:	f5 2e       	mov	r15, r21
    a104:	0c c0       	rjmp	.+24     	; 0xa11e <calculate_range+0xe6>
    a106:	d1 01       	movw	r26, r2
    a108:	cd 90       	ld	r12, X+
    a10a:	dd 90       	ld	r13, X+
    a10c:	ed 90       	ld	r14, X+
    a10e:	fc 90       	ld	r15, X
    a110:	13 97       	sbiw	r26, 0x03	; 3
    a112:	14 96       	adiw	r26, 0x04	; 4
    a114:	4d 90       	ld	r4, X+
    a116:	5d 90       	ld	r5, X+
    a118:	6d 90       	ld	r6, X+
    a11a:	7c 90       	ld	r7, X
    a11c:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
    a11e:	a5 01       	movw	r20, r10
    a120:	94 01       	movw	r18, r8
    a122:	c7 01       	movw	r24, r14
    a124:	b6 01       	movw	r22, r12
    a126:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a12a:	6f ab       	std	Y+55, r22	; 0x37
    a12c:	78 af       	std	Y+56, r23	; 0x38
    a12e:	89 af       	std	Y+57, r24	; 0x39
    a130:	9a af       	std	Y+58, r25	; 0x3a
    a132:	2b a9       	ldd	r18, Y+51	; 0x33
    a134:	3c a9       	ldd	r19, Y+52	; 0x34
    a136:	4d a9       	ldd	r20, Y+53	; 0x35
    a138:	5e a9       	ldd	r21, Y+54	; 0x36
    a13a:	c3 01       	movw	r24, r6
    a13c:	b2 01       	movw	r22, r4
    a13e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a142:	9b 01       	movw	r18, r22
    a144:	ac 01       	movw	r20, r24
    a146:	6f a9       	ldd	r22, Y+55	; 0x37
    a148:	78 ad       	ldd	r23, Y+56	; 0x38
    a14a:	89 ad       	ldd	r24, Y+57	; 0x39
    a14c:	9a ad       	ldd	r25, Y+58	; 0x3a
    a14e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a152:	d8 01       	movw	r26, r16
    a154:	6d 93       	st	X+, r22
    a156:	7d 93       	st	X+, r23
    a158:	8d 93       	st	X+, r24
    a15a:	9c 93       	st	X, r25
    a15c:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
    a15e:	2b a9       	ldd	r18, Y+51	; 0x33
    a160:	3c a9       	ldd	r19, Y+52	; 0x34
    a162:	4d a9       	ldd	r20, Y+53	; 0x35
    a164:	5e a9       	ldd	r21, Y+54	; 0x36
    a166:	c7 01       	movw	r24, r14
    a168:	b6 01       	movw	r22, r12
    a16a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a16e:	6b 01       	movw	r12, r22
    a170:	7c 01       	movw	r14, r24
    a172:	a3 01       	movw	r20, r6
    a174:	92 01       	movw	r18, r4
    a176:	c5 01       	movw	r24, r10
    a178:	b4 01       	movw	r22, r8
    a17a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a17e:	9b 01       	movw	r18, r22
    a180:	ac 01       	movw	r20, r24
    a182:	c7 01       	movw	r24, r14
    a184:	b6 01       	movw	r22, r12
    a186:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a18a:	f8 01       	movw	r30, r16
    a18c:	64 83       	std	Z+4, r22	; 0x04
    a18e:	75 83       	std	Z+5, r23	; 0x05
    a190:	86 83       	std	Z+6, r24	; 0x06
    a192:	97 83       	std	Z+7, r25	; 0x07
    a194:	08 5f       	subi	r16, 0xF8	; 248
    a196:	1f 4f       	sbci	r17, 0xFF	; 255
    a198:	f8 e0       	ldi	r31, 0x08	; 8
    a19a:	2f 0e       	add	r2, r31
    a19c:	31 1c       	adc	r3, r1
}

float calculate_range(float iRange, float bearing, float heading){
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    a19e:	89 a9       	ldd	r24, Y+49	; 0x31
    a1a0:	9a a9       	ldd	r25, Y+50	; 0x32
    a1a2:	08 17       	cp	r16, r24
    a1a4:	19 07       	cpc	r17, r25
    a1a6:	09 f0       	breq	.+2      	; 0xa1aa <calculate_range+0x172>
    a1a8:	ae cf       	rjmp	.-164    	; 0xa106 <calculate_range+0xce>
    a1aa:	ab eb       	ldi	r26, 0xBB	; 187
    a1ac:	b5 e2       	ldi	r27, 0x25	; 37
    a1ae:	25 96       	adiw	r28, 0x05	; 5
    a1b0:	ae af       	std	Y+62, r26	; 0x3e
    a1b2:	bf af       	std	Y+63, r27	; 0x3f
    a1b4:	25 97       	sbiw	r28, 0x05	; 5
    a1b6:	84 ea       	ldi	r24, 0xA4	; 164
    a1b8:	9b e6       	ldi	r25, 0x6B	; 107
    a1ba:	a8 e9       	ldi	r26, 0x98	; 152
    a1bc:	b1 e4       	ldi	r27, 0x41	; 65
    a1be:	8b af       	std	Y+59, r24	; 0x3b
    a1c0:	9c af       	std	Y+60, r25	; 0x3c
    a1c2:	ad af       	std	Y+61, r26	; 0x3d
    a1c4:	be af       	std	Y+62, r27	; 0x3e
    a1c6:	41 2c       	mov	r4, r1
    a1c8:	51 2c       	mov	r5, r1
    a1ca:	90 e3       	ldi	r25, 0x30	; 48
    a1cc:	69 2e       	mov	r6, r25
    a1ce:	91 e4       	ldi	r25, 0x41	; 65
    a1d0:	79 2e       	mov	r7, r25
    a1d2:	31 2c       	mov	r3, r1
    a1d4:	23 96       	adiw	r28, 0x03	; 3
    a1d6:	1c ae       	std	Y+60, r1	; 0x3c
    a1d8:	1d ae       	std	Y+61, r1	; 0x3d
    a1da:	1e ae       	std	Y+62, r1	; 0x3e
    a1dc:	1f ae       	std	Y+63, r1	; 0x3f
    a1de:	23 97       	sbiw	r28, 0x03	; 3
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    a1e0:	2b ea       	ldi	r18, 0xAB	; 171
    a1e2:	22 2e       	mov	r2, r18
    a1e4:	77 c0       	rjmp	.+238    	; 0xa2d4 <calculate_range+0x29c>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
    a1e6:	25 96       	adiw	r28, 0x05	; 5
    a1e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    a1ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    a1ec:	25 97       	sbiw	r28, 0x05	; 5
    a1ee:	01 91       	ld	r16, Z+
    a1f0:	11 91       	ld	r17, Z+
    a1f2:	25 96       	adiw	r28, 0x05	; 5
    a1f4:	ee af       	std	Y+62, r30	; 0x3e
    a1f6:	ff af       	std	Y+63, r31	; 0x3f
    a1f8:	25 97       	sbiw	r28, 0x05	; 5
    a1fa:	a3 01       	movw	r20, r6
    a1fc:	92 01       	movw	r18, r4
    a1fe:	c5 01       	movw	r24, r10
    a200:	b4 01       	movw	r22, r8
    a202:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a206:	4b 01       	movw	r8, r22
    a208:	5c 01       	movw	r10, r24
    a20a:	2b a9       	ldd	r18, Y+51	; 0x33
    a20c:	3c a9       	ldd	r19, Y+52	; 0x34
    a20e:	4d a9       	ldd	r20, Y+53	; 0x35
    a210:	5e a9       	ldd	r21, Y+54	; 0x36
    a212:	ca 01       	movw	r24, r20
    a214:	b9 01       	movw	r22, r18
    a216:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a21a:	2b 01       	movw	r4, r22
    a21c:	3c 01       	movw	r6, r24
    a21e:	a7 01       	movw	r20, r14
    a220:	96 01       	movw	r18, r12
    a222:	c7 01       	movw	r24, r14
    a224:	b6 01       	movw	r22, r12
    a226:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a22a:	9b 01       	movw	r18, r22
    a22c:	ac 01       	movw	r20, r24
    a22e:	c3 01       	movw	r24, r6
    a230:	b2 01       	movw	r22, r4
    a232:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a236:	20 e0       	ldi	r18, 0x00	; 0
    a238:	30 e0       	ldi	r19, 0x00	; 0
    a23a:	42 ef       	ldi	r20, 0xF2	; 242
    a23c:	53 e4       	ldi	r21, 0x43	; 67
    a23e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a242:	9b 01       	movw	r18, r22
    a244:	ac 01       	movw	r20, r24
    a246:	c5 01       	movw	r24, r10
    a248:	b4 01       	movw	r22, r8
    a24a:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    a24e:	6b 01       	movw	r12, r22
    a250:	7c 01       	movw	r14, r24
    a252:	b8 01       	movw	r22, r16
    a254:	11 0f       	add	r17, r17
    a256:	88 0b       	sbc	r24, r24
    a258:	99 0b       	sbc	r25, r25
    a25a:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    a25e:	9b 01       	movw	r18, r22
    a260:	ac 01       	movw	r20, r24
    a262:	c7 01       	movw	r24, r14
    a264:	b6 01       	movw	r22, r12
    a266:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a26a:	9b 01       	movw	r18, r22
    a26c:	ac 01       	movw	r20, r24
    a26e:	23 96       	adiw	r28, 0x03	; 3
    a270:	6c ad       	ldd	r22, Y+60	; 0x3c
    a272:	7d ad       	ldd	r23, Y+61	; 0x3d
    a274:	8e ad       	ldd	r24, Y+62	; 0x3e
    a276:	9f ad       	ldd	r25, Y+63	; 0x3f
    a278:	23 97       	sbiw	r28, 0x03	; 3
    a27a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a27e:	23 96       	adiw	r28, 0x03	; 3
    a280:	6c af       	std	Y+60, r22	; 0x3c
    a282:	7d af       	std	Y+61, r23	; 0x3d
    a284:	8e af       	std	Y+62, r24	; 0x3e
    a286:	9f af       	std	Y+63, r25	; 0x3f
    a288:	23 97       	sbiw	r28, 0x03	; 3
	float rijMagSq;
	float alphaDotP, betaDotP;
	float cosAcosB;
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    a28a:	33 94       	inc	r3
    a28c:	f4 e2       	ldi	r31, 0x24	; 36
    a28e:	3f 16       	cp	r3, r31
    a290:	09 f4       	brne	.+2      	; 0xa294 <calculate_range+0x25c>
    a292:	a3 c0       	rjmp	.+326    	; 0xa3da <calculate_range+0x3a2>
    a294:	32 9c       	mul	r3, r2
    a296:	81 2d       	mov	r24, r1
    a298:	11 24       	eor	r1, r1
    a29a:	86 95       	lsr	r24
    a29c:	86 95       	lsr	r24
    a29e:	98 2f       	mov	r25, r24
    a2a0:	99 0f       	add	r25, r25
    a2a2:	89 0f       	add	r24, r25
    a2a4:	88 0f       	add	r24, r24
    a2a6:	e3 2d       	mov	r30, r3
    a2a8:	e8 1b       	sub	r30, r24
    a2aa:	f0 e0       	ldi	r31, 0x00	; 0
    a2ac:	ee 0f       	add	r30, r30
    a2ae:	ff 1f       	adc	r31, r31
    a2b0:	ee 0f       	add	r30, r30
    a2b2:	ff 1f       	adc	r31, r31
    a2b4:	ee 0f       	add	r30, r30
    a2b6:	ff 1f       	adc	r31, r31
    a2b8:	e7 53       	subi	r30, 0x37	; 55
    a2ba:	fc 4d       	sbci	r31, 0xDC	; 220
    a2bc:	40 80       	ld	r4, Z
    a2be:	51 80       	ldd	r5, Z+1	; 0x01
    a2c0:	62 80       	ldd	r6, Z+2	; 0x02
    a2c2:	73 80       	ldd	r7, Z+3	; 0x03
    a2c4:	84 81       	ldd	r24, Z+4	; 0x04
    a2c6:	95 81       	ldd	r25, Z+5	; 0x05
    a2c8:	a6 81       	ldd	r26, Z+6	; 0x06
    a2ca:	b7 81       	ldd	r27, Z+7	; 0x07
    a2cc:	8b af       	std	Y+59, r24	; 0x3b
    a2ce:	9c af       	std	Y+60, r25	; 0x3c
    a2d0:	ad af       	std	Y+61, r26	; 0x3d
    a2d2:	be af       	std	Y+62, r27	; 0x3e
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    a2d4:	32 9c       	mul	r3, r2
    a2d6:	81 2d       	mov	r24, r1
    a2d8:	11 24       	eor	r1, r1
    a2da:	86 95       	lsr	r24
    a2dc:	86 95       	lsr	r24
    a2de:	01 e0       	ldi	r16, 0x01	; 1
    a2e0:	10 e0       	ldi	r17, 0x00	; 0
    a2e2:	0c 0f       	add	r16, r28
    a2e4:	1d 1f       	adc	r17, r29
    a2e6:	b8 e0       	ldi	r27, 0x08	; 8
    a2e8:	8b 9f       	mul	r24, r27
    a2ea:	00 0d       	add	r16, r0
    a2ec:	11 1d       	adc	r17, r1
    a2ee:	11 24       	eor	r1, r1
    a2f0:	f8 01       	movw	r30, r16
    a2f2:	80 80       	ld	r8, Z
    a2f4:	91 80       	ldd	r9, Z+1	; 0x01
    a2f6:	a2 80       	ldd	r10, Z+2	; 0x02
    a2f8:	b3 80       	ldd	r11, Z+3	; 0x03
    a2fa:	a5 01       	movw	r20, r10
    a2fc:	94 01       	movw	r18, r8
    a2fe:	29 96       	adiw	r28, 0x09	; 9
    a300:	6c ad       	ldd	r22, Y+60	; 0x3c
    a302:	7d ad       	ldd	r23, Y+61	; 0x3d
    a304:	8e ad       	ldd	r24, Y+62	; 0x3e
    a306:	9f ad       	ldd	r25, Y+63	; 0x3f
    a308:	29 97       	sbiw	r28, 0x09	; 9
    a30a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a30e:	a3 01       	movw	r20, r6
    a310:	92 01       	movw	r18, r4
    a312:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a316:	6b ab       	std	Y+51, r22	; 0x33
    a318:	7c ab       	std	Y+52, r23	; 0x34
    a31a:	8d ab       	std	Y+53, r24	; 0x35
    a31c:	9e ab       	std	Y+54, r25	; 0x36
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    a31e:	d8 01       	movw	r26, r16
    a320:	14 96       	adiw	r26, 0x04	; 4
    a322:	8d 91       	ld	r24, X+
    a324:	9d 91       	ld	r25, X+
    a326:	0d 90       	ld	r0, X+
    a328:	bc 91       	ld	r27, X
    a32a:	a0 2d       	mov	r26, r0
    a32c:	8f ab       	std	Y+55, r24	; 0x37
    a32e:	98 af       	std	Y+56, r25	; 0x38
    a330:	a9 af       	std	Y+57, r26	; 0x39
    a332:	ba af       	std	Y+58, r27	; 0x3a
    a334:	9c 01       	movw	r18, r24
    a336:	ad 01       	movw	r20, r26
    a338:	2d 96       	adiw	r28, 0x0d	; 13
    a33a:	6c ad       	ldd	r22, Y+60	; 0x3c
    a33c:	7d ad       	ldd	r23, Y+61	; 0x3d
    a33e:	8e ad       	ldd	r24, Y+62	; 0x3e
    a340:	9f ad       	ldd	r25, Y+63	; 0x3f
    a342:	2d 97       	sbiw	r28, 0x0d	; 13
    a344:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a348:	2b ad       	ldd	r18, Y+59	; 0x3b
    a34a:	3c ad       	ldd	r19, Y+60	; 0x3c
    a34c:	4d ad       	ldd	r20, Y+61	; 0x3d
    a34e:	5e ad       	ldd	r21, Y+62	; 0x3e
    a350:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a354:	6b 01       	movw	r12, r22
    a356:	7c 01       	movw	r14, r24
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    a358:	a3 01       	movw	r20, r6
    a35a:	92 01       	movw	r18, r4
    a35c:	6b a9       	ldd	r22, Y+51	; 0x33
    a35e:	7c a9       	ldd	r23, Y+52	; 0x34
    a360:	8d a9       	ldd	r24, Y+53	; 0x35
    a362:	9e a9       	ldd	r25, Y+54	; 0x36
    a364:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a368:	2b 01       	movw	r4, r22
    a36a:	3c 01       	movw	r6, r24
    a36c:	2b ad       	ldd	r18, Y+59	; 0x3b
    a36e:	3c ad       	ldd	r19, Y+60	; 0x3c
    a370:	4d ad       	ldd	r20, Y+61	; 0x3d
    a372:	5e ad       	ldd	r21, Y+62	; 0x3e
    a374:	c7 01       	movw	r24, r14
    a376:	b6 01       	movw	r22, r12
    a378:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a37c:	9b 01       	movw	r18, r22
    a37e:	ac 01       	movw	r20, r24
    a380:	c3 01       	movw	r24, r6
    a382:	b2 01       	movw	r22, r4
    a384:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a388:	2b 01       	movw	r4, r22
    a38a:	3c 01       	movw	r6, r24
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    a38c:	6b a9       	ldd	r22, Y+51	; 0x33
    a38e:	7c a9       	ldd	r23, Y+52	; 0x34
    a390:	8d a9       	ldd	r24, Y+53	; 0x35
    a392:	9e a9       	ldd	r25, Y+54	; 0x36
    a394:	90 58       	subi	r25, 0x80	; 128
    a396:	a5 01       	movw	r20, r10
    a398:	94 01       	movw	r18, r8
    a39a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a39e:	4b 01       	movw	r8, r22
    a3a0:	5c 01       	movw	r10, r24
    a3a2:	c7 01       	movw	r24, r14
    a3a4:	b6 01       	movw	r22, r12
    a3a6:	90 58       	subi	r25, 0x80	; 128
    a3a8:	2f a9       	ldd	r18, Y+55	; 0x37
    a3aa:	38 ad       	ldd	r19, Y+56	; 0x38
    a3ac:	49 ad       	ldd	r20, Y+57	; 0x39
    a3ae:	5a ad       	ldd	r21, Y+58	; 0x3a
    a3b0:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a3b4:	9b 01       	movw	r18, r22
    a3b6:	ac 01       	movw	r20, r24
    a3b8:	c5 01       	movw	r24, r10
    a3ba:	b4 01       	movw	r22, r8
    a3bc:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a3c0:	4b 01       	movw	r8, r22
    a3c2:	5c 01       	movw	r10, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    a3c4:	20 e0       	ldi	r18, 0x00	; 0
    a3c6:	30 e0       	ldi	r19, 0x00	; 0
    a3c8:	a9 01       	movw	r20, r18
    a3ca:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    a3ce:	87 ff       	sbrs	r24, 7
    a3d0:	0a cf       	rjmp	.-492    	; 0xa1e6 <calculate_range+0x1ae>
    a3d2:	81 2c       	mov	r8, r1
    a3d4:	91 2c       	mov	r9, r1
    a3d6:	54 01       	movw	r10, r8
    a3d8:	06 cf       	rjmp	.-500    	; 0xa1e6 <calculate_range+0x1ae>
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    a3da:	23 96       	adiw	r28, 0x03	; 3
    a3dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    a3de:	7d ad       	ldd	r23, Y+61	; 0x3d
    a3e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    a3e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    a3e4:	23 97       	sbiw	r28, 0x03	; 3
}
    a3e6:	c4 5b       	subi	r28, 0xB4	; 180
    a3e8:	df 4f       	sbci	r29, 0xFF	; 255
    a3ea:	cd bf       	out	0x3d, r28	; 61
    a3ec:	de bf       	out	0x3e, r29	; 62
    a3ee:	df 91       	pop	r29
    a3f0:	cf 91       	pop	r28
    a3f2:	1f 91       	pop	r17
    a3f4:	0f 91       	pop	r16
    a3f6:	ff 90       	pop	r15
    a3f8:	ef 90       	pop	r14
    a3fa:	df 90       	pop	r13
    a3fc:	cf 90       	pop	r12
    a3fe:	bf 90       	pop	r11
    a400:	af 90       	pop	r10
    a402:	9f 90       	pop	r9
    a404:	8f 90       	pop	r8
    a406:	7f 90       	pop	r7
    a408:	6f 90       	pop	r6
    a40a:	5f 90       	pop	r5
    a40c:	4f 90       	pop	r4
    a40e:	3f 90       	pop	r3
    a410:	2f 90       	pop	r2
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    a412:	0c 94 b4 4f 	jmp	0x9f68	; 0x9f68 <magicRangeFunc>

0000a416 <calculate_error>:
}

float calculate_error(float r, float b, float h){
    a416:	2f 92       	push	r2
    a418:	3f 92       	push	r3
    a41a:	4f 92       	push	r4
    a41c:	5f 92       	push	r5
    a41e:	6f 92       	push	r6
    a420:	7f 92       	push	r7
    a422:	8f 92       	push	r8
    a424:	9f 92       	push	r9
    a426:	af 92       	push	r10
    a428:	bf 92       	push	r11
    a42a:	cf 92       	push	r12
    a42c:	df 92       	push	r13
    a42e:	ef 92       	push	r14
    a430:	ff 92       	push	r15
    a432:	0f 93       	push	r16
    a434:	1f 93       	push	r17
    a436:	cf 93       	push	r28
    a438:	df 93       	push	r29
    a43a:	cd b7       	in	r28, 0x3d	; 61
    a43c:	de b7       	in	r29, 0x3e	; 62
    a43e:	cc 5e       	subi	r28, 0xEC	; 236
    a440:	d1 09       	sbc	r29, r1
    a442:	cd bf       	out	0x3d, r28	; 61
    a444:	de bf       	out	0x3e, r29	; 62
    a446:	4b 01       	movw	r8, r22
    a448:	5c 01       	movw	r10, r24
    a44a:	29 01       	movw	r4, r18
    a44c:	3a 01       	movw	r6, r20
    a44e:	67 01       	movw	r12, r14
    a450:	78 01       	movw	r14, r16
	r = r<46 ? 46 : r;
    a452:	20 e0       	ldi	r18, 0x00	; 0
    a454:	30 e0       	ldi	r19, 0x00	; 0
    a456:	48 e3       	ldi	r20, 0x38	; 56
    a458:	52 e4       	ldi	r21, 0x42	; 66
    a45a:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    a45e:	87 fd       	sbrc	r24, 7
    a460:	df c2       	rjmp	.+1470   	; 0xaa20 <calculate_error+0x60a>
    a462:	d5 01       	movw	r26, r10
    a464:	c4 01       	movw	r24, r8
    a466:	b0 58       	subi	r27, 0x80	; 128
    a468:	cd 53       	subi	r28, 0x3D	; 61
    a46a:	df 4f       	sbci	r29, 0xFF	; 255
    a46c:	88 83       	st	Y, r24
    a46e:	99 83       	std	Y+1, r25	; 0x01
    a470:	aa 83       	std	Y+2, r26	; 0x02
    a472:	bb 83       	std	Y+3, r27	; 0x03
    a474:	c3 5c       	subi	r28, 0xC3	; 195
    a476:	d0 40       	sbci	r29, 0x00	; 0
	float bigR[2] = {-r*sin(b), r*cos(b)};
    a478:	c3 01       	movw	r24, r6
    a47a:	b2 01       	movw	r22, r4
    a47c:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    a480:	cd 53       	subi	r28, 0x3D	; 61
    a482:	df 4f       	sbci	r29, 0xFF	; 255
    a484:	28 81       	ld	r18, Y
    a486:	39 81       	ldd	r19, Y+1	; 0x01
    a488:	4a 81       	ldd	r20, Y+2	; 0x02
    a48a:	5b 81       	ldd	r21, Y+3	; 0x03
    a48c:	c3 5c       	subi	r28, 0xC3	; 195
    a48e:	d0 40       	sbci	r29, 0x00	; 0
    a490:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a494:	cd 51       	subi	r28, 0x1D	; 29
    a496:	df 4f       	sbci	r29, 0xFF	; 255
    a498:	68 83       	st	Y, r22
    a49a:	79 83       	std	Y+1, r23	; 0x01
    a49c:	8a 83       	std	Y+2, r24	; 0x02
    a49e:	9b 83       	std	Y+3, r25	; 0x03
    a4a0:	c3 5e       	subi	r28, 0xE3	; 227
    a4a2:	d0 40       	sbci	r29, 0x00	; 0
    a4a4:	c3 01       	movw	r24, r6
    a4a6:	b2 01       	movw	r22, r4
    a4a8:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    a4ac:	9b 01       	movw	r18, r22
    a4ae:	ac 01       	movw	r20, r24
    a4b0:	c5 01       	movw	r24, r10
    a4b2:	b4 01       	movw	r22, r8
    a4b4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a4b8:	c9 51       	subi	r28, 0x19	; 25
    a4ba:	df 4f       	sbci	r29, 0xFF	; 255
    a4bc:	68 83       	st	Y, r22
    a4be:	79 83       	std	Y+1, r23	; 0x01
    a4c0:	8a 83       	std	Y+2, r24	; 0x02
    a4c2:	9b 83       	std	Y+3, r25	; 0x03
    a4c4:	c7 5e       	subi	r28, 0xE7	; 231
    a4c6:	d0 40       	sbci	r29, 0x00	; 0
    a4c8:	c7 01       	movw	r24, r14
    a4ca:	b6 01       	movw	r22, r12
    a4cc:	0e 94 2b 72 	call	0xe456	; 0xe456 <cos>
    a4d0:	cd 53       	subi	r28, 0x3D	; 61
    a4d2:	df 4f       	sbci	r29, 0xFF	; 255
    a4d4:	68 83       	st	Y, r22
    a4d6:	79 83       	std	Y+1, r23	; 0x01
    a4d8:	8a 83       	std	Y+2, r24	; 0x02
    a4da:	9b 83       	std	Y+3, r25	; 0x03
    a4dc:	c3 5c       	subi	r28, 0xC3	; 195
    a4de:	d0 40       	sbci	r29, 0x00	; 0
    a4e0:	c7 01       	movw	r24, r14
    a4e2:	b6 01       	movw	r22, r12
    a4e4:	0e 94 a1 76 	call	0xed42	; 0xed42 <sin>
    a4e8:	2b 01       	movw	r4, r22
    a4ea:	3c 01       	movw	r6, r24
    a4ec:	de 01       	movw	r26, r28
    a4ee:	af 56       	subi	r26, 0x6F	; 111
    a4f0:	bf 4f       	sbci	r27, 0xFF	; 255
    a4f2:	cf 53       	subi	r28, 0x3F	; 63
    a4f4:	df 4f       	sbci	r29, 0xFF	; 255
    a4f6:	a8 83       	st	Y, r26
    a4f8:	b9 83       	std	Y+1, r27	; 0x01
    a4fa:	c1 5c       	subi	r28, 0xC1	; 193
    a4fc:	d0 40       	sbci	r29, 0x00	; 0
    a4fe:	8d 01       	movw	r16, r26
    a500:	39 ec       	ldi	r19, 0xC9	; 201
    a502:	23 2e       	mov	r2, r19
    a504:	33 e2       	ldi	r19, 0x23	; 35
    a506:	33 2e       	mov	r3, r19
    a508:	fd 01       	movw	r30, r26
    a50a:	f0 96       	adiw	r30, 0x30	; 48
    a50c:	c5 53       	subi	r28, 0x35	; 53
    a50e:	df 4f       	sbci	r29, 0xFF	; 255
    a510:	e8 83       	st	Y, r30
    a512:	f9 83       	std	Y+1, r31	; 0x01
    a514:	cb 5c       	subi	r28, 0xCB	; 203
    a516:	d0 40       	sbci	r29, 0x00	; 0
    a518:	44 ea       	ldi	r20, 0xA4	; 164
    a51a:	84 2e       	mov	r8, r20
    a51c:	4b e6       	ldi	r20, 0x6B	; 107
    a51e:	94 2e       	mov	r9, r20
    a520:	48 e9       	ldi	r20, 0x98	; 152
    a522:	a4 2e       	mov	r10, r20
    a524:	41 e4       	ldi	r20, 0x41	; 65
    a526:	b4 2e       	mov	r11, r20
    a528:	c1 2c       	mov	r12, r1
    a52a:	d1 2c       	mov	r13, r1
    a52c:	50 e3       	ldi	r21, 0x30	; 48
    a52e:	e5 2e       	mov	r14, r21
    a530:	51 e4       	ldi	r21, 0x41	; 65
    a532:	f5 2e       	mov	r15, r21
    a534:	0c c0       	rjmp	.+24     	; 0xa54e <calculate_error+0x138>
    a536:	d1 01       	movw	r26, r2
    a538:	cd 90       	ld	r12, X+
    a53a:	dd 90       	ld	r13, X+
    a53c:	ed 90       	ld	r14, X+
    a53e:	fc 90       	ld	r15, X
    a540:	13 97       	sbiw	r26, 0x03	; 3
    a542:	14 96       	adiw	r26, 0x04	; 4
    a544:	8d 90       	ld	r8, X+
    a546:	9d 90       	ld	r9, X+
    a548:	ad 90       	ld	r10, X+
    a54a:	bc 90       	ld	r11, X
    a54c:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
    a54e:	cd 53       	subi	r28, 0x3D	; 61
    a550:	df 4f       	sbci	r29, 0xFF	; 255
    a552:	28 81       	ld	r18, Y
    a554:	39 81       	ldd	r19, Y+1	; 0x01
    a556:	4a 81       	ldd	r20, Y+2	; 0x02
    a558:	5b 81       	ldd	r21, Y+3	; 0x03
    a55a:	c3 5c       	subi	r28, 0xC3	; 195
    a55c:	d0 40       	sbci	r29, 0x00	; 0
    a55e:	c7 01       	movw	r24, r14
    a560:	b6 01       	movw	r22, r12
    a562:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a566:	c9 53       	subi	r28, 0x39	; 57
    a568:	df 4f       	sbci	r29, 0xFF	; 255
    a56a:	68 83       	st	Y, r22
    a56c:	79 83       	std	Y+1, r23	; 0x01
    a56e:	8a 83       	std	Y+2, r24	; 0x02
    a570:	9b 83       	std	Y+3, r25	; 0x03
    a572:	c7 5c       	subi	r28, 0xC7	; 199
    a574:	d0 40       	sbci	r29, 0x00	; 0
    a576:	a3 01       	movw	r20, r6
    a578:	92 01       	movw	r18, r4
    a57a:	c5 01       	movw	r24, r10
    a57c:	b4 01       	movw	r22, r8
    a57e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a582:	9b 01       	movw	r18, r22
    a584:	ac 01       	movw	r20, r24
    a586:	c9 53       	subi	r28, 0x39	; 57
    a588:	df 4f       	sbci	r29, 0xFF	; 255
    a58a:	68 81       	ld	r22, Y
    a58c:	79 81       	ldd	r23, Y+1	; 0x01
    a58e:	8a 81       	ldd	r24, Y+2	; 0x02
    a590:	9b 81       	ldd	r25, Y+3	; 0x03
    a592:	c7 5c       	subi	r28, 0xC7	; 199
    a594:	d0 40       	sbci	r29, 0x00	; 0
    a596:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a59a:	d8 01       	movw	r26, r16
    a59c:	6d 93       	st	X+, r22
    a59e:	7d 93       	st	X+, r23
    a5a0:	8d 93       	st	X+, r24
    a5a2:	9c 93       	st	X, r25
    a5a4:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
    a5a6:	a3 01       	movw	r20, r6
    a5a8:	92 01       	movw	r18, r4
    a5aa:	c7 01       	movw	r24, r14
    a5ac:	b6 01       	movw	r22, r12
    a5ae:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a5b2:	6b 01       	movw	r12, r22
    a5b4:	7c 01       	movw	r14, r24
    a5b6:	a5 01       	movw	r20, r10
    a5b8:	94 01       	movw	r18, r8
    a5ba:	cd 53       	subi	r28, 0x3D	; 61
    a5bc:	df 4f       	sbci	r29, 0xFF	; 255
    a5be:	68 81       	ld	r22, Y
    a5c0:	79 81       	ldd	r23, Y+1	; 0x01
    a5c2:	8a 81       	ldd	r24, Y+2	; 0x02
    a5c4:	9b 81       	ldd	r25, Y+3	; 0x03
    a5c6:	c3 5c       	subi	r28, 0xC3	; 195
    a5c8:	d0 40       	sbci	r29, 0x00	; 0
    a5ca:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a5ce:	9b 01       	movw	r18, r22
    a5d0:	ac 01       	movw	r20, r24
    a5d2:	c7 01       	movw	r24, r14
    a5d4:	b6 01       	movw	r22, r12
    a5d6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a5da:	f8 01       	movw	r30, r16
    a5dc:	64 83       	std	Z+4, r22	; 0x04
    a5de:	75 83       	std	Z+5, r23	; 0x05
    a5e0:	86 83       	std	Z+6, r24	; 0x06
    a5e2:	97 83       	std	Z+7, r25	; 0x07
    a5e4:	08 5f       	subi	r16, 0xF8	; 248
    a5e6:	1f 4f       	sbci	r17, 0xFF	; 255
    a5e8:	f8 e0       	ldi	r31, 0x08	; 8
    a5ea:	2f 0e       	add	r2, r31
    a5ec:	31 1c       	adc	r3, r1

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
	float bigR[2] = {-r*sin(b), r*cos(b)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    a5ee:	c5 53       	subi	r28, 0x35	; 53
    a5f0:	df 4f       	sbci	r29, 0xFF	; 255
    a5f2:	88 81       	ld	r24, Y
    a5f4:	99 81       	ldd	r25, Y+1	; 0x01
    a5f6:	cb 5c       	subi	r28, 0xCB	; 203
    a5f8:	d0 40       	sbci	r29, 0x00	; 0
    a5fa:	08 17       	cp	r16, r24
    a5fc:	19 07       	cpc	r17, r25
    a5fe:	09 f0       	breq	.+2      	; 0xa602 <calculate_error+0x1ec>
    a600:	9a cf       	rjmp	.-204    	; 0xa536 <calculate_error+0x120>
    a602:	ab eb       	ldi	r26, 0xBB	; 187
    a604:	b5 e2       	ldi	r27, 0x25	; 37
    a606:	c5 51       	subi	r28, 0x15	; 21
    a608:	df 4f       	sbci	r29, 0xFF	; 255
    a60a:	a8 83       	st	Y, r26
    a60c:	b9 83       	std	Y+1, r27	; 0x01
    a60e:	cb 5e       	subi	r28, 0xEB	; 235
    a610:	d0 40       	sbci	r29, 0x00	; 0
    a612:	fe 01       	movw	r30, r28
    a614:	31 96       	adiw	r30, 0x01	; 1
    a616:	1f 01       	movw	r2, r30
    a618:	c3 52       	subi	r28, 0x23	; 35
    a61a:	df 4f       	sbci	r29, 0xFF	; 255
    a61c:	e8 83       	st	Y, r30
    a61e:	f9 83       	std	Y+1, r31	; 0x01
    a620:	cd 5d       	subi	r28, 0xDD	; 221
    a622:	d0 40       	sbci	r29, 0x00	; 0
    a624:	c5 52       	subi	r28, 0x25	; 37
    a626:	df 4f       	sbci	r29, 0xFF	; 255
    a628:	a8 83       	st	Y, r26
    a62a:	b9 83       	std	Y+1, r27	; 0x01
    a62c:	cb 5d       	subi	r28, 0xDB	; 219
    a62e:	d0 40       	sbci	r29, 0x00	; 0
    a630:	84 ea       	ldi	r24, 0xA4	; 164
    a632:	9b e6       	ldi	r25, 0x6B	; 107
    a634:	a8 e9       	ldi	r26, 0x98	; 152
    a636:	b1 e4       	ldi	r27, 0x41	; 65
    a638:	c9 52       	subi	r28, 0x29	; 41
    a63a:	df 4f       	sbci	r29, 0xFF	; 255
    a63c:	88 83       	st	Y, r24
    a63e:	99 83       	std	Y+1, r25	; 0x01
    a640:	aa 83       	std	Y+2, r26	; 0x02
    a642:	bb 83       	std	Y+3, r27	; 0x03
    a644:	c7 5d       	subi	r28, 0xD7	; 215
    a646:	d0 40       	sbci	r29, 0x00	; 0
    a648:	41 2c       	mov	r4, r1
    a64a:	51 2c       	mov	r5, r1
    a64c:	20 e3       	ldi	r18, 0x30	; 48
    a64e:	62 2e       	mov	r6, r18
    a650:	21 e4       	ldi	r18, 0x41	; 65
    a652:	72 2e       	mov	r7, r18
    a654:	10 e0       	ldi	r17, 0x00	; 0
    a656:	c5 53       	subi	r28, 0x35	; 53
    a658:	df 4f       	sbci	r29, 0xFF	; 255
    a65a:	18 82       	st	Y, r1
    a65c:	19 82       	std	Y+1, r1	; 0x01
    a65e:	1a 82       	std	Y+2, r1	; 0x02
    a660:	1b 82       	std	Y+3, r1	; 0x03
    a662:	cb 5c       	subi	r28, 0xCB	; 203
    a664:	d0 40       	sbci	r29, 0x00	; 0
    a666:	c9 53       	subi	r28, 0x39	; 57
    a668:	df 4f       	sbci	r29, 0xFF	; 255
    a66a:	18 82       	st	Y, r1
    a66c:	19 82       	std	Y+1, r1	; 0x01
    a66e:	1a 82       	std	Y+2, r1	; 0x02
    a670:	1b 82       	std	Y+3, r1	; 0x03
    a672:	c7 5c       	subi	r28, 0xC7	; 199
    a674:	d0 40       	sbci	r29, 0x00	; 0
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    a676:	0b ea       	ldi	r16, 0xAB	; 171
    a678:	c1 c0       	rjmp	.+386    	; 0xa7fc <calculate_error+0x3e6>
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    a67a:	cd 53       	subi	r28, 0x3D	; 61
    a67c:	df 4f       	sbci	r29, 0xFF	; 255
    a67e:	68 81       	ld	r22, Y
    a680:	79 81       	ldd	r23, Y+1	; 0x01
    a682:	8a 81       	ldd	r24, Y+2	; 0x02
    a684:	9b 81       	ldd	r25, Y+3	; 0x03
    a686:	c3 5c       	subi	r28, 0xC3	; 195
    a688:	d0 40       	sbci	r29, 0x00	; 0
    a68a:	90 58       	subi	r25, 0x80	; 128
    a68c:	c1 53       	subi	r28, 0x31	; 49
    a68e:	df 4f       	sbci	r29, 0xFF	; 255
    a690:	28 81       	ld	r18, Y
    a692:	39 81       	ldd	r19, Y+1	; 0x01
    a694:	4a 81       	ldd	r20, Y+2	; 0x02
    a696:	5b 81       	ldd	r21, Y+3	; 0x03
    a698:	cf 5c       	subi	r28, 0xCF	; 207
    a69a:	d0 40       	sbci	r29, 0x00	; 0
    a69c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a6a0:	2b 01       	movw	r4, r22
    a6a2:	3c 01       	movw	r6, r24
    a6a4:	c7 01       	movw	r24, r14
    a6a6:	b6 01       	movw	r22, r12
    a6a8:	90 58       	subi	r25, 0x80	; 128
    a6aa:	cd 52       	subi	r28, 0x2D	; 45
    a6ac:	df 4f       	sbci	r29, 0xFF	; 255
    a6ae:	28 81       	ld	r18, Y
    a6b0:	39 81       	ldd	r19, Y+1	; 0x01
    a6b2:	4a 81       	ldd	r20, Y+2	; 0x02
    a6b4:	5b 81       	ldd	r21, Y+3	; 0x03
    a6b6:	c3 5d       	subi	r28, 0xD3	; 211
    a6b8:	d0 40       	sbci	r29, 0x00	; 0
    a6ba:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a6be:	9b 01       	movw	r18, r22
    a6c0:	ac 01       	movw	r20, r24
    a6c2:	c3 01       	movw	r24, r6
    a6c4:	b2 01       	movw	r22, r4
    a6c6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a6ca:	6b 01       	movw	r12, r22
    a6cc:	7c 01       	movw	r14, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    a6ce:	20 e0       	ldi	r18, 0x00	; 0
    a6d0:	30 e0       	ldi	r19, 0x00	; 0
    a6d2:	a9 01       	movw	r20, r18
    a6d4:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    a6d8:	87 fd       	sbrc	r24, 7
    a6da:	3b c1       	rjmp	.+630    	; 0xa952 <calculate_error+0x53c>

		measTotal += fast_bm[i];
    a6dc:	c5 52       	subi	r28, 0x25	; 37
    a6de:	df 4f       	sbci	r29, 0xFF	; 255
    a6e0:	e8 81       	ld	r30, Y
    a6e2:	f9 81       	ldd	r31, Y+1	; 0x01
    a6e4:	cb 5d       	subi	r28, 0xDB	; 219
    a6e6:	d0 40       	sbci	r29, 0x00	; 0
    a6e8:	61 91       	ld	r22, Z+
    a6ea:	71 91       	ld	r23, Z+
    a6ec:	c5 52       	subi	r28, 0x25	; 37
    a6ee:	df 4f       	sbci	r29, 0xFF	; 255
    a6f0:	e8 83       	st	Y, r30
    a6f2:	f9 83       	std	Y+1, r31	; 0x01
    a6f4:	cb 5d       	subi	r28, 0xDB	; 219
    a6f6:	d0 40       	sbci	r29, 0x00	; 0
    a6f8:	07 2e       	mov	r0, r23
    a6fa:	00 0c       	add	r0, r0
    a6fc:	88 0b       	sbc	r24, r24
    a6fe:	99 0b       	sbc	r25, r25
    a700:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    a704:	9b 01       	movw	r18, r22
    a706:	ac 01       	movw	r20, r24
    a708:	c9 53       	subi	r28, 0x39	; 57
    a70a:	df 4f       	sbci	r29, 0xFF	; 255
    a70c:	68 81       	ld	r22, Y
    a70e:	79 81       	ldd	r23, Y+1	; 0x01
    a710:	8a 81       	ldd	r24, Y+2	; 0x02
    a712:	9b 81       	ldd	r25, Y+3	; 0x03
    a714:	c7 5c       	subi	r28, 0xC7	; 199
    a716:	d0 40       	sbci	r29, 0x00	; 0
    a718:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a71c:	c9 53       	subi	r28, 0x39	; 57
    a71e:	df 4f       	sbci	r29, 0xFF	; 255
    a720:	68 83       	st	Y, r22
    a722:	79 83       	std	Y+1, r23	; 0x01
    a724:	8a 83       	std	Y+2, r24	; 0x02
    a726:	9b 83       	std	Y+3, r25	; 0x03
    a728:	c7 5c       	subi	r28, 0xC7	; 199
    a72a:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
    a72c:	a7 01       	movw	r20, r14
    a72e:	96 01       	movw	r18, r12
    a730:	c5 01       	movw	r24, r10
    a732:	b4 01       	movw	r22, r8
    a734:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a738:	6b 01       	movw	r12, r22
    a73a:	7c 01       	movw	r14, r24
    a73c:	20 e0       	ldi	r18, 0x00	; 0
    a73e:	30 e0       	ldi	r19, 0x00	; 0
    a740:	42 ef       	ldi	r20, 0xF2	; 242
    a742:	53 e4       	ldi	r21, 0x43	; 67
    a744:	c1 52       	subi	r28, 0x21	; 33
    a746:	df 4f       	sbci	r29, 0xFF	; 255
    a748:	68 81       	ld	r22, Y
    a74a:	79 81       	ldd	r23, Y+1	; 0x01
    a74c:	8a 81       	ldd	r24, Y+2	; 0x02
    a74e:	9b 81       	ldd	r25, Y+3	; 0x03
    a750:	cf 5d       	subi	r28, 0xDF	; 223
    a752:	d0 40       	sbci	r29, 0x00	; 0
    a754:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a758:	9b 01       	movw	r18, r22
    a75a:	ac 01       	movw	r20, r24
    a75c:	c7 01       	movw	r24, r14
    a75e:	b6 01       	movw	r22, r12
    a760:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    a764:	9b 01       	movw	r18, r22
    a766:	ac 01       	movw	r20, r24
    a768:	c3 52       	subi	r28, 0x23	; 35
    a76a:	df 4f       	sbci	r29, 0xFF	; 255
    a76c:	a8 81       	ld	r26, Y
    a76e:	b9 81       	ldd	r27, Y+1	; 0x01
    a770:	cd 5d       	subi	r28, 0xDD	; 221
    a772:	d0 40       	sbci	r29, 0x00	; 0
    a774:	6d 93       	st	X+, r22
    a776:	7d 93       	st	X+, r23
    a778:	8d 93       	st	X+, r24
    a77a:	9d 93       	st	X+, r25
    a77c:	c3 52       	subi	r28, 0x23	; 35
    a77e:	df 4f       	sbci	r29, 0xFF	; 255
    a780:	a8 83       	st	Y, r26
    a782:	b9 83       	std	Y+1, r27	; 0x01
    a784:	cd 5d       	subi	r28, 0xDD	; 221
    a786:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosBTotal += cosAcosB[i];
    a788:	c5 53       	subi	r28, 0x35	; 53
    a78a:	df 4f       	sbci	r29, 0xFF	; 255
    a78c:	68 81       	ld	r22, Y
    a78e:	79 81       	ldd	r23, Y+1	; 0x01
    a790:	8a 81       	ldd	r24, Y+2	; 0x02
    a792:	9b 81       	ldd	r25, Y+3	; 0x03
    a794:	cb 5c       	subi	r28, 0xCB	; 203
    a796:	d0 40       	sbci	r29, 0x00	; 0
    a798:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a79c:	c5 53       	subi	r28, 0x35	; 53
    a79e:	df 4f       	sbci	r29, 0xFF	; 255
    a7a0:	68 83       	st	Y, r22
    a7a2:	79 83       	std	Y+1, r23	; 0x01
    a7a4:	8a 83       	std	Y+2, r24	; 0x02
    a7a6:	9b 83       	std	Y+3, r25	; 0x03
    a7a8:	cb 5c       	subi	r28, 0xCB	; 203
    a7aa:	d0 40       	sbci	r29, 0x00	; 0
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    a7ac:	1f 5f       	subi	r17, 0xFF	; 255
    a7ae:	14 32       	cpi	r17, 0x24	; 36
    a7b0:	09 f4       	brne	.+2      	; 0xa7b4 <calculate_error+0x39e>
    a7b2:	d3 c0       	rjmp	.+422    	; 0xa95a <calculate_error+0x544>
    a7b4:	10 9f       	mul	r17, r16
    a7b6:	81 2d       	mov	r24, r1
    a7b8:	11 24       	eor	r1, r1
    a7ba:	86 95       	lsr	r24
    a7bc:	86 95       	lsr	r24
    a7be:	98 2f       	mov	r25, r24
    a7c0:	99 0f       	add	r25, r25
    a7c2:	89 0f       	add	r24, r25
    a7c4:	88 0f       	add	r24, r24
    a7c6:	e1 2f       	mov	r30, r17
    a7c8:	e8 1b       	sub	r30, r24
    a7ca:	f0 e0       	ldi	r31, 0x00	; 0
    a7cc:	ee 0f       	add	r30, r30
    a7ce:	ff 1f       	adc	r31, r31
    a7d0:	ee 0f       	add	r30, r30
    a7d2:	ff 1f       	adc	r31, r31
    a7d4:	ee 0f       	add	r30, r30
    a7d6:	ff 1f       	adc	r31, r31
    a7d8:	e7 53       	subi	r30, 0x37	; 55
    a7da:	fc 4d       	sbci	r31, 0xDC	; 220
    a7dc:	40 80       	ld	r4, Z
    a7de:	51 80       	ldd	r5, Z+1	; 0x01
    a7e0:	62 80       	ldd	r6, Z+2	; 0x02
    a7e2:	73 80       	ldd	r7, Z+3	; 0x03
    a7e4:	84 81       	ldd	r24, Z+4	; 0x04
    a7e6:	95 81       	ldd	r25, Z+5	; 0x05
    a7e8:	a6 81       	ldd	r26, Z+6	; 0x06
    a7ea:	b7 81       	ldd	r27, Z+7	; 0x07
    a7ec:	c9 52       	subi	r28, 0x29	; 41
    a7ee:	df 4f       	sbci	r29, 0xFF	; 255
    a7f0:	88 83       	st	Y, r24
    a7f2:	99 83       	std	Y+1, r25	; 0x01
    a7f4:	aa 83       	std	Y+2, r26	; 0x02
    a7f6:	bb 83       	std	Y+3, r27	; 0x03
    a7f8:	c7 5d       	subi	r28, 0xD7	; 215
    a7fa:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    a7fc:	10 9f       	mul	r17, r16
    a7fe:	81 2d       	mov	r24, r1
    a800:	11 24       	eor	r1, r1
    a802:	86 95       	lsr	r24
    a804:	86 95       	lsr	r24
    a806:	91 e9       	ldi	r25, 0x91	; 145
    a808:	e9 2e       	mov	r14, r25
    a80a:	f1 2c       	mov	r15, r1
    a80c:	ec 0e       	add	r14, r28
    a80e:	fd 1e       	adc	r15, r29
    a810:	b8 e0       	ldi	r27, 0x08	; 8
    a812:	8b 9f       	mul	r24, r27
    a814:	e0 0c       	add	r14, r0
    a816:	f1 1c       	adc	r15, r1
    a818:	11 24       	eor	r1, r1
    a81a:	d7 01       	movw	r26, r14
    a81c:	8d 91       	ld	r24, X+
    a81e:	9d 91       	ld	r25, X+
    a820:	0d 90       	ld	r0, X+
    a822:	bc 91       	ld	r27, X
    a824:	a0 2d       	mov	r26, r0
    a826:	c1 53       	subi	r28, 0x31	; 49
    a828:	df 4f       	sbci	r29, 0xFF	; 255
    a82a:	88 83       	st	Y, r24
    a82c:	99 83       	std	Y+1, r25	; 0x01
    a82e:	aa 83       	std	Y+2, r26	; 0x02
    a830:	bb 83       	std	Y+3, r27	; 0x03
    a832:	cf 5c       	subi	r28, 0xCF	; 207
    a834:	d0 40       	sbci	r29, 0x00	; 0
    a836:	9c 01       	movw	r18, r24
    a838:	ad 01       	movw	r20, r26
    a83a:	cd 51       	subi	r28, 0x1D	; 29
    a83c:	df 4f       	sbci	r29, 0xFF	; 255
    a83e:	68 81       	ld	r22, Y
    a840:	79 81       	ldd	r23, Y+1	; 0x01
    a842:	8a 81       	ldd	r24, Y+2	; 0x02
    a844:	9b 81       	ldd	r25, Y+3	; 0x03
    a846:	c3 5e       	subi	r28, 0xE3	; 227
    a848:	d0 40       	sbci	r29, 0x00	; 0
    a84a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a84e:	a3 01       	movw	r20, r6
    a850:	92 01       	movw	r18, r4
    a852:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a856:	cd 53       	subi	r28, 0x3D	; 61
    a858:	df 4f       	sbci	r29, 0xFF	; 255
    a85a:	68 83       	st	Y, r22
    a85c:	79 83       	std	Y+1, r23	; 0x01
    a85e:	8a 83       	std	Y+2, r24	; 0x02
    a860:	9b 83       	std	Y+3, r25	; 0x03
    a862:	c3 5c       	subi	r28, 0xC3	; 195
    a864:	d0 40       	sbci	r29, 0x00	; 0
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    a866:	d7 01       	movw	r26, r14
    a868:	14 96       	adiw	r26, 0x04	; 4
    a86a:	8d 91       	ld	r24, X+
    a86c:	9d 91       	ld	r25, X+
    a86e:	0d 90       	ld	r0, X+
    a870:	bc 91       	ld	r27, X
    a872:	a0 2d       	mov	r26, r0
    a874:	cd 52       	subi	r28, 0x2D	; 45
    a876:	df 4f       	sbci	r29, 0xFF	; 255
    a878:	88 83       	st	Y, r24
    a87a:	99 83       	std	Y+1, r25	; 0x01
    a87c:	aa 83       	std	Y+2, r26	; 0x02
    a87e:	bb 83       	std	Y+3, r27	; 0x03
    a880:	c3 5d       	subi	r28, 0xD3	; 211
    a882:	d0 40       	sbci	r29, 0x00	; 0
    a884:	9c 01       	movw	r18, r24
    a886:	ad 01       	movw	r20, r26
    a888:	c9 51       	subi	r28, 0x19	; 25
    a88a:	df 4f       	sbci	r29, 0xFF	; 255
    a88c:	68 81       	ld	r22, Y
    a88e:	79 81       	ldd	r23, Y+1	; 0x01
    a890:	8a 81       	ldd	r24, Y+2	; 0x02
    a892:	9b 81       	ldd	r25, Y+3	; 0x03
    a894:	c7 5e       	subi	r28, 0xE7	; 231
    a896:	d0 40       	sbci	r29, 0x00	; 0
    a898:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a89c:	c9 52       	subi	r28, 0x29	; 41
    a89e:	df 4f       	sbci	r29, 0xFF	; 255
    a8a0:	28 81       	ld	r18, Y
    a8a2:	39 81       	ldd	r19, Y+1	; 0x01
    a8a4:	4a 81       	ldd	r20, Y+2	; 0x02
    a8a6:	5b 81       	ldd	r21, Y+3	; 0x03
    a8a8:	c7 5d       	subi	r28, 0xD7	; 215
    a8aa:	d0 40       	sbci	r29, 0x00	; 0
    a8ac:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a8b0:	6b 01       	movw	r12, r22
    a8b2:	7c 01       	movw	r14, r24
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
    a8b4:	cd 53       	subi	r28, 0x3D	; 61
    a8b6:	df 4f       	sbci	r29, 0xFF	; 255
    a8b8:	28 81       	ld	r18, Y
    a8ba:	39 81       	ldd	r19, Y+1	; 0x01
    a8bc:	4a 81       	ldd	r20, Y+2	; 0x02
    a8be:	5b 81       	ldd	r21, Y+3	; 0x03
    a8c0:	c3 5c       	subi	r28, 0xC3	; 195
    a8c2:	d0 40       	sbci	r29, 0x00	; 0
    a8c4:	ca 01       	movw	r24, r20
    a8c6:	b9 01       	movw	r22, r18
    a8c8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a8cc:	4b 01       	movw	r8, r22
    a8ce:	5c 01       	movw	r10, r24
    a8d0:	a7 01       	movw	r20, r14
    a8d2:	96 01       	movw	r18, r12
    a8d4:	c7 01       	movw	r24, r14
    a8d6:	b6 01       	movw	r22, r12
    a8d8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a8dc:	9b 01       	movw	r18, r22
    a8de:	ac 01       	movw	r20, r24
    a8e0:	c5 01       	movw	r24, r10
    a8e2:	b4 01       	movw	r22, r8
    a8e4:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a8e8:	c1 52       	subi	r28, 0x21	; 33
    a8ea:	df 4f       	sbci	r29, 0xFF	; 255
    a8ec:	68 83       	st	Y, r22
    a8ee:	79 83       	std	Y+1, r23	; 0x01
    a8f0:	8a 83       	std	Y+2, r24	; 0x02
    a8f2:	9b 83       	std	Y+3, r25	; 0x03
    a8f4:	cf 5d       	subi	r28, 0xDF	; 223
    a8f6:	d0 40       	sbci	r29, 0x00	; 0

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    a8f8:	a3 01       	movw	r20, r6
    a8fa:	92 01       	movw	r18, r4
    a8fc:	cd 53       	subi	r28, 0x3D	; 61
    a8fe:	df 4f       	sbci	r29, 0xFF	; 255
    a900:	68 81       	ld	r22, Y
    a902:	79 81       	ldd	r23, Y+1	; 0x01
    a904:	8a 81       	ldd	r24, Y+2	; 0x02
    a906:	9b 81       	ldd	r25, Y+3	; 0x03
    a908:	c3 5c       	subi	r28, 0xC3	; 195
    a90a:	d0 40       	sbci	r29, 0x00	; 0
    a90c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a910:	4b 01       	movw	r8, r22
    a912:	5c 01       	movw	r10, r24
    a914:	c9 52       	subi	r28, 0x29	; 41
    a916:	df 4f       	sbci	r29, 0xFF	; 255
    a918:	28 81       	ld	r18, Y
    a91a:	39 81       	ldd	r19, Y+1	; 0x01
    a91c:	4a 81       	ldd	r20, Y+2	; 0x02
    a91e:	5b 81       	ldd	r21, Y+3	; 0x03
    a920:	c7 5d       	subi	r28, 0xD7	; 215
    a922:	d0 40       	sbci	r29, 0x00	; 0
    a924:	c7 01       	movw	r24, r14
    a926:	b6 01       	movw	r22, r12
    a928:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    a92c:	9b 01       	movw	r18, r22
    a92e:	ac 01       	movw	r20, r24
    a930:	c5 01       	movw	r24, r10
    a932:	b4 01       	movw	r22, r8
    a934:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a938:	4b 01       	movw	r8, r22
    a93a:	5c 01       	movw	r10, r24
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
    a93c:	20 e0       	ldi	r18, 0x00	; 0
    a93e:	30 e0       	ldi	r19, 0x00	; 0
    a940:	a9 01       	movw	r20, r18
    a942:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    a946:	87 ff       	sbrs	r24, 7
    a948:	98 ce       	rjmp	.-720    	; 0xa67a <calculate_error+0x264>
    a94a:	81 2c       	mov	r8, r1
    a94c:	91 2c       	mov	r9, r1
    a94e:	54 01       	movw	r10, r8
    a950:	94 ce       	rjmp	.-728    	; 0xa67a <calculate_error+0x264>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    a952:	c1 2c       	mov	r12, r1
    a954:	d1 2c       	mov	r13, r1
    a956:	76 01       	movw	r14, r12
    a958:	c1 ce       	rjmp	.-638    	; 0xa6dc <calculate_error+0x2c6>
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    a95a:	c1 2c       	mov	r12, r1
    a95c:	d1 2c       	mov	r13, r1
    a95e:	76 01       	movw	r14, r12
    a960:	c5 51       	subi	r28, 0x15	; 21
    a962:	df 4f       	sbci	r29, 0xFF	; 255
    a964:	08 81       	ld	r16, Y
    a966:	19 81       	ldd	r17, Y+1	; 0x01
    a968:	cb 5e       	subi	r28, 0xEB	; 235
    a96a:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
    a96c:	d8 01       	movw	r26, r16
    a96e:	6d 91       	ld	r22, X+
    a970:	7d 91       	ld	r23, X+
    a972:	8d 01       	movw	r16, r26
    a974:	f1 01       	movw	r30, r2
    a976:	41 90       	ld	r4, Z+
    a978:	51 90       	ld	r5, Z+
    a97a:	61 90       	ld	r6, Z+
    a97c:	71 90       	ld	r7, Z+
    a97e:	1f 01       	movw	r2, r30
    a980:	07 2e       	mov	r0, r23
    a982:	00 0c       	add	r0, r0
    a984:	88 0b       	sbc	r24, r24
    a986:	99 0b       	sbc	r25, r25
    a988:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    a98c:	c9 53       	subi	r28, 0x39	; 57
    a98e:	df 4f       	sbci	r29, 0xFF	; 255
    a990:	28 81       	ld	r18, Y
    a992:	39 81       	ldd	r19, Y+1	; 0x01
    a994:	4a 81       	ldd	r20, Y+2	; 0x02
    a996:	5b 81       	ldd	r21, Y+3	; 0x03
    a998:	c7 5c       	subi	r28, 0xC7	; 199
    a99a:	d0 40       	sbci	r29, 0x00	; 0
    a99c:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    a9a0:	4b 01       	movw	r8, r22
    a9a2:	5c 01       	movw	r10, r24
    a9a4:	c5 53       	subi	r28, 0x35	; 53
    a9a6:	df 4f       	sbci	r29, 0xFF	; 255
    a9a8:	28 81       	ld	r18, Y
    a9aa:	39 81       	ldd	r19, Y+1	; 0x01
    a9ac:	4a 81       	ldd	r20, Y+2	; 0x02
    a9ae:	5b 81       	ldd	r21, Y+3	; 0x03
    a9b0:	cb 5c       	subi	r28, 0xCB	; 203
    a9b2:	d0 40       	sbci	r29, 0x00	; 0
    a9b4:	c3 01       	movw	r24, r6
    a9b6:	b2 01       	movw	r22, r4
    a9b8:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    a9bc:	9b 01       	movw	r18, r22
    a9be:	ac 01       	movw	r20, r24
    a9c0:	c5 01       	movw	r24, r10
    a9c2:	b4 01       	movw	r22, r8
    a9c4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    a9c8:	9b 01       	movw	r18, r22
    a9ca:	ac 01       	movw	r20, r24
    a9cc:	5f 77       	andi	r21, 0x7F	; 127
    a9ce:	c7 01       	movw	r24, r14
    a9d0:	b6 01       	movw	r22, r12
    a9d2:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    a9d6:	6b 01       	movw	r12, r22
    a9d8:	7c 01       	movw	r14, r24
		measTotal += fast_bm[i];
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
    a9da:	cf 53       	subi	r28, 0x3F	; 63
    a9dc:	df 4f       	sbci	r29, 0xFF	; 255
    a9de:	88 81       	ld	r24, Y
    a9e0:	99 81       	ldd	r25, Y+1	; 0x01
    a9e2:	c1 5c       	subi	r28, 0xC1	; 193
    a9e4:	d0 40       	sbci	r29, 0x00	; 0
    a9e6:	82 15       	cp	r24, r2
    a9e8:	93 05       	cpc	r25, r3
    a9ea:	09 f0       	breq	.+2      	; 0xa9ee <calculate_error+0x5d8>
    a9ec:	bf cf       	rjmp	.-130    	; 0xa96c <calculate_error+0x556>
		//printf("}");
		//if(e<5) printf(",");
	//}
	//printf("}},\r\n");
	return conf;
}
    a9ee:	c7 01       	movw	r24, r14
    a9f0:	b6 01       	movw	r22, r12
    a9f2:	c4 51       	subi	r28, 0x14	; 20
    a9f4:	df 4f       	sbci	r29, 0xFF	; 255
    a9f6:	cd bf       	out	0x3d, r28	; 61
    a9f8:	de bf       	out	0x3e, r29	; 62
    a9fa:	df 91       	pop	r29
    a9fc:	cf 91       	pop	r28
    a9fe:	1f 91       	pop	r17
    aa00:	0f 91       	pop	r16
    aa02:	ff 90       	pop	r15
    aa04:	ef 90       	pop	r14
    aa06:	df 90       	pop	r13
    aa08:	cf 90       	pop	r12
    aa0a:	bf 90       	pop	r11
    aa0c:	af 90       	pop	r10
    aa0e:	9f 90       	pop	r9
    aa10:	8f 90       	pop	r8
    aa12:	7f 90       	pop	r7
    aa14:	6f 90       	pop	r6
    aa16:	5f 90       	pop	r5
    aa18:	4f 90       	pop	r4
    aa1a:	3f 90       	pop	r3
    aa1c:	2f 90       	pop	r2
    aa1e:	08 95       	ret
    aa20:	80 e0       	ldi	r24, 0x00	; 0
    aa22:	90 e0       	ldi	r25, 0x00	; 0
    aa24:	a8 e3       	ldi	r26, 0x38	; 56
    aa26:	b2 ec       	ldi	r27, 0xC2	; 194
    aa28:	cd 53       	subi	r28, 0x3D	; 61
    aa2a:	df 4f       	sbci	r29, 0xFF	; 255
    aa2c:	88 83       	st	Y, r24
    aa2e:	99 83       	std	Y+1, r25	; 0x01
    aa30:	aa 83       	std	Y+2, r26	; 0x02
    aa32:	bb 83       	std	Y+3, r27	; 0x03
    aa34:	c3 5c       	subi	r28, 0xC3	; 195
    aa36:	d0 40       	sbci	r29, 0x00	; 0

	return magicRangeFunc(total);
}

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
    aa38:	81 2c       	mov	r8, r1
    aa3a:	91 2c       	mov	r9, r1
    aa3c:	68 e3       	ldi	r22, 0x38	; 56
    aa3e:	a6 2e       	mov	r10, r22
    aa40:	62 e4       	ldi	r22, 0x42	; 66
    aa42:	b6 2e       	mov	r11, r22
    aa44:	19 cd       	rjmp	.-1486   	; 0xa478 <calculate_error+0x62>

0000aa46 <calculate_bearing_and_heading>:
	//}
	//printf("}},\r\n");
	return conf;
}

void calculate_bearing_and_heading(float* bearing, float* heading){
    aa46:	2f 92       	push	r2
    aa48:	3f 92       	push	r3
    aa4a:	4f 92       	push	r4
    aa4c:	5f 92       	push	r5
    aa4e:	6f 92       	push	r6
    aa50:	7f 92       	push	r7
    aa52:	8f 92       	push	r8
    aa54:	9f 92       	push	r9
    aa56:	af 92       	push	r10
    aa58:	bf 92       	push	r11
    aa5a:	cf 92       	push	r12
    aa5c:	df 92       	push	r13
    aa5e:	ef 92       	push	r14
    aa60:	ff 92       	push	r15
    aa62:	0f 93       	push	r16
    aa64:	1f 93       	push	r17
    aa66:	cf 93       	push	r28
    aa68:	df 93       	push	r29
    aa6a:	cd b7       	in	r28, 0x3d	; 61
    aa6c:	de b7       	in	r29, 0x3e	; 62
    aa6e:	6c 97       	sbiw	r28, 0x1c	; 28
    aa70:	cd bf       	out	0x3d, r28	; 61
    aa72:	de bf       	out	0x3e, r29	; 62
    aa74:	89 8f       	std	Y+25, r24	; 0x19
    aa76:	9a 8f       	std	Y+26, r25	; 0x1a
    aa78:	6b 8f       	std	Y+27, r22	; 0x1b
    aa7a:	7c 8f       	std	Y+28, r23	; 0x1c
    aa7c:	2b eb       	ldi	r18, 0xBB	; 187
    aa7e:	22 2e       	mov	r2, r18
    aa80:	25 e2       	ldi	r18, 0x25	; 37
    aa82:	32 2e       	mov	r3, r18
    aa84:	87 ed       	ldi	r24, 0xD7	; 215
    aa86:	93 eb       	ldi	r25, 0xB3	; 179
    aa88:	ad e5       	ldi	r26, 0x5D	; 93
    aa8a:	bf e3       	ldi	r27, 0x3F	; 63
    aa8c:	8d 8b       	std	Y+21, r24	; 0x15
    aa8e:	9e 8b       	std	Y+22, r25	; 0x16
    aa90:	af 8b       	std	Y+23, r26	; 0x17
    aa92:	b8 8f       	std	Y+24, r27	; 0x18
    aa94:	80 e0       	ldi	r24, 0x00	; 0
    aa96:	90 e0       	ldi	r25, 0x00	; 0
    aa98:	a0 e0       	ldi	r26, 0x00	; 0
    aa9a:	bf eb       	ldi	r27, 0xBF	; 191
    aa9c:	89 8b       	std	Y+17, r24	; 0x11
    aa9e:	9a 8b       	std	Y+18, r25	; 0x12
    aaa0:	ab 8b       	std	Y+19, r26	; 0x13
    aaa2:	bc 8b       	std	Y+20, r27	; 0x14
    aaa4:	80 e0       	ldi	r24, 0x00	; 0
    aaa6:	90 e0       	ldi	r25, 0x00	; 0
    aaa8:	a0 e8       	ldi	r26, 0x80	; 128
    aaaa:	bf eb       	ldi	r27, 0xBF	; 191
    aaac:	8d 87       	std	Y+13, r24	; 0x0d
    aaae:	9e 87       	std	Y+14, r25	; 0x0e
    aab0:	af 87       	std	Y+15, r26	; 0x0f
    aab2:	b8 8b       	std	Y+16, r27	; 0x10
    aab4:	19 86       	std	Y+9, r1	; 0x09
    aab6:	1a 86       	std	Y+10, r1	; 0x0a
    aab8:	1b 86       	std	Y+11, r1	; 0x0b
    aaba:	1c 86       	std	Y+12, r1	; 0x0c
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    aabc:	10 e0       	ldi	r17, 0x00	; 0
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;
    aabe:	41 2c       	mov	r4, r1
    aac0:	51 2c       	mov	r5, r1
    aac2:	32 01       	movw	r6, r4
void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
    aac4:	53 01       	movw	r10, r6
    aac6:	42 01       	movw	r8, r4

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
    aac8:	4d 82       	std	Y+5, r4	; 0x05
    aaca:	5e 82       	std	Y+6, r5	; 0x06
    aacc:	6f 82       	std	Y+7, r6	; 0x07
    aace:	78 86       	std	Y+8, r7	; 0x08
}

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
    aad0:	49 82       	std	Y+1, r4	; 0x01
    aad2:	5a 82       	std	Y+2, r5	; 0x02
    aad4:	6b 82       	std	Y+3, r6	; 0x03
    aad6:	7c 82       	std	Y+4, r7	; 0x04
    aad8:	0b ea       	ldi	r16, 0xAB	; 171
    aada:	49 c0       	rjmp	.+146    	; 0xab6e <calculate_bearing_and_heading+0x128>
    aadc:	10 9f       	mul	r17, r16
    aade:	81 2d       	mov	r24, r1
    aae0:	11 24       	eor	r1, r1
    aae2:	86 95       	lsr	r24
    aae4:	86 95       	lsr	r24
    aae6:	98 2f       	mov	r25, r24
    aae8:	99 0f       	add	r25, r25
    aaea:	98 0f       	add	r25, r24
    aaec:	99 0f       	add	r25, r25
    aaee:	21 2f       	mov	r18, r17
    aaf0:	29 1b       	sub	r18, r25
    aaf2:	30 e0       	ldi	r19, 0x00	; 0
    aaf4:	e6 e0       	ldi	r30, 0x06	; 6
    aaf6:	f0 e0       	ldi	r31, 0x00	; 0
    aaf8:	e8 1b       	sub	r30, r24
    aafa:	f1 09       	sbc	r31, r1
    aafc:	cf 01       	movw	r24, r30
    aafe:	82 0f       	add	r24, r18
    ab00:	93 1f       	adc	r25, r19
    ab02:	66 e0       	ldi	r22, 0x06	; 6
    ab04:	70 e0       	ldi	r23, 0x00	; 0
    ab06:	0e 94 27 77 	call	0xee4e	; 0xee4e <__divmodhi4>
    ab0a:	fc 01       	movw	r30, r24
    ab0c:	ee 0f       	add	r30, r30
    ab0e:	ff 1f       	adc	r31, r31
    ab10:	ee 0f       	add	r30, r30
    ab12:	ff 1f       	adc	r31, r31
    ab14:	ee 0f       	add	r30, r30
    ab16:	ff 1f       	adc	r31, r31
    ab18:	e7 56       	subi	r30, 0x67	; 103
    ab1a:	fc 4d       	sbci	r31, 0xDC	; 220
    ab1c:	84 81       	ldd	r24, Z+4	; 0x04
    ab1e:	95 81       	ldd	r25, Z+5	; 0x05
    ab20:	a6 81       	ldd	r26, Z+6	; 0x06
    ab22:	b7 81       	ldd	r27, Z+7	; 0x07
    ab24:	89 87       	std	Y+9, r24	; 0x09
    ab26:	9a 87       	std	Y+10, r25	; 0x0a
    ab28:	ab 87       	std	Y+11, r26	; 0x0b
    ab2a:	bc 87       	std	Y+12, r27	; 0x0c
    ab2c:	80 81       	ld	r24, Z
    ab2e:	91 81       	ldd	r25, Z+1	; 0x01
    ab30:	a2 81       	ldd	r26, Z+2	; 0x02
    ab32:	b3 81       	ldd	r27, Z+3	; 0x03
    ab34:	8d 87       	std	Y+13, r24	; 0x0d
    ab36:	9e 87       	std	Y+14, r25	; 0x0e
    ab38:	af 87       	std	Y+15, r26	; 0x0f
    ab3a:	b8 8b       	std	Y+16, r27	; 0x10
    ab3c:	22 0f       	add	r18, r18
    ab3e:	33 1f       	adc	r19, r19
    ab40:	22 0f       	add	r18, r18
    ab42:	33 1f       	adc	r19, r19
    ab44:	22 0f       	add	r18, r18
    ab46:	33 1f       	adc	r19, r19
    ab48:	f9 01       	movw	r30, r18
    ab4a:	e7 50       	subi	r30, 0x07	; 7
    ab4c:	fc 4d       	sbci	r31, 0xDC	; 220
    ab4e:	84 81       	ldd	r24, Z+4	; 0x04
    ab50:	95 81       	ldd	r25, Z+5	; 0x05
    ab52:	a6 81       	ldd	r26, Z+6	; 0x06
    ab54:	b7 81       	ldd	r27, Z+7	; 0x07
    ab56:	89 8b       	std	Y+17, r24	; 0x11
    ab58:	9a 8b       	std	Y+18, r25	; 0x12
    ab5a:	ab 8b       	std	Y+19, r26	; 0x13
    ab5c:	bc 8b       	std	Y+20, r27	; 0x14
    ab5e:	80 81       	ld	r24, Z
    ab60:	91 81       	ldd	r25, Z+1	; 0x01
    ab62:	a2 81       	ldd	r26, Z+2	; 0x02
    ab64:	b3 81       	ldd	r27, Z+3	; 0x03
    ab66:	8d 8b       	std	Y+21, r24	; 0x15
    ab68:	9e 8b       	std	Y+22, r25	; 0x16
    ab6a:	af 8b       	std	Y+23, r26	; 0x17
    ab6c:	b8 8f       	std	Y+24, r27	; 0x18
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
		
		bearingX+=fast_bm[i]*getCosBearingBasis(i/6,i%6);
    ab6e:	d1 01       	movw	r26, r2
    ab70:	6d 91       	ld	r22, X+
    ab72:	7d 91       	ld	r23, X+
    ab74:	1d 01       	movw	r2, r26
    ab76:	07 2e       	mov	r0, r23
    ab78:	00 0c       	add	r0, r0
    ab7a:	88 0b       	sbc	r24, r24
    ab7c:	99 0b       	sbc	r25, r25
    ab7e:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    ab82:	6b 01       	movw	r12, r22
    ab84:	7c 01       	movw	r14, r24
    ab86:	2d 89       	ldd	r18, Y+21	; 0x15
    ab88:	3e 89       	ldd	r19, Y+22	; 0x16
    ab8a:	4f 89       	ldd	r20, Y+23	; 0x17
    ab8c:	58 8d       	ldd	r21, Y+24	; 0x18
    ab8e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    ab92:	9b 01       	movw	r18, r22
    ab94:	ac 01       	movw	r20, r24
    ab96:	69 81       	ldd	r22, Y+1	; 0x01
    ab98:	7a 81       	ldd	r23, Y+2	; 0x02
    ab9a:	8b 81       	ldd	r24, Y+3	; 0x03
    ab9c:	9c 81       	ldd	r25, Y+4	; 0x04
    ab9e:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    aba2:	69 83       	std	Y+1, r22	; 0x01
    aba4:	7a 83       	std	Y+2, r23	; 0x02
    aba6:	8b 83       	std	Y+3, r24	; 0x03
    aba8:	9c 83       	std	Y+4, r25	; 0x04
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
    abaa:	29 89       	ldd	r18, Y+17	; 0x11
    abac:	3a 89       	ldd	r19, Y+18	; 0x12
    abae:	4b 89       	ldd	r20, Y+19	; 0x13
    abb0:	5c 89       	ldd	r21, Y+20	; 0x14
    abb2:	c7 01       	movw	r24, r14
    abb4:	b6 01       	movw	r22, r12
    abb6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    abba:	9b 01       	movw	r18, r22
    abbc:	ac 01       	movw	r20, r24
    abbe:	6d 81       	ldd	r22, Y+5	; 0x05
    abc0:	7e 81       	ldd	r23, Y+6	; 0x06
    abc2:	8f 81       	ldd	r24, Y+7	; 0x07
    abc4:	98 85       	ldd	r25, Y+8	; 0x08
    abc6:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    abca:	6d 83       	std	Y+5, r22	; 0x05
    abcc:	7e 83       	std	Y+6, r23	; 0x06
    abce:	8f 83       	std	Y+7, r24	; 0x07
    abd0:	98 87       	std	Y+8, r25	; 0x08
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
    abd2:	2d 85       	ldd	r18, Y+13	; 0x0d
    abd4:	3e 85       	ldd	r19, Y+14	; 0x0e
    abd6:	4f 85       	ldd	r20, Y+15	; 0x0f
    abd8:	58 89       	ldd	r21, Y+16	; 0x10
    abda:	c7 01       	movw	r24, r14
    abdc:	b6 01       	movw	r22, r12
    abde:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    abe2:	9b 01       	movw	r18, r22
    abe4:	ac 01       	movw	r20, r24
    abe6:	c5 01       	movw	r24, r10
    abe8:	b4 01       	movw	r22, r8
    abea:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    abee:	4b 01       	movw	r8, r22
    abf0:	5c 01       	movw	r10, r24
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
    abf2:	29 85       	ldd	r18, Y+9	; 0x09
    abf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    abf6:	4b 85       	ldd	r20, Y+11	; 0x0b
    abf8:	5c 85       	ldd	r21, Y+12	; 0x0c
    abfa:	c7 01       	movw	r24, r14
    abfc:	b6 01       	movw	r22, r12
    abfe:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    ac02:	9b 01       	movw	r18, r22
    ac04:	ac 01       	movw	r20, r24
    ac06:	c3 01       	movw	r24, r6
    ac08:	b2 01       	movw	r22, r4
    ac0a:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    ac0e:	2b 01       	movw	r4, r22
    ac10:	3c 01       	movw	r6, r24
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    ac12:	1f 5f       	subi	r17, 0xFF	; 255
    ac14:	14 32       	cpi	r17, 0x24	; 36
    ac16:	09 f0       	breq	.+2      	; 0xac1a <calculate_bearing_and_heading+0x1d4>
    ac18:	61 cf       	rjmp	.-318    	; 0xaadc <calculate_bearing_and_heading+0x96>
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
	}
	
	*bearing = atan2f(bearingY, bearingX);	
    ac1a:	29 81       	ldd	r18, Y+1	; 0x01
    ac1c:	3a 81       	ldd	r19, Y+2	; 0x02
    ac1e:	4b 81       	ldd	r20, Y+3	; 0x03
    ac20:	5c 81       	ldd	r21, Y+4	; 0x04
    ac22:	6d 81       	ldd	r22, Y+5	; 0x05
    ac24:	7e 81       	ldd	r23, Y+6	; 0x06
    ac26:	8f 81       	ldd	r24, Y+7	; 0x07
    ac28:	98 85       	ldd	r25, Y+8	; 0x08
    ac2a:	0e 94 c7 71 	call	0xe38e	; 0xe38e <atan2>
    ac2e:	a9 8d       	ldd	r26, Y+25	; 0x19
    ac30:	ba 8d       	ldd	r27, Y+26	; 0x1a
    ac32:	6d 93       	st	X+, r22
    ac34:	7d 93       	st	X+, r23
    ac36:	8d 93       	st	X+, r24
    ac38:	9c 93       	st	X, r25
    ac3a:	13 97       	sbiw	r26, 0x03	; 3
	*heading = atan2f(headingY, headingX);
    ac3c:	a5 01       	movw	r20, r10
    ac3e:	94 01       	movw	r18, r8
    ac40:	c3 01       	movw	r24, r6
    ac42:	b2 01       	movw	r22, r4
    ac44:	0e 94 c7 71 	call	0xe38e	; 0xe38e <atan2>
    ac48:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ac4a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ac4c:	60 83       	st	Z, r22
    ac4e:	71 83       	std	Z+1, r23	; 0x01
    ac50:	82 83       	std	Z+2, r24	; 0x02
    ac52:	93 83       	std	Z+3, r25	; 0x03
}
    ac54:	6c 96       	adiw	r28, 0x1c	; 28
    ac56:	cd bf       	out	0x3d, r28	; 61
    ac58:	de bf       	out	0x3e, r29	; 62
    ac5a:	df 91       	pop	r29
    ac5c:	cf 91       	pop	r28
    ac5e:	1f 91       	pop	r17
    ac60:	0f 91       	pop	r16
    ac62:	ff 90       	pop	r15
    ac64:	ef 90       	pop	r14
    ac66:	df 90       	pop	r13
    ac68:	cf 90       	pop	r12
    ac6a:	bf 90       	pop	r11
    ac6c:	af 90       	pop	r10
    ac6e:	9f 90       	pop	r9
    ac70:	8f 90       	pop	r8
    ac72:	7f 90       	pop	r7
    ac74:	6f 90       	pop	r6
    ac76:	5f 90       	pop	r5
    ac78:	4f 90       	pop	r4
    ac7a:	3f 90       	pop	r3
    ac7c:	2f 90       	pop	r2
    ac7e:	08 95       	ret

0000ac80 <use_rnb_data>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		rnbProcessingFlag = 0;
	}
}

void use_rnb_data(){
    ac80:	2f 92       	push	r2
    ac82:	3f 92       	push	r3
    ac84:	4f 92       	push	r4
    ac86:	5f 92       	push	r5
    ac88:	6f 92       	push	r6
    ac8a:	7f 92       	push	r7
    ac8c:	8f 92       	push	r8
    ac8e:	9f 92       	push	r9
    ac90:	af 92       	push	r10
    ac92:	bf 92       	push	r11
    ac94:	cf 92       	push	r12
    ac96:	df 92       	push	r13
    ac98:	ef 92       	push	r14
    ac9a:	ff 92       	push	r15
    ac9c:	0f 93       	push	r16
    ac9e:	1f 93       	push	r17
    aca0:	cf 93       	push	r28
    aca2:	df 93       	push	r29
    aca4:	cd b7       	in	r28, 0x3d	; 61
    aca6:	de b7       	in	r29, 0x3e	; 62
    aca8:	2c 97       	sbiw	r28, 0x0c	; 12
    acaa:	cd bf       	out	0x3d, r28	; 61
    acac:	de bf       	out	0x3e, r29	; 62
    acae:	ab eb       	ldi	r26, 0xBB	; 187
    acb0:	b5 e2       	ldi	r27, 0x25	; 37
    acb2:	03 e0       	ldi	r16, 0x03	; 3
    acb4:	16 e2       	ldi	r17, 0x26	; 38
	*heading = atan2f(headingY, headingX);
}

static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
    acb6:	c1 2c       	mov	r12, r1
    acb8:	d1 2c       	mov	r13, r1
	uint8_t allColZeroCheck = 0b00111111;
    acba:	6f e3       	ldi	r22, 0x3F	; 63
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		rnbProcessingFlag = 0;
	}
}

void use_rnb_data(){
    acbc:	fd 01       	movw	r30, r26
    acbe:	20 e0       	ldi	r18, 0x00	; 0
    acc0:	30 e0       	ldi	r19, 0x00	; 0
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			val = brightMeas[e][s];
    acc2:	41 91       	ld	r20, Z+
    acc4:	51 91       	ld	r21, Z+
			allColZeroCheck &= ~((!!val)<<s);	
    acc6:	81 e0       	ldi	r24, 0x01	; 1
    acc8:	90 e0       	ldi	r25, 0x00	; 0
    acca:	41 15       	cp	r20, r1
    accc:	51 05       	cpc	r21, r1
    acce:	11 f4       	brne	.+4      	; 0xacd4 <use_rnb_data+0x54>
    acd0:	80 e0       	ldi	r24, 0x00	; 0
    acd2:	90 e0       	ldi	r25, 0x00	; 0
    acd4:	02 2e       	mov	r0, r18
    acd6:	01 c0       	rjmp	.+2      	; 0xacda <use_rnb_data+0x5a>
    acd8:	88 0f       	add	r24, r24
    acda:	0a 94       	dec	r0
    acdc:	ea f7       	brpl	.-6      	; 0xacd8 <use_rnb_data+0x58>
    acde:	80 95       	com	r24
    ace0:	68 23       	and	r22, r24
			//val=val*(val>0);
			brightMeas[e][s] = val;
			valSum+=val;	
    ace2:	c4 0e       	add	r12, r20
    ace4:	d5 1e       	adc	r13, r21
    ace6:	2f 5f       	subi	r18, 0xFF	; 255
    ace8:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    acea:	26 30       	cpi	r18, 0x06	; 6
    acec:	31 05       	cpc	r19, r1
    acee:	49 f7       	brne	.-46     	; 0xacc2 <use_rnb_data+0x42>
    acf0:	1c 96       	adiw	r26, 0x0c	; 12
static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
    acf2:	0a 17       	cp	r16, r26
    acf4:	1b 07       	cpc	r17, r27
    acf6:	11 f7       	brne	.-60     	; 0xacbc <use_rnb_data+0x3c>
    acf8:	e6 2e       	mov	r14, r22
    acfa:	f1 2c       	mov	r15, r1
    acfc:	81 2c       	mov	r8, r1
    acfe:	91 2c       	mov	r9, r1
    ad00:	a1 2c       	mov	r10, r1
    ad02:	b1 2c       	mov	r11, r1
    ad04:	e0 e0       	ldi	r30, 0x00	; 0
    ad06:	40 91 03 26 	lds	r20, 0x2603	; 0x802603 <sensorHealthHistory>
    ad0a:	50 91 04 26 	lds	r21, 0x2604	; 0x802604 <sensorHealthHistory+0x1>
    ad0e:	60 91 05 26 	lds	r22, 0x2605	; 0x802605 <sensorHealthHistory+0x2>
    ad12:	70 91 06 26 	lds	r23, 0x2606	; 0x802606 <sensorHealthHistory+0x3>
	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    ad16:	0f e0       	ldi	r16, 0x0F	; 15
    ad18:	10 e0       	ldi	r17, 0x00	; 0
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    ad1a:	66 24       	eor	r6, r6
    ad1c:	63 94       	inc	r6
    ad1e:	71 2c       	mov	r7, r1
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    ad20:	26 e8       	ldi	r18, 0x86	; 134
    ad22:	22 2e       	mov	r2, r18
    ad24:	2b e0       	ldi	r18, 0x0B	; 11
    ad26:	32 2e       	mov	r3, r18
    ad28:	34 c0       	rjmp	.+104    	; 0xad92 <use_rnb_data+0x112>
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    ad2a:	c3 01       	movw	r24, r6
    ad2c:	08 2c       	mov	r0, r8
    ad2e:	02 c0       	rjmp	.+4      	; 0xad34 <use_rnb_data+0xb4>
    ad30:	88 0f       	add	r24, r24
    ad32:	99 1f       	adc	r25, r25
    ad34:	0a 94       	dec	r0
    ad36:	e2 f7       	brpl	.-8      	; 0xad30 <use_rnb_data+0xb0>
    ad38:	09 2e       	mov	r0, r25
    ad3a:	00 0c       	add	r0, r0
    ad3c:	aa 0b       	sbc	r26, r26
    ad3e:	bb 0b       	sbc	r27, r27
    ad40:	84 0f       	add	r24, r20
    ad42:	95 1f       	adc	r25, r21
    ad44:	a6 1f       	adc	r26, r22
    ad46:	b7 1f       	adc	r27, r23
    ad48:	ac 01       	movw	r20, r24
    ad4a:	bd 01       	movw	r22, r26
    ad4c:	80 93 03 26 	sts	0x2603, r24	; 0x802603 <sensorHealthHistory>
    ad50:	90 93 04 26 	sts	0x2604, r25	; 0x802604 <sensorHealthHistory+0x1>
    ad54:	a0 93 05 26 	sts	0x2605, r26	; 0x802605 <sensorHealthHistory+0x2>
    ad58:	b0 93 06 26 	sts	0x2606, r27	; 0x802606 <sensorHealthHistory+0x3>
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
    ad5c:	05 2c       	mov	r0, r5
    ad5e:	04 c0       	rjmp	.+8      	; 0xad68 <use_rnb_data+0xe8>
    ad60:	b6 95       	lsr	r27
    ad62:	a7 95       	ror	r26
    ad64:	97 95       	ror	r25
    ad66:	87 95       	ror	r24
    ad68:	0a 94       	dec	r0
    ad6a:	d2 f7       	brpl	.-12     	; 0xad60 <use_rnb_data+0xe0>
    ad6c:	8f 70       	andi	r24, 0x0F	; 15
    ad6e:	99 27       	eor	r25, r25
    ad70:	aa 27       	eor	r26, r26
    ad72:	bb 27       	eor	r27, r27
    ad74:	0f 97       	sbiw	r24, 0x0f	; 15
    ad76:	a1 05       	cpc	r26, r1
    ad78:	b1 05       	cpc	r27, r1
    ad7a:	09 f4       	brne	.+2      	; 0xad7e <use_rnb_data+0xfe>
    ad7c:	8f c1       	rjmp	.+798    	; 0xb09c <use_rnb_data+0x41c>
    ad7e:	8f ef       	ldi	r24, 0xFF	; 255
    ad80:	a8 1a       	sub	r10, r24
    ad82:	b8 0a       	sbc	r11, r24
    ad84:	94 e0       	ldi	r25, 0x04	; 4
    ad86:	89 0e       	add	r8, r25
    ad88:	91 1c       	adc	r9, r1
			valSum+=val;	
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
    ad8a:	a6 e0       	ldi	r26, 0x06	; 6
    ad8c:	aa 16       	cp	r10, r26
    ad8e:	b1 04       	cpc	r11, r1
    ad90:	39 f1       	breq	.+78     	; 0xade0 <use_rnb_data+0x160>
		if(allColZeroCheck&(1<<i)){
    ad92:	95 01       	movw	r18, r10
    ad94:	c7 01       	movw	r24, r14
    ad96:	0a 2c       	mov	r0, r10
    ad98:	02 c0       	rjmp	.+4      	; 0xad9e <use_rnb_data+0x11e>
    ad9a:	95 95       	asr	r25
    ad9c:	87 95       	ror	r24
    ad9e:	0a 94       	dec	r0
    ada0:	e2 f7       	brpl	.-8      	; 0xad9a <use_rnb_data+0x11a>
			sensorHealthHistory+=(1<<(4*i));
    ada2:	58 2c       	mov	r5, r8
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
    ada4:	80 fd       	sbrc	r24, 0
    ada6:	c1 cf       	rjmp	.-126    	; 0xad2a <use_rnb_data+0xaa>
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    ada8:	c8 01       	movw	r24, r16
    adaa:	08 2c       	mov	r0, r8
    adac:	02 c0       	rjmp	.+4      	; 0xadb2 <use_rnb_data+0x132>
    adae:	88 0f       	add	r24, r24
    adb0:	99 1f       	adc	r25, r25
    adb2:	0a 94       	dec	r0
    adb4:	e2 f7       	brpl	.-8      	; 0xadae <use_rnb_data+0x12e>
    adb6:	80 95       	com	r24
    adb8:	90 95       	com	r25
    adba:	09 2e       	mov	r0, r25
    adbc:	00 0c       	add	r0, r0
    adbe:	aa 0b       	sbc	r26, r26
    adc0:	bb 0b       	sbc	r27, r27
    adc2:	84 23       	and	r24, r20
    adc4:	95 23       	and	r25, r21
    adc6:	a6 23       	and	r26, r22
    adc8:	b7 23       	and	r27, r23
    adca:	ac 01       	movw	r20, r24
    adcc:	bd 01       	movw	r22, r26
    adce:	80 93 03 26 	sts	0x2603, r24	; 0x802603 <sensorHealthHistory>
    add2:	90 93 04 26 	sts	0x2604, r25	; 0x802604 <sensorHealthHistory+0x1>
    add6:	a0 93 05 26 	sts	0x2605, r26	; 0x802605 <sensorHealthHistory+0x2>
    adda:	b0 93 06 26 	sts	0x2606, r27	; 0x802606 <sensorHealthHistory+0x3>
    adde:	be cf       	rjmp	.-132    	; 0xad5c <use_rnb_data+0xdc>
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
			sensorHealthHistory&=~(0xF<<(4*i));
			problem = 1;
		}		
	}
	if(problem){
    ade0:	ee 23       	and	r30, r30
    ade2:	09 f4       	brne	.+2      	; 0xade6 <use_rnb_data+0x166>
    ade4:	57 c0       	rjmp	.+174    	; 0xae94 <use_rnb_data+0x214>
void set_rgb(uint8_t r, uint8_t g, uint8_t b);
void set_hsv(uint16_t h, uint8_t s, uint8_t v);
void hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t* r, uint8_t* g, uint8_t* b);

inline void warning_light_sequence(void){
	set_rgb(0,100,100); delay_ms(300); set_rgb(100,0,100); delay_ms(300); set_rgb(100,100,0); delay_ms(300); led_off();
    ade6:	44 e6       	ldi	r20, 0x64	; 100
    ade8:	64 e6       	ldi	r22, 0x64	; 100
    adea:	80 e0       	ldi	r24, 0x00	; 0
    adec:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    adf0:	8c e2       	ldi	r24, 0x2C	; 44
    adf2:	91 e0       	ldi	r25, 0x01	; 1
    adf4:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    adf8:	44 e6       	ldi	r20, 0x64	; 100
    adfa:	60 e0       	ldi	r22, 0x00	; 0
    adfc:	84 e6       	ldi	r24, 0x64	; 100
    adfe:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae02:	8c e2       	ldi	r24, 0x2C	; 44
    ae04:	91 e0       	ldi	r25, 0x01	; 1
    ae06:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae0a:	40 e0       	ldi	r20, 0x00	; 0
    ae0c:	64 e6       	ldi	r22, 0x64	; 100
    ae0e:	84 e6       	ldi	r24, 0x64	; 100
    ae10:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae14:	8c e2       	ldi	r24, 0x2C	; 44
    ae16:	91 e0       	ldi	r25, 0x01	; 1
    ae18:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae1c:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <led_off>
	set_rgb(0,100,100); delay_ms(300); set_rgb(100,0,100); delay_ms(300); set_rgb(100,100,0); delay_ms(300); led_off();
    ae20:	44 e6       	ldi	r20, 0x64	; 100
    ae22:	64 e6       	ldi	r22, 0x64	; 100
    ae24:	80 e0       	ldi	r24, 0x00	; 0
    ae26:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae2a:	8c e2       	ldi	r24, 0x2C	; 44
    ae2c:	91 e0       	ldi	r25, 0x01	; 1
    ae2e:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae32:	44 e6       	ldi	r20, 0x64	; 100
    ae34:	60 e0       	ldi	r22, 0x00	; 0
    ae36:	84 e6       	ldi	r24, 0x64	; 100
    ae38:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae3c:	8c e2       	ldi	r24, 0x2C	; 44
    ae3e:	91 e0       	ldi	r25, 0x01	; 1
    ae40:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae44:	40 e0       	ldi	r20, 0x00	; 0
    ae46:	64 e6       	ldi	r22, 0x64	; 100
    ae48:	84 e6       	ldi	r24, 0x64	; 100
    ae4a:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae4e:	8c e2       	ldi	r24, 0x2C	; 44
    ae50:	91 e0       	ldi	r25, 0x01	; 1
    ae52:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae56:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <led_off>
	set_rgb(0,100,100); delay_ms(300); set_rgb(100,0,100); delay_ms(300); set_rgb(100,100,0); delay_ms(300); led_off();
    ae5a:	44 e6       	ldi	r20, 0x64	; 100
    ae5c:	64 e6       	ldi	r22, 0x64	; 100
    ae5e:	80 e0       	ldi	r24, 0x00	; 0
    ae60:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae64:	8c e2       	ldi	r24, 0x2C	; 44
    ae66:	91 e0       	ldi	r25, 0x01	; 1
    ae68:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae6c:	44 e6       	ldi	r20, 0x64	; 100
    ae6e:	60 e0       	ldi	r22, 0x00	; 0
    ae70:	84 e6       	ldi	r24, 0x64	; 100
    ae72:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae76:	8c e2       	ldi	r24, 0x2C	; 44
    ae78:	91 e0       	ldi	r25, 0x01	; 1
    ae7a:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae7e:	40 e0       	ldi	r20, 0x00	; 0
    ae80:	64 e6       	ldi	r22, 0x64	; 100
    ae82:	84 e6       	ldi	r24, 0x64	; 100
    ae84:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ae88:	8c e2       	ldi	r24, 0x2C	; 44
    ae8a:	91 e0       	ldi	r25, 0x01	; 1
    ae8c:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    ae90:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <led_off>
	//uint32_t start = get_time();
	int16_t matrixSum = processBrightMeas();
	//if(rand_byte()%2) broadcastBrightMeas();
	float bearing, heading;
	float error;
	calculate_bearing_and_heading(&bearing, &heading);
    ae94:	be 01       	movw	r22, r28
    ae96:	6f 5f       	subi	r22, 0xFF	; 255
    ae98:	7f 4f       	sbci	r23, 0xFF	; 255
    ae9a:	ce 01       	movw	r24, r28
    ae9c:	05 96       	adiw	r24, 0x05	; 5
    ae9e:	0e 94 23 55 	call	0xaa46	; 0xaa46 <calculate_bearing_and_heading>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
    aea2:	b6 01       	movw	r22, r12
    aea4:	dd 0c       	add	r13, r13
    aea6:	88 0b       	sbc	r24, r24
    aea8:	99 0b       	sbc	r25, r25
    aeaa:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    aeae:	20 e2       	ldi	r18, 0x20	; 32
    aeb0:	3b eb       	ldi	r19, 0xBB	; 187
    aeb2:	44 e0       	ldi	r20, 0x04	; 4
    aeb4:	50 e4       	ldi	r21, 0x40	; 64
    aeb6:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    aeba:	0e 94 b4 4f 	call	0x9f68	; 0x9f68 <magicRangeFunc>
    aebe:	4b 01       	movw	r8, r22
    aec0:	5c 01       	movw	r10, r24
	if(initialRange!=0&&!isnanf(initialRange)){	
    aec2:	20 e0       	ldi	r18, 0x00	; 0
    aec4:	30 e0       	ldi	r19, 0x00	; 0
    aec6:	a9 01       	movw	r20, r18
    aec8:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    aecc:	88 23       	and	r24, r24
    aece:	09 f4       	brne	.+2      	; 0xaed2 <use_rnb_data+0x252>
    aed0:	ca c0       	rjmp	.+404    	; 0xb066 <use_rnb_data+0x3e6>
    aed2:	a5 01       	movw	r20, r10
    aed4:	94 01       	movw	r18, r8
    aed6:	c5 01       	movw	r24, r10
    aed8:	b4 01       	movw	r22, r8
    aeda:	0e 94 f3 76 	call	0xede6	; 0xede6 <__unordsf2>
    aede:	81 11       	cpse	r24, r1
    aee0:	c2 c0       	rjmp	.+388    	; 0xb066 <use_rnb_data+0x3e6>
		float range = calculate_range(initialRange, bearing, heading);
    aee2:	89 81       	ldd	r24, Y+1	; 0x01
    aee4:	9a 81       	ldd	r25, Y+2	; 0x02
    aee6:	ab 81       	ldd	r26, Y+3	; 0x03
    aee8:	bc 81       	ldd	r27, Y+4	; 0x04
    aeea:	89 87       	std	Y+9, r24	; 0x09
    aeec:	9a 87       	std	Y+10, r25	; 0x0a
    aeee:	ab 87       	std	Y+11, r26	; 0x0b
    aef0:	bc 87       	std	Y+12, r27	; 0x0c
    aef2:	4d 80       	ldd	r4, Y+5	; 0x05
    aef4:	5e 80       	ldd	r5, Y+6	; 0x06
    aef6:	6f 80       	ldd	r6, Y+7	; 0x07
    aef8:	78 84       	ldd	r7, Y+8	; 0x08
    aefa:	7c 01       	movw	r14, r24
    aefc:	8d 01       	movw	r16, r26
    aefe:	a3 01       	movw	r20, r6
    af00:	92 01       	movw	r18, r4
    af02:	c5 01       	movw	r24, r10
    af04:	b4 01       	movw	r22, r8
    af06:	0e 94 1c 50 	call	0xa038	; 0xa038 <calculate_range>
    af0a:	4b 01       	movw	r8, r22
    af0c:	5c 01       	movw	r10, r24
		if(!isnanf(range)){
    af0e:	9b 01       	movw	r18, r22
    af10:	ac 01       	movw	r20, r24
    af12:	0e 94 f3 76 	call	0xede6	; 0xede6 <__unordsf2>
    af16:	81 11       	cpse	r24, r1
    af18:	a6 c0       	rjmp	.+332    	; 0xb066 <use_rnb_data+0x3e6>
			if(range<2*DROPLET_RADIUS) range=46;
    af1a:	20 e0       	ldi	r18, 0x00	; 0
    af1c:	30 e0       	ldi	r19, 0x00	; 0
    af1e:	40 e3       	ldi	r20, 0x30	; 48
    af20:	52 e4       	ldi	r21, 0x42	; 66
    af22:	c5 01       	movw	r24, r10
    af24:	b4 01       	movw	r22, r8
    af26:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    af2a:	87 fd       	sbrc	r24, 7
    af2c:	e3 c0       	rjmp	.+454    	; 0xb0f4 <use_rnb_data+0x474>
			error = calculate_error(range, bearing, heading);
    af2e:	a3 01       	movw	r20, r6
    af30:	92 01       	movw	r18, r4
    af32:	c5 01       	movw	r24, r10
    af34:	b4 01       	movw	r22, r8
    af36:	0e 94 0b 52 	call	0xa416	; 0xa416 <calculate_error>
    af3a:	6b 01       	movw	r12, r22
    af3c:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    af3e:	20 e0       	ldi	r18, 0x00	; 0
    af40:	30 e0       	ldi	r19, 0x00	; 0
    af42:	4c ed       	ldi	r20, 0xDC	; 220
    af44:	52 e4       	ldi	r21, 0x42	; 66
    af46:	c5 01       	movw	r24, r10
    af48:	b4 01       	movw	r22, r8
    af4a:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    af4e:	87 fd       	sbrc	r24, 7
    af50:	1e c1       	rjmp	.+572    	; 0xb18e <use_rnb_data+0x50e>
    af52:	20 e0       	ldi	r18, 0x00	; 0
    af54:	30 e0       	ldi	r19, 0x00	; 0
    af56:	48 e4       	ldi	r20, 0x48	; 72
    af58:	53 e4       	ldi	r21, 0x43	; 67
    af5a:	c5 01       	movw	r24, r10
    af5c:	b4 01       	movw	r22, r8
    af5e:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    af62:	87 fd       	sbrc	r24, 7
    af64:	e4 c0       	rjmp	.+456    	; 0xb12e <use_rnb_data+0x4ae>
    af66:	20 e0       	ldi	r18, 0x00	; 0
    af68:	30 e0       	ldi	r19, 0x00	; 0
    af6a:	48 e4       	ldi	r20, 0x48	; 72
    af6c:	53 e4       	ldi	r21, 0x43	; 67
    af6e:	c5 01       	movw	r24, r10
    af70:	b4 01       	movw	r22, r8
    af72:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    af76:	18 16       	cp	r1, r24
    af78:	0c f4       	brge	.+2      	; 0xaf7c <use_rnb_data+0x2fc>
    af7a:	75 c0       	rjmp	.+234    	; 0xb066 <use_rnb_data+0x3e6>
				return;
			}else{
				//printf("\r\n");
			}
			
			last_good_rnb.id = rnbCmdID;
    af7c:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <rnbCmdID>
    af80:	90 91 2d 2a 	lds	r25, 0x2A2D	; 0x802a2d <rnbCmdID+0x1>
    af84:	80 93 75 28 	sts	0x2875, r24	; 0x802875 <last_good_rnb+0x6>
    af88:	90 93 76 28 	sts	0x2876, r25	; 0x802876 <last_good_rnb+0x7>
			last_good_rnb.range		= (uint16_t)(range);
    af8c:	c5 01       	movw	r24, r10
    af8e:	b4 01       	movw	r22, r8
    af90:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    af94:	60 93 6f 28 	sts	0x286F, r22	; 0x80286f <last_good_rnb>
    af98:	70 93 70 28 	sts	0x2870, r23	; 0x802870 <last_good_rnb+0x1>
    af9c:	20 e0       	ldi	r18, 0x00	; 0
    af9e:	30 e0       	ldi	r19, 0x00	; 0
    afa0:	a9 01       	movw	r20, r18
    afa2:	c3 01       	movw	r24, r6
    afa4:	b2 01       	movw	r22, r4
    afa6:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    afaa:	2b ed       	ldi	r18, 0xDB	; 219
    afac:	3f e0       	ldi	r19, 0x0F	; 15
    afae:	49 e4       	ldi	r20, 0x49	; 73
    afb0:	50 e4       	ldi	r21, 0x40	; 64
    afb2:	87 fd       	sbrc	r24, 7
    afb4:	c8 c0       	rjmp	.+400    	; 0xb146 <use_rnb_data+0x4c6>
    afb6:	c3 01       	movw	r24, r6
    afb8:	b2 01       	movw	r22, r4
    afba:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    afbe:	2b ed       	ldi	r18, 0xDB	; 219
    afc0:	3f e0       	ldi	r19, 0x0F	; 15
    afc2:	49 ec       	ldi	r20, 0xC9	; 201
    afc4:	50 e4       	ldi	r21, 0x40	; 64
    afc6:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    afca:	2b ed       	ldi	r18, 0xDB	; 219
    afcc:	3f e0       	ldi	r19, 0x0F	; 15
    afce:	49 e4       	ldi	r20, 0x49	; 73
    afd0:	50 e4       	ldi	r21, 0x40	; 64
    afd2:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
			last_good_rnb.bearing	= (int16_t)rad_to_deg(bearing);
    afd6:	2b ed       	ldi	r18, 0xDB	; 219
    afd8:	3f e0       	ldi	r19, 0x0F	; 15
    afda:	49 e4       	ldi	r20, 0x49	; 73
    afdc:	50 e4       	ldi	r21, 0x40	; 64
    afde:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    afe2:	20 e0       	ldi	r18, 0x00	; 0
    afe4:	30 e0       	ldi	r19, 0x00	; 0
    afe6:	44 e3       	ldi	r20, 0x34	; 52
    afe8:	53 e4       	ldi	r21, 0x43	; 67
    afea:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    afee:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    aff2:	60 93 71 28 	sts	0x2871, r22	; 0x802871 <last_good_rnb+0x2>
    aff6:	70 93 72 28 	sts	0x2872, r23	; 0x802872 <last_good_rnb+0x3>
    affa:	20 e0       	ldi	r18, 0x00	; 0
    affc:	30 e0       	ldi	r19, 0x00	; 0
    affe:	a9 01       	movw	r20, r18
    b000:	69 85       	ldd	r22, Y+9	; 0x09
    b002:	7a 85       	ldd	r23, Y+10	; 0x0a
    b004:	8b 85       	ldd	r24, Y+11	; 0x0b
    b006:	9c 85       	ldd	r25, Y+12	; 0x0c
    b008:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    b00c:	2b ed       	ldi	r18, 0xDB	; 219
    b00e:	3f e0       	ldi	r19, 0x0F	; 15
    b010:	49 e4       	ldi	r20, 0x49	; 73
    b012:	50 e4       	ldi	r21, 0x40	; 64
    b014:	87 fd       	sbrc	r24, 7
    b016:	a8 c0       	rjmp	.+336    	; 0xb168 <use_rnb_data+0x4e8>
    b018:	69 85       	ldd	r22, Y+9	; 0x09
    b01a:	7a 85       	ldd	r23, Y+10	; 0x0a
    b01c:	8b 85       	ldd	r24, Y+11	; 0x0b
    b01e:	9c 85       	ldd	r25, Y+12	; 0x0c
    b020:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    b024:	2b ed       	ldi	r18, 0xDB	; 219
    b026:	3f e0       	ldi	r19, 0x0F	; 15
    b028:	49 ec       	ldi	r20, 0xC9	; 201
    b02a:	50 e4       	ldi	r21, 0x40	; 64
    b02c:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    b030:	2b ed       	ldi	r18, 0xDB	; 219
    b032:	3f e0       	ldi	r19, 0x0F	; 15
    b034:	49 e4       	ldi	r20, 0x49	; 73
    b036:	50 e4       	ldi	r21, 0x40	; 64
    b038:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
			last_good_rnb.heading	= (int16_t)rad_to_deg(heading);
    b03c:	2b ed       	ldi	r18, 0xDB	; 219
    b03e:	3f e0       	ldi	r19, 0x0F	; 15
    b040:	49 e4       	ldi	r20, 0x49	; 73
    b042:	50 e4       	ldi	r21, 0x40	; 64
    b044:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    b048:	20 e0       	ldi	r18, 0x00	; 0
    b04a:	30 e0       	ldi	r19, 0x00	; 0
    b04c:	44 e3       	ldi	r20, 0x34	; 52
    b04e:	53 e4       	ldi	r21, 0x43	; 67
    b050:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b054:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <__fixsfsi>
    b058:	60 93 73 28 	sts	0x2873, r22	; 0x802873 <last_good_rnb+0x4>
    b05c:	70 93 74 28 	sts	0x2874, r23	; 0x802874 <last_good_rnb+0x5>
			//print_brightMeas();
			rnb_updated=1;
    b060:	81 e0       	ldi	r24, 0x01	; 1
    b062:	80 93 7a 28 	sts	0x287A, r24	; 0x80287a <rnb_updated>
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    b066:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b068:	f8 94       	cli
		rnbProcessingFlag=0;
    b06a:	10 92 79 28 	sts	0x2879, r1	; 0x802879 <rnbProcessingFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b06e:	8f bf       	out	0x3f, r24	; 63
	}
}
    b070:	2c 96       	adiw	r28, 0x0c	; 12
    b072:	cd bf       	out	0x3d, r28	; 61
    b074:	de bf       	out	0x3e, r29	; 62
    b076:	df 91       	pop	r29
    b078:	cf 91       	pop	r28
    b07a:	1f 91       	pop	r17
    b07c:	0f 91       	pop	r16
    b07e:	ff 90       	pop	r15
    b080:	ef 90       	pop	r14
    b082:	df 90       	pop	r13
    b084:	cf 90       	pop	r12
    b086:	bf 90       	pop	r11
    b088:	af 90       	pop	r10
    b08a:	9f 90       	pop	r9
    b08c:	8f 90       	pop	r8
    b08e:	7f 90       	pop	r7
    b090:	6f 90       	pop	r6
    b092:	5f 90       	pop	r5
    b094:	4f 90       	pop	r4
    b096:	3f 90       	pop	r3
    b098:	2f 90       	pop	r2
    b09a:	08 95       	ret
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    b09c:	3f 93       	push	r19
    b09e:	2f 93       	push	r18
    b0a0:	3f 92       	push	r3
    b0a2:	2f 92       	push	r2
    b0a4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
			sensorHealthHistory&=~(0xF<<(4*i));
    b0a8:	c8 01       	movw	r24, r16
    b0aa:	02 c0       	rjmp	.+4      	; 0xb0b0 <use_rnb_data+0x430>
    b0ac:	88 0f       	add	r24, r24
    b0ae:	99 1f       	adc	r25, r25
    b0b0:	5a 94       	dec	r5
    b0b2:	e2 f7       	brpl	.-8      	; 0xb0ac <use_rnb_data+0x42c>
    b0b4:	80 95       	com	r24
    b0b6:	90 95       	com	r25
    b0b8:	09 2e       	mov	r0, r25
    b0ba:	00 0c       	add	r0, r0
    b0bc:	aa 0b       	sbc	r26, r26
    b0be:	bb 0b       	sbc	r27, r27
    b0c0:	40 91 03 26 	lds	r20, 0x2603	; 0x802603 <sensorHealthHistory>
    b0c4:	50 91 04 26 	lds	r21, 0x2604	; 0x802604 <sensorHealthHistory+0x1>
    b0c8:	60 91 05 26 	lds	r22, 0x2605	; 0x802605 <sensorHealthHistory+0x2>
    b0cc:	70 91 06 26 	lds	r23, 0x2606	; 0x802606 <sensorHealthHistory+0x3>
    b0d0:	48 23       	and	r20, r24
    b0d2:	59 23       	and	r21, r25
    b0d4:	6a 23       	and	r22, r26
    b0d6:	7b 23       	and	r23, r27
    b0d8:	40 93 03 26 	sts	0x2603, r20	; 0x802603 <sensorHealthHistory>
    b0dc:	50 93 04 26 	sts	0x2604, r21	; 0x802604 <sensorHealthHistory+0x1>
    b0e0:	60 93 05 26 	sts	0x2605, r22	; 0x802605 <sensorHealthHistory+0x2>
    b0e4:	70 93 06 26 	sts	0x2606, r23	; 0x802606 <sensorHealthHistory+0x3>
    b0e8:	0f 90       	pop	r0
    b0ea:	0f 90       	pop	r0
    b0ec:	0f 90       	pop	r0
    b0ee:	0f 90       	pop	r0
			problem = 1;
    b0f0:	e1 e0       	ldi	r30, 0x01	; 1
    b0f2:	45 ce       	rjmp	.-886    	; 0xad7e <use_rnb_data+0xfe>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
			error = calculate_error(range, bearing, heading);
    b0f4:	e9 84       	ldd	r14, Y+9	; 0x09
    b0f6:	fa 84       	ldd	r15, Y+10	; 0x0a
    b0f8:	0b 85       	ldd	r16, Y+11	; 0x0b
    b0fa:	1c 85       	ldd	r17, Y+12	; 0x0c
    b0fc:	a3 01       	movw	r20, r6
    b0fe:	92 01       	movw	r18, r4
    b100:	60 e0       	ldi	r22, 0x00	; 0
    b102:	70 e0       	ldi	r23, 0x00	; 0
    b104:	88 e3       	ldi	r24, 0x38	; 56
    b106:	92 e4       	ldi	r25, 0x42	; 66
    b108:	0e 94 0b 52 	call	0xa416	; 0xa416 <calculate_error>
    b10c:	6b 01       	movw	r12, r22
    b10e:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    b110:	20 e0       	ldi	r18, 0x00	; 0
    b112:	30 e0       	ldi	r19, 0x00	; 0
    b114:	40 e8       	ldi	r20, 0x80	; 128
    b116:	5f e3       	ldi	r21, 0x3F	; 63
    b118:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    b11c:	18 16       	cp	r1, r24
    b11e:	0c f4       	brge	.+2      	; 0xb122 <use_rnb_data+0x4a2>
    b120:	a2 cf       	rjmp	.-188    	; 0xb066 <use_rnb_data+0x3e6>
	calculate_bearing_and_heading(&bearing, &heading);
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
    b122:	81 2c       	mov	r8, r1
    b124:	91 2c       	mov	r9, r1
    b126:	88 e3       	ldi	r24, 0x38	; 56
    b128:	a8 2e       	mov	r10, r24
    b12a:	82 e4       	ldi	r24, 0x42	; 66
    b12c:	b8 2e       	mov	r11, r24
			error = calculate_error(range, bearing, heading);
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    b12e:	20 e0       	ldi	r18, 0x00	; 0
    b130:	30 e0       	ldi	r19, 0x00	; 0
    b132:	40 ec       	ldi	r20, 0xC0	; 192
    b134:	5f e3       	ldi	r21, 0x3F	; 63
    b136:	c7 01       	movw	r24, r14
    b138:	b6 01       	movw	r22, r12
    b13a:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    b13e:	18 16       	cp	r1, r24
    b140:	0c f0       	brlt	.+2      	; 0xb144 <use_rnb_data+0x4c4>
    b142:	11 cf       	rjmp	.-478    	; 0xaf66 <use_rnb_data+0x2e6>
    b144:	90 cf       	rjmp	.-224    	; 0xb066 <use_rnb_data+0x3e6>
    b146:	c3 01       	movw	r24, r6
    b148:	b2 01       	movw	r22, r4
    b14a:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b14e:	2b ed       	ldi	r18, 0xDB	; 219
    b150:	3f e0       	ldi	r19, 0x0F	; 15
    b152:	49 ec       	ldi	r20, 0xC9	; 201
    b154:	50 e4       	ldi	r21, 0x40	; 64
    b156:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    b15a:	2b ed       	ldi	r18, 0xDB	; 219
    b15c:	3f e0       	ldi	r19, 0x0F	; 15
    b15e:	49 e4       	ldi	r20, 0x49	; 73
    b160:	50 e4       	ldi	r21, 0x40	; 64
    b162:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    b166:	37 cf       	rjmp	.-402    	; 0xafd6 <use_rnb_data+0x356>
    b168:	69 85       	ldd	r22, Y+9	; 0x09
    b16a:	7a 85       	ldd	r23, Y+10	; 0x0a
    b16c:	8b 85       	ldd	r24, Y+11	; 0x0b
    b16e:	9c 85       	ldd	r25, Y+12	; 0x0c
    b170:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b174:	2b ed       	ldi	r18, 0xDB	; 219
    b176:	3f e0       	ldi	r19, 0x0F	; 15
    b178:	49 ec       	ldi	r20, 0xC9	; 201
    b17a:	50 e4       	ldi	r21, 0x40	; 64
    b17c:	0e 94 5a 73 	call	0xe6b4	; 0xe6b4 <fmod>
    b180:	2b ed       	ldi	r18, 0xDB	; 219
    b182:	3f e0       	ldi	r19, 0x0F	; 15
    b184:	49 e4       	ldi	r20, 0x49	; 73
    b186:	50 e4       	ldi	r21, 0x40	; 64
    b188:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    b18c:	57 cf       	rjmp	.-338    	; 0xb03c <use_rnb_data+0x3bc>
    b18e:	20 e0       	ldi	r18, 0x00	; 0
    b190:	30 e0       	ldi	r19, 0x00	; 0
    b192:	40 e8       	ldi	r20, 0x80	; 128
    b194:	5f e3       	ldi	r21, 0x3F	; 63
    b196:	c7 01       	movw	r24, r14
    b198:	b6 01       	movw	r22, r12
    b19a:	0e 94 ac 74 	call	0xe958	; 0xe958 <__gesf2>
    b19e:	18 16       	cp	r1, r24
    b1a0:	0c f0       	brlt	.+2      	; 0xb1a4 <use_rnb_data+0x524>
    b1a2:	d7 ce       	rjmp	.-594    	; 0xaf52 <use_rnb_data+0x2d2>
    b1a4:	60 cf       	rjmp	.-320    	; 0xb066 <use_rnb_data+0x3e6>

0000b1a6 <ir_range_meas>:
		warning_light_sequence();
	}	
	return valSum;
}

void ir_range_meas(){
    b1a6:	8f 92       	push	r8
    b1a8:	9f 92       	push	r9
    b1aa:	af 92       	push	r10
    b1ac:	bf 92       	push	r11
    b1ae:	cf 92       	push	r12
    b1b0:	df 92       	push	r13
    b1b2:	ef 92       	push	r14
    b1b4:	ff 92       	push	r15
    b1b6:	0f 93       	push	r16
    b1b8:	1f 93       	push	r17
    b1ba:	cf 93       	push	r28
    b1bc:	df 93       	push	r29
	//int32_t times[16] = {0};
	cmd_arrival_dir;
    b1be:	80 91 b0 26 	lds	r24, 0x26B0	; 0x8026b0 <cmd_arrival_dir>
	cmd_sender_dir;
    b1c2:	80 91 b3 26 	lds	r24, 0x26B3	; 0x8026b3 <cmd_sender_dir>
	//times[0] = get_time();
	while((get_time()-rnbCmdSentTime+8)<POST_BROADCAST_DELAY);
    b1c6:	88 e0       	ldi	r24, 0x08	; 8
    b1c8:	c8 2e       	mov	r12, r24
    b1ca:	d1 2c       	mov	r13, r1
    b1cc:	e1 2c       	mov	r14, r1
    b1ce:	f1 2c       	mov	r15, r1
    b1d0:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b1d4:	00 91 87 28 	lds	r16, 0x2887	; 0x802887 <rnbCmdSentTime>
    b1d8:	10 91 88 28 	lds	r17, 0x2888	; 0x802888 <rnbCmdSentTime+0x1>
    b1dc:	20 91 89 28 	lds	r18, 0x2889	; 0x802889 <rnbCmdSentTime+0x2>
    b1e0:	30 91 8a 28 	lds	r19, 0x288A	; 0x80288a <rnbCmdSentTime+0x3>
    b1e4:	46 01       	movw	r8, r12
    b1e6:	57 01       	movw	r10, r14
    b1e8:	80 1a       	sub	r8, r16
    b1ea:	91 0a       	sbc	r9, r17
    b1ec:	a2 0a       	sbc	r10, r18
    b1ee:	b3 0a       	sbc	r11, r19
    b1f0:	dc 01       	movw	r26, r24
    b1f2:	cb 01       	movw	r24, r22
    b1f4:	88 0d       	add	r24, r8
    b1f6:	99 1d       	adc	r25, r9
    b1f8:	aa 1d       	adc	r26, r10
    b1fa:	bb 1d       	adc	r27, r11
    b1fc:	4e 97       	sbiw	r24, 0x1e	; 30
    b1fe:	a1 05       	cpc	r26, r1
    b200:	b1 05       	cpc	r27, r1
    b202:	30 f3       	brcs	.-52     	; 0xb1d0 <ir_range_meas+0x2a>
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    b204:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b206:	f8 94       	cli
		uint32_t pre_sync_op = get_time();
    b208:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b20c:	6b 01       	movw	r12, r22
    b20e:	7c 01       	movw	r14, r24
		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    b210:	06 c0       	rjmp	.+12     	; 0xb21e <ir_range_meas+0x78>
    b212:	8f e9       	ldi	r24, 0x9F	; 159
    b214:	9f e0       	ldi	r25, 0x0F	; 15
    b216:	01 97       	sbiw	r24, 0x01	; 1
    b218:	f1 f7       	brne	.-4      	; 0xb216 <ir_range_meas+0x70>
    b21a:	00 c0       	rjmp	.+0      	; 0xb21c <ir_range_meas+0x76>
    b21c:	00 00       	nop
    b21e:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b222:	dc 01       	movw	r26, r24
    b224:	cb 01       	movw	r24, r22
    b226:	8c 19       	sub	r24, r12
    b228:	9d 09       	sbc	r25, r13
    b22a:	ae 09       	sbc	r26, r14
    b22c:	bf 09       	sbc	r27, r15
    b22e:	02 97       	sbiw	r24, 0x02	; 2
    b230:	a1 05       	cpc	r26, r1
    b232:	b1 05       	cpc	r27, r1
    b234:	70 f3       	brcs	.-36     	; 0xb212 <ir_range_meas+0x6c>
    b236:	cb eb       	ldi	r28, 0xBB	; 187
    b238:	d5 e2       	ldi	r29, 0x25	; 37
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
			pre_sync_op = get_time();
    b23a:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b23e:	6b 01       	movw	r12, r22
    b240:	7c 01       	movw	r14, r24
			//times[2*emitter_dir+3] = pre_sync_op;
			while((get_time() - pre_sync_op) < (TIME_FOR_GET_IR_VALS-TIME_FOR_IR_MEAS)/2) delay_us(500);
    b242:	06 c0       	rjmp	.+12     	; 0xb250 <ir_range_meas+0xaa>
    b244:	8f e9       	ldi	r24, 0x9F	; 159
    b246:	9f e0       	ldi	r25, 0x0F	; 15
    b248:	01 97       	sbiw	r24, 0x01	; 1
    b24a:	f1 f7       	brne	.-4      	; 0xb248 <ir_range_meas+0xa2>
    b24c:	00 c0       	rjmp	.+0      	; 0xb24e <ir_range_meas+0xa8>
    b24e:	00 00       	nop
    b250:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b254:	dc 01       	movw	r26, r24
    b256:	cb 01       	movw	r24, r22
    b258:	8c 19       	sub	r24, r12
    b25a:	9d 09       	sbc	r25, r13
    b25c:	ae 09       	sbc	r26, r14
    b25e:	bf 09       	sbc	r27, r15
    b260:	02 97       	sbiw	r24, 0x02	; 2
    b262:	a1 05       	cpc	r26, r1
    b264:	b1 05       	cpc	r27, r1
    b266:	70 f3       	brcs	.-36     	; 0xb244 <ir_range_meas+0x9e>
			get_ir_sensors(brightMeas[emitter_dir] , 9); //11
    b268:	69 e0       	ldi	r22, 0x09	; 9
    b26a:	ce 01       	movw	r24, r28
    b26c:	0e 94 5f 28 	call	0x50be	; 0x50be <get_ir_sensors>
			//times[2*emitter_dir+4] = get_time();			
			while((get_time() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
    b270:	06 c0       	rjmp	.+12     	; 0xb27e <ir_range_meas+0xd8>
    b272:	8f e9       	ldi	r24, 0x9F	; 159
    b274:	9f e0       	ldi	r25, 0x0F	; 15
    b276:	01 97       	sbiw	r24, 0x01	; 1
    b278:	f1 f7       	brne	.-4      	; 0xb276 <ir_range_meas+0xd0>
    b27a:	00 c0       	rjmp	.+0      	; 0xb27c <ir_range_meas+0xd6>
    b27c:	00 00       	nop
    b27e:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b282:	dc 01       	movw	r26, r24
    b284:	cb 01       	movw	r24, r22
    b286:	8c 19       	sub	r24, r12
    b288:	9d 09       	sbc	r25, r13
    b28a:	ae 09       	sbc	r26, r14
    b28c:	bf 09       	sbc	r27, r15
    b28e:	40 97       	sbiw	r24, 0x10	; 16
    b290:	a1 05       	cpc	r26, r1
    b292:	b1 05       	cpc	r27, r1
    b294:	70 f3       	brcs	.-36     	; 0xb272 <ir_range_meas+0xcc>
			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
    b296:	8a e0       	ldi	r24, 0x0A	; 10
    b298:	90 e0       	ldi	r25, 0x00	; 0
    b29a:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    b29e:	2c 96       	adiw	r28, 0x0c	; 12
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		uint32_t pre_sync_op = get_time();
		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
    b2a0:	96 e2       	ldi	r25, 0x26	; 38
    b2a2:	c3 30       	cpi	r28, 0x03	; 3
    b2a4:	d9 07       	cpc	r29, r25
    b2a6:	49 f6       	brne	.-110    	; 0xb23a <ir_range_meas+0x94>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b2a8:	1f bf       	out	0x3f, r17	; 63
			//times[2*emitter_dir+4] = get_time();			
			while((get_time() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
}
    b2aa:	df 91       	pop	r29
    b2ac:	cf 91       	pop	r28
    b2ae:	1f 91       	pop	r17
    b2b0:	0f 91       	pop	r16
    b2b2:	ff 90       	pop	r15
    b2b4:	ef 90       	pop	r14
    b2b6:	df 90       	pop	r13
    b2b8:	cf 90       	pop	r12
    b2ba:	bf 90       	pop	r11
    b2bc:	af 90       	pop	r10
    b2be:	9f 90       	pop	r9
    b2c0:	8f 90       	pop	r8
    b2c2:	08 95       	ret

0000b2c4 <ir_range_blast>:

void ir_range_blast(uint8_t power __attribute__ ((unused))){
    b2c4:	cf 92       	push	r12
    b2c6:	df 92       	push	r13
    b2c8:	ef 92       	push	r14
    b2ca:	ff 92       	push	r15
    b2cc:	0f 93       	push	r16
    b2ce:	1f 93       	push	r17
    b2d0:	cf 93       	push	r28
    b2d2:	df 93       	push	r29
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((get_time() - rnbCmdSentTime) < POST_BROADCAST_DELAY) delay_us(500);
    b2d4:	06 c0       	rjmp	.+12     	; 0xb2e2 <ir_range_blast+0x1e>
    b2d6:	8f e9       	ldi	r24, 0x9F	; 159
    b2d8:	9f e0       	ldi	r25, 0x0F	; 15
    b2da:	01 97       	sbiw	r24, 0x01	; 1
    b2dc:	f1 f7       	brne	.-4      	; 0xb2da <ir_range_blast+0x16>
    b2de:	00 c0       	rjmp	.+0      	; 0xb2e0 <ir_range_blast+0x1c>
    b2e0:	00 00       	nop
    b2e2:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b2e6:	00 91 87 28 	lds	r16, 0x2887	; 0x802887 <rnbCmdSentTime>
    b2ea:	10 91 88 28 	lds	r17, 0x2888	; 0x802888 <rnbCmdSentTime+0x1>
    b2ee:	20 91 89 28 	lds	r18, 0x2889	; 0x802889 <rnbCmdSentTime+0x2>
    b2f2:	30 91 8a 28 	lds	r19, 0x288A	; 0x80288a <rnbCmdSentTime+0x3>
    b2f6:	dc 01       	movw	r26, r24
    b2f8:	cb 01       	movw	r24, r22
    b2fa:	80 1b       	sub	r24, r16
    b2fc:	91 0b       	sbc	r25, r17
    b2fe:	a2 0b       	sbc	r26, r18
    b300:	b3 0b       	sbc	r27, r19
    b302:	4e 97       	sbiw	r24, 0x1e	; 30
    b304:	a1 05       	cpc	r26, r1
    b306:	b1 05       	cpc	r27, r1
    b308:	30 f3       	brcs	.-52     	; 0xb2d6 <ir_range_blast+0x12>
	//times[1] = get_time();
	uint32_t pre_sync_op = get_time();
    b30a:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b30e:	6b 01       	movw	r12, r22
    b310:	7c 01       	movw	r14, r24
	uint16_t prevPower = curr_ir_power;
    b312:	c0 91 48 2a 	lds	r28, 0x2A48	; 0x802a48 <curr_ir_power>
    b316:	d0 91 49 2a 	lds	r29, 0x2A49	; 0x802a49 <curr_ir_power+0x1>
	set_all_ir_powers(256);	
    b31a:	80 e0       	ldi	r24, 0x00	; 0
    b31c:	91 e0       	ldi	r25, 0x01	; 1
    b31e:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <set_all_ir_powers>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    b322:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b324:	f8 94       	cli
    b326:	06 c0       	rjmp	.+12     	; 0xb334 <ir_range_blast+0x70>
    b328:	8f e9       	ldi	r24, 0x9F	; 159
    b32a:	9f e0       	ldi	r25, 0x0F	; 15
    b32c:	01 97       	sbiw	r24, 0x01	; 1
    b32e:	f1 f7       	brne	.-4      	; 0xb32c <ir_range_blast+0x68>
    b330:	00 c0       	rjmp	.+0      	; 0xb332 <ir_range_blast+0x6e>
    b332:	00 00       	nop
		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    b334:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b338:	dc 01       	movw	r26, r24
    b33a:	cb 01       	movw	r24, r22
    b33c:	8c 19       	sub	r24, r12
    b33e:	9d 09       	sbc	r25, r13
    b340:	ae 09       	sbc	r26, r14
    b342:	bf 09       	sbc	r27, r15
    b344:	02 97       	sbiw	r24, 0x02	; 2
    b346:	a1 05       	cpc	r26, r1
    b348:	b1 05       	cpc	r27, r1
    b34a:	70 f3       	brcs	.-36     	; 0xb328 <ir_range_blast+0x64>
    b34c:	00 e0       	ldi	r16, 0x00	; 0
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
			pre_sync_op = get_time();
    b34e:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b352:	6b 01       	movw	r12, r22
    b354:	7c 01       	movw	r14, r24
			//set_red_led(255);
			//times[2*dir+3] = pre_sync_op;			
			ir_led_on(dir);
    b356:	80 2f       	mov	r24, r16
    b358:	0e 94 6f 27 	call	0x4ede	; 0x4ede <ir_led_on>
			while((get_time() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
    b35c:	06 c0       	rjmp	.+12     	; 0xb36a <ir_range_blast+0xa6>
    b35e:	8f e9       	ldi	r24, 0x9F	; 159
    b360:	9f e0       	ldi	r25, 0x0F	; 15
    b362:	01 97       	sbiw	r24, 0x01	; 1
    b364:	f1 f7       	brne	.-4      	; 0xb362 <ir_range_blast+0x9e>
    b366:	00 c0       	rjmp	.+0      	; 0xb368 <ir_range_blast+0xa4>
    b368:	00 00       	nop
    b36a:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b36e:	dc 01       	movw	r26, r24
    b370:	cb 01       	movw	r24, r22
    b372:	8c 19       	sub	r24, r12
    b374:	9d 09       	sbc	r25, r13
    b376:	ae 09       	sbc	r26, r14
    b378:	bf 09       	sbc	r27, r15
    b37a:	40 97       	sbiw	r24, 0x10	; 16
    b37c:	a1 05       	cpc	r26, r1
    b37e:	b1 05       	cpc	r27, r1
    b380:	70 f3       	brcs	.-36     	; 0xb35e <ir_range_blast+0x9a>
			ir_led_off(dir);
    b382:	80 2f       	mov	r24, r16
    b384:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <ir_led_off>
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
    b388:	8a e0       	ldi	r24, 0x0A	; 10
    b38a:	90 e0       	ldi	r25, 0x00	; 0
    b38c:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
	uint16_t prevPower = curr_ir_power;
	set_all_ir_powers(256);	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		while((get_time() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
    b390:	0f 5f       	subi	r16, 0xFF	; 255
    b392:	06 30       	cpi	r16, 0x06	; 6
    b394:	e1 f6       	brne	.-72     	; 0xb34e <ir_range_blast+0x8a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b396:	1f bf       	out	0x3f, r17	; 63
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	set_all_ir_powers(prevPower);
    b398:	ce 01       	movw	r24, r28
}
    b39a:	df 91       	pop	r29
    b39c:	cf 91       	pop	r28
    b39e:	1f 91       	pop	r17
    b3a0:	0f 91       	pop	r16
    b3a2:	ff 90       	pop	r15
    b3a4:	ef 90       	pop	r14
    b3a6:	df 90       	pop	r13
    b3a8:	cf 90       	pop	r12
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delay_ms(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	set_all_ir_powers(prevPower);
    b3aa:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <set_all_ir_powers>

0000b3ae <broadcast_rnb_data>:
	rnbCmdID=0;
	rnbProcessingFlag=0;
}

//TODO: handle variable power.
void broadcast_rnb_data(){
    b3ae:	cf 93       	push	r28
    b3b0:	df 93       	push	r29
    b3b2:	1f 92       	push	r1
    b3b4:	cd b7       	in	r28, 0x3d	; 61
    b3b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t power = 255;
	uint8_t goAhead =0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    b3b8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b3ba:	f8 94       	cli
		if(!rnbProcessingFlag){
    b3bc:	80 91 79 28 	lds	r24, 0x2879	; 0x802879 <rnbProcessingFlag>
    b3c0:	81 11       	cpse	r24, r1
    b3c2:	0f c0       	rjmp	.+30     	; 0xb3e2 <broadcast_rnb_data+0x34>
			rnbProcessingFlag = 1;
    b3c4:	81 e0       	ldi	r24, 0x01	; 1
    b3c6:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <rnbProcessingFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b3ca:	9f bf       	out	0x3f, r25	; 63
			goAhead = 1;
		}
	}
	if(goAhead){
    b3cc:	81 11       	cpse	r24, r1
    b3ce:	0d c0       	rjmp	.+26     	; 0xb3ea <broadcast_rnb_data+0x3c>
				hp_ir_block_bm = 0;
			}
			//printf("rnb_b\r\n");
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    b3d0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b3d2:	f8 94       	cli
		rnbProcessingFlag = 0;
    b3d4:	10 92 79 28 	sts	0x2879, r1	; 0x802879 <rnbProcessingFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b3d8:	8f bf       	out	0x3f, r24	; 63
	}
}
    b3da:	0f 90       	pop	r0
    b3dc:	df 91       	pop	r29
    b3de:	cf 91       	pop	r28
    b3e0:	08 95       	ret
}

//TODO: handle variable power.
void broadcast_rnb_data(){
	uint8_t power = 255;
	uint8_t goAhead =0;
    b3e2:	80 e0       	ldi	r24, 0x00	; 0
    b3e4:	9f bf       	out	0x3f, r25	; 63
		if(!rnbProcessingFlag){
			rnbProcessingFlag = 1;
			goAhead = 1;
		}
	}
	if(goAhead){
    b3e6:	88 23       	and	r24, r24
    b3e8:	99 f3       	breq	.-26     	; 0xb3d0 <broadcast_rnb_data+0x22>
		rnbCmdSentTime = get_time();
    b3ea:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    b3ee:	60 93 87 28 	sts	0x2887, r22	; 0x802887 <rnbCmdSentTime>
    b3f2:	70 93 88 28 	sts	0x2888, r23	; 0x802888 <rnbCmdSentTime+0x1>
    b3f6:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <rnbCmdSentTime+0x2>
    b3fa:	90 93 8a 28 	sts	0x288A, r25	; 0x80288a <rnbCmdSentTime+0x3>
		char c = 'r';
    b3fe:	82 e7       	ldi	r24, 0x72	; 114
    b400:	89 83       	std	Y+1, r24	; 0x01
		uint8_t result = hp_ir_targeted_cmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
    b402:	20 91 87 28 	lds	r18, 0x2887	; 0x802887 <rnbCmdSentTime>
    b406:	30 91 88 28 	lds	r19, 0x2888	; 0x802888 <rnbCmdSentTime+0x1>
    b40a:	40 91 89 28 	lds	r20, 0x2889	; 0x802889 <rnbCmdSentTime+0x2>
    b40e:	50 91 8a 28 	lds	r21, 0x288A	; 0x80288a <rnbCmdSentTime+0x3>
    b412:	41 e4       	ldi	r20, 0x41	; 65
    b414:	be 01       	movw	r22, r28
    b416:	6f 5f       	subi	r22, 0xFF	; 255
    b418:	7f 4f       	sbci	r23, 0xFF	; 255
    b41a:	8f e3       	ldi	r24, 0x3F	; 63
    b41c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <hp_ir_targeted_cmd>
		if(result){
    b420:	88 23       	and	r24, r24
    b422:	b1 f2       	breq	.-84     	; 0xb3d0 <broadcast_rnb_data+0x22>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    b424:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b426:	f8 94       	cli
				hp_ir_block_bm = 0xFF;
    b428:	9f ef       	ldi	r25, 0xFF	; 255
    b42a:	90 93 27 2a 	sts	0x2A27, r25	; 0x802a27 <hp_ir_block_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b42e:	8f bf       	out	0x3f, r24	; 63
			}		
			ir_range_blast(power);
    b430:	8f ef       	ldi	r24, 0xFF	; 255
    b432:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <ir_range_blast>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    b436:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b438:	f8 94       	cli
				hp_ir_block_bm = 0;
    b43a:	10 92 27 2a 	sts	0x2A27, r1	; 0x802a27 <hp_ir_block_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b43e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    b440:	c7 cf       	rjmp	.-114    	; 0xb3d0 <broadcast_rnb_data+0x22>

0000b442 <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    b442:	80 e3       	ldi	r24, 0x30	; 48
    b444:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTD.DIRSET = LED_B_PIN_bm;
    b448:	80 e1       	ldi	r24, 0x10	; 16
    b44a:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    b44e:	e0 e4       	ldi	r30, 0x40	; 64
    b450:	fa e0       	ldi	r31, 0x0A	; 10
    b452:	2f ef       	ldi	r18, 0xFF	; 255
    b454:	30 e0       	ldi	r19, 0x00	; 0
    b456:	26 a3       	std	Z+38, r18	; 0x26
    b458:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    b45a:	10 a6       	std	Z+40, r1	; 0x28
    b45c:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    b45e:	12 a6       	std	Z+42, r1	; 0x2a
    b460:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    b462:	85 e0       	ldi	r24, 0x05	; 5
    b464:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    b466:	93 e3       	ldi	r25, 0x33	; 51
    b468:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    b46a:	e0 e4       	ldi	r30, 0x40	; 64
    b46c:	f9 e0       	ldi	r31, 0x09	; 9
    b46e:	26 a3       	std	Z+38, r18	; 0x26
    b470:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    b472:	10 a6       	std	Z+40, r1	; 0x28
    b474:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    b476:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    b478:	83 e1       	ldi	r24, 0x13	; 19
    b47a:	81 83       	std	Z+1, r24	; 0x01
    b47c:	08 95       	ret

0000b47e <led_off>:
}

void led_off()
{ 
	TCE1.CCABUF = 0;
    b47e:	e0 e4       	ldi	r30, 0x40	; 64
    b480:	fa e0       	ldi	r31, 0x0A	; 10
    b482:	10 ae       	std	Z+56, r1	; 0x38
    b484:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    b486:	12 ae       	std	Z+58, r1	; 0x3a
    b488:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    b48a:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    b48e:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    b492:	08 95       	ret

0000b494 <set_rgb>:

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    b494:	90 e0       	ldi	r25, 0x00	; 0
    b496:	e0 e4       	ldi	r30, 0x40	; 64
    b498:	fa e0       	ldi	r31, 0x0A	; 10
    b49a:	82 af       	std	Z+58, r24	; 0x3a
    b49c:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    b49e:	70 e0       	ldi	r23, 0x00	; 0
    b4a0:	60 af       	std	Z+56, r22	; 0x38
    b4a2:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led(void){ return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    b4a4:	50 e0       	ldi	r21, 0x00	; 0
    b4a6:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    b4aa:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    b4ae:	08 95       	ret

0000b4b0 <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    b4b0:	2f 92       	push	r2
    b4b2:	3f 92       	push	r3
    b4b4:	4f 92       	push	r4
    b4b6:	5f 92       	push	r5
    b4b8:	6f 92       	push	r6
    b4ba:	7f 92       	push	r7
    b4bc:	8f 92       	push	r8
    b4be:	9f 92       	push	r9
    b4c0:	af 92       	push	r10
    b4c2:	bf 92       	push	r11
    b4c4:	cf 92       	push	r12
    b4c6:	df 92       	push	r13
    b4c8:	ef 92       	push	r14
    b4ca:	ff 92       	push	r15
    b4cc:	0f 93       	push	r16
    b4ce:	1f 93       	push	r17
    b4d0:	cf 93       	push	r28
    b4d2:	df 93       	push	r29
    b4d4:	cd b7       	in	r28, 0x3d	; 61
    b4d6:	de b7       	in	r29, 0x3e	; 62
    b4d8:	2c 97       	sbiw	r28, 0x0c	; 12
    b4da:	cd bf       	out	0x3d, r28	; 61
    b4dc:	de bf       	out	0x3e, r29	; 62
    b4de:	8b 83       	std	Y+3, r24	; 0x03
    b4e0:	9c 83       	std	Y+4, r25	; 0x04
    b4e2:	b4 2e       	mov	r11, r20
    b4e4:	19 01       	movw	r2, r18
    b4e6:	e9 82       	std	Y+1, r14	; 0x01
    b4e8:	fa 82       	std	Y+2, r15	; 0x02
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
    b4ea:	70 e0       	ldi	r23, 0x00	; 0
    b4ec:	80 e0       	ldi	r24, 0x00	; 0
    b4ee:	90 e0       	ldi	r25, 0x00	; 0
    b4f0:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    b4f4:	20 e0       	ldi	r18, 0x00	; 0
    b4f6:	30 e0       	ldi	r19, 0x00	; 0
    b4f8:	4f e7       	ldi	r20, 0x7F	; 127
    b4fa:	53 e4       	ldi	r21, 0x43	; 67
    b4fc:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    b500:	6b 01       	movw	r12, r22
    b502:	7c 01       	movw	r14, r24
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
    b504:	9f 77       	andi	r25, 0x7F	; 127
    b506:	2c ea       	ldi	r18, 0xAC	; 172
    b508:	35 ec       	ldi	r19, 0xC5	; 197
    b50a:	47 e2       	ldi	r20, 0x27	; 39
    b50c:	57 e3       	ldi	r21, 0x37	; 55
    b50e:	0e 94 26 72 	call	0xe44c	; 0xe44c <__cmpsf2>
    b512:	87 fd       	sbrc	r24, 7
    b514:	f0 c0       	rjmp	.+480    	; 0xb6f6 <hsv_to_rgb+0x246>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
	float v = (1.0*val)/255.0;
    b516:	6b 2d       	mov	r22, r11
    b518:	70 e0       	ldi	r23, 0x00	; 0
    b51a:	80 e0       	ldi	r24, 0x00	; 0
    b51c:	90 e0       	ldi	r25, 0x00	; 0
    b51e:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    b522:	20 e0       	ldi	r18, 0x00	; 0
    b524:	30 e0       	ldi	r19, 0x00	; 0
    b526:	4f e7       	ldi	r20, 0x7F	; 127
    b528:	53 e4       	ldi	r21, 0x43	; 67
    b52a:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    b52e:	4b 01       	movw	r8, r22
    b530:	5c 01       	movw	r10, r24
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    b532:	2b 81       	ldd	r18, Y+3	; 0x03
    b534:	3c 81       	ldd	r19, Y+4	; 0x04
    b536:	a3 e8       	ldi	r26, 0x83	; 131
    b538:	bd e2       	ldi	r27, 0x2D	; 45
    b53a:	0e 94 65 77 	call	0xeeca	; 0xeeca <__umulhisi3>
    b53e:	00 24       	eor	r0, r0
    b540:	88 0f       	add	r24, r24
    b542:	99 1f       	adc	r25, r25
    b544:	00 1c       	adc	r0, r0
    b546:	88 0f       	add	r24, r24
    b548:	99 1f       	adc	r25, r25
    b54a:	00 1c       	adc	r0, r0
    b54c:	89 2f       	mov	r24, r25
    b54e:	90 2d       	mov	r25, r0
    b550:	48 e6       	ldi	r20, 0x68	; 104
    b552:	51 e0       	ldi	r21, 0x01	; 1
    b554:	84 9f       	mul	r24, r20
    b556:	90 01       	movw	r18, r0
    b558:	85 9f       	mul	r24, r21
    b55a:	30 0d       	add	r19, r0
    b55c:	94 9f       	mul	r25, r20
    b55e:	30 0d       	add	r19, r0
    b560:	11 24       	eor	r1, r1
    b562:	8b 81       	ldd	r24, Y+3	; 0x03
    b564:	9c 81       	ldd	r25, Y+4	; 0x04
    b566:	82 1b       	sub	r24, r18
    b568:	93 0b       	sbc	r25, r19
    b56a:	8b 83       	std	Y+3, r24	; 0x03
    b56c:	9c 83       	std	Y+4, r25	; 0x04
    b56e:	bc 01       	movw	r22, r24
    b570:	80 e0       	ldi	r24, 0x00	; 0
    b572:	90 e0       	ldi	r25, 0x00	; 0
    b574:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    b578:	20 e0       	ldi	r18, 0x00	; 0
    b57a:	30 e0       	ldi	r19, 0x00	; 0
    b57c:	40 e7       	ldi	r20, 0x70	; 112
    b57e:	52 e4       	ldi	r21, 0x42	; 66
    b580:	0e 94 30 72 	call	0xe460	; 0xe460 <__divsf3>
    b584:	2b 01       	movw	r4, r22
    b586:	3c 01       	movw	r6, r24
	uint8_t i = (uint8_t)h;
    b588:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b58c:	6b 87       	std	Y+11, r22	; 0x0b
	f = h - i;
    b58e:	70 e0       	ldi	r23, 0x00	; 0
    b590:	80 e0       	ldi	r24, 0x00	; 0
    b592:	90 e0       	ldi	r25, 0x00	; 0
    b594:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    b598:	9b 01       	movw	r18, r22
    b59a:	ac 01       	movw	r20, r24
    b59c:	c3 01       	movw	r24, r6
    b59e:	b2 01       	movw	r22, r4
    b5a0:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b5a4:	2b 01       	movw	r4, r22
    b5a6:	3c 01       	movw	r6, r24
	
	p = v*(1.0-s);
    b5a8:	a7 01       	movw	r20, r14
    b5aa:	96 01       	movw	r18, r12
    b5ac:	60 e0       	ldi	r22, 0x00	; 0
    b5ae:	70 e0       	ldi	r23, 0x00	; 0
    b5b0:	80 e8       	ldi	r24, 0x80	; 128
    b5b2:	9f e3       	ldi	r25, 0x3F	; 63
    b5b4:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b5b8:	a5 01       	movw	r20, r10
    b5ba:	94 01       	movw	r18, r8
    b5bc:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b5c0:	6b 83       	std	Y+3, r22	; 0x03
    b5c2:	7c 83       	std	Y+4, r23	; 0x04
    b5c4:	8d 83       	std	Y+5, r24	; 0x05
    b5c6:	9e 83       	std	Y+6, r25	; 0x06
	q = v*(1.0-s*f);
    b5c8:	a3 01       	movw	r20, r6
    b5ca:	92 01       	movw	r18, r4
    b5cc:	c7 01       	movw	r24, r14
    b5ce:	b6 01       	movw	r22, r12
    b5d0:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b5d4:	9b 01       	movw	r18, r22
    b5d6:	ac 01       	movw	r20, r24
    b5d8:	60 e0       	ldi	r22, 0x00	; 0
    b5da:	70 e0       	ldi	r23, 0x00	; 0
    b5dc:	80 e8       	ldi	r24, 0x80	; 128
    b5de:	9f e3       	ldi	r25, 0x3F	; 63
    b5e0:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b5e4:	a5 01       	movw	r20, r10
    b5e6:	94 01       	movw	r18, r8
    b5e8:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b5ec:	6f 83       	std	Y+7, r22	; 0x07
    b5ee:	78 87       	std	Y+8, r23	; 0x08
    b5f0:	89 87       	std	Y+9, r24	; 0x09
    b5f2:	9a 87       	std	Y+10, r25	; 0x0a
	t = v*(1.0-s*(1-f));
    b5f4:	a3 01       	movw	r20, r6
    b5f6:	92 01       	movw	r18, r4
    b5f8:	60 e0       	ldi	r22, 0x00	; 0
    b5fa:	70 e0       	ldi	r23, 0x00	; 0
    b5fc:	80 e8       	ldi	r24, 0x80	; 128
    b5fe:	9f e3       	ldi	r25, 0x3F	; 63
    b600:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b604:	a7 01       	movw	r20, r14
    b606:	96 01       	movw	r18, r12
    b608:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b60c:	9b 01       	movw	r18, r22
    b60e:	ac 01       	movw	r20, r24
    b610:	60 e0       	ldi	r22, 0x00	; 0
    b612:	70 e0       	ldi	r23, 0x00	; 0
    b614:	80 e8       	ldi	r24, 0x80	; 128
    b616:	9f e3       	ldi	r25, 0x3F	; 63
    b618:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    b61c:	a5 01       	movw	r20, r10
    b61e:	94 01       	movw	r18, r8
    b620:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b624:	6b 01       	movw	r12, r22
    b626:	7c 01       	movw	r14, r24
	
	switch(i)
    b628:	9b 85       	ldd	r25, Y+11	; 0x0b
    b62a:	92 30       	cpi	r25, 0x02	; 2
    b62c:	09 f4       	brne	.+2      	; 0xb630 <hsv_to_rgb+0x180>
    b62e:	de c0       	rjmp	.+444    	; 0xb7ec <hsv_to_rgb+0x33c>
    b630:	70 f1       	brcs	.+92     	; 0xb68e <hsv_to_rgb+0x1de>
    b632:	eb 85       	ldd	r30, Y+11	; 0x0b
    b634:	e4 30       	cpi	r30, 0x04	; 4
    b636:	09 f4       	brne	.+2      	; 0xb63a <hsv_to_rgb+0x18a>
    b638:	c7 c0       	rjmp	.+398    	; 0xb7c8 <hsv_to_rgb+0x318>
    b63a:	08 f4       	brcc	.+2      	; 0xb63e <hsv_to_rgb+0x18e>
    b63c:	9c c0       	rjmp	.+312    	; 0xb776 <hsv_to_rgb+0x2c6>
    b63e:	e5 30       	cpi	r30, 0x05	; 5
    b640:	09 f0       	breq	.+2      	; 0xb644 <hsv_to_rgb+0x194>
    b642:	be c0       	rjmp	.+380    	; 0xb7c0 <hsv_to_rgb+0x310>
    b644:	20 e0       	ldi	r18, 0x00	; 0
    b646:	30 e0       	ldi	r19, 0x00	; 0
    b648:	4f e7       	ldi	r20, 0x7F	; 127
    b64a:	53 e4       	ldi	r21, 0x43	; 67
    b64c:	c5 01       	movw	r24, r10
    b64e:	b4 01       	movw	r22, r8
    b650:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b654:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b658:	6c 87       	std	Y+12, r22	; 0x0c
    b65a:	20 e0       	ldi	r18, 0x00	; 0
    b65c:	30 e0       	ldi	r19, 0x00	; 0
    b65e:	4f e7       	ldi	r20, 0x7F	; 127
    b660:	53 e4       	ldi	r21, 0x43	; 67
    b662:	6f 81       	ldd	r22, Y+7	; 0x07
    b664:	78 85       	ldd	r23, Y+8	; 0x08
    b666:	89 85       	ldd	r24, Y+9	; 0x09
    b668:	9a 85       	ldd	r25, Y+10	; 0x0a
    b66a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b66e:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b672:	6b 87       	std	Y+11, r22	; 0x0b
    b674:	20 e0       	ldi	r18, 0x00	; 0
    b676:	30 e0       	ldi	r19, 0x00	; 0
    b678:	4f e7       	ldi	r20, 0x7F	; 127
    b67a:	53 e4       	ldi	r21, 0x43	; 67
    b67c:	6b 81       	ldd	r22, Y+3	; 0x03
    b67e:	7c 81       	ldd	r23, Y+4	; 0x04
    b680:	8d 81       	ldd	r24, Y+5	; 0x05
    b682:	9e 81       	ldd	r25, Y+6	; 0x06
    b684:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b688:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
			break;
		case 5:
			r = v;
			g = p;
			b = q;
			break;
    b68c:	2a c0       	rjmp	.+84     	; 0xb6e2 <hsv_to_rgb+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    b68e:	99 23       	and	r25, r25
    b690:	09 f4       	brne	.+2      	; 0xb694 <hsv_to_rgb+0x1e4>
    b692:	4e c0       	rjmp	.+156    	; 0xb730 <hsv_to_rgb+0x280>
    b694:	91 30       	cpi	r25, 0x01	; 1
    b696:	09 f0       	breq	.+2      	; 0xb69a <hsv_to_rgb+0x1ea>
    b698:	93 c0       	rjmp	.+294    	; 0xb7c0 <hsv_to_rgb+0x310>
    b69a:	20 e0       	ldi	r18, 0x00	; 0
    b69c:	30 e0       	ldi	r19, 0x00	; 0
    b69e:	4f e7       	ldi	r20, 0x7F	; 127
    b6a0:	53 e4       	ldi	r21, 0x43	; 67
    b6a2:	6f 81       	ldd	r22, Y+7	; 0x07
    b6a4:	78 85       	ldd	r23, Y+8	; 0x08
    b6a6:	89 85       	ldd	r24, Y+9	; 0x09
    b6a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b6aa:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b6ae:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b6b2:	6c 87       	std	Y+12, r22	; 0x0c
    b6b4:	20 e0       	ldi	r18, 0x00	; 0
    b6b6:	30 e0       	ldi	r19, 0x00	; 0
    b6b8:	4f e7       	ldi	r20, 0x7F	; 127
    b6ba:	53 e4       	ldi	r21, 0x43	; 67
    b6bc:	6b 81       	ldd	r22, Y+3	; 0x03
    b6be:	7c 81       	ldd	r23, Y+4	; 0x04
    b6c0:	8d 81       	ldd	r24, Y+5	; 0x05
    b6c2:	9e 81       	ldd	r25, Y+6	; 0x06
    b6c4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b6c8:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b6cc:	6b 87       	std	Y+11, r22	; 0x0b
    b6ce:	20 e0       	ldi	r18, 0x00	; 0
    b6d0:	30 e0       	ldi	r19, 0x00	; 0
    b6d2:	4f e7       	ldi	r20, 0x7F	; 127
    b6d4:	53 e4       	ldi	r21, 0x43	; 67
    b6d6:	c5 01       	movw	r24, r10
    b6d8:	b4 01       	movw	r22, r8
    b6da:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b6de:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    b6e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    b6e4:	f1 01       	movw	r30, r2
    b6e6:	20 83       	st	Z, r18
	*blue = (uint8_t)(b*255);
    b6e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    b6ea:	e9 81       	ldd	r30, Y+1	; 0x01
    b6ec:	fa 81       	ldd	r31, Y+2	; 0x02
    b6ee:	20 83       	st	Z, r18
	*green = (uint8_t)(g*255);
    b6f0:	f8 01       	movw	r30, r16
    b6f2:	60 83       	st	Z, r22
    b6f4:	07 c0       	rjmp	.+14     	; 0xb704 <hsv_to_rgb+0x254>
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
    b6f6:	e9 81       	ldd	r30, Y+1	; 0x01
    b6f8:	fa 81       	ldd	r31, Y+2	; 0x02
    b6fa:	b0 82       	st	Z, r11
    b6fc:	f8 01       	movw	r30, r16
    b6fe:	b0 82       	st	Z, r11
    b700:	f1 01       	movw	r30, r2
    b702:	b0 82       	st	Z, r11
			break;
	}
	*red = (uint8_t)(r*255);
	*blue = (uint8_t)(b*255);
	*green = (uint8_t)(g*255);
    b704:	2c 96       	adiw	r28, 0x0c	; 12
    b706:	cd bf       	out	0x3d, r28	; 61
    b708:	de bf       	out	0x3e, r29	; 62
    b70a:	df 91       	pop	r29
    b70c:	cf 91       	pop	r28
    b70e:	1f 91       	pop	r17
    b710:	0f 91       	pop	r16
    b712:	ff 90       	pop	r15
    b714:	ef 90       	pop	r14
    b716:	df 90       	pop	r13
    b718:	cf 90       	pop	r12
    b71a:	bf 90       	pop	r11
    b71c:	af 90       	pop	r10
    b71e:	9f 90       	pop	r9
    b720:	8f 90       	pop	r8
    b722:	7f 90       	pop	r7
    b724:	6f 90       	pop	r6
    b726:	5f 90       	pop	r5
    b728:	4f 90       	pop	r4
    b72a:	3f 90       	pop	r3
    b72c:	2f 90       	pop	r2
    b72e:	08 95       	ret
    b730:	20 e0       	ldi	r18, 0x00	; 0
    b732:	30 e0       	ldi	r19, 0x00	; 0
    b734:	4f e7       	ldi	r20, 0x7F	; 127
    b736:	53 e4       	ldi	r21, 0x43	; 67
    b738:	c5 01       	movw	r24, r10
    b73a:	b4 01       	movw	r22, r8
    b73c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b740:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b744:	6c 87       	std	Y+12, r22	; 0x0c
    b746:	20 e0       	ldi	r18, 0x00	; 0
    b748:	30 e0       	ldi	r19, 0x00	; 0
    b74a:	4f e7       	ldi	r20, 0x7F	; 127
    b74c:	53 e4       	ldi	r21, 0x43	; 67
    b74e:	6b 81       	ldd	r22, Y+3	; 0x03
    b750:	7c 81       	ldd	r23, Y+4	; 0x04
    b752:	8d 81       	ldd	r24, Y+5	; 0x05
    b754:	9e 81       	ldd	r25, Y+6	; 0x06
    b756:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b75a:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b75e:	6b 87       	std	Y+11, r22	; 0x0b
    b760:	20 e0       	ldi	r18, 0x00	; 0
    b762:	30 e0       	ldi	r19, 0x00	; 0
    b764:	4f e7       	ldi	r20, 0x7F	; 127
    b766:	53 e4       	ldi	r21, 0x43	; 67
    b768:	c7 01       	movw	r24, r14
    b76a:	b6 01       	movw	r22, r12
    b76c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b770:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
	{
		case 0:
			r = v;
			g = t;
			b = p;
			break;
    b774:	b6 cf       	rjmp	.-148    	; 0xb6e2 <hsv_to_rgb+0x232>
    b776:	20 e0       	ldi	r18, 0x00	; 0
    b778:	30 e0       	ldi	r19, 0x00	; 0
    b77a:	4f e7       	ldi	r20, 0x7F	; 127
    b77c:	53 e4       	ldi	r21, 0x43	; 67
    b77e:	6b 81       	ldd	r22, Y+3	; 0x03
    b780:	7c 81       	ldd	r23, Y+4	; 0x04
    b782:	8d 81       	ldd	r24, Y+5	; 0x05
    b784:	9e 81       	ldd	r25, Y+6	; 0x06
    b786:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b78a:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b78e:	6c 87       	std	Y+12, r22	; 0x0c
    b790:	20 e0       	ldi	r18, 0x00	; 0
    b792:	30 e0       	ldi	r19, 0x00	; 0
    b794:	4f e7       	ldi	r20, 0x7F	; 127
    b796:	53 e4       	ldi	r21, 0x43	; 67
    b798:	c5 01       	movw	r24, r10
    b79a:	b4 01       	movw	r22, r8
    b79c:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b7a0:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b7a4:	6b 87       	std	Y+11, r22	; 0x0b
    b7a6:	20 e0       	ldi	r18, 0x00	; 0
    b7a8:	30 e0       	ldi	r19, 0x00	; 0
    b7aa:	4f e7       	ldi	r20, 0x7F	; 127
    b7ac:	53 e4       	ldi	r21, 0x43	; 67
    b7ae:	6f 81       	ldd	r22, Y+7	; 0x07
    b7b0:	78 85       	ldd	r23, Y+8	; 0x08
    b7b2:	89 85       	ldd	r24, Y+9	; 0x09
    b7b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    b7b6:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b7ba:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    b7be:	91 cf       	rjmp	.-222    	; 0xb6e2 <hsv_to_rgb+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    b7c0:	60 e0       	ldi	r22, 0x00	; 0
    b7c2:	1b 86       	std	Y+11, r1	; 0x0b
    b7c4:	1c 86       	std	Y+12, r1	; 0x0c
    b7c6:	8d cf       	rjmp	.-230    	; 0xb6e2 <hsv_to_rgb+0x232>
    b7c8:	20 e0       	ldi	r18, 0x00	; 0
    b7ca:	30 e0       	ldi	r19, 0x00	; 0
    b7cc:	4f e7       	ldi	r20, 0x7F	; 127
    b7ce:	53 e4       	ldi	r21, 0x43	; 67
    b7d0:	c7 01       	movw	r24, r14
    b7d2:	b6 01       	movw	r22, r12
    b7d4:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b7d8:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b7dc:	6c 87       	std	Y+12, r22	; 0x0c
    b7de:	20 e0       	ldi	r18, 0x00	; 0
    b7e0:	30 e0       	ldi	r19, 0x00	; 0
    b7e2:	4f e7       	ldi	r20, 0x7F	; 127
    b7e4:	53 e4       	ldi	r21, 0x43	; 67
    b7e6:	c5 01       	movw	r24, r10
    b7e8:	b4 01       	movw	r22, r8
    b7ea:	3f cf       	rjmp	.-386    	; 0xb66a <hsv_to_rgb+0x1ba>
    b7ec:	20 e0       	ldi	r18, 0x00	; 0
    b7ee:	30 e0       	ldi	r19, 0x00	; 0
    b7f0:	4f e7       	ldi	r20, 0x7F	; 127
    b7f2:	53 e4       	ldi	r21, 0x43	; 67
    b7f4:	6b 81       	ldd	r22, Y+3	; 0x03
    b7f6:	7c 81       	ldd	r23, Y+4	; 0x04
    b7f8:	8d 81       	ldd	r24, Y+5	; 0x05
    b7fa:	9e 81       	ldd	r25, Y+6	; 0x06
    b7fc:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    b800:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    b804:	6c 87       	std	Y+12, r22	; 0x0c
    b806:	20 e0       	ldi	r18, 0x00	; 0
    b808:	30 e0       	ldi	r19, 0x00	; 0
    b80a:	4f e7       	ldi	r20, 0x7F	; 127
    b80c:	53 e4       	ldi	r21, 0x43	; 67
    b80e:	c7 01       	movw	r24, r14
    b810:	b6 01       	movw	r22, r12
    b812:	58 cf       	rjmp	.-336    	; 0xb6c4 <hsv_to_rgb+0x214>

0000b814 <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    b814:	ef 92       	push	r14
    b816:	ff 92       	push	r15
    b818:	0f 93       	push	r16
    b81a:	1f 93       	push	r17
    b81c:	cf 93       	push	r28
    b81e:	df 93       	push	r29
    b820:	00 d0       	rcall	.+0      	; 0xb822 <set_hsv+0xe>
    b822:	cd b7       	in	r28, 0x3d	; 61
    b824:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    b826:	9e 01       	movw	r18, r28
    b828:	2f 5f       	subi	r18, 0xFF	; 255
    b82a:	3f 4f       	sbci	r19, 0xFF	; 255
    b82c:	79 01       	movw	r14, r18
    b82e:	8e 01       	movw	r16, r28
    b830:	0e 5f       	subi	r16, 0xFE	; 254
    b832:	1f 4f       	sbci	r17, 0xFF	; 255
    b834:	2e 5f       	subi	r18, 0xFE	; 254
    b836:	3f 4f       	sbci	r19, 0xFF	; 255
    b838:	0e 94 58 5a 	call	0xb4b0	; 0xb4b0 <hsv_to_rgb>
	set_rgb(r,g,b);
    b83c:	89 81       	ldd	r24, Y+1	; 0x01
    b83e:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    b840:	4b 81       	ldd	r20, Y+3	; 0x03
    b842:	50 e0       	ldi	r21, 0x00	; 0
    b844:	e0 e4       	ldi	r30, 0x40	; 64
    b846:	fa e0       	ldi	r31, 0x0A	; 10
    b848:	42 af       	std	Z+58, r20	; 0x3a
    b84a:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    b84c:	30 e0       	ldi	r19, 0x00	; 0
    b84e:	20 af       	std	Z+56, r18	; 0x38
    b850:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led(void){ return TCD1.CCABUF; }
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    b852:	90 e0       	ldi	r25, 0x00	; 0
    b854:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    b858:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
}
    b85c:	23 96       	adiw	r28, 0x03	; 3
    b85e:	cd bf       	out	0x3d, r28	; 61
    b860:	de bf       	out	0x3e, r29	; 62
    b862:	df 91       	pop	r29
    b864:	cf 91       	pop	r28
    b866:	1f 91       	pop	r17
    b868:	0f 91       	pop	r16
    b86a:	ff 90       	pop	r15
    b86c:	ef 90       	pop	r14
    b86e:	08 95       	ret

0000b870 <meas_find_median>:
	#endif
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len){
    b870:	cf 93       	push	r28
    b872:	df 93       	push	r29
    b874:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    b876:	61 30       	cpi	r22, 0x01	; 1
    b878:	09 f4       	brne	.+2      	; 0xb87c <meas_find_median+0xc>
    b87a:	48 c0       	rjmp	.+144    	; 0xb90c <meas_find_median+0x9c>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    b87c:	62 30       	cpi	r22, 0x02	; 2
    b87e:	09 f4       	brne	.+2      	; 0xb882 <meas_find_median+0x12>
    b880:	4a c0       	rjmp	.+148    	; 0xb916 <meas_find_median+0xa6>
	
	for(uint8_t i=0; i<arr_len ; i++){
    b882:	66 23       	and	r22, r22
    b884:	79 f1       	breq	.+94     	; 0xb8e4 <meas_find_median+0x74>
    b886:	de 01       	movw	r26, r28
    b888:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    b88a:	8f 5f       	subi	r24, 0xFF	; 255
    b88c:	68 17       	cp	r22, r24
    b88e:	d9 f0       	breq	.+54     	; 0xb8c6 <meas_find_median+0x56>
    b890:	98 2f       	mov	r25, r24
			if(meas[j] < meas[i]){
    b892:	e9 2f       	mov	r30, r25
    b894:	f0 e0       	ldi	r31, 0x00	; 0
    b896:	ee 0f       	add	r30, r30
    b898:	ff 1f       	adc	r31, r31
    b89a:	ec 0f       	add	r30, r28
    b89c:	fd 1f       	adc	r31, r29
    b89e:	40 81       	ld	r20, Z
    b8a0:	51 81       	ldd	r21, Z+1	; 0x01
    b8a2:	2d 91       	ld	r18, X+
    b8a4:	3c 91       	ld	r19, X
    b8a6:	11 97       	sbiw	r26, 0x01	; 1
    b8a8:	42 17       	cp	r20, r18
    b8aa:	53 07       	cpc	r21, r19
    b8ac:	2c f4       	brge	.+10     	; 0xb8b8 <meas_find_median+0x48>
				int16_t temp = meas[i];
				meas[i] = meas[j];
    b8ae:	4d 93       	st	X+, r20
    b8b0:	5c 93       	st	X, r21
    b8b2:	11 97       	sbiw	r26, 0x01	; 1
				meas[j] = temp;
    b8b4:	20 83       	st	Z, r18
    b8b6:	31 83       	std	Z+1, r19	; 0x01
int16_t meas_find_median(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++){
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    b8b8:	9f 5f       	subi	r25, 0xFF	; 255
    b8ba:	69 13       	cpse	r22, r25
    b8bc:	ea cf       	rjmp	.-44     	; 0xb892 <meas_find_median+0x22>
    b8be:	12 96       	adiw	r26, 0x02	; 2
    b8c0:	8f 5f       	subi	r24, 0xFF	; 255
    b8c2:	68 13       	cpse	r22, r24
    b8c4:	e5 cf       	rjmp	.-54     	; 0xb890 <meas_find_median+0x20>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    b8c6:	60 ff       	sbrs	r22, 0
    b8c8:	0d c0       	rjmp	.+26     	; 0xb8e4 <meas_find_median+0x74>
	else return meas[arr_len/2];
    b8ca:	66 95       	lsr	r22
    b8cc:	26 2f       	mov	r18, r22
    b8ce:	30 e0       	ldi	r19, 0x00	; 0
    b8d0:	22 0f       	add	r18, r18
    b8d2:	33 1f       	adc	r19, r19
    b8d4:	fe 01       	movw	r30, r28
    b8d6:	e2 0f       	add	r30, r18
    b8d8:	f3 1f       	adc	r31, r19
    b8da:	80 81       	ld	r24, Z
    b8dc:	91 81       	ldd	r25, Z+1	; 0x01
    b8de:	df 91       	pop	r29
    b8e0:	cf 91       	pop	r28
    b8e2:	08 95       	ret
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    b8e4:	66 95       	lsr	r22
    b8e6:	fe 01       	movw	r30, r28
    b8e8:	e6 0f       	add	r30, r22
    b8ea:	f1 1d       	adc	r31, r1
    b8ec:	e6 0f       	add	r30, r22
    b8ee:	f1 1d       	adc	r31, r1
    b8f0:	32 97       	sbiw	r30, 0x02	; 2
    b8f2:	22 81       	ldd	r18, Z+2	; 0x02
    b8f4:	33 81       	ldd	r19, Z+3	; 0x03
    b8f6:	80 81       	ld	r24, Z
    b8f8:	91 81       	ldd	r25, Z+1	; 0x01
    b8fa:	82 0f       	add	r24, r18
    b8fc:	93 1f       	adc	r25, r19
    b8fe:	97 fd       	sbrc	r25, 7
    b900:	12 c0       	rjmp	.+36     	; 0xb926 <meas_find_median+0xb6>
    b902:	95 95       	asr	r25
    b904:	87 95       	ror	r24
	else return meas[arr_len/2];
    b906:	df 91       	pop	r29
    b908:	cf 91       	pop	r28
    b90a:	08 95       	ret
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
    b90c:	88 81       	ld	r24, Y
    b90e:	99 81       	ldd	r25, Y+1	; 0x01
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
	else return meas[arr_len/2];
    b910:	df 91       	pop	r29
    b912:	cf 91       	pop	r28
    b914:	08 95       	ret

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    b916:	28 81       	ld	r18, Y
    b918:	39 81       	ldd	r19, Y+1	; 0x01
    b91a:	8a 81       	ldd	r24, Y+2	; 0x02
    b91c:	9b 81       	ldd	r25, Y+3	; 0x03
    b91e:	82 0f       	add	r24, r18
    b920:	93 1f       	adc	r25, r19
    b922:	97 ff       	sbrs	r25, 7
    b924:	ee cf       	rjmp	.-36     	; 0xb902 <meas_find_median+0x92>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    b926:	01 96       	adiw	r24, 0x01	; 1
    b928:	ec cf       	rjmp	.-40     	; 0xb902 <meas_find_median+0x92>

0000b92a <get_red_sensor>:
	#endif		
}

#ifndef AUDIO_DROPLET

int16_t get_red_sensor(){
    b92a:	cf 93       	push	r28
    b92c:	df 93       	push	r29
    b92e:	cd b7       	in	r28, 0x3d	; 61
    b930:	de b7       	in	r29, 0x3e	; 62
    b932:	2a 97       	sbiw	r28, 0x0a	; 10
    b934:	cd bf       	out	0x3d, r28	; 61
    b936:	de bf       	out	0x3e, r29	; 62
    b938:	fe 01       	movw	r30, r28
    b93a:	31 96       	adiw	r30, 0x01	; 1
    b93c:	ae 01       	movw	r20, r28
    b93e:	45 5f       	subi	r20, 0xF5	; 245
    b940:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    b942:	31 e0       	ldi	r19, 0x01	; 1
int16_t get_red_sensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    b944:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    b948:	80 68       	ori	r24, 0x80	; 128
    b94a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    b94e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
    b952:	88 23       	and	r24, r24
    b954:	e1 f3       	breq	.-8      	; 0xb94e <get_red_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    b956:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    b95a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    b95e:	90 e0       	ldi	r25, 0x00	; 0
    b960:	92 2b       	or	r25, r18
    b962:	95 95       	asr	r25
    b964:	87 95       	ror	r24
    b966:	95 95       	asr	r25
    b968:	87 95       	ror	r24
    b96a:	95 95       	asr	r25
    b96c:	87 95       	ror	r24
    b96e:	95 95       	asr	r25
    b970:	87 95       	ror	r24
    b972:	81 93       	st	Z+, r24
    b974:	91 93       	st	Z+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    b976:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>

int16_t get_red_sensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
    b97a:	e4 17       	cp	r30, r20
    b97c:	f5 07       	cpc	r31, r21
    b97e:	11 f7       	brne	.-60     	; 0xb944 <get_red_sensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	red_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    b980:	63 e0       	ldi	r22, 0x03	; 3
    b982:	ce 01       	movw	r24, r28
    b984:	05 96       	adiw	r24, 0x05	; 5
    b986:	0e 94 38 5c 	call	0xb870	; 0xb870 <meas_find_median>
	return red_val;
}
    b98a:	2a 96       	adiw	r28, 0x0a	; 10
    b98c:	cd bf       	out	0x3d, r28	; 61
    b98e:	de bf       	out	0x3e, r29	; 62
    b990:	df 91       	pop	r29
    b992:	cf 91       	pop	r28
    b994:	08 95       	ret

0000b996 <get_green_sensor>:

int16_t get_green_sensor(){
    b996:	cf 93       	push	r28
    b998:	df 93       	push	r29
    b99a:	cd b7       	in	r28, 0x3d	; 61
    b99c:	de b7       	in	r29, 0x3e	; 62
    b99e:	2a 97       	sbiw	r28, 0x0a	; 10
    b9a0:	cd bf       	out	0x3d, r28	; 61
    b9a2:	de bf       	out	0x3e, r29	; 62
    b9a4:	fe 01       	movw	r30, r28
    b9a6:	31 96       	adiw	r30, 0x01	; 1
    b9a8:	ae 01       	movw	r20, r28
    b9aa:	45 5f       	subi	r20, 0xF5	; 245
    b9ac:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    b9ae:	31 e0       	ldi	r19, 0x01	; 1
int16_t get_green_sensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    b9b0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
    b9b4:	80 68       	ori	r24, 0x80	; 128
    b9b6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    b9ba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    b9be:	88 23       	and	r24, r24
    b9c0:	e1 f3       	breq	.-8      	; 0xb9ba <get_green_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    b9c2:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    b9c6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    b9ca:	90 e0       	ldi	r25, 0x00	; 0
    b9cc:	92 2b       	or	r25, r18
    b9ce:	95 95       	asr	r25
    b9d0:	87 95       	ror	r24
    b9d2:	95 95       	asr	r25
    b9d4:	87 95       	ror	r24
    b9d6:	95 95       	asr	r25
    b9d8:	87 95       	ror	r24
    b9da:	95 95       	asr	r25
    b9dc:	87 95       	ror	r24
    b9de:	81 93       	st	Z+, r24
    b9e0:	91 93       	st	Z+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    b9e2:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>

int16_t get_green_sensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    b9e6:	e4 17       	cp	r30, r20
    b9e8:	f5 07       	cpc	r31, r21
    b9ea:	11 f7       	brne	.-60     	; 0xb9b0 <get_green_sensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	green_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    b9ec:	63 e0       	ldi	r22, 0x03	; 3
    b9ee:	ce 01       	movw	r24, r28
    b9f0:	05 96       	adiw	r24, 0x05	; 5
    b9f2:	0e 94 38 5c 	call	0xb870	; 0xb870 <meas_find_median>

	return green_val;
}
    b9f6:	2a 96       	adiw	r28, 0x0a	; 10
    b9f8:	cd bf       	out	0x3d, r28	; 61
    b9fa:	de bf       	out	0x3e, r29	; 62
    b9fc:	df 91       	pop	r29
    b9fe:	cf 91       	pop	r28
    ba00:	08 95       	ret

0000ba02 <get_blue_sensor>:

int16_t get_blue_sensor(){
    ba02:	cf 93       	push	r28
    ba04:	df 93       	push	r29
    ba06:	cd b7       	in	r28, 0x3d	; 61
    ba08:	de b7       	in	r29, 0x3e	; 62
    ba0a:	2a 97       	sbiw	r28, 0x0a	; 10
    ba0c:	cd bf       	out	0x3d, r28	; 61
    ba0e:	de bf       	out	0x3e, r29	; 62
    ba10:	fe 01       	movw	r30, r28
    ba12:	31 96       	adiw	r30, 0x01	; 1
    ba14:	ae 01       	movw	r20, r28
    ba16:	45 5f       	subi	r20, 0xF5	; 245
    ba18:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    ba1a:	31 e0       	ldi	r19, 0x01	; 1
int16_t get_blue_sensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    ba1c:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
    ba20:	80 68       	ori	r24, 0x80	; 128
    ba22:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    ba26:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
    ba2a:	88 23       	and	r24, r24
    ba2c:	e1 f3       	breq	.-8      	; 0xba26 <get_blue_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    ba2e:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    ba32:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    ba36:	90 e0       	ldi	r25, 0x00	; 0
    ba38:	92 2b       	or	r25, r18
    ba3a:	95 95       	asr	r25
    ba3c:	87 95       	ror	r24
    ba3e:	95 95       	asr	r25
    ba40:	87 95       	ror	r24
    ba42:	95 95       	asr	r25
    ba44:	87 95       	ror	r24
    ba46:	95 95       	asr	r25
    ba48:	87 95       	ror	r24
    ba4a:	81 93       	st	Z+, r24
    ba4c:	91 93       	st	Z+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    ba4e:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>

int16_t get_blue_sensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    ba52:	e4 17       	cp	r30, r20
    ba54:	f5 07       	cpc	r31, r21
    ba56:	11 f7       	brne	.-60     	; 0xba1c <get_blue_sensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
		//printf("%6d ", meas[meas_count]);
	}		
	//printf("\r\n");
	blue_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    ba58:	63 e0       	ldi	r22, 0x03	; 3
    ba5a:	ce 01       	movw	r24, r28
    ba5c:	05 96       	adiw	r24, 0x05	; 5
    ba5e:	0e 94 38 5c 	call	0xb870	; 0xb870 <meas_find_median>
		
	return blue_val;
}
    ba62:	2a 96       	adiw	r28, 0x0a	; 10
    ba64:	cd bf       	out	0x3d, r28	; 61
    ba66:	de bf       	out	0x3e, r29	; 62
    ba68:	df 91       	pop	r29
    ba6a:	cf 91       	pop	r28
    ba6c:	08 95       	ret

0000ba6e <rgb_sensor_init>:
	uint32_t i;
	float f;
} u;

void rgb_sensor_init()
{
    ba6e:	cf 93       	push	r28
		delay_ms(5);
		result = TWI_MasterWrite(RGB_SENSE_ADDR, &(power_on_sequence[6]), 2);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,4);
		delay_ms(5);
	#else		
		RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    ba70:	80 ee       	ldi	r24, 0xE0	; 224
    ba72:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>

		ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    ba76:	80 e2       	ldi	r24, 0x20	; 32
    ba78:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
		ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    ba7c:	86 e1       	ldi	r24, 0x16	; 22
    ba7e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    ba82:	86 e0       	ldi	r24, 0x06	; 6
    ba84:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
		/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

		ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    ba88:	83 e0       	ldi	r24, 0x03	; 3
    ba8a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    ba8e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    ba92:	87 e0       	ldi	r24, 0x07	; 7
    ba94:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
	
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    ba98:	8c e2       	ldi	r24, 0x2C	; 44
    ba9a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    ba9e:	84 e3       	ldi	r24, 0x34	; 52
    baa0:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
		ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    baa4:	8c e3       	ldi	r24, 0x3C	; 60
    baa6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
	
		ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    baaa:	80 b5       	in	r24, 0x20	; 32
    baac:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
		ADCA.CALH = PRODSIGNATURES_ADCACAL1;
    bab0:	81 b5       	in	r24, 0x21	; 33
    bab2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>

		ADCA.CTRLA = ADC_ENABLE_bm;
    bab6:	81 e0       	ldi	r24, 0x01	; 1
    bab8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    babc:	8f e8       	ldi	r24, 0x8F	; 143
    babe:	91 e0       	ldi	r25, 0x01	; 1
    bac0:	01 97       	sbiw	r24, 0x01	; 1
    bac2:	f1 f7       	brne	.-4      	; 0xbac0 <rgb_sensor_init+0x52>
    bac4:	00 c0       	rjmp	.+0      	; 0xbac6 <rgb_sensor_init+0x58>
    bac6:	00 00       	nop
	
		//read_color_settings();
	
		delay_us(50);
		const int8_t num_samples = 3;
		get_red_sensor(); get_blue_sensor(); get_green_sensor();
    bac8:	0e 94 95 5c 	call	0xb92a	; 0xb92a <get_red_sensor>
    bacc:	0e 94 01 5d 	call	0xba02	; 0xba02 <get_blue_sensor>
    bad0:	0e 94 cb 5c 	call	0xb996	; 0xb996 <get_green_sensor>
		delay_ms(10);
    bad4:	8a e0       	ldi	r24, 0x0A	; 10
    bad6:	90 e0       	ldi	r25, 0x00	; 0
    bad8:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    badc:	c0 e0       	ldi	r28, 0x00	; 0
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
		{
			r_avg+=get_red_sensor();
    bade:	0e 94 95 5c 	call	0xb92a	; 0xb92a <get_red_sensor>
			g_avg+=get_green_sensor();
    bae2:	0e 94 cb 5c 	call	0xb996	; 0xb996 <get_green_sensor>
			b_avg+=get_blue_sensor();
    bae6:	0e 94 01 5d 	call	0xba02	; 0xba02 <get_blue_sensor>
			delay_ms(10);
    baea:	8a e0       	ldi	r24, 0x0A	; 10
    baec:	90 e0       	ldi	r25, 0x00	; 0
    baee:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
		delay_us(50);
		const int8_t num_samples = 3;
		get_red_sensor(); get_blue_sensor(); get_green_sensor();
		delay_ms(10);
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
    baf2:	cf 5f       	subi	r28, 0xFF	; 255
    baf4:	c3 30       	cpi	r28, 0x03	; 3
    baf6:	99 f7       	brne	.-26     	; 0xbade <rgb_sensor_init+0x70>
		}
		r_baseline= r_avg/num_samples;
		g_baseline= g_avg/num_samples;
		b_baseline= b_avg/num_samples;
		//printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
		r_baseline = 0;
    baf8:	10 92 0b 26 	sts	0x260B, r1	; 0x80260b <r_baseline>
    bafc:	10 92 0c 26 	sts	0x260C, r1	; 0x80260c <r_baseline+0x1>
		g_baseline = 0;
    bb00:	10 92 09 26 	sts	0x2609, r1	; 0x802609 <g_baseline>
    bb04:	10 92 0a 26 	sts	0x260A, r1	; 0x80260a <g_baseline+0x1>
		b_baseline = 0;	
    bb08:	10 92 07 26 	sts	0x2607, r1	; 0x802607 <b_baseline>
    bb0c:	10 92 08 26 	sts	0x2608, r1	; 0x802608 <b_baseline+0x1>
	#endif		
}
    bb10:	cf 91       	pop	r28
    bb12:	08 95       	ret

0000bb14 <get_rgb>:

#endif


void get_rgb(int16_t *r, int16_t *g, int16_t *b)
{
    bb14:	af 92       	push	r10
    bb16:	bf 92       	push	r11
    bb18:	cf 92       	push	r12
    bb1a:	df 92       	push	r13
    bb1c:	ef 92       	push	r14
    bb1e:	ff 92       	push	r15
    bb20:	0f 93       	push	r16
    bb22:	1f 93       	push	r17
    bb24:	cf 93       	push	r28
    bb26:	df 93       	push	r29
    bb28:	5c 01       	movw	r10, r24
    bb2a:	6b 01       	movw	r12, r22
    bb2c:	7a 01       	movw	r14, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = get_red_sensor();
    bb2e:	0e 94 95 5c 	call	0xb92a	; 0xb92a <get_red_sensor>
    bb32:	8c 01       	movw	r16, r24
		gTemp = get_green_sensor();
    bb34:	0e 94 cb 5c 	call	0xb996	; 0xb996 <get_green_sensor>
    bb38:	ec 01       	movw	r28, r24
		bTemp = get_blue_sensor();		
    bb3a:	0e 94 01 5d 	call	0xba02	; 0xba02 <get_blue_sensor>
		rTemp = rTemp - r_baseline;
    bb3e:	20 91 0b 26 	lds	r18, 0x260B	; 0x80260b <r_baseline>
    bb42:	30 91 0c 26 	lds	r19, 0x260C	; 0x80260c <r_baseline+0x1>
    bb46:	02 1b       	sub	r16, r18
    bb48:	13 0b       	sbc	r17, r19
		gTemp = gTemp - g_baseline;
    bb4a:	20 91 09 26 	lds	r18, 0x2609	; 0x802609 <g_baseline>
    bb4e:	30 91 0a 26 	lds	r19, 0x260A	; 0x80260a <g_baseline+0x1>
    bb52:	c2 1b       	sub	r28, r18
    bb54:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    bb56:	20 91 07 26 	lds	r18, 0x2607	; 0x802607 <b_baseline>
    bb5a:	30 91 08 26 	lds	r19, 0x2608	; 0x802608 <b_baseline+0x1>
    bb5e:	82 1b       	sub	r24, r18
    bb60:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    bb62:	a1 14       	cp	r10, r1
    bb64:	b1 04       	cpc	r11, r1
    bb66:	19 f0       	breq	.+6      	; 0xbb6e <get_rgb+0x5a>
    bb68:	f5 01       	movw	r30, r10
    bb6a:	00 83       	st	Z, r16
    bb6c:	11 83       	std	Z+1, r17	; 0x01
		if(g!=NULL) *g = gTemp;
    bb6e:	c1 14       	cp	r12, r1
    bb70:	d1 04       	cpc	r13, r1
    bb72:	19 f0       	breq	.+6      	; 0xbb7a <get_rgb+0x66>
    bb74:	f6 01       	movw	r30, r12
    bb76:	c0 83       	st	Z, r28
    bb78:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    bb7a:	e1 14       	cp	r14, r1
    bb7c:	f1 04       	cpc	r15, r1
    bb7e:	19 f0       	breq	.+6      	; 0xbb86 <get_rgb+0x72>
    bb80:	f7 01       	movw	r30, r14
    bb82:	80 83       	st	Z, r24
    bb84:	91 83       	std	Z+1, r25	; 0x01
	#endif
}
    bb86:	df 91       	pop	r29
    bb88:	cf 91       	pop	r28
    bb8a:	1f 91       	pop	r17
    bb8c:	0f 91       	pop	r16
    bb8e:	ff 90       	pop	r15
    bb90:	ef 90       	pop	r14
    bb92:	df 90       	pop	r13
    bb94:	cf 90       	pop	r12
    bb96:	bf 90       	pop	r11
    bb98:	af 90       	pop	r10
    bb9a:	08 95       	ret

0000bb9c <scheduler_free>:
	
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt){
    bb9c:	cf 93       	push	r28
    bb9e:	df 93       	push	r29
    bba0:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS])))){
    bba2:	86 e2       	ldi	r24, 0x26	; 38
    bba4:	cd 30       	cpi	r28, 0x0D	; 13
    bba6:	d8 07       	cpc	r29, r24
    bba8:	28 f0       	brcs	.+10     	; 0xbbb4 <scheduler_free+0x18>
    bbaa:	86 e2       	ldi	r24, 0x26	; 38
    bbac:	c9 39       	cpi	r28, 0x99	; 153
    bbae:	d8 07       	cpc	r29, r24
    bbb0:	b1 f0       	breq	.+44     	; 0xbbde <scheduler_free+0x42>
    bbb2:	a8 f0       	brcs	.+42     	; 0xbbde <scheduler_free+0x42>
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    bbb4:	df 93       	push	r29
    bbb6:	cf 93       	push	r28
    bbb8:	8d e9       	ldi	r24, 0x9D	; 157
    bbba:	9e e0       	ldi	r25, 0x0E	; 14
    bbbc:	9f 93       	push	r25
    bbbe:	8f 93       	push	r24
    bbc0:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		set_rgb(0,0,255);
    bbc4:	4f ef       	ldi	r20, 0xFF	; 255
    bbc6:	60 e0       	ldi	r22, 0x00	; 0
    bbc8:	80 e0       	ldi	r24, 0x00	; 0
    bbca:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
		delay_ms(60000);
    bbce:	80 e6       	ldi	r24, 0x60	; 96
    bbd0:	9a ee       	ldi	r25, 0xEA	; 234
    bbd2:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    bbd6:	0f 90       	pop	r0
    bbd8:	0f 90       	pop	r0
    bbda:	0f 90       	pop	r0
    bbdc:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    bbde:	1a 86       	std	Y+10, r1	; 0x0a
    bbe0:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    bbe2:	1c 82       	std	Y+4, r1	; 0x04
    bbe4:	1d 82       	std	Y+5, r1	; 0x05
    bbe6:	1e 82       	std	Y+6, r1	; 0x06
    bbe8:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_func = ((void (*)(void))NULL);
    bbea:	18 86       	std	Y+8, r1	; 0x08
    bbec:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    bbee:	18 82       	st	Y, r1
    bbf0:	19 82       	std	Y+1, r1	; 0x01
    bbf2:	1a 82       	std	Y+2, r1	; 0x02
    bbf4:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    bbf6:	1c 86       	std	Y+12, r1	; 0x0c
    bbf8:	1d 86       	std	Y+13, r1	; 0x0d
}
    bbfa:	df 91       	pop	r29
    bbfc:	cf 91       	pop	r28
    bbfe:	08 95       	ret

0000bc00 <scheduler_init>:

void scheduler_init(){
    bc00:	0f 93       	push	r16
    bc02:	1f 93       	push	r17
    bc04:	cf 93       	push	r28
    bc06:	df 93       	push	r29
	task_list = NULL;
    bc08:	10 92 32 2a 	sts	0x2A32, r1	; 0x802a32 <task_list>
    bc0c:	10 92 33 2a 	sts	0x2A33, r1	; 0x802a33 <task_list+0x1>
	num_tasks = 0;
    bc10:	10 92 e1 27 	sts	0x27E1, r1	; 0x8027e1 <num_tasks>
	task_executing = 0;
    bc14:	10 92 f1 29 	sts	0x29F1, r1	; 0x8029f1 <task_executing>
    bc18:	cd e0       	ldi	r28, 0x0D	; 13
    bc1a:	d6 e2       	ldi	r29, 0x26	; 38
    bc1c:	09 e9       	ldi	r16, 0x99	; 153
    bc1e:	16 e2       	ldi	r17, 0x26	; 38
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    bc20:	ce 01       	movw	r24, r28
    bc22:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <scheduler_free>
    bc26:	2e 96       	adiw	r28, 0x0e	; 14
    bc28:	0c 17       	cp	r16, r28
    bc2a:	1d 07       	cpc	r17, r29
    bc2c:	c9 f7       	brne	.-14     	; 0xbc20 <scheduler_init+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during initialization
    bc2e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    bc30:	f8 94       	cli
		// Set up real-time clock
		rtc_epoch = 0;
    bc32:	10 92 a0 26 	sts	0x26A0, r1	; 0x8026a0 <rtc_epoch>
    bc36:	10 92 a1 26 	sts	0x26A1, r1	; 0x8026a1 <rtc_epoch+0x1>
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    bc3a:	85 e0       	ldi	r24, 0x05	; 5
    bc3c:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    bc40:	83 e0       	ldi	r24, 0x03	; 3
    bc42:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    bc46:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    bc4a:	80 fd       	sbrc	r24, 0
    bc4c:	fc cf       	rjmp	.-8      	; 0xbc46 <scheduler_init+0x46>
		RTC.PER = 0xFFFF;
    bc4e:	2f ef       	ldi	r18, 0xFF	; 255
    bc50:	3f ef       	ldi	r19, 0xFF	; 255
    bc52:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    bc56:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    bc5a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    bc5e:	80 fd       	sbrc	r24, 0
    bc60:	fc cf       	rjmp	.-8      	; 0xbc5a <scheduler_init+0x5a>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    bc62:	81 e0       	ldi	r24, 0x01	; 1
    bc64:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    bc68:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    bc6c:	80 fd       	sbrc	r24, 0
    bc6e:	fc cf       	rjmp	.-8      	; 0xbc68 <scheduler_init+0x68>
		RTC.CNT = 0;
    bc70:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    bc74:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    bc78:	9f bf       	out	0x3f, r25	; 63
	}
}
    bc7a:	df 91       	pop	r29
    bc7c:	cf 91       	pop	r28
    bc7e:	1f 91       	pop	r17
    bc80:	0f 91       	pop	r16
    bc82:	08 95       	ret

0000bc84 <task_list_cleanup>:

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void task_list_cleanup(){
    bc84:	cf 92       	push	r12
    bc86:	df 92       	push	r13
    bc88:	ef 92       	push	r14
    bc8a:	ff 92       	push	r15
    bc8c:	0f 93       	push	r16
    bc8e:	1f 93       	push	r17
    bc90:	cf 93       	push	r28
    bc92:	df 93       	push	r29
	printf_P(PSTR("\tAttempting to restore task_list.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    bc94:	8c e3       	ldi	r24, 0x3C	; 60
    bc96:	9e e0       	ldi	r25, 0x0E	; 14
    bc98:	9f 93       	push	r25
    bc9a:	8f 93       	push	r24
    bc9c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	volatile Task_t* cur_task = task_list;
    bca0:	c0 91 32 2a 	lds	r28, 0x2A32	; 0x802a32 <task_list>
    bca4:	d0 91 33 2a 	lds	r29, 0x2A33	; 0x802a33 <task_list+0x1>
	//volatile Task_t* prev_task;
	uint32_t nextTime = get_time()+500;
    bca8:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    bcac:	ab 01       	movw	r20, r22
    bcae:	bc 01       	movw	r22, r24
    bcb0:	4c 50       	subi	r20, 0x0C	; 12
    bcb2:	5e 4f       	sbci	r21, 0xFE	; 254
    bcb4:	6f 4f       	sbci	r22, 0xFF	; 255
    bcb6:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    bcb8:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    bcba:	f8 94       	cli
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    bcbc:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bcc0:	8b 7f       	andi	r24, 0xFB	; 251
    bcc2:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (cur_task != NULL){
    bcc6:	0f 90       	pop	r0
    bcc8:	0f 90       	pop	r0
    bcca:	20 97       	sbiw	r28, 0x00	; 0
    bccc:	99 f1       	breq	.+102    	; 0xbd34 <task_list_cleanup+0xb0>
			cur_task->scheduled_time = nextTime;
    bcce:	48 83       	st	Y, r20
    bcd0:	59 83       	std	Y+1, r21	; 0x01
    bcd2:	6a 83       	std	Y+2, r22	; 0x02
    bcd4:	7b 83       	std	Y+3, r23	; 0x03
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    bcd6:	c8 80       	ld	r12, Y
    bcd8:	d9 80       	ldd	r13, Y+1	; 0x01
    bcda:	ea 80       	ldd	r14, Y+2	; 0x02
    bcdc:	fb 80       	ldd	r15, Y+3	; 0x03
    bcde:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
    bce2:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    bce6:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    bcea:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    bcee:	a0 e0       	ldi	r26, 0x00	; 0
    bcf0:	b0 e0       	ldi	r27, 0x00	; 0
    bcf2:	dc 01       	movw	r26, r24
    bcf4:	99 27       	eor	r25, r25
    bcf6:	88 27       	eor	r24, r24
    bcf8:	20 e0       	ldi	r18, 0x00	; 0
    bcfa:	30 e0       	ldi	r19, 0x00	; 0
    bcfc:	80 2b       	or	r24, r16
    bcfe:	91 2b       	or	r25, r17
    bd00:	a2 2b       	or	r26, r18
    bd02:	b3 2b       	or	r27, r19
    bd04:	8c 15       	cp	r24, r12
    bd06:	9d 05       	cpc	r25, r13
    bd08:	ae 05       	cpc	r26, r14
    bd0a:	bf 05       	cpc	r27, r15
    bd0c:	e8 f4       	brcc	.+58     	; 0xbd48 <task_list_cleanup+0xc4>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    bd0e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bd12:	8b 7f       	andi	r24, 0xFB	; 251
    bd14:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bd18:	04 c0       	rjmp	.+8      	; 0xbd22 <task_list_cleanup+0x9e>
	uint32_t nextTime = get_time()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
    bd1a:	48 83       	st	Y, r20
    bd1c:	59 83       	std	Y+1, r21	; 0x01
    bd1e:	6a 83       	std	Y+2, r22	; 0x02
    bd20:	7b 83       	std	Y+3, r23	; 0x03
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
				}
				first = 0;
			}
			nextTime += 500;
    bd22:	4c 50       	subi	r20, 0x0C	; 12
    bd24:	5e 4f       	sbci	r21, 0xFE	; 254
    bd26:	6f 4f       	sbci	r22, 0xFF	; 255
    bd28:	7f 4f       	sbci	r23, 0xFF	; 255
			cur_task = cur_task->next;
    bd2a:	0c 84       	ldd	r0, Y+12	; 0x0c
    bd2c:	dd 85       	ldd	r29, Y+13	; 0x0d
    bd2e:	c0 2d       	mov	r28, r0
	//volatile Task_t* prev_task;
	uint32_t nextTime = get_time()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
    bd30:	20 97       	sbiw	r28, 0x00	; 0
    bd32:	99 f7       	brne	.-26     	; 0xbd1a <task_list_cleanup+0x96>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    bd34:	ef bf       	out	0x3f, r30	; 63
			}
			nextTime += 500;
			cur_task = cur_task->next;
		}
	}
}
    bd36:	df 91       	pop	r29
    bd38:	cf 91       	pop	r28
    bd3a:	1f 91       	pop	r17
    bd3c:	0f 91       	pop	r16
    bd3e:	ff 90       	pop	r15
    bd40:	ef 90       	pop	r14
    bd42:	df 90       	pop	r13
    bd44:	cf 90       	pop	r12
    bd46:	08 95       	ret
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    bd48:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    bd4c:	80 fd       	sbrc	r24, 0
    bd4e:	fc cf       	rjmp	.-8      	; 0xbd48 <task_list_cleanup+0xc4>
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
    bd50:	88 81       	ld	r24, Y
    bd52:	99 81       	ldd	r25, Y+1	; 0x01
    bd54:	aa 81       	ldd	r26, Y+2	; 0x02
    bd56:	bb 81       	ldd	r27, Y+3	; 0x03
    bd58:	88 60       	ori	r24, 0x08	; 8
    bd5a:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    bd5e:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    bd62:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bd66:	84 60       	ori	r24, 0x04	; 4
    bd68:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bd6c:	da cf       	rjmp	.-76     	; 0xbd22 <task_list_cleanup+0x9e>

0000bd6e <remove_task>:
		//task_list_checkup();
	}
}

// Remove a task from the task queue
void remove_task(volatile Task_t* task){
    bd6e:	cf 93       	push	r28
    bd70:	dc 01       	movw	r26, r24
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    bd72:	86 e2       	ldi	r24, 0x26	; 38
    bd74:	ad 30       	cpi	r26, 0x0D	; 13
    bd76:	b8 07       	cpc	r27, r24
    bd78:	90 f1       	brcs	.+100    	; 0xbdde <remove_task+0x70>
    bd7a:	86 e2       	ldi	r24, 0x26	; 38
    bd7c:	ab 38       	cpi	r26, 0x8B	; 139
    bd7e:	b8 07       	cpc	r27, r24
    bd80:	09 f0       	breq	.+2      	; 0xbd84 <remove_task+0x16>
    bd82:	68 f5       	brcc	.+90     	; 0xbdde <remove_task+0x70>
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
		return;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    bd84:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    bd86:	f8 94       	cli
		if(task==NULL){
    bd88:	10 97       	sbiw	r26, 0x00	; 0
    bd8a:	31 f1       	breq	.+76     	; 0xbdd8 <remove_task+0x6a>
			continue;
		}
		if(task_list==task)	{
    bd8c:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    bd90:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    bd94:	ae 17       	cp	r26, r30
    bd96:	bf 07       	cpc	r27, r31
    bd98:	49 f4       	brne	.+18     	; 0xbdac <remove_task+0x3e>
    bd9a:	26 c0       	rjmp	.+76     	; 0xbde8 <remove_task+0x7a>
			task_list=task->next;
			num_tasks--;
		}else{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    bd9c:	24 85       	ldd	r18, Z+12	; 0x0c
    bd9e:	35 85       	ldd	r19, Z+13	; 0x0d
    bda0:	a2 17       	cp	r26, r18
    bda2:	b3 07       	cpc	r27, r19
    bda4:	39 f0       	breq	.+14     	; 0xbdb4 <remove_task+0x46>
    bda6:	04 84       	ldd	r0, Z+12	; 0x0c
    bda8:	f5 85       	ldd	r31, Z+13	; 0x0d
    bdaa:	e0 2d       	mov	r30, r0
    bdac:	24 85       	ldd	r18, Z+12	; 0x0c
    bdae:	35 85       	ldd	r19, Z+13	; 0x0d
    bdb0:	23 2b       	or	r18, r19
    bdb2:	a1 f7       	brne	.-24     	; 0xbd9c <remove_task+0x2e>
			if (tmp_task->next != NULL){
    bdb4:	24 85       	ldd	r18, Z+12	; 0x0c
    bdb6:	35 85       	ldd	r19, Z+13	; 0x0d
    bdb8:	23 2b       	or	r18, r19
    bdba:	59 f0       	breq	.+22     	; 0xbdd2 <remove_task+0x64>
				tmp_task->next = task->next;
    bdbc:	1c 96       	adiw	r26, 0x0c	; 12
    bdbe:	2d 91       	ld	r18, X+
    bdc0:	3c 91       	ld	r19, X
    bdc2:	1d 97       	sbiw	r26, 0x0d	; 13
    bdc4:	24 87       	std	Z+12, r18	; 0x0c
    bdc6:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    bdc8:	20 91 e1 27 	lds	r18, 0x27E1	; 0x8027e1 <num_tasks>
    bdcc:	21 50       	subi	r18, 0x01	; 1
    bdce:	20 93 e1 27 	sts	0x27E1, r18	; 0x8027e1 <num_tasks>
    bdd2:	cd 01       	movw	r24, r26
			}
		}
		scheduler_free(task);		
    bdd4:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    bdd8:	cf bf       	out	0x3f, r28	; 63
	}
}
    bdda:	cf 91       	pop	r28
    bddc:	08 95       	ret
}

// Remove a task from the task queue
void remove_task(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    bdde:	89 e2       	ldi	r24, 0x29	; 41
    bde0:	94 e2       	ldi	r25, 0x24	; 36
				num_tasks--;
			}
		}
		scheduler_free(task);		
	}
}
    bde2:	cf 91       	pop	r28
}

// Remove a task from the task queue
void remove_task(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    bde4:	0c 94 1a 7e 	jmp	0xfc34	; 0xfc34 <puts>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		if(task==NULL){
			continue;
		}
		if(task_list==task)	{
			task_list=task->next;
    bde8:	1c 96       	adiw	r26, 0x0c	; 12
    bdea:	2d 91       	ld	r18, X+
    bdec:	3c 91       	ld	r19, X
    bdee:	1d 97       	sbiw	r26, 0x0d	; 13
    bdf0:	20 93 32 2a 	sts	0x2A32, r18	; 0x802a32 <task_list>
    bdf4:	30 93 33 2a 	sts	0x2A33, r19	; 0x802a33 <task_list+0x1>
			num_tasks--;
    bdf8:	20 91 e1 27 	lds	r18, 0x27E1	; 0x8027e1 <num_tasks>
    bdfc:	21 50       	subi	r18, 0x01	; 1
    bdfe:	20 93 e1 27 	sts	0x27E1, r18	; 0x8027e1 <num_tasks>
    be02:	e7 cf       	rjmp	.-50     	; 0xbdd2 <remove_task+0x64>

0000be04 <print_task_queue>:
		}
		scheduler_free(task);		
	}
}

void print_task_queue(){
    be04:	bf 92       	push	r11
    be06:	cf 92       	push	r12
    be08:	df 92       	push	r13
    be0a:	ef 92       	push	r14
    be0c:	ff 92       	push	r15
    be0e:	0f 93       	push	r16
    be10:	1f 93       	push	r17
    be12:	cf 93       	push	r28
    be14:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during printing
    be16:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    be18:	f8 94       	cli
		volatile Task_t* cur_task = task_list;
    be1a:	c0 91 32 2a 	lds	r28, 0x2A32	; 0x802a32 <task_list>
    be1e:	d0 91 33 2a 	lds	r29, 0x2A33	; 0x802a33 <task_list+0x1>
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
    be22:	90 91 f1 29 	lds	r25, 0x29F1	; 0x8029f1 <task_executing>
    be26:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <num_tasks>
    be2a:	1f 92       	push	r1
    be2c:	9f 93       	push	r25
    be2e:	1f 92       	push	r1
    be30:	8f 93       	push	r24
    be32:	8a ee       	ldi	r24, 0xEA	; 234
    be34:	9c e0       	ldi	r25, 0x0C	; 12
    be36:	9f 93       	push	r25
    be38:	8f 93       	push	r24
    be3a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    be3e:	0f 90       	pop	r0
    be40:	0f 90       	pop	r0
    be42:	0f 90       	pop	r0
    be44:	0f 90       	pop	r0
    be46:	0f 90       	pop	r0
    be48:	0f 90       	pop	r0
    be4a:	20 97       	sbiw	r28, 0x00	; 0
    be4c:	a1 f1       	breq	.+104    	; 0xbeb6 <print_task_queue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, get_time());
    be4e:	0c ea       	ldi	r16, 0xAC	; 172
    be50:	1c e0       	ldi	r17, 0x0C	; 12
    be52:	05 c0       	rjmp	.+10     	; 0xbe5e <print_task_queue+0x5a>
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
    be54:	0c 84       	ldd	r0, Y+12	; 0x0c
    be56:	dd 85       	ldd	r29, Y+13	; 0x0d
    be58:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    be5a:	20 97       	sbiw	r28, 0x00	; 0
    be5c:	61 f1       	breq	.+88     	; 0xbeb6 <print_task_queue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, get_time());
    be5e:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    be62:	fb 01       	movw	r30, r22
    be64:	cc 80       	ldd	r12, Y+4	; 0x04
    be66:	dd 80       	ldd	r13, Y+5	; 0x05
    be68:	ee 80       	ldd	r14, Y+6	; 0x06
    be6a:	ff 80       	ldd	r15, Y+7	; 0x07
    be6c:	48 81       	ld	r20, Y
    be6e:	59 81       	ldd	r21, Y+1	; 0x01
    be70:	6a 81       	ldd	r22, Y+2	; 0x02
    be72:	7b 81       	ldd	r23, Y+3	; 0x03
    be74:	28 85       	ldd	r18, Y+8	; 0x08
    be76:	39 85       	ldd	r19, Y+9	; 0x09
    be78:	9f 93       	push	r25
    be7a:	8f 93       	push	r24
    be7c:	ff 93       	push	r31
    be7e:	ef 93       	push	r30
    be80:	ff 92       	push	r15
    be82:	ef 92       	push	r14
    be84:	df 92       	push	r13
    be86:	cf 92       	push	r12
    be88:	7f 93       	push	r23
    be8a:	6f 93       	push	r22
    be8c:	5f 93       	push	r21
    be8e:	4f 93       	push	r20
    be90:	3f 93       	push	r19
    be92:	2f 93       	push	r18
    be94:	df 93       	push	r29
    be96:	cf 93       	push	r28
    be98:	1f 93       	push	r17
    be9a:	0f 93       	push	r16
    be9c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
			if(cur_task==cur_task->next) break;
    bea0:	8c 85       	ldd	r24, Y+12	; 0x0c
    bea2:	9d 85       	ldd	r25, Y+13	; 0x0d
    bea4:	2d b7       	in	r18, 0x3d	; 61
    bea6:	3e b7       	in	r19, 0x3e	; 62
    bea8:	2e 5e       	subi	r18, 0xEE	; 238
    beaa:	3f 4f       	sbci	r19, 0xFF	; 255
    beac:	2d bf       	out	0x3d, r18	; 61
    beae:	3e bf       	out	0x3e, r19	; 62
    beb0:	8c 17       	cp	r24, r28
    beb2:	9d 07       	cpc	r25, r29
    beb4:	79 f6       	brne	.-98     	; 0xbe54 <print_task_queue+0x50>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    beb6:	bf be       	out	0x3f, r11	; 63
			cur_task = cur_task->next;
		}
	}
}
    beb8:	df 91       	pop	r29
    beba:	cf 91       	pop	r28
    bebc:	1f 91       	pop	r17
    bebe:	0f 91       	pop	r16
    bec0:	ff 90       	pop	r15
    bec2:	ef 90       	pop	r14
    bec4:	df 90       	pop	r13
    bec6:	cf 90       	pop	r12
    bec8:	bf 90       	pop	r11
    beca:	08 95       	ret

0000becc <add_task_to_list>:
	volatile Task_t* new_task = schedule_task(period, function, arg);
	new_task->period=period;
	return new_task;
}

static void add_task_to_list(volatile Task_t* task){
    becc:	8f 92       	push	r8
    bece:	9f 92       	push	r9
    bed0:	af 92       	push	r10
    bed2:	bf 92       	push	r11
    bed4:	ff 92       	push	r15
    bed6:	0f 93       	push	r16
    bed8:	1f 93       	push	r17
    beda:	cf 93       	push	r28
    bedc:	df 93       	push	r29
    bede:	dc 01       	movw	r26, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    bee0:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    bee2:	f8 94       	cli
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    bee4:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    bee8:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    beec:	1c 96       	adiw	r26, 0x0c	; 12
    beee:	ed 93       	st	X+, r30
    bef0:	fc 93       	st	X, r31
    bef2:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
    bef4:	30 97       	sbiw	r30, 0x00	; 0
    bef6:	09 f4       	brne	.+2      	; 0xbefa <add_task_to_list+0x2e>
    bef8:	48 c0       	rjmp	.+144    	; 0xbf8a <add_task_to_list+0xbe>
    befa:	0d 91       	ld	r16, X+
    befc:	1d 91       	ld	r17, X+
    befe:	2d 91       	ld	r18, X+
    bf00:	3c 91       	ld	r19, X
    bf02:	13 97       	sbiw	r26, 0x03	; 3
    bf04:	40 81       	ld	r20, Z
    bf06:	51 81       	ldd	r21, Z+1	; 0x01
    bf08:	62 81       	ldd	r22, Z+2	; 0x02
    bf0a:	73 81       	ldd	r23, Z+3	; 0x03
    bf0c:	40 17       	cp	r20, r16
    bf0e:	51 07       	cpc	r21, r17
    bf10:	62 07       	cpc	r22, r18
    bf12:	73 07       	cpc	r23, r19
    bf14:	d0 f5       	brcc	.+116    	; 0xbf8a <add_task_to_list+0xbe>
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    bf16:	84 85       	ldd	r24, Z+12	; 0x0c
    bf18:	95 85       	ldd	r25, Z+13	; 0x0d
    bf1a:	89 2b       	or	r24, r25
    bf1c:	71 f4       	brne	.+28     	; 0xbf3a <add_task_to_list+0x6e>
    bf1e:	1d c0       	rjmp	.+58     	; 0xbf5a <add_task_to_list+0x8e>
				if(tmp_task_ptr->next==tmp_task_ptr){
    bf20:	84 85       	ldd	r24, Z+12	; 0x0c
    bf22:	95 85       	ldd	r25, Z+13	; 0x0d
    bf24:	8e 17       	cp	r24, r30
    bf26:	9f 07       	cpc	r25, r31
    bf28:	09 f4       	brne	.+2      	; 0xbf2c <add_task_to_list+0x60>
    bf2a:	6e c0       	rjmp	.+220    	; 0xc008 <add_task_to_list+0x13c>
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, get_time());
					print_task_queue();
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    bf2c:	04 84       	ldd	r0, Z+12	; 0x0c
    bf2e:	f5 85       	ldd	r31, Z+13	; 0x0d
    bf30:	e0 2d       	mov	r30, r0
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    bf32:	24 85       	ldd	r18, Z+12	; 0x0c
    bf34:	35 85       	ldd	r19, Z+13	; 0x0d
    bf36:	23 2b       	or	r18, r19
    bf38:	81 f0       	breq	.+32     	; 0xbf5a <add_task_to_list+0x8e>
    bf3a:	0d 91       	ld	r16, X+
    bf3c:	1d 91       	ld	r17, X+
    bf3e:	2d 91       	ld	r18, X+
    bf40:	3c 91       	ld	r19, X
    bf42:	13 97       	sbiw	r26, 0x03	; 3
    bf44:	c4 85       	ldd	r28, Z+12	; 0x0c
    bf46:	d5 85       	ldd	r29, Z+13	; 0x0d
    bf48:	48 81       	ld	r20, Y
    bf4a:	59 81       	ldd	r21, Y+1	; 0x01
    bf4c:	6a 81       	ldd	r22, Y+2	; 0x02
    bf4e:	7b 81       	ldd	r23, Y+3	; 0x03
    bf50:	40 17       	cp	r20, r16
    bf52:	51 07       	cpc	r21, r17
    bf54:	62 07       	cpc	r22, r18
    bf56:	73 07       	cpc	r23, r19
    bf58:	18 f3       	brcs	.-58     	; 0xbf20 <add_task_to_list+0x54>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    bf5a:	84 85       	ldd	r24, Z+12	; 0x0c
    bf5c:	95 85       	ldd	r25, Z+13	; 0x0d
    bf5e:	1c 96       	adiw	r26, 0x0c	; 12
    bf60:	8d 93       	st	X+, r24
    bf62:	9c 93       	st	X, r25
    bf64:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    bf66:	a4 87       	std	Z+12, r26	; 0x0c
    bf68:	b5 87       	std	Z+13, r27	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    bf6a:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <num_tasks>
    bf6e:	8f 5f       	subi	r24, 0xFF	; 255
    bf70:	80 93 e1 27 	sts	0x27E1, r24	; 0x8027e1 <num_tasks>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    bf74:	ff be       	out	0x3f, r15	; 63
		
		//task_list_checkup();
	}
}
    bf76:	df 91       	pop	r29
    bf78:	cf 91       	pop	r28
    bf7a:	1f 91       	pop	r17
    bf7c:	0f 91       	pop	r16
    bf7e:	ff 90       	pop	r15
    bf80:	bf 90       	pop	r11
    bf82:	af 90       	pop	r10
    bf84:	9f 90       	pop	r9
    bf86:	8f 90       	pop	r8
    bf88:	08 95       	ret
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
    bf8a:	a0 93 32 2a 	sts	0x2A32, r26	; 0x802a32 <task_list>
    bf8e:	b0 93 33 2a 	sts	0x2A33, r27	; 0x802a33 <task_list+0x1>
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
    bf92:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <task_executing>
    bf96:	81 11       	cpse	r24, r1
    bf98:	e8 cf       	rjmp	.-48     	; 0xbf6a <add_task_to_list+0x9e>
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    bf9a:	8d 90       	ld	r8, X+
    bf9c:	9d 90       	ld	r9, X+
    bf9e:	ad 90       	ld	r10, X+
    bfa0:	bc 90       	ld	r11, X
    bfa2:	13 97       	sbiw	r26, 0x03	; 3
    bfa4:	40 91 a0 26 	lds	r20, 0x26A0	; 0x8026a0 <rtc_epoch>
    bfa8:	50 91 a1 26 	lds	r21, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    bfac:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    bfb0:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    bfb4:	60 e0       	ldi	r22, 0x00	; 0
    bfb6:	70 e0       	ldi	r23, 0x00	; 0
    bfb8:	ba 01       	movw	r22, r20
    bfba:	55 27       	eor	r21, r21
    bfbc:	44 27       	eor	r20, r20
    bfbe:	20 e0       	ldi	r18, 0x00	; 0
    bfc0:	30 e0       	ldi	r19, 0x00	; 0
    bfc2:	40 2b       	or	r20, r16
    bfc4:	51 2b       	or	r21, r17
    bfc6:	62 2b       	or	r22, r18
    bfc8:	73 2b       	or	r23, r19
    bfca:	48 15       	cp	r20, r8
    bfcc:	59 05       	cpc	r21, r9
    bfce:	6a 05       	cpc	r22, r10
    bfd0:	7b 05       	cpc	r23, r11
    bfd2:	30 f4       	brcc	.+12     	; 0xbfe0 <add_task_to_list+0x114>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    bfd4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bfd8:	8b 7f       	andi	r24, 0xFB	; 251
    bfda:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    bfde:	c5 cf       	rjmp	.-118    	; 0xbf6a <add_task_to_list+0x9e>
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    bfe0:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    bfe4:	80 fd       	sbrc	r24, 0
    bfe6:	fc cf       	rjmp	.-8      	; 0xbfe0 <add_task_to_list+0x114>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    bfe8:	8d 91       	ld	r24, X+
    bfea:	9d 91       	ld	r25, X+
    bfec:	0d 90       	ld	r0, X+
    bfee:	bc 91       	ld	r27, X
    bff0:	a0 2d       	mov	r26, r0
    bff2:	88 60       	ori	r24, 0x08	; 8
    bff4:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    bff8:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    bffc:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c000:	84 60       	ori	r24, 0x04	; 4
    c002:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c006:	b1 cf       	rjmp	.-158    	; 0xbf6a <add_task_to_list+0x9e>
    c008:	ed 01       	movw	r28, r26
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
				if(tmp_task_ptr->next==tmp_task_ptr){
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    c00a:	84 e5       	ldi	r24, 0x54	; 84
    c00c:	9d e0       	ldi	r25, 0x0D	; 13
    c00e:	9f 93       	push	r25
    c010:	8f 93       	push	r24
    c012:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, get_time());
    c016:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    c01a:	db 01       	movw	r26, r22
    c01c:	0c 81       	ldd	r16, Y+4	; 0x04
    c01e:	1d 81       	ldd	r17, Y+5	; 0x05
    c020:	2e 81       	ldd	r18, Y+6	; 0x06
    c022:	3f 81       	ldd	r19, Y+7	; 0x07
    c024:	48 81       	ld	r20, Y
    c026:	59 81       	ldd	r21, Y+1	; 0x01
    c028:	6a 81       	ldd	r22, Y+2	; 0x02
    c02a:	7b 81       	ldd	r23, Y+3	; 0x03
    c02c:	e8 85       	ldd	r30, Y+8	; 0x08
    c02e:	f9 85       	ldd	r31, Y+9	; 0x09
    c030:	9f 93       	push	r25
    c032:	8f 93       	push	r24
    c034:	bf 93       	push	r27
    c036:	af 93       	push	r26
    c038:	3f 93       	push	r19
    c03a:	2f 93       	push	r18
    c03c:	1f 93       	push	r17
    c03e:	0f 93       	push	r16
    c040:	7f 93       	push	r23
    c042:	6f 93       	push	r22
    c044:	5f 93       	push	r21
    c046:	4f 93       	push	r20
    c048:	ff 93       	push	r31
    c04a:	ef 93       	push	r30
    c04c:	df 93       	push	r29
    c04e:	cf 93       	push	r28
    c050:	83 e1       	ldi	r24, 0x13	; 19
    c052:	9d e0       	ldi	r25, 0x0D	; 13
    c054:	9f 93       	push	r25
    c056:	8f 93       	push	r24
    c058:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
					print_task_queue();
    c05c:	0e 94 02 5f 	call	0xbe04	; 0xbe04 <print_task_queue>
    c060:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    c062:	8d b7       	in	r24, 0x3d	; 61
    c064:	9e b7       	in	r25, 0x3e	; 62
    c066:	44 96       	adiw	r24, 0x14	; 20
    c068:	8d bf       	out	0x3d, r24	; 61
    c06a:	9e bf       	out	0x3e, r25	; 62
    c06c:	84 cf       	rjmp	.-248    	; 0xbf76 <add_task_to_list+0xaa>

0000c06e <schedule_task>:

// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* schedule_task(uint32_t time, flex_function function, void* arg){
    c06e:	5f 92       	push	r5
    c070:	6f 92       	push	r6
    c072:	7f 92       	push	r7
    c074:	8f 92       	push	r8
    c076:	9f 92       	push	r9
    c078:	af 92       	push	r10
    c07a:	bf 92       	push	r11
    c07c:	cf 92       	push	r12
    c07e:	df 92       	push	r13
    c080:	ef 92       	push	r14
    c082:	ff 92       	push	r15
    c084:	0f 93       	push	r16
    c086:	1f 93       	push	r17
    c088:	cf 93       	push	r28
    c08a:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    c08c:	5f b6       	in	r5, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    c08e:	f8 94       	cli

static void add_task_to_list(volatile Task_t* task);
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    c090:	e0 91 e1 27 	lds	r30, 0x27E1	; 0x8027e1 <num_tasks>
    c094:	ea 30       	cpi	r30, 0x0A	; 10
    c096:	08 f0       	brcs	.+2      	; 0xc09a <schedule_task+0x2c>
    c098:	7d c0       	rjmp	.+250    	; 0xc194 <schedule_task+0x126>
    c09a:	89 01       	movw	r16, r18
    c09c:	3a 01       	movw	r6, r20
    c09e:	6b 01       	movw	r12, r22
    c0a0:	7c 01       	movw	r14, r24
    c0a2:	80 e0       	ldi	r24, 0x00	; 0
    c0a4:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
    c0a6:	9c 01       	movw	r18, r24
    c0a8:	22 0f       	add	r18, r18
    c0aa:	33 1f       	adc	r19, r19
    c0ac:	e9 01       	movw	r28, r18
    c0ae:	cc 0f       	add	r28, r28
    c0b0:	dd 1f       	adc	r29, r29
    c0b2:	cc 0f       	add	r28, r28
    c0b4:	dd 1f       	adc	r29, r29
    c0b6:	cc 0f       	add	r28, r28
    c0b8:	dd 1f       	adc	r29, r29
    c0ba:	c2 1b       	sub	r28, r18
    c0bc:	d3 0b       	sbc	r29, r19
    c0be:	c3 5f       	subi	r28, 0xF3	; 243
    c0c0:	d9 4d       	sbci	r29, 0xD9	; 217
    c0c2:	28 85       	ldd	r18, Y+8	; 0x08
    c0c4:	39 85       	ldd	r19, Y+9	; 0x09
    c0c6:	23 2b       	or	r18, r19
    c0c8:	09 f4       	brne	.+2      	; 0xc0cc <schedule_task+0x5e>
    c0ca:	4c c0       	rjmp	.+152    	; 0xc164 <schedule_task+0xf6>
    c0cc:	01 96       	adiw	r24, 0x01	; 1
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
    c0ce:	8a 30       	cpi	r24, 0x0A	; 10
    c0d0:	91 05       	cpc	r25, r1
    c0d2:	49 f7       	brne	.-46     	; 0xc0a6 <schedule_task+0x38>
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    c0d4:	84 ed       	ldi	r24, 0xD4	; 212
    c0d6:	9d e0       	ldi	r25, 0x0D	; 13
    c0d8:	9f 93       	push	r25
    c0da:	8f 93       	push	r24
    c0dc:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
			task_list_cleanup();
    c0e0:	0e 94 42 5e 	call	0xbc84	; 0xbc84 <task_list_cleanup>
    c0e4:	0f 90       	pop	r0
    c0e6:	0f 90       	pop	r0
    c0e8:	cf ef       	ldi	r28, 0xFF	; 255
    c0ea:	df ef       	ldi	r29, 0xFF	; 255
		}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
		}

		time+=MIN_TASK_TIME_IN_FUTURE*(time<MIN_TASK_TIME_IN_FUTURE);
    c0ec:	84 e1       	ldi	r24, 0x14	; 20
    c0ee:	c8 16       	cp	r12, r24
    c0f0:	d1 04       	cpc	r13, r1
    c0f2:	e1 04       	cpc	r14, r1
    c0f4:	f1 04       	cpc	r15, r1
    c0f6:	80 f1       	brcs	.+96     	; 0xc158 <schedule_task+0xea>
    c0f8:	81 2c       	mov	r8, r1
    c0fa:	91 2c       	mov	r9, r1
    c0fc:	54 01       	movw	r10, r8
		new_task->scheduled_time = time + get_time();
    c0fe:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    c102:	86 0e       	add	r8, r22
    c104:	97 1e       	adc	r9, r23
    c106:	a8 1e       	adc	r10, r24
    c108:	b9 1e       	adc	r11, r25
    c10a:	c8 0c       	add	r12, r8
    c10c:	d9 1c       	adc	r13, r9
    c10e:	ea 1c       	adc	r14, r10
    c110:	fb 1c       	adc	r15, r11
    c112:	c8 82       	st	Y, r12
    c114:	d9 82       	std	Y+1, r13	; 0x01
    c116:	ea 82       	std	Y+2, r14	; 0x02
    c118:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    c11a:	0a 87       	std	Y+10, r16	; 0x0a
    c11c:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func = function;
    c11e:	68 86       	std	Y+8, r6	; 0x08
    c120:	79 86       	std	Y+9, r7	; 0x09
		new_task->period = 0;
    c122:	1c 82       	std	Y+4, r1	; 0x04
    c124:	1d 82       	std	Y+5, r1	; 0x05
    c126:	1e 82       	std	Y+6, r1	; 0x06
    c128:	1f 82       	std	Y+7, r1	; 0x07
		new_task->next = NULL;
    c12a:	1c 86       	std	Y+12, r1	; 0x0c
    c12c:	1d 86       	std	Y+13, r1	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    c12e:	5f be       	out	0x3f, r5	; 63
	}
	add_task_to_list(new_task);
    c130:	ce 01       	movw	r24, r28
    c132:	0e 94 66 5f 	call	0xbecc	; 0xbecc <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    c136:	ce 01       	movw	r24, r28
}
    c138:	df 91       	pop	r29
    c13a:	cf 91       	pop	r28
    c13c:	1f 91       	pop	r17
    c13e:	0f 91       	pop	r16
    c140:	ff 90       	pop	r15
    c142:	ef 90       	pop	r14
    c144:	df 90       	pop	r13
    c146:	cf 90       	pop	r12
    c148:	bf 90       	pop	r11
    c14a:	af 90       	pop	r10
    c14c:	9f 90       	pop	r9
    c14e:	8f 90       	pop	r8
    c150:	7f 90       	pop	r7
    c152:	6f 90       	pop	r6
    c154:	5f 90       	pop	r5
    c156:	08 95       	ret
			task_list_cleanup();
		}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
		}

		time+=MIN_TASK_TIME_IN_FUTURE*(time<MIN_TASK_TIME_IN_FUTURE);
    c158:	84 e1       	ldi	r24, 0x14	; 20
    c15a:	88 2e       	mov	r8, r24
    c15c:	91 2c       	mov	r9, r1
    c15e:	a1 2c       	mov	r10, r1
    c160:	b1 2c       	mov	r11, r1
    c162:	cd cf       	rjmp	.-102    	; 0xc0fe <schedule_task+0x90>
volatile Task_t* schedule_task(uint32_t time, flex_function function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
    c164:	cf 3f       	cpi	r28, 0xFF	; 255
    c166:	8f ef       	ldi	r24, 0xFF	; 255
    c168:	d8 07       	cpc	r29, r24
    c16a:	09 f4       	brne	.+2      	; 0xc16e <schedule_task+0x100>
    c16c:	b3 cf       	rjmp	.-154    	; 0xc0d4 <schedule_task+0x66>
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			task_list_cleanup();
		}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    c16e:	86 e2       	ldi	r24, 0x26	; 38
    c170:	cd 30       	cpi	r28, 0x0D	; 13
    c172:	d8 07       	cpc	r29, r24
    c174:	30 f0       	brcs	.+12     	; 0xc182 <schedule_task+0x114>
    c176:	86 e2       	ldi	r24, 0x26	; 38
    c178:	cb 38       	cpi	r28, 0x8B	; 139
    c17a:	d8 07       	cpc	r29, r24
    c17c:	09 f0       	breq	.+2      	; 0xc180 <schedule_task+0x112>
    c17e:	08 f4       	brcc	.+2      	; 0xc182 <schedule_task+0x114>
    c180:	b5 cf       	rjmp	.-150    	; 0xc0ec <schedule_task+0x7e>
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    c182:	8b e7       	ldi	r24, 0x7B	; 123
    c184:	9d e0       	ldi	r25, 0x0D	; 13
    c186:	9f 93       	push	r25
    c188:	8f 93       	push	r24
    c18a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    c18e:	0f 90       	pop	r0
    c190:	0f 90       	pop	r0
    c192:	ac cf       	rjmp	.-168    	; 0xc0ec <schedule_task+0x7e>
    c194:	5f be       	out	0x3f, r5	; 63
// arg is the argument to supply to function
volatile Task_t* schedule_task(uint32_t time, flex_function function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    c196:	80 e0       	ldi	r24, 0x00	; 0
    c198:	90 e0       	ldi	r25, 0x00	; 0
    c19a:	ce cf       	rjmp	.-100    	; 0xc138 <schedule_task+0xca>

0000c19c <schedule_periodic_task>:
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
}

volatile Task_t* schedule_periodic_task(uint32_t period, flex_function function, void* arg){
    c19c:	cf 92       	push	r12
    c19e:	df 92       	push	r13
    c1a0:	ef 92       	push	r14
    c1a2:	ff 92       	push	r15
	period+=MIN_TASK_TIME_IN_FUTURE*(period<MIN_TASK_TIME_IN_FUTURE);	
    c1a4:	64 31       	cpi	r22, 0x14	; 20
    c1a6:	71 05       	cpc	r23, r1
    c1a8:	81 05       	cpc	r24, r1
    c1aa:	91 05       	cpc	r25, r1
    c1ac:	a8 f0       	brcs	.+42     	; 0xc1d8 <schedule_periodic_task+0x3c>
    c1ae:	c1 2c       	mov	r12, r1
    c1b0:	d1 2c       	mov	r13, r1
    c1b2:	76 01       	movw	r14, r12
    c1b4:	c6 0e       	add	r12, r22
    c1b6:	d7 1e       	adc	r13, r23
    c1b8:	e8 1e       	adc	r14, r24
    c1ba:	f9 1e       	adc	r15, r25
	volatile Task_t* new_task = schedule_task(period, function, arg);
    c1bc:	c7 01       	movw	r24, r14
    c1be:	b6 01       	movw	r22, r12
    c1c0:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
	new_task->period=period;
    c1c4:	fc 01       	movw	r30, r24
    c1c6:	c4 82       	std	Z+4, r12	; 0x04
    c1c8:	d5 82       	std	Z+5, r13	; 0x05
    c1ca:	e6 82       	std	Z+6, r14	; 0x06
    c1cc:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    c1ce:	ff 90       	pop	r15
    c1d0:	ef 90       	pop	r14
    c1d2:	df 90       	pop	r13
    c1d4:	cf 90       	pop	r12
    c1d6:	08 95       	ret

	return new_task;
}

volatile Task_t* schedule_periodic_task(uint32_t period, flex_function function, void* arg){
	period+=MIN_TASK_TIME_IN_FUTURE*(period<MIN_TASK_TIME_IN_FUTURE);	
    c1d8:	e4 e1       	ldi	r30, 0x14	; 20
    c1da:	ce 2e       	mov	r12, r30
    c1dc:	d1 2c       	mov	r13, r1
    c1de:	e1 2c       	mov	r14, r1
    c1e0:	f1 2c       	mov	r15, r1
    c1e2:	e8 cf       	rjmp	.-48     	; 0xc1b4 <schedule_periodic_task+0x18>

0000c1e4 <__vector_11>:
		}
	}
	return 0;
}

ISR(RTC_COMP_vect){
    c1e4:	1f 92       	push	r1
    c1e6:	0f 92       	push	r0
    c1e8:	0f b6       	in	r0, 0x3f	; 63
    c1ea:	0f 92       	push	r0
    c1ec:	11 24       	eor	r1, r1
    c1ee:	0b b6       	in	r0, 0x3b	; 59
    c1f0:	0f 92       	push	r0
    c1f2:	4f 92       	push	r4
    c1f4:	5f 92       	push	r5
    c1f6:	6f 92       	push	r6
    c1f8:	7f 92       	push	r7
    c1fa:	8f 92       	push	r8
    c1fc:	9f 92       	push	r9
    c1fe:	af 92       	push	r10
    c200:	bf 92       	push	r11
    c202:	cf 92       	push	r12
    c204:	df 92       	push	r13
    c206:	ef 92       	push	r14
    c208:	ff 92       	push	r15
    c20a:	0f 93       	push	r16
    c20c:	1f 93       	push	r17
    c20e:	2f 93       	push	r18
    c210:	3f 93       	push	r19
    c212:	4f 93       	push	r20
    c214:	5f 93       	push	r21
    c216:	6f 93       	push	r22
    c218:	7f 93       	push	r23
    c21a:	8f 93       	push	r24
    c21c:	9f 93       	push	r25
    c21e:	af 93       	push	r26
    c220:	bf 93       	push	r27
    c222:	cf 93       	push	r28
    c224:	df 93       	push	r29
    c226:	ef 93       	push	r30
    c228:	ff 93       	push	r31
	SAVE_CONTEXT();	
    c22a:	0f 92       	push	r0
    c22c:	0f b6       	in	r0, 0x3f	; 63
    c22e:	f8 94       	cli
    c230:	0f 92       	push	r0
    c232:	1f 92       	push	r1
    c234:	11 24       	eor	r1, r1
    c236:	2f 92       	push	r2
    c238:	3f 92       	push	r3
    c23a:	4f 92       	push	r4
    c23c:	5f 92       	push	r5
    c23e:	6f 92       	push	r6
    c240:	7f 92       	push	r7
    c242:	8f 92       	push	r8
    c244:	9f 92       	push	r9
    c246:	af 92       	push	r10
    c248:	bf 92       	push	r11
    c24a:	cf 92       	push	r12
    c24c:	df 92       	push	r13
    c24e:	ef 92       	push	r14
    c250:	ff 92       	push	r15
    c252:	0f 93       	push	r16
    c254:	1f 93       	push	r17
    c256:	2f 93       	push	r18
    c258:	3f 93       	push	r19
    c25a:	4f 93       	push	r20
    c25c:	5f 93       	push	r21
    c25e:	6f 93       	push	r22
    c260:	7f 93       	push	r23
    c262:	8f 93       	push	r24
    c264:	9f 93       	push	r25
    c266:	af 93       	push	r26
    c268:	bf 93       	push	r27
    c26a:	cf 93       	push	r28
    c26c:	df 93       	push	r29
    c26e:	ef 93       	push	r30
    c270:	ff 93       	push	r31
	task_executing=1;
    c272:	81 e0       	ldi	r24, 0x01	; 1
    c274:	80 93 f1 29 	sts	0x29F1, r24	; 0x8029f1 <task_executing>

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    c278:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    c27a:	f8 94       	cli
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    c27c:	33 e7       	ldi	r19, 0x73	; 115
    c27e:	c3 2e       	mov	r12, r19
    c280:	3c e0       	ldi	r19, 0x0C	; 12
    c282:	d3 2e       	mov	r13, r19
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    c284:	4f e7       	ldi	r20, 0x7F	; 127
    c286:	e4 2e       	mov	r14, r20
    c288:	44 e2       	ldi	r20, 0x24	; 36
    c28a:	f4 2e       	mov	r15, r20
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    c28c:	5b ef       	ldi	r21, 0xFB	; 251
    c28e:	a5 2e       	mov	r10, r21
    c290:	5b e0       	ldi	r21, 0x0B	; 11
    c292:	b5 2e       	mov	r11, r21
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2){
    c294:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    c298:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    c29c:	30 97       	sbiw	r30, 0x00	; 0
    c29e:	09 f4       	brne	.+2      	; 0xc2a2 <__vector_11+0xbe>
    c2a0:	22 c1       	rjmp	.+580    	; 0xc4e6 <__vector_11+0x302>
    c2a2:	40 80       	ld	r4, Z
    c2a4:	51 80       	ldd	r5, Z+1	; 0x01
    c2a6:	62 80       	ldd	r6, Z+2	; 0x02
    c2a8:	73 80       	ldd	r7, Z+3	; 0x03
    c2aa:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    c2ae:	dc 01       	movw	r26, r24
    c2b0:	cb 01       	movw	r24, r22
    c2b2:	02 96       	adiw	r24, 0x02	; 2
    c2b4:	a1 1d       	adc	r26, r1
    c2b6:	b1 1d       	adc	r27, r1
    c2b8:	84 15       	cp	r24, r4
    c2ba:	95 05       	cpc	r25, r5
    c2bc:	a6 05       	cpc	r26, r6
    c2be:	b7 05       	cpc	r27, r7
    c2c0:	08 f4       	brcc	.+2      	; 0xc2c4 <__vector_11+0xe0>
    c2c2:	ee c0       	rjmp	.+476    	; 0xc4a0 <__vector_11+0x2bc>
    c2c4:	0d e0       	ldi	r16, 0x0D	; 13
    c2c6:	16 e2       	ldi	r17, 0x26	; 38
    c2c8:	c0 e0       	ldi	r28, 0x00	; 0
    c2ca:	d0 e0       	ldi	r29, 0x00	; 0
    c2cc:	81 2c       	mov	r8, r1
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    c2ce:	ce 01       	movw	r24, r28
    c2d0:	88 0f       	add	r24, r24
    c2d2:	99 1f       	adc	r25, r25
    c2d4:	fc 01       	movw	r30, r24
    c2d6:	ee 0f       	add	r30, r30
    c2d8:	ff 1f       	adc	r31, r31
    c2da:	ee 0f       	add	r30, r30
    c2dc:	ff 1f       	adc	r31, r31
    c2de:	ee 0f       	add	r30, r30
    c2e0:	ff 1f       	adc	r31, r31
    c2e2:	e8 1b       	sub	r30, r24
    c2e4:	f9 0b       	sbc	r31, r25
    c2e6:	e3 5f       	subi	r30, 0xF3	; 243
    c2e8:	f9 4d       	sbci	r31, 0xD9	; 217
    c2ea:	80 85       	ldd	r24, Z+8	; 0x08
    c2ec:	91 85       	ldd	r25, Z+9	; 0x09
    c2ee:	89 2b       	or	r24, r25
    c2f0:	09 f1       	breq	.+66     	; 0xc334 <__vector_11+0x150>
					num_slots_used++;
    c2f2:	83 94       	inc	r8
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    c2f4:	84 85       	ldd	r24, Z+12	; 0x0c
    c2f6:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    c2f8:	00 97       	sbiw	r24, 0x00	; 0
    c2fa:	e1 f0       	breq	.+56     	; 0xc334 <__vector_11+0x150>
    c2fc:	26 e2       	ldi	r18, 0x26	; 38
    c2fe:	8d 30       	cpi	r24, 0x0D	; 13
    c300:	92 07       	cpc	r25, r18
    c302:	20 f0       	brcs	.+8      	; 0xc30c <__vector_11+0x128>
    c304:	8b 58       	subi	r24, 0x8B	; 139
    c306:	96 42       	sbci	r25, 0x26	; 38
    c308:	a9 f0       	breq	.+42     	; 0xc334 <__vector_11+0x150>
    c30a:	a0 f0       	brcs	.+40     	; 0xc334 <__vector_11+0x150>
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    c30c:	df 92       	push	r13
    c30e:	cf 92       	push	r12
    c310:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    c314:	1f 93       	push	r17
    c316:	0f 93       	push	r16
    c318:	ff 92       	push	r15
    c31a:	ef 92       	push	r14
    c31c:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
						delay_ms(10);
    c320:	8a e0       	ldi	r24, 0x0A	; 10
    c322:	90 e0       	ldi	r25, 0x00	; 0
    c324:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    c328:	0f 90       	pop	r0
    c32a:	0f 90       	pop	r0
    c32c:	0f 90       	pop	r0
    c32e:	0f 90       	pop	r0
    c330:	0f 90       	pop	r0
    c332:	0f 90       	pop	r0
    c334:	21 96       	adiw	r28, 0x01	; 1
    c336:	02 5f       	subi	r16, 0xF2	; 242
    c338:	1f 4f       	sbci	r17, 0xFF	; 255
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2){
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    c33a:	ca 30       	cpi	r28, 0x0A	; 10
    c33c:	d1 05       	cpc	r29, r1
    c33e:	39 f6       	brne	.-114    	; 0xc2ce <__vector_11+0xea>
						delay_ms(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    c340:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <num_tasks>
    c344:	88 11       	cpse	r24, r8
    c346:	2f c1       	rjmp	.+606    	; 0xc5a6 <__vector_11+0x3c2>
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
				return -1;
			}
			cur_task = task_list;
    c348:	c0 91 32 2a 	lds	r28, 0x2A32	; 0x802a32 <task_list>
    c34c:	d0 91 33 2a 	lds	r29, 0x2A33	; 0x802a33 <task_list+0x1>
			task_list = cur_task->next;
    c350:	8c 85       	ldd	r24, Y+12	; 0x0c
    c352:	9d 85       	ldd	r25, Y+13	; 0x0d
    c354:	80 93 32 2a 	sts	0x2A32, r24	; 0x802a32 <task_list>
    c358:	90 93 33 2a 	sts	0x2A33, r25	; 0x802a33 <task_list+0x1>

			if(cur_task->arg==NULL){
    c35c:	8a 85       	ldd	r24, Y+10	; 0x0a
    c35e:	9b 85       	ldd	r25, Y+11	; 0x0b
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
    c360:	1f b7       	in	r17, 0x3f	; 63
				return -1;
			}
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
    c362:	89 2b       	or	r24, r25
    c364:	09 f4       	brne	.+2      	; 0xc368 <__vector_11+0x184>
    c366:	85 c0       	rjmp	.+266    	; 0xc472 <__vector_11+0x28e>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    c368:	78 94       	sei
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
				}
			}else{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
    c36a:	e8 85       	ldd	r30, Y+8	; 0x08
    c36c:	f9 85       	ldd	r31, Y+9	; 0x09
    c36e:	8a 85       	ldd	r24, Y+10	; 0x0a
    c370:	9b 85       	ldd	r25, Y+11	; 0x0b
    c372:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    c374:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0){
    c376:	8c 81       	ldd	r24, Y+4	; 0x04
    c378:	9d 81       	ldd	r25, Y+5	; 0x05
    c37a:	ae 81       	ldd	r26, Y+6	; 0x06
    c37c:	bf 81       	ldd	r27, Y+7	; 0x07
    c37e:	89 2b       	or	r24, r25
    c380:	8a 2b       	or	r24, r26
    c382:	8b 2b       	or	r24, r27
    c384:	09 f4       	brne	.+2      	; 0xc388 <__vector_11+0x1a4>
    c386:	83 c0       	rjmp	.+262    	; 0xc48e <__vector_11+0x2aa>
				cur_task->scheduled_time+=cur_task->period;
    c388:	4c 81       	ldd	r20, Y+4	; 0x04
    c38a:	5d 81       	ldd	r21, Y+5	; 0x05
    c38c:	6e 81       	ldd	r22, Y+6	; 0x06
    c38e:	7f 81       	ldd	r23, Y+7	; 0x07
    c390:	88 81       	ld	r24, Y
    c392:	99 81       	ldd	r25, Y+1	; 0x01
    c394:	aa 81       	ldd	r26, Y+2	; 0x02
    c396:	bb 81       	ldd	r27, Y+3	; 0x03
    c398:	84 0f       	add	r24, r20
    c39a:	95 1f       	adc	r25, r21
    c39c:	a6 1f       	adc	r26, r22
    c39e:	b7 1f       	adc	r27, r23
    c3a0:	88 83       	st	Y, r24
    c3a2:	99 83       	std	Y+1, r25	; 0x01
    c3a4:	aa 83       	std	Y+2, r26	; 0x02
    c3a6:	bb 83       	std	Y+3, r27	; 0x03
				cur_task->next=NULL;
    c3a8:	1c 86       	std	Y+12, r1	; 0x0c
    c3aa:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    c3ac:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <num_tasks>
    c3b0:	81 50       	subi	r24, 0x01	; 1
    c3b2:	80 93 e1 27 	sts	0x27E1, r24	; 0x8027e1 <num_tasks>
				add_task_to_list(cur_task);
    c3b6:	ce 01       	movw	r24, r28
    c3b8:	0e 94 66 5f 	call	0xbecc	; 0xbecc <add_task_to_list>
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2){
    c3bc:	c0 e0       	ldi	r28, 0x00	; 0
    c3be:	d0 e0       	ldi	r29, 0x00	; 0
    c3c0:	10 e0       	ldi	r17, 0x00	; 0
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    c3c2:	ce 01       	movw	r24, r28
    c3c4:	88 0f       	add	r24, r24
    c3c6:	99 1f       	adc	r25, r25
    c3c8:	fc 01       	movw	r30, r24
    c3ca:	ee 0f       	add	r30, r30
    c3cc:	ff 1f       	adc	r31, r31
    c3ce:	ee 0f       	add	r30, r30
    c3d0:	ff 1f       	adc	r31, r31
    c3d2:	ee 0f       	add	r30, r30
    c3d4:	ff 1f       	adc	r31, r31
    c3d6:	e8 1b       	sub	r30, r24
    c3d8:	f9 0b       	sbc	r31, r25
    c3da:	e3 5f       	subi	r30, 0xF3	; 243
    c3dc:	f9 4d       	sbci	r31, 0xD9	; 217
    c3de:	20 85       	ldd	r18, Z+8	; 0x08
    c3e0:	31 85       	ldd	r19, Z+9	; 0x09
    c3e2:	23 2b       	or	r18, r19
    c3e4:	99 f1       	breq	.+102    	; 0xc44c <__vector_11+0x268>
					num_slots_used++;
    c3e6:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    c3e8:	24 85       	ldd	r18, Z+12	; 0x0c
    c3ea:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    c3ec:	21 15       	cp	r18, r1
    c3ee:	31 05       	cpc	r19, r1
    c3f0:	69 f1       	breq	.+90     	; 0xc44c <__vector_11+0x268>
    c3f2:	46 e2       	ldi	r20, 0x26	; 38
    c3f4:	2d 30       	cpi	r18, 0x0D	; 13
    c3f6:	34 07       	cpc	r19, r20
    c3f8:	20 f0       	brcs	.+8      	; 0xc402 <__vector_11+0x21e>
    c3fa:	2b 58       	subi	r18, 0x8B	; 139
    c3fc:	36 42       	sbci	r19, 0x26	; 38
    c3fe:	31 f1       	breq	.+76     	; 0xc44c <__vector_11+0x268>
    c400:	28 f1       	brcs	.+74     	; 0xc44c <__vector_11+0x268>
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    c402:	fc 01       	movw	r30, r24
    c404:	ee 0f       	add	r30, r30
    c406:	ff 1f       	adc	r31, r31
    c408:	ee 0f       	add	r30, r30
    c40a:	ff 1f       	adc	r31, r31
    c40c:	ee 0f       	add	r30, r30
    c40e:	ff 1f       	adc	r31, r31
    c410:	e8 1b       	sub	r30, r24
    c412:	f9 0b       	sbc	r31, r25
    c414:	e3 5f       	subi	r30, 0xF3	; 243
    c416:	f9 4d       	sbci	r31, 0xD9	; 217
    c418:	8d b7       	in	r24, 0x3d	; 61
    c41a:	9e b7       	in	r25, 0x3e	; 62
    c41c:	0e 97       	sbiw	r24, 0x0e	; 14
    c41e:	8d bf       	out	0x3d, r24	; 61
    c420:	9e bf       	out	0x3e, r25	; 62
    c422:	ad b7       	in	r26, 0x3d	; 61
    c424:	be b7       	in	r27, 0x3e	; 62
    c426:	11 96       	adiw	r26, 0x01	; 1
    c428:	8e e0       	ldi	r24, 0x0E	; 14
    c42a:	01 90       	ld	r0, Z+
    c42c:	0d 92       	st	X+, r0
    c42e:	8a 95       	dec	r24
    c430:	e1 f7       	brne	.-8      	; 0xc42a <__vector_11+0x246>
    c432:	bf 92       	push	r11
    c434:	af 92       	push	r10
    c436:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
						delay_ms(10);
    c43a:	8a e0       	ldi	r24, 0x0A	; 10
    c43c:	90 e0       	ldi	r25, 0x00	; 0
    c43e:	0e 94 c3 13 	call	0x2786	; 0x2786 <delay_ms>
    c442:	8d b7       	in	r24, 0x3d	; 61
    c444:	9e b7       	in	r25, 0x3e	; 62
    c446:	40 96       	adiw	r24, 0x10	; 16
    c448:	8d bf       	out	0x3d, r24	; 61
    c44a:	9e bf       	out	0x3e, r25	; 62
    c44c:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    c44e:	ca 30       	cpi	r28, 0x0A	; 10
    c450:	d1 05       	cpc	r29, r1
    c452:	09 f0       	breq	.+2      	; 0xc456 <__vector_11+0x272>
    c454:	b6 cf       	rjmp	.-148    	; 0xc3c2 <__vector_11+0x1de>
						delay_ms(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    c456:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <num_tasks>
    c45a:	81 17       	cp	r24, r17
    c45c:	09 f4       	brne	.+2      	; 0xc460 <__vector_11+0x27c>
    c45e:	1a cf       	rjmp	.-460    	; 0xc294 <__vector_11+0xb0>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    c460:	8d eb       	ldi	r24, 0xBD	; 189
    c462:	9b e0       	ldi	r25, 0x0B	; 11
    c464:	9f 93       	push	r25
    c466:	8f 93       	push	r24
    c468:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    c46c:	0f 90       	pop	r0
    c46e:	0f 90       	pop	r0
    c470:	3f c0       	rjmp	.+126    	; 0xc4f0 <__vector_11+0x30c>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    c472:	78 94       	sei
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
    c474:	e8 85       	ldd	r30, Y+8	; 0x08
    c476:	f9 85       	ldd	r31, Y+9	; 0x09
    c478:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    c47a:	1f bf       	out	0x3f, r17	; 63
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
				}
			}
			
			if(cur_task->period>0){
    c47c:	8c 81       	ldd	r24, Y+4	; 0x04
    c47e:	9d 81       	ldd	r25, Y+5	; 0x05
    c480:	ae 81       	ldd	r26, Y+6	; 0x06
    c482:	bf 81       	ldd	r27, Y+7	; 0x07
    c484:	89 2b       	or	r24, r25
    c486:	8a 2b       	or	r24, r26
    c488:	8b 2b       	or	r24, r27
    c48a:	09 f0       	breq	.+2      	; 0xc48e <__vector_11+0x2aa>
    c48c:	7d cf       	rjmp	.-262    	; 0xc388 <__vector_11+0x1a4>
				cur_task->scheduled_time+=cur_task->period;
				cur_task->next=NULL;
				num_tasks--;
				add_task_to_list(cur_task);
			}else{
				scheduler_free(cur_task);
    c48e:	ce 01       	movw	r24, r28
    c490:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    c494:	80 91 e1 27 	lds	r24, 0x27E1	; 0x8027e1 <num_tasks>
    c498:	81 50       	subi	r24, 0x01	; 1
    c49a:	80 93 e1 27 	sts	0x27E1, r24	; 0x8027e1 <num_tasks>
    c49e:	8e cf       	rjmp	.-228    	; 0xc3bc <__vector_11+0x1d8>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    c4a0:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    c4a4:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    c4a8:	30 97       	sbiw	r30, 0x00	; 0
    c4aa:	e9 f0       	breq	.+58     	; 0xc4e6 <__vector_11+0x302>
    c4ac:	00 81       	ld	r16, Z
    c4ae:	11 81       	ldd	r17, Z+1	; 0x01
    c4b0:	22 81       	ldd	r18, Z+2	; 0x02
    c4b2:	33 81       	ldd	r19, Z+3	; 0x03
    c4b4:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
    c4b8:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    c4bc:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    c4c0:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    c4c4:	a0 e0       	ldi	r26, 0x00	; 0
    c4c6:	b0 e0       	ldi	r27, 0x00	; 0
    c4c8:	dc 01       	movw	r26, r24
    c4ca:	99 27       	eor	r25, r25
    c4cc:	88 27       	eor	r24, r24
    c4ce:	60 e0       	ldi	r22, 0x00	; 0
    c4d0:	70 e0       	ldi	r23, 0x00	; 0
    c4d2:	84 2b       	or	r24, r20
    c4d4:	95 2b       	or	r25, r21
    c4d6:	a6 2b       	or	r26, r22
    c4d8:	b7 2b       	or	r27, r23
    c4da:	80 17       	cp	r24, r16
    c4dc:	91 07       	cpc	r25, r17
    c4de:	a2 07       	cpc	r26, r18
    c4e0:	b3 07       	cpc	r27, r19
    c4e2:	08 f0       	brcs	.+2      	; 0xc4e6 <__vector_11+0x302>
    c4e4:	4d c0       	rjmp	.+154    	; 0xc580 <__vector_11+0x39c>
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		}else{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    c4e6:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c4ea:	8b 7f       	andi	r24, 0xFB	; 251
    c4ec:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c4f0:	9f be       	out	0x3f, r9	; 63

ISR(RTC_COMP_vect){
	SAVE_CONTEXT();	
	task_executing=1;
	/*int8_t result =*/ run_tasks();
	task_executing=0;
    c4f2:	10 92 f1 29 	sts	0x29F1, r1	; 0x8029f1 <task_executing>
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    c4f6:	ff 91       	pop	r31
    c4f8:	ef 91       	pop	r30
    c4fa:	df 91       	pop	r29
    c4fc:	cf 91       	pop	r28
    c4fe:	bf 91       	pop	r27
    c500:	af 91       	pop	r26
    c502:	9f 91       	pop	r25
    c504:	8f 91       	pop	r24
    c506:	7f 91       	pop	r23
    c508:	6f 91       	pop	r22
    c50a:	5f 91       	pop	r21
    c50c:	4f 91       	pop	r20
    c50e:	3f 91       	pop	r19
    c510:	2f 91       	pop	r18
    c512:	1f 91       	pop	r17
    c514:	0f 91       	pop	r16
    c516:	ff 90       	pop	r15
    c518:	ef 90       	pop	r14
    c51a:	df 90       	pop	r13
    c51c:	cf 90       	pop	r12
    c51e:	bf 90       	pop	r11
    c520:	af 90       	pop	r10
    c522:	9f 90       	pop	r9
    c524:	8f 90       	pop	r8
    c526:	7f 90       	pop	r7
    c528:	6f 90       	pop	r6
    c52a:	5f 90       	pop	r5
    c52c:	4f 90       	pop	r4
    c52e:	3f 90       	pop	r3
    c530:	2f 90       	pop	r2
    c532:	1f 90       	pop	r1
    c534:	0f 90       	pop	r0
    c536:	0f be       	out	0x3f, r0	; 63
    c538:	0f 90       	pop	r0
}
    c53a:	ff 91       	pop	r31
    c53c:	ef 91       	pop	r30
    c53e:	df 91       	pop	r29
    c540:	cf 91       	pop	r28
    c542:	bf 91       	pop	r27
    c544:	af 91       	pop	r26
    c546:	9f 91       	pop	r25
    c548:	8f 91       	pop	r24
    c54a:	7f 91       	pop	r23
    c54c:	6f 91       	pop	r22
    c54e:	5f 91       	pop	r21
    c550:	4f 91       	pop	r20
    c552:	3f 91       	pop	r19
    c554:	2f 91       	pop	r18
    c556:	1f 91       	pop	r17
    c558:	0f 91       	pop	r16
    c55a:	ff 90       	pop	r15
    c55c:	ef 90       	pop	r14
    c55e:	df 90       	pop	r13
    c560:	cf 90       	pop	r12
    c562:	bf 90       	pop	r11
    c564:	af 90       	pop	r10
    c566:	9f 90       	pop	r9
    c568:	8f 90       	pop	r8
    c56a:	7f 90       	pop	r7
    c56c:	6f 90       	pop	r6
    c56e:	5f 90       	pop	r5
    c570:	4f 90       	pop	r4
    c572:	0f 90       	pop	r0
    c574:	0b be       	out	0x3b, r0	; 59
    c576:	0f 90       	pop	r0
    c578:	0f be       	out	0x3f, r0	; 63
    c57a:	0f 90       	pop	r0
    c57c:	1f 90       	pop	r1
    c57e:	18 95       	reti
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    c580:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    c584:	80 fd       	sbrc	r24, 0
    c586:	fc cf       	rjmp	.-8      	; 0xc580 <__vector_11+0x39c>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    c588:	80 81       	ld	r24, Z
    c58a:	91 81       	ldd	r25, Z+1	; 0x01
    c58c:	a2 81       	ldd	r26, Z+2	; 0x02
    c58e:	b3 81       	ldd	r27, Z+3	; 0x03
    c590:	88 60       	ori	r24, 0x08	; 8
    c592:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    c596:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    c59a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c59e:	84 60       	ori	r24, 0x04	; 4
    c5a0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c5a4:	a5 cf       	rjmp	.-182    	; 0xc4f0 <__vector_11+0x30c>
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    c5a6:	88 e3       	ldi	r24, 0x38	; 56
    c5a8:	9c e0       	ldi	r25, 0x0C	; 12
    c5aa:	9f 93       	push	r25
    c5ac:	8f 93       	push	r24
    c5ae:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    c5b2:	0f 90       	pop	r0
    c5b4:	0f 90       	pop	r0
    c5b6:	9c cf       	rjmp	.-200    	; 0xc4f0 <__vector_11+0x30c>

0000c5b8 <__vector_10>:
	RESTORE_CONTEXT();	
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect ){
    c5b8:	1f 92       	push	r1
    c5ba:	0f 92       	push	r0
    c5bc:	0f b6       	in	r0, 0x3f	; 63
    c5be:	0f 92       	push	r0
    c5c0:	11 24       	eor	r1, r1
    c5c2:	0b b6       	in	r0, 0x3b	; 59
    c5c4:	0f 92       	push	r0
    c5c6:	cf 92       	push	r12
    c5c8:	df 92       	push	r13
    c5ca:	ef 92       	push	r14
    c5cc:	ff 92       	push	r15
    c5ce:	0f 93       	push	r16
    c5d0:	1f 93       	push	r17
    c5d2:	2f 93       	push	r18
    c5d4:	3f 93       	push	r19
    c5d6:	4f 93       	push	r20
    c5d8:	5f 93       	push	r21
    c5da:	6f 93       	push	r22
    c5dc:	7f 93       	push	r23
    c5de:	8f 93       	push	r24
    c5e0:	9f 93       	push	r25
    c5e2:	af 93       	push	r26
    c5e4:	bf 93       	push	r27
    c5e6:	cf 93       	push	r28
    c5e8:	ef 93       	push	r30
    c5ea:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    c5ec:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    c5ee:	f8 94       	cli
		rtc_epoch++;
    c5f0:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
    c5f4:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    c5f8:	01 96       	adiw	r24, 0x01	; 1
    c5fa:	80 93 a0 26 	sts	0x26A0, r24	; 0x8026a0 <rtc_epoch>
    c5fe:	90 93 a1 26 	sts	0x26A1, r25	; 0x8026a1 <rtc_epoch+0x1>
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    c602:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    c606:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    c60a:	30 97       	sbiw	r30, 0x00	; 0
    c60c:	e1 f1       	breq	.+120    	; 0xc686 <__vector_10+0xce>
    c60e:	00 81       	ld	r16, Z
    c610:	11 81       	ldd	r17, Z+1	; 0x01
    c612:	22 81       	ldd	r18, Z+2	; 0x02
    c614:	33 81       	ldd	r19, Z+3	; 0x03
    c616:	80 91 a0 26 	lds	r24, 0x26A0	; 0x8026a0 <rtc_epoch>
    c61a:	90 91 a1 26 	lds	r25, 0x26A1	; 0x8026a1 <rtc_epoch+0x1>
    c61e:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    c622:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    c626:	a0 e0       	ldi	r26, 0x00	; 0
    c628:	b0 e0       	ldi	r27, 0x00	; 0
    c62a:	dc 01       	movw	r26, r24
    c62c:	99 27       	eor	r25, r25
    c62e:	88 27       	eor	r24, r24
    c630:	60 e0       	ldi	r22, 0x00	; 0
    c632:	70 e0       	ldi	r23, 0x00	; 0
    c634:	84 2b       	or	r24, r20
    c636:	95 2b       	or	r25, r21
    c638:	a6 2b       	or	r26, r22
    c63a:	b7 2b       	or	r27, r23
    c63c:	08 17       	cp	r16, r24
    c63e:	19 07       	cpc	r17, r25
    c640:	2a 07       	cpc	r18, r26
    c642:	3b 07       	cpc	r19, r27
    c644:	00 f5       	brcc	.+64     	; 0xc686 <__vector_10+0xce>
			if(!task_executing){
    c646:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <task_executing>
    c64a:	88 23       	and	r24, r24
    c64c:	09 f4       	brne	.+2      	; 0xc650 <__vector_10+0x98>
    c64e:	3f c0       	rjmp	.+126    	; 0xc6ce <__vector_10+0x116>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    c650:	cf bf       	out	0x3f, r28	; 63
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, get_time());
		}
	}
    c652:	ff 91       	pop	r31
    c654:	ef 91       	pop	r30
    c656:	cf 91       	pop	r28
    c658:	bf 91       	pop	r27
    c65a:	af 91       	pop	r26
    c65c:	9f 91       	pop	r25
    c65e:	8f 91       	pop	r24
    c660:	7f 91       	pop	r23
    c662:	6f 91       	pop	r22
    c664:	5f 91       	pop	r21
    c666:	4f 91       	pop	r20
    c668:	3f 91       	pop	r19
    c66a:	2f 91       	pop	r18
    c66c:	1f 91       	pop	r17
    c66e:	0f 91       	pop	r16
    c670:	ff 90       	pop	r15
    c672:	ef 90       	pop	r14
    c674:	df 90       	pop	r13
    c676:	cf 90       	pop	r12
    c678:	0f 90       	pop	r0
    c67a:	0b be       	out	0x3b, r0	; 59
    c67c:	0f 90       	pop	r0
    c67e:	0f be       	out	0x3f, r0	; 63
    c680:	0f 90       	pop	r0
    c682:	1f 90       	pop	r1
    c684:	18 95       	reti
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, get_time());
    c686:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    c68a:	36 2f       	mov	r19, r22
    c68c:	e7 2f       	mov	r30, r23
    c68e:	a0 91 32 2a 	lds	r26, 0x2A32	; 0x802a32 <task_list>
    c692:	b0 91 33 2a 	lds	r27, 0x2A33	; 0x802a33 <task_list+0x1>
    c696:	4d 91       	ld	r20, X+
    c698:	5d 91       	ld	r21, X+
    c69a:	6d 91       	ld	r22, X+
    c69c:	7c 91       	ld	r23, X
    c69e:	20 91 f1 29 	lds	r18, 0x29F1	; 0x8029f1 <task_executing>
    c6a2:	9f 93       	push	r25
    c6a4:	8f 93       	push	r24
    c6a6:	ef 93       	push	r30
    c6a8:	3f 93       	push	r19
    c6aa:	7f 93       	push	r23
    c6ac:	6f 93       	push	r22
    c6ae:	5f 93       	push	r21
    c6b0:	4f 93       	push	r20
    c6b2:	1f 92       	push	r1
    c6b4:	2f 93       	push	r18
    c6b6:	85 e8       	ldi	r24, 0x85	; 133
    c6b8:	94 e2       	ldi	r25, 0x24	; 36
    c6ba:	9f 93       	push	r25
    c6bc:	8f 93       	push	r24
    c6be:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    c6c2:	8d b7       	in	r24, 0x3d	; 61
    c6c4:	9e b7       	in	r25, 0x3e	; 62
    c6c6:	0c 96       	adiw	r24, 0x0c	; 12
    c6c8:	8d bf       	out	0x3d, r24	; 61
    c6ca:	9e bf       	out	0x3e, r25	; 62
    c6cc:	c1 cf       	rjmp	.-126    	; 0xc650 <__vector_10+0x98>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		rtc_epoch++;
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			if(!task_executing){
				if(task_list->scheduled_time < get_time()){
    c6ce:	c0 80       	ld	r12, Z
    c6d0:	d1 80       	ldd	r13, Z+1	; 0x01
    c6d2:	e2 80       	ldd	r14, Z+2	; 0x02
    c6d4:	f3 80       	ldd	r15, Z+3	; 0x03
    c6d6:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_time>
    c6da:	c6 16       	cp	r12, r22
    c6dc:	d7 06       	cpc	r13, r23
    c6de:	e8 06       	cpc	r14, r24
    c6e0:	f9 06       	cpc	r15, r25
    c6e2:	08 f4       	brcc	.+2      	; 0xc6e6 <__vector_10+0x12e>
    c6e4:	b5 cf       	rjmp	.-150    	; 0xc650 <__vector_10+0x98>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}else{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    c6e6:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    c6ea:	80 fd       	sbrc	r24, 0
    c6ec:	fc cf       	rjmp	.-8      	; 0xc6e6 <__vector_10+0x12e>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    c6ee:	e0 91 32 2a 	lds	r30, 0x2A32	; 0x802a32 <task_list>
    c6f2:	f0 91 33 2a 	lds	r31, 0x2A33	; 0x802a33 <task_list+0x1>
    c6f6:	80 81       	ld	r24, Z
    c6f8:	91 81       	ldd	r25, Z+1	; 0x01
    c6fa:	a2 81       	ldd	r26, Z+2	; 0x02
    c6fc:	b3 81       	ldd	r27, Z+3	; 0x03
    c6fe:	88 60       	ori	r24, 0x08	; 8
    c700:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    c704:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    c708:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c70c:	84 60       	ori	r24, 0x04	; 4
    c70e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    c712:	9e cf       	rjmp	.-196    	; 0xc650 <__vector_10+0x98>

0000c714 <send_id>:

static void handle_get_id(void){
	printf_P(PSTR("My ID is: %04X\r\n"),get_droplet_id());
}

void send_id(){
    c714:	0f 93       	push	r16
    c716:	1f 93       	push	r17
    c718:	cf 93       	push	r28
    c71a:	df 93       	push	r29
    c71c:	cd b7       	in	r28, 0x3d	; 61
    c71e:	de b7       	in	r29, 0x3e	; 62
    c720:	25 97       	sbiw	r28, 0x05	; 5
    c722:	cd bf       	out	0x3d, r28	; 61
    c724:	de bf       	out	0x3e, r29	; 62
	char msg[5];
	sprintf(msg, "%04X", get_droplet_id());
    c726:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <droplet_ID+0x1>
    c72a:	8f 93       	push	r24
    c72c:	80 91 99 26 	lds	r24, 0x2699	; 0x802699 <droplet_ID>
    c730:	8f 93       	push	r24
    c732:	86 ee       	ldi	r24, 0xE6	; 230
    c734:	94 e2       	ldi	r25, 0x24	; 36
    c736:	9f 93       	push	r25
    c738:	8f 93       	push	r24
    c73a:	8e 01       	movw	r16, r28
    c73c:	0f 5f       	subi	r16, 0xFF	; 255
    c73e:	1f 4f       	sbci	r17, 0xFF	; 255
    c740:	1f 93       	push	r17
    c742:	0f 93       	push	r16
    c744:	0e 94 4a 7e 	call	0xfc94	; 0xfc94 <sprintf>
	ir_send(ALL_DIRS, msg, 4);
    c748:	44 e0       	ldi	r20, 0x04	; 4
    c74a:	b8 01       	movw	r22, r16
    c74c:	8f e3       	ldi	r24, 0x3F	; 63
    c74e:	0e 94 4c 23 	call	0x4698	; 0x4698 <ir_send>
}
    c752:	0f 90       	pop	r0
    c754:	0f 90       	pop	r0
    c756:	0f 90       	pop	r0
    c758:	0f 90       	pop	r0
    c75a:	0f 90       	pop	r0
    c75c:	0f 90       	pop	r0
    c75e:	25 96       	adiw	r28, 0x05	; 5
    c760:	cd bf       	out	0x3d, r28	; 61
    c762:	de bf       	out	0x3e, r29	; 62
    c764:	df 91       	pop	r29
    c766:	cf 91       	pop	r28
    c768:	1f 91       	pop	r17
    c76a:	0f 91       	pop	r16
    c76c:	08 95       	ret

0000c76e <handle_serial_command>:
static void handle_reset(void);
static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args);

uint8_t user_handle_command(char* command_word, char* command_args) __attribute__((weak));

void handle_serial_command(char* command, uint16_t command_length){
    c76e:	2f 92       	push	r2
    c770:	3f 92       	push	r3
    c772:	4f 92       	push	r4
    c774:	5f 92       	push	r5
    c776:	6f 92       	push	r6
    c778:	7f 92       	push	r7
    c77a:	8f 92       	push	r8
    c77c:	9f 92       	push	r9
    c77e:	af 92       	push	r10
    c780:	bf 92       	push	r11
    c782:	cf 92       	push	r12
    c784:	df 92       	push	r13
    c786:	ef 92       	push	r14
    c788:	ff 92       	push	r15
    c78a:	0f 93       	push	r16
    c78c:	1f 93       	push	r17
    c78e:	cf 93       	push	r28
    c790:	df 93       	push	r29
    c792:	cd b7       	in	r28, 0x3d	; 61
    c794:	de b7       	in	r29, 0x3e	; 62
    c796:	c7 5a       	subi	r28, 0xA7	; 167
    c798:	d1 09       	sbc	r29, r1
    c79a:	cd bf       	out	0x3d, r28	; 61
    c79c:	de bf       	out	0x3e, r29	; 62
    c79e:	dc 01       	movw	r26, r24
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    c7a0:	9c 91       	ld	r25, X
    c7a2:	91 11       	cpse	r25, r1
    c7a4:	17 c0       	rjmp	.+46     	; 0xc7d4 <handle_serial_command+0x66>
		}else if(user_handle_command){ //First, make sure the function is defined
			if(!user_handle_command(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    c7a6:	c9 55       	subi	r28, 0x59	; 89
    c7a8:	df 4f       	sbci	r29, 0xFF	; 255
    c7aa:	cd bf       	out	0x3d, r28	; 61
    c7ac:	de bf       	out	0x3e, r29	; 62
    c7ae:	df 91       	pop	r29
    c7b0:	cf 91       	pop	r28
    c7b2:	1f 91       	pop	r17
    c7b4:	0f 91       	pop	r16
    c7b6:	ff 90       	pop	r15
    c7b8:	ef 90       	pop	r14
    c7ba:	df 90       	pop	r13
    c7bc:	cf 90       	pop	r12
    c7be:	bf 90       	pop	r11
    c7c0:	af 90       	pop	r10
    c7c2:	9f 90       	pop	r9
    c7c4:	8f 90       	pop	r8
    c7c6:	7f 90       	pop	r7
    c7c8:	6f 90       	pop	r6
    c7ca:	5f 90       	pop	r5
    c7cc:	4f 90       	pop	r4
    c7ce:	3f 90       	pop	r3
    c7d0:	2f 90       	pop	r2
    c7d2:	08 95       	ret

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    c7d4:	61 15       	cp	r22, r1
    c7d6:	71 05       	cpc	r23, r1
    c7d8:	09 f4       	brne	.+2      	; 0xc7dc <handle_serial_command+0x6e>
    c7da:	f9 c1       	rjmp	.+1010   	; 0xcbce <handle_serial_command+0x460>
    c7dc:	fd 01       	movw	r30, r26
    c7de:	31 96       	adiw	r30, 0x01	; 1
    c7e0:	6a 0f       	add	r22, r26
    c7e2:	7b 1f       	adc	r23, r27
    c7e4:	20 e0       	ldi	r18, 0x00	; 0
    c7e6:	30 e0       	ldi	r19, 0x00	; 0
    c7e8:	81 e0       	ldi	r24, 0x01	; 1
    c7ea:	8e 01       	movw	r16, r28
    c7ec:	0f 5b       	subi	r16, 0xBF	; 191
    c7ee:	1f 4f       	sbci	r17, 0xFF	; 255
    c7f0:	12 c0       	rjmp	.+36     	; 0xc816 <handle_serial_command+0xa8>
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
    c7f2:	81 30       	cpi	r24, 0x01	; 1
    c7f4:	09 f4       	brne	.+2      	; 0xc7f8 <handle_serial_command+0x8a>
    c7f6:	ca c0       	rjmp	.+404    	; 0xc98c <handle_serial_command+0x21e>
				command_word[write_index] = command[i];
			}else{
				command_args[write_index] = command[i];
    c7f8:	a1 e0       	ldi	r26, 0x01	; 1
    c7fa:	b0 e0       	ldi	r27, 0x00	; 0
    c7fc:	ac 0f       	add	r26, r28
    c7fe:	bd 1f       	adc	r27, r29
    c800:	a2 0f       	add	r26, r18
    c802:	b3 1f       	adc	r27, r19
    c804:	9c 93       	st	X, r25
			}
			write_index++;
    c806:	2f 5f       	subi	r18, 0xFF	; 255
    c808:	3f 4f       	sbci	r19, 0xFF	; 255

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    c80a:	6e 17       	cp	r22, r30
    c80c:	7f 07       	cpc	r23, r31
    c80e:	89 f0       	breq	.+34     	; 0xc832 <handle_serial_command+0xc4>
		if(command[i]=='\0'){
    c810:	91 91       	ld	r25, Z+
    c812:	99 23       	and	r25, r25
    c814:	71 f0       	breq	.+28     	; 0xc832 <handle_serial_command+0xc4>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    c816:	90 32       	cpi	r25, 0x20	; 32
    c818:	61 f7       	brne	.-40     	; 0xc7f2 <handle_serial_command+0x84>
    c81a:	81 30       	cpi	r24, 0x01	; 1
    c81c:	69 f7       	brne	.-38     	; 0xc7f8 <handle_serial_command+0x8a>
			command_word[write_index]='\0';
    c81e:	d8 01       	movw	r26, r16
    c820:	a2 0f       	add	r26, r18
    c822:	b3 1f       	adc	r27, r19
    c824:	1c 92       	st	X, r1
			write_index = 0;
			writing_word_boole = 0;
    c826:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    c828:	20 e0       	ldi	r18, 0x00	; 0
    c82a:	30 e0       	ldi	r19, 0x00	; 0

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    c82c:	6e 17       	cp	r22, r30
    c82e:	7f 07       	cpc	r23, r31
    c830:	79 f7       	brne	.-34     	; 0xc810 <handle_serial_command+0xa2>
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    c832:	81 30       	cpi	r24, 0x01	; 1
    c834:	09 f4       	brne	.+2      	; 0xc838 <handle_serial_command+0xca>
    c836:	72 c1       	rjmp	.+740    	; 0xcb1c <handle_serial_command+0x3ae>
		command_word[write_index] = '\0';
		command_args[0] = '\0';
	}else{
		command_args[write_index] = '\0';
    c838:	fe 01       	movw	r30, r28
    c83a:	e2 0f       	add	r30, r18
    c83c:	f3 1f       	adc	r31, r19
    c83e:	11 82       	std	Z+1, r1	; 0x01
void handle_serial_command(char* command, uint16_t command_length){
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
		char command_word[SRL_BUFFER_SIZE];
		char command_args[SRL_BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    c840:	61 e6       	ldi	r22, 0x61	; 97
    c842:	73 e1       	ldi	r23, 0x13	; 19
    c844:	c8 01       	movw	r24, r16
    c846:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c84a:	89 2b       	or	r24, r25
    c84c:	09 f4       	brne	.+2      	; 0xc850 <handle_serial_command+0xe2>
    c84e:	c3 c0       	rjmp	.+390    	; 0xc9d6 <handle_serial_command+0x268>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    c850:	6c e5       	ldi	r22, 0x5C	; 92
    c852:	73 e1       	ldi	r23, 0x13	; 19
    c854:	c8 01       	movw	r24, r16
    c856:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c85a:	89 2b       	or	r24, r25
    c85c:	09 f4       	brne	.+2      	; 0xc860 <handle_serial_command+0xf2>
    c85e:	9b c0       	rjmp	.+310    	; 0xc996 <handle_serial_command+0x228>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    c860:	64 e5       	ldi	r22, 0x54	; 84
    c862:	73 e1       	ldi	r23, 0x13	; 19
    c864:	c8 01       	movw	r24, r16
    c866:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c86a:	89 2b       	or	r24, r25
    c86c:	09 f4       	brne	.+2      	; 0xc870 <handle_serial_command+0x102>
    c86e:	e8 c0       	rjmp	.+464    	; 0xca40 <handle_serial_command+0x2d2>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    c870:	6d e4       	ldi	r22, 0x4D	; 77
    c872:	73 e1       	ldi	r23, 0x13	; 19
    c874:	c8 01       	movw	r24, r16
    c876:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c87a:	89 2b       	or	r24, r25
    c87c:	09 f4       	brne	.+2      	; 0xc880 <handle_serial_command+0x112>
    c87e:	54 c1       	rjmp	.+680    	; 0xcb28 <handle_serial_command+0x3ba>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    c880:	68 e4       	ldi	r22, 0x48	; 72
    c882:	73 e1       	ldi	r23, 0x13	; 19
    c884:	c8 01       	movw	r24, r16
    c886:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c88a:	89 2b       	or	r24, r25
    c88c:	09 f4       	brne	.+2      	; 0xc890 <handle_serial_command+0x122>
    c88e:	67 c1       	rjmp	.+718    	; 0xcb5e <handle_serial_command+0x3f0>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    c890:	6e e3       	ldi	r22, 0x3E	; 62
    c892:	73 e1       	ldi	r23, 0x13	; 19
    c894:	c8 01       	movw	r24, r16
    c896:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c89a:	89 2b       	or	r24, r25
    c89c:	09 f4       	brne	.+2      	; 0xc8a0 <handle_serial_command+0x132>
    c89e:	94 c1       	rjmp	.+808    	; 0xcbc8 <handle_serial_command+0x45a>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    c8a0:	63 e3       	ldi	r22, 0x33	; 51
    c8a2:	73 e1       	ldi	r23, 0x13	; 19
    c8a4:	c8 01       	movw	r24, r16
    c8a6:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c8aa:	89 2b       	or	r24, r25
    c8ac:	09 f4       	brne	.+2      	; 0xc8b0 <handle_serial_command+0x142>
    c8ae:	00 c1       	rjmp	.+512    	; 0xcab0 <handle_serial_command+0x342>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    c8b0:	68 e2       	ldi	r22, 0x28	; 40
    c8b2:	73 e1       	ldi	r23, 0x13	; 19
    c8b4:	c8 01       	movw	r24, r16
    c8b6:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c8ba:	89 2b       	or	r24, r25
    c8bc:	09 f4       	brne	.+2      	; 0xc8c0 <handle_serial_command+0x152>
    c8be:	8c c1       	rjmp	.+792    	; 0xcbd8 <handle_serial_command+0x46a>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    c8c0:	66 e1       	ldi	r22, 0x16	; 22
    c8c2:	73 e1       	ldi	r23, 0x13	; 19
    c8c4:	c8 01       	movw	r24, r16
    c8c6:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c8ca:	89 2b       	or	r24, r25
    c8cc:	09 f4       	brne	.+2      	; 0xc8d0 <handle_serial_command+0x162>
    c8ce:	ba c1       	rjmp	.+884    	; 0xcc44 <handle_serial_command+0x4d6>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    c8d0:	60 e1       	ldi	r22, 0x10	; 16
    c8d2:	73 e1       	ldi	r23, 0x13	; 19
    c8d4:	c8 01       	movw	r24, r16
    c8d6:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c8da:	89 2b       	or	r24, r25
    c8dc:	09 f4       	brne	.+2      	; 0xc8e0 <handle_serial_command+0x172>
    c8de:	25 c2       	rjmp	.+1098   	; 0xcd2a <handle_serial_command+0x5bc>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    c8e0:	68 e0       	ldi	r22, 0x08	; 8
    c8e2:	73 e1       	ldi	r23, 0x13	; 19
    c8e4:	c8 01       	movw	r24, r16
    c8e6:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c8ea:	89 2b       	or	r24, r25
    c8ec:	09 f4       	brne	.+2      	; 0xc8f0 <handle_serial_command+0x182>
    c8ee:	a4 c2       	rjmp	.+1352   	; 0xce38 <handle_serial_command+0x6ca>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    c8f0:	61 e0       	ldi	r22, 0x01	; 1
    c8f2:	73 e1       	ldi	r23, 0x13	; 19
    c8f4:	c8 01       	movw	r24, r16
    c8f6:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c8fa:	89 2b       	or	r24, r25
    c8fc:	09 f4       	brne	.+2      	; 0xc900 <handle_serial_command+0x192>
    c8fe:	eb c2       	rjmp	.+1494   	; 0xced6 <handle_serial_command+0x768>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    c900:	64 ef       	ldi	r22, 0xF4	; 244
    c902:	72 e1       	ldi	r23, 0x12	; 18
    c904:	c8 01       	movw	r24, r16
    c906:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c90a:	89 2b       	or	r24, r25
    c90c:	09 f4       	brne	.+2      	; 0xc910 <handle_serial_command+0x1a2>
    c90e:	11 c3       	rjmp	.+1570   	; 0xcf32 <handle_serial_command+0x7c4>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    c910:	60 ef       	ldi	r22, 0xF0	; 240
    c912:	72 e1       	ldi	r23, 0x12	; 18
    c914:	c8 01       	movw	r24, r16
    c916:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c91a:	89 2b       	or	r24, r25
    c91c:	09 f4       	brne	.+2      	; 0xc920 <handle_serial_command+0x1b2>
    c91e:	14 c3       	rjmp	.+1576   	; 0xcf48 <handle_serial_command+0x7da>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    c920:	68 ee       	ldi	r22, 0xE8	; 232
    c922:	72 e1       	ldi	r23, 0x12	; 18
    c924:	c8 01       	movw	r24, r16
    c926:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c92a:	89 2b       	or	r24, r25
    c92c:	09 f4       	brne	.+2      	; 0xc930 <handle_serial_command+0x1c2>
    c92e:	60 c3       	rjmp	.+1728   	; 0xcff0 <handle_serial_command+0x882>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    c930:	64 ee       	ldi	r22, 0xE4	; 228
    c932:	72 e1       	ldi	r23, 0x12	; 18
    c934:	c8 01       	movw	r24, r16
    c936:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c93a:	89 2b       	or	r24, r25
    c93c:	09 f4       	brne	.+2      	; 0xc940 <handle_serial_command+0x1d2>
    c93e:	6f c4       	rjmp	.+2270   	; 0xd21e <handle_serial_command+0xab0>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    c940:	6c ed       	ldi	r22, 0xDC	; 220
    c942:	72 e1       	ldi	r23, 0x12	; 18
    c944:	c8 01       	movw	r24, r16
    c946:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c94a:	89 2b       	or	r24, r25
    c94c:	09 f4       	brne	.+2      	; 0xc950 <handle_serial_command+0x1e2>
    c94e:	52 c4       	rjmp	.+2212   	; 0xd1f4 <handle_serial_command+0xa86>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    c950:	68 ed       	ldi	r22, 0xD8	; 216
    c952:	72 e1       	ldi	r23, 0x12	; 18
    c954:	c8 01       	movw	r24, r16
    c956:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c95a:	89 2b       	or	r24, r25
    c95c:	09 f4       	brne	.+2      	; 0xc960 <handle_serial_command+0x1f2>
    c95e:	16 c4       	rjmp	.+2092   	; 0xd18c <handle_serial_command+0xa1e>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
    c960:	62 ed       	ldi	r22, 0xD2	; 210
    c962:	72 e1       	ldi	r23, 0x12	; 18
    c964:	c8 01       	movw	r24, r16
    c966:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c96a:	89 2b       	or	r24, r25
    c96c:	09 f4       	brne	.+2      	; 0xc970 <handle_serial_command+0x202>
    c96e:	0b c4       	rjmp	.+2070   	; 0xd186 <handle_serial_command+0xa18>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    c970:	6c ec       	ldi	r22, 0xCC	; 204
    c972:	72 e1       	ldi	r23, 0x12	; 18
    c974:	c8 01       	movw	r24, r16
    c976:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    c97a:	89 2b       	or	r24, r25
    c97c:	09 f0       	breq	.+2      	; 0xc980 <handle_serial_command+0x212>
    c97e:	da c3       	rjmp	.+1972   	; 0xd134 <handle_serial_command+0x9c6>

/**
 * \brief Resets the Droplet's program counter and clears all low-level system buffers.
 */
inline void droplet_reboot(void){
	CPU_CCP=CCP_IOREG_gc;
    c980:	88 ed       	ldi	r24, 0xD8	; 216
    c982:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    c984:	81 e0       	ldi	r24, 0x01	; 1
    c986:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    c98a:	0d cf       	rjmp	.-486    	; 0xc7a6 <handle_serial_command+0x38>
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
				command_word[write_index] = command[i];
    c98c:	d8 01       	movw	r26, r16
    c98e:	a2 0f       	add	r26, r18
    c990:	b3 1f       	adc	r27, r19
    c992:	9c 93       	st	X, r25
    c994:	38 cf       	rjmp	.-400    	; 0xc806 <handle_serial_command+0x98>
		move_steps(direction, num_steps);
	}	
}	

static void handle_walk(char* command_args){	
	const char delim[2] = " ";
    c996:	80 e2       	ldi	r24, 0x20	; 32
    c998:	90 e0       	ldi	r25, 0x00	; 0
    c99a:	cf 57       	subi	r28, 0x7F	; 127
    c99c:	df 4f       	sbci	r29, 0xFF	; 255
    c99e:	88 83       	st	Y, r24
    c9a0:	99 83       	std	Y+1, r25	; 0x01
    c9a2:	c1 58       	subi	r28, 0x81	; 129
    c9a4:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    c9a6:	be 01       	movw	r22, r28
    c9a8:	6f 57       	subi	r22, 0x7F	; 127
    c9aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c9ac:	ce 01       	movw	r24, r28
    c9ae:	01 96       	adiw	r24, 0x01	; 1
    c9b0:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint8_t direction = token[0]-'0';
    c9b4:	fc 01       	movw	r30, r24
    c9b6:	10 81       	ld	r17, Z
    c9b8:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    c9ba:	be 01       	movw	r22, r28
    c9bc:	6f 57       	subi	r22, 0x7F	; 127
    c9be:	7f 4f       	sbci	r23, 0xFF	; 255
    c9c0:	80 e0       	ldi	r24, 0x00	; 0
    c9c2:	90 e0       	ldi	r25, 0x00	; 0
    c9c4:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    c9c8:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
	
	walk(direction, distance_mm);
    c9cc:	bc 01       	movw	r22, r24
    c9ce:	81 2f       	mov	r24, r17
    c9d0:	0e 94 14 4c 	call	0x9828	; 0x9828 <walk>
    c9d4:	e8 ce       	rjmp	.-560    	; 0xc7a6 <handle_serial_command+0x38>
	if(!found) printf("None");
	printf("\r\n");
}

static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
    c9d6:	80 e2       	ldi	r24, 0x20	; 32
    c9d8:	90 e0       	ldi	r25, 0x00	; 0
    c9da:	cf 57       	subi	r28, 0x7F	; 127
    c9dc:	df 4f       	sbci	r29, 0xFF	; 255
    c9de:	88 83       	st	Y, r24
    c9e0:	99 83       	std	Y+1, r25	; 0x01
    c9e2:	c1 58       	subi	r28, 0x81	; 129
    c9e4:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    c9e6:	be 01       	movw	r22, r28
    c9e8:	6f 57       	subi	r22, 0x7F	; 127
    c9ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c9ec:	ce 01       	movw	r24, r28
    c9ee:	01 96       	adiw	r24, 0x01	; 1
    c9f0:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint8_t direction = token[0]-'0';
    c9f4:	fc 01       	movw	r30, r24
    c9f6:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    c9f8:	be 01       	movw	r22, r28
    c9fa:	6f 57       	subi	r22, 0x7F	; 127
    c9fc:	7f 4f       	sbci	r23, 0xFF	; 255
    c9fe:	80 e0       	ldi	r24, 0x00	; 0
    ca00:	90 e0       	ldi	r25, 0x00	; 0
    ca02:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    ca06:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    ca0a:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    ca0c:	00 97       	sbiw	r24, 0x00	; 0
    ca0e:	09 f4       	brne	.+2      	; 0xca12 <handle_serial_command+0x2a4>
    ca10:	ca ce       	rjmp	.-620    	; 0xc7a6 <handle_serial_command+0x38>

static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    ca12:	f0 ed       	ldi	r31, 0xD0	; 208
    ca14:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %hu, num_steps %u\r\n"), direction, num_steps);	
    ca16:	1f 93       	push	r17
    ca18:	8f 93       	push	r24
    ca1a:	1f 92       	push	r1
    ca1c:	ff 92       	push	r15
    ca1e:	8f e7       	ldi	r24, 0x7F	; 127
    ca20:	92 e1       	ldi	r25, 0x12	; 18
    ca22:	9f 93       	push	r25
    ca24:	8f 93       	push	r24
    ca26:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		move_steps(direction, num_steps);
    ca2a:	b8 01       	movw	r22, r16
    ca2c:	8f 2d       	mov	r24, r15
    ca2e:	0e 94 9e 4a 	call	0x953c	; 0x953c <move_steps>
    ca32:	0f 90       	pop	r0
    ca34:	0f 90       	pop	r0
    ca36:	0f 90       	pop	r0
    ca38:	0f 90       	pop	r0
    ca3a:	0f 90       	pop	r0
    ca3c:	0f 90       	pop	r0
    ca3e:	b3 ce       	rjmp	.-666    	; 0xc7a6 <handle_serial_command+0x38>
	walk(direction, distance_mm);
}

static void handle_get_rgb(void){
	int16_t r, g, b;
	get_rgb(&r, &g, &b);
    ca40:	ae 01       	movw	r20, r28
    ca42:	4f 57       	subi	r20, 0x7F	; 127
    ca44:	5f 4f       	sbci	r21, 0xFF	; 255
    ca46:	be 01       	movw	r22, r28
    ca48:	6f 55       	subi	r22, 0x5F	; 95
    ca4a:	7f 4f       	sbci	r23, 0xFF	; 255
    ca4c:	ce 01       	movw	r24, r28
    ca4e:	8a 55       	subi	r24, 0x5A	; 90
    ca50:	9f 4f       	sbci	r25, 0xFF	; 255
    ca52:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <get_rgb>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    ca56:	ce 57       	subi	r28, 0x7E	; 126
    ca58:	df 4f       	sbci	r29, 0xFF	; 255
    ca5a:	88 81       	ld	r24, Y
    ca5c:	c2 58       	subi	r28, 0x82	; 130
    ca5e:	d0 40       	sbci	r29, 0x00	; 0
    ca60:	8f 93       	push	r24
    ca62:	cf 57       	subi	r28, 0x7F	; 127
    ca64:	df 4f       	sbci	r29, 0xFF	; 255
    ca66:	88 81       	ld	r24, Y
    ca68:	c1 58       	subi	r28, 0x81	; 129
    ca6a:	d0 40       	sbci	r29, 0x00	; 0
    ca6c:	8f 93       	push	r24
    ca6e:	ce 55       	subi	r28, 0x5E	; 94
    ca70:	df 4f       	sbci	r29, 0xFF	; 255
    ca72:	88 81       	ld	r24, Y
    ca74:	c2 5a       	subi	r28, 0xA2	; 162
    ca76:	d0 40       	sbci	r29, 0x00	; 0
    ca78:	8f 93       	push	r24
    ca7a:	cf 55       	subi	r28, 0x5F	; 95
    ca7c:	df 4f       	sbci	r29, 0xFF	; 255
    ca7e:	88 81       	ld	r24, Y
    ca80:	c1 5a       	subi	r28, 0xA1	; 161
    ca82:	d0 40       	sbci	r29, 0x00	; 0
    ca84:	8f 93       	push	r24
    ca86:	c9 55       	subi	r28, 0x59	; 89
    ca88:	df 4f       	sbci	r29, 0xFF	; 255
    ca8a:	88 81       	ld	r24, Y
    ca8c:	c7 5a       	subi	r28, 0xA7	; 167
    ca8e:	d0 40       	sbci	r29, 0x00	; 0
    ca90:	8f 93       	push	r24
    ca92:	ca 55       	subi	r28, 0x5A	; 90
    ca94:	df 4f       	sbci	r29, 0xFF	; 255
    ca96:	88 81       	ld	r24, Y
    ca98:	c6 5a       	subi	r28, 0xA6	; 166
    ca9a:	d0 40       	sbci	r29, 0x00	; 0
    ca9c:	8f 93       	push	r24
    ca9e:	86 e6       	ldi	r24, 0x66	; 102
    caa0:	92 e1       	ldi	r25, 0x12	; 18
    caa2:	9f 93       	push	r25
    caa4:	8f 93       	push	r24
    caa6:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    caaa:	cd bf       	out	0x3d, r28	; 61
    caac:	de bf       	out	0x3e, r29	; 62
    caae:	7b ce       	rjmp	.-778    	; 0xc7a6 <handle_serial_command+0x38>
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
    cab0:	60 90 7a 0a 	lds	r6, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    cab4:	70 90 7b 0a 	lds	r7, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
    cab8:	a0 90 78 0a 	lds	r10, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    cabc:	b0 90 79 0a 	lds	r11, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led(void){ return TCD1.CCABUF; }
    cac0:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    cac4:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	stop_move();
}

static void handle_set_motors(char* command_args){	
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
    cac8:	4f ef       	ldi	r20, 0xFF	; 255
    caca:	60 e0       	ldi	r22, 0x00	; 0
    cacc:	80 e0       	ldi	r24, 0x00	; 0
    cace:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
	const char delim[2] = " ";
    cad2:	8e 01       	movw	r16, r28
    cad4:	0f 57       	subi	r16, 0x7F	; 127
    cad6:	1f 4f       	sbci	r17, 0xFF	; 255
    cad8:	80 e2       	ldi	r24, 0x20	; 32
    cada:	90 e0       	ldi	r25, 0x00	; 0
    cadc:	f8 01       	movw	r30, r16
    cade:	80 83       	st	Z, r24
    cae0:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    cae2:	b8 01       	movw	r22, r16
    cae4:	ce 01       	movw	r24, r28
    cae6:	01 96       	adiw	r24, 0x01	; 1
    cae8:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    caec:	00 97       	sbiw	r24, 0x00	; 0
    caee:	09 f4       	brne	.+2      	; 0xcaf2 <handle_serial_command+0x384>
    caf0:	eb c2       	rjmp	.+1494   	; 0xd0c8 <handle_serial_command+0x95a>
	uint8_t direction = atoi(token);
    caf2:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    caf6:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    caf8:	f7 e0       	ldi	r31, 0x07	; 7
    cafa:	f8 17       	cp	r31, r24
    cafc:	08 f0       	brcs	.+2      	; 0xcb00 <handle_serial_command+0x392>
    cafe:	c2 c0       	rjmp	.+388    	; 0xcc84 <handle_serial_command+0x516>
    cb00:	ff 24       	eor	r15, r15
    cb02:	ff 92       	push	r15
    cb04:	ef 92       	push	r14
    cb06:	86 e2       	ldi	r24, 0x26	; 38
    cb08:	92 e1       	ldi	r25, 0x12	; 18
    cb0a:	9f 93       	push	r25
    cb0c:	8f 93       	push	r24
    cb0e:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    cb12:	0f 90       	pop	r0
    cb14:	0f 90       	pop	r0
    cb16:	0f 90       	pop	r0
    cb18:	0f 90       	pop	r0
    cb1a:	45 ce       	rjmp	.-886    	; 0xc7a6 <handle_serial_command+0x38>
    cb1c:	f8 01       	movw	r30, r16
    cb1e:	e2 0f       	add	r30, r18
    cb20:	f3 1f       	adc	r31, r19
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    cb22:	10 82       	st	Z, r1
		command_args[0] = '\0';
    cb24:	19 82       	std	Y+1, r1	; 0x01
    cb26:	8c ce       	rjmp	.-744    	; 0xc840 <handle_serial_command+0xd2>
	get_rgb(&r, &g, &b);
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
}

static void handle_set_ir(char* command_args){
	const char delim[2] = " ";
    cb28:	80 e2       	ldi	r24, 0x20	; 32
    cb2a:	90 e0       	ldi	r25, 0x00	; 0
    cb2c:	cf 57       	subi	r28, 0x7F	; 127
    cb2e:	df 4f       	sbci	r29, 0xFF	; 255
    cb30:	88 83       	st	Y, r24
    cb32:	99 83       	std	Y+1, r25	; 0x01
    cb34:	c1 58       	subi	r28, 0x81	; 129
    cb36:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    cb38:	be 01       	movw	r22, r28
    cb3a:	6f 57       	subi	r22, 0x7F	; 127
    cb3c:	7f 4f       	sbci	r23, 0xFF	; 255
    cb3e:	ce 01       	movw	r24, r28
    cb40:	01 96       	adiw	r24, 0x01	; 1
    cb42:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    cb46:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
	
	schedule_task(10, (arg_func_t)set_all_ir_powers, (void*)ir_val);
    cb4a:	9c 01       	movw	r18, r24
    cb4c:	43 ed       	ldi	r20, 0xD3	; 211
    cb4e:	57 e2       	ldi	r21, 0x27	; 39
    cb50:	6a e0       	ldi	r22, 0x0A	; 10
    cb52:	70 e0       	ldi	r23, 0x00	; 0
    cb54:	80 e0       	ldi	r24, 0x00	; 0
    cb56:	90 e0       	ldi	r25, 0x00	; 0
    cb58:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    cb5c:	24 ce       	rjmp	.-952    	; 0xc7a6 <handle_serial_command+0x38>
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}

static void handle_check_collisions(void){
	uint8_t dirs = check_collisions();
    cb5e:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <check_collisions>
    cb62:	e8 2e       	mov	r14, r24
    cb64:	f1 2c       	mov	r15, r1
    cb66:	00 e0       	ldi	r16, 0x00	; 0
    cb68:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t found=0;
    cb6a:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
			printf("%hu",i);
    cb6c:	ac ef       	ldi	r26, 0xFC	; 252
    cb6e:	ca 2e       	mov	r12, r26
    cb70:	a4 e2       	ldi	r26, 0x24	; 36
    cb72:	da 2e       	mov	r13, r26
    cb74:	05 c0       	rjmp	.+10     	; 0xcb80 <handle_serial_command+0x412>
    cb76:	0f 5f       	subi	r16, 0xFF	; 255
    cb78:	1f 4f       	sbci	r17, 0xFF	; 255
}

static void handle_check_collisions(void){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    cb7a:	06 30       	cpi	r16, 0x06	; 6
    cb7c:	11 05       	cpc	r17, r1
    cb7e:	a9 f0       	breq	.+42     	; 0xcbaa <handle_serial_command+0x43c>
		if(dirs&(1<<i)){
    cb80:	c7 01       	movw	r24, r14
    cb82:	00 2e       	mov	r0, r16
    cb84:	02 c0       	rjmp	.+4      	; 0xcb8a <handle_serial_command+0x41c>
    cb86:	95 95       	asr	r25
    cb88:	87 95       	ror	r24
    cb8a:	0a 94       	dec	r0
    cb8c:	e2 f7       	brpl	.-8      	; 0xcb86 <handle_serial_command+0x418>
    cb8e:	80 ff       	sbrs	r24, 0
    cb90:	f2 cf       	rjmp	.-28     	; 0xcb76 <handle_serial_command+0x408>
			found=1;
			printf("%hu",i);
    cb92:	1f 93       	push	r17
    cb94:	0f 93       	push	r16
    cb96:	df 92       	push	r13
    cb98:	cf 92       	push	r12
    cb9a:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    cb9e:	0f 90       	pop	r0
    cba0:	0f 90       	pop	r0
    cba2:	0f 90       	pop	r0
    cba4:	0f 90       	pop	r0
static void handle_check_collisions(void){
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    cba6:	21 e0       	ldi	r18, 0x01	; 1
    cba8:	e6 cf       	rjmp	.-52     	; 0xcb76 <handle_serial_command+0x408>
			printf("%hu",i);
		}
	}
	if(!found) printf("None");
    cbaa:	21 11       	cpse	r18, r1
    cbac:	08 c0       	rjmp	.+16     	; 0xcbbe <handle_serial_command+0x450>
    cbae:	80 e0       	ldi	r24, 0x00	; 0
    cbb0:	95 e2       	ldi	r25, 0x25	; 37
    cbb2:	9f 93       	push	r25
    cbb4:	8f 93       	push	r24
    cbb6:	0e 94 d8 7d 	call	0xfbb0	; 0xfbb0 <printf>
    cbba:	0f 90       	pop	r0
    cbbc:	0f 90       	pop	r0
	printf("\r\n");
    cbbe:	80 e3       	ldi	r24, 0x30	; 48
    cbc0:	91 e2       	ldi	r25, 0x21	; 33
    cbc2:	0e 94 1a 7e 	call	0xfc34	; 0xfc34 <puts>
    cbc6:	ef cd       	rjmp	.-1058   	; 0xc7a6 <handle_serial_command+0x38>
	
	schedule_task(10, (arg_func_t)set_all_ir_powers, (void*)ir_val);
}

static void handle_stop_walk(void){
	stop_move();
    cbc8:	0e 94 79 4a 	call	0x94f2	; 0x94f2 <stop_move>
    cbcc:	ec cd       	rjmp	.-1064   	; 0xc7a6 <handle_serial_command+0x38>

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    cbce:	8e 01       	movw	r16, r28
    cbd0:	0f 5b       	subi	r16, 0xBF	; 191
    cbd2:	1f 4f       	sbci	r17, 0xFF	; 255
    cbd4:	f8 01       	movw	r30, r16
    cbd6:	a5 cf       	rjmp	.-182    	; 0xcb22 <handle_serial_command+0x3b4>
#define LED_B_PIN_bm			PIN4_bm

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
    cbd8:	40 90 7a 0a 	lds	r4, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    cbdc:	50 90 7b 0a 	lds	r5, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
    cbe0:	60 90 78 0a 	lds	r6, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    cbe4:	70 90 79 0a 	lds	r7, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led(void){ return TCD1.CCABUF; }
    cbe8:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    cbec:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	set_rgb(r,g,b);
}

static void handle_adjust_motors(char* command_args){
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
    cbf0:	4f ef       	ldi	r20, 0xFF	; 255
    cbf2:	60 e0       	ldi	r22, 0x00	; 0
    cbf4:	80 e0       	ldi	r24, 0x00	; 0
    cbf6:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
	const char delim[2] = " ";
    cbfa:	8e 01       	movw	r16, r28
    cbfc:	0f 57       	subi	r16, 0x7F	; 127
    cbfe:	1f 4f       	sbci	r17, 0xFF	; 255
    cc00:	80 e2       	ldi	r24, 0x20	; 32
    cc02:	90 e0       	ldi	r25, 0x00	; 0
    cc04:	f8 01       	movw	r30, r16
    cc06:	80 83       	st	Z, r24
    cc08:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    cc0a:	b8 01       	movw	r22, r16
    cc0c:	ce 01       	movw	r24, r28
    cc0e:	01 96       	adiw	r24, 0x01	; 1
    cc10:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    cc14:	00 97       	sbiw	r24, 0x00	; 0
    cc16:	09 f4       	brne	.+2      	; 0xcc1a <handle_serial_command+0x4ac>
    cc18:	60 c2       	rjmp	.+1216   	; 0xd0da <handle_serial_command+0x96c>
	uint8_t direction = atoi(token);
    cc1a:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cc1e:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    cc20:	f7 e0       	ldi	r31, 0x07	; 7
    cc22:	f8 17       	cp	r31, r24
    cc24:	08 f0       	brcs	.+2      	; 0xcc28 <handle_serial_command+0x4ba>
    cc26:	8c c0       	rjmp	.+280    	; 0xcd40 <handle_serial_command+0x5d2>
    cc28:	ff 24       	eor	r15, r15
    cc2a:	ff 92       	push	r15
    cc2c:	ef 92       	push	r14
    cc2e:	89 e3       	ldi	r24, 0x39	; 57
    cc30:	91 e1       	ldi	r25, 0x11	; 17
    cc32:	9f 93       	push	r25
    cc34:	8f 93       	push	r24
    cc36:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    cc3a:	0f 90       	pop	r0
    cc3c:	0f 90       	pop	r0
    cc3e:	0f 90       	pop	r0
    cc40:	0f 90       	pop	r0
    cc42:	b1 cd       	rjmp	.-1182   	; 0xc7a6 <handle_serial_command+0x38>
	printf_P(PSTR("Got adjust_motors command. direction: %hu, New Settings: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
	set_rgb(r,g,b);
}

static void handle_set_mm_per_kilostep(char* command_args){
	const char delim[2] = " ";
    cc44:	80 e2       	ldi	r24, 0x20	; 32
    cc46:	90 e0       	ldi	r25, 0x00	; 0
    cc48:	cf 57       	subi	r28, 0x7F	; 127
    cc4a:	df 4f       	sbci	r29, 0xFF	; 255
    cc4c:	88 83       	st	Y, r24
    cc4e:	99 83       	std	Y+1, r25	; 0x01
    cc50:	c1 58       	subi	r28, 0x81	; 129
    cc52:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    cc54:	be 01       	movw	r22, r28
    cc56:	6f 57       	subi	r22, 0x7F	; 127
    cc58:	7f 4f       	sbci	r23, 0xFF	; 255
    cc5a:	ce 01       	movw	r24, r28
    cc5c:	01 96       	adiw	r24, 0x01	; 1
    cc5e:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint8_t direction = token[0]-'0';
    cc62:	fc 01       	movw	r30, r24
    cc64:	10 81       	ld	r17, Z
    cc66:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    cc68:	be 01       	movw	r22, r28
    cc6a:	6f 57       	subi	r22, 0x7F	; 127
    cc6c:	7f 4f       	sbci	r23, 0xFF	; 255
    cc6e:	80 e0       	ldi	r24, 0x00	; 0
    cc70:	90 e0       	ldi	r25, 0x00	; 0
    cc72:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    cc76:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>

	set_mm_per_kilostep(direction, mm_per_kilostep);
    cc7a:	bc 01       	movw	r22, r24
    cc7c:	81 2f       	mov	r24, r17
    cc7e:	0e 94 8b 4c 	call	0x9916	; 0x9916 <set_mm_per_kilostep>
    cc82:	91 cd       	rjmp	.-1246   	; 0xc7a6 <handle_serial_command+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    cc84:	b8 01       	movw	r22, r16
    cc86:	80 e0       	ldi	r24, 0x00	; 0
    cc88:	90 e0       	ldi	r25, 0x00	; 0
    cc8a:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    cc8e:	00 97       	sbiw	r24, 0x00	; 0
    cc90:	09 f4       	brne	.+2      	; 0xcc94 <handle_serial_command+0x526>
    cc92:	07 c2       	rjmp	.+1038   	; 0xd0a2 <handle_serial_command+0x934>
    cc94:	ff 24       	eor	r15, r15
	motor_adjusts[direction][0] = atoi(token);
    cc96:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cc9a:	97 01       	movw	r18, r14
    cc9c:	22 0f       	add	r18, r18
    cc9e:	33 1f       	adc	r19, r19
    cca0:	2e 0d       	add	r18, r14
    cca2:	3f 1d       	adc	r19, r15
    cca4:	22 0f       	add	r18, r18
    cca6:	33 1f       	adc	r19, r19
    cca8:	a9 01       	movw	r20, r18
    ccaa:	4d 50       	subi	r20, 0x0D	; 13
    ccac:	56 4d       	sbci	r21, 0xD6	; 214
    ccae:	6a 01       	movw	r12, r20
    ccb0:	fa 01       	movw	r30, r20
    ccb2:	80 83       	st	Z, r24
    ccb4:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    ccb6:	b8 01       	movw	r22, r16
    ccb8:	80 e0       	ldi	r24, 0x00	; 0
    ccba:	90 e0       	ldi	r25, 0x00	; 0
    ccbc:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    ccc0:	00 97       	sbiw	r24, 0x00	; 0
    ccc2:	09 f4       	brne	.+2      	; 0xccc6 <handle_serial_command+0x558>
    ccc4:	e5 c1       	rjmp	.+970    	; 0xd090 <handle_serial_command+0x922>
	motor_adjusts[direction][1] = atoi(token);
    ccc6:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    ccca:	26 01       	movw	r4, r12
    cccc:	f2 e0       	ldi	r31, 0x02	; 2
    ccce:	4f 0e       	add	r4, r31
    ccd0:	51 1c       	adc	r5, r1
    ccd2:	f6 01       	movw	r30, r12
    ccd4:	82 83       	std	Z+2, r24	; 0x02
    ccd6:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    ccd8:	b8 01       	movw	r22, r16
    ccda:	80 e0       	ldi	r24, 0x00	; 0
    ccdc:	90 e0       	ldi	r25, 0x00	; 0
    ccde:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    cce2:	00 97       	sbiw	r24, 0x00	; 0
    cce4:	09 f4       	brne	.+2      	; 0xcce8 <handle_serial_command+0x57a>
    cce6:	02 c2       	rjmp	.+1028   	; 0xd0ec <handle_serial_command+0x97e>
	motor_adjusts[direction][2] = atoi(token);	
    cce8:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    ccec:	f6 01       	movw	r30, r12
    ccee:	84 83       	std	Z+4, r24	; 0x04
    ccf0:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hu, vals: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    ccf2:	9f 93       	push	r25
    ccf4:	8f 93       	push	r24
    ccf6:	f2 01       	movw	r30, r4
    ccf8:	81 81       	ldd	r24, Z+1	; 0x01
    ccfa:	8f 93       	push	r24
    ccfc:	f6 01       	movw	r30, r12
    ccfe:	82 81       	ldd	r24, Z+2	; 0x02
    cd00:	8f 93       	push	r24
    cd02:	81 81       	ldd	r24, Z+1	; 0x01
    cd04:	8f 93       	push	r24
    cd06:	80 81       	ld	r24, Z
    cd08:	8f 93       	push	r24
    cd0a:	ff 92       	push	r15
    cd0c:	ef 92       	push	r14
    cd0e:	89 e7       	ldi	r24, 0x79	; 121
    cd10:	91 e1       	ldi	r25, 0x11	; 17
    cd12:	9f 93       	push	r25
    cd14:	8f 93       	push	r24
    cd16:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	set_rgb(r,g,b);
    cd1a:	48 2d       	mov	r20, r8
    cd1c:	6a 2d       	mov	r22, r10
    cd1e:	86 2d       	mov	r24, r6
    cd20:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    cd24:	cd bf       	out	0x3d, r28	; 61
    cd26:	de bf       	out	0x3e, r29	; 62
    cd28:	3e cd       	rjmp	.-1412   	; 0xc7a6 <handle_serial_command+0x38>

/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
static void handle_rnb_broadcast(void){
	schedule_task(5,broadcast_rnb_data,NULL);
    cd2a:	20 e0       	ldi	r18, 0x00	; 0
    cd2c:	30 e0       	ldi	r19, 0x00	; 0
    cd2e:	47 ed       	ldi	r20, 0xD7	; 215
    cd30:	59 e5       	ldi	r21, 0x59	; 89
    cd32:	65 e0       	ldi	r22, 0x05	; 5
    cd34:	70 e0       	ldi	r23, 0x00	; 0
    cd36:	80 e0       	ldi	r24, 0x00	; 0
    cd38:	90 e0       	ldi	r25, 0x00	; 0
    cd3a:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    cd3e:	33 cd       	rjmp	.-1434   	; 0xc7a6 <handle_serial_command+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    cd40:	b8 01       	movw	r22, r16
    cd42:	80 e0       	ldi	r24, 0x00	; 0
    cd44:	90 e0       	ldi	r25, 0x00	; 0
    cd46:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    cd4a:	00 97       	sbiw	r24, 0x00	; 0
    cd4c:	09 f4       	brne	.+2      	; 0xcd50 <handle_serial_command+0x5e2>
    cd4e:	e0 c1       	rjmp	.+960    	; 0xd110 <handle_serial_command+0x9a2>
    cd50:	ff 24       	eor	r15, r15
	if(motor_adjusts[direction][0]>=0)
    cd52:	67 01       	movw	r12, r14
    cd54:	cc 0c       	add	r12, r12
    cd56:	dd 1c       	adc	r13, r13
    cd58:	96 01       	movw	r18, r12
    cd5a:	2e 0d       	add	r18, r14
    cd5c:	3f 1d       	adc	r19, r15
    cd5e:	22 0f       	add	r18, r18
    cd60:	33 1f       	adc	r19, r19
    cd62:	a9 01       	movw	r20, r18
    cd64:	4d 50       	subi	r20, 0x0D	; 13
    cd66:	56 4d       	sbci	r21, 0xD6	; 214
    cd68:	1a 01       	movw	r2, r20
    cd6a:	fa 01       	movw	r30, r20
    cd6c:	a0 80       	ld	r10, Z
    cd6e:	b1 80       	ldd	r11, Z+1	; 0x01
    cd70:	b7 fc       	sbrc	r11, 7
    cd72:	19 c1       	rjmp	.+562    	; 0xcfa6 <handle_serial_command+0x838>
		motor_adjusts[direction][0]+= atoi(token);
    cd74:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cd78:	8a 0d       	add	r24, r10
    cd7a:	9b 1d       	adc	r25, r11
    cd7c:	f1 01       	movw	r30, r2
    cd7e:	80 83       	st	Z, r24
    cd80:	91 83       	std	Z+1, r25	; 0x01
	else
		motor_adjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
    cd82:	b8 01       	movw	r22, r16
    cd84:	80 e0       	ldi	r24, 0x00	; 0
    cd86:	90 e0       	ldi	r25, 0x00	; 0
    cd88:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    cd8c:	00 97       	sbiw	r24, 0x00	; 0
    cd8e:	09 f4       	brne	.+2      	; 0xcd92 <handle_serial_command+0x624>
    cd90:	b6 c1       	rjmp	.+876    	; 0xd0fe <handle_serial_command+0x990>
	if(motor_adjusts[direction][1]>=0)
    cd92:	96 01       	movw	r18, r12
    cd94:	2e 0d       	add	r18, r14
    cd96:	3f 1d       	adc	r19, r15
    cd98:	22 0f       	add	r18, r18
    cd9a:	33 1f       	adc	r19, r19
    cd9c:	a9 01       	movw	r20, r18
    cd9e:	4d 50       	subi	r20, 0x0D	; 13
    cda0:	56 4d       	sbci	r21, 0xD6	; 214
    cda2:	1a 01       	movw	r2, r20
    cda4:	fa 01       	movw	r30, r20
    cda6:	a2 80       	ldd	r10, Z+2	; 0x02
    cda8:	b3 80       	ldd	r11, Z+3	; 0x03
    cdaa:	b7 fc       	sbrc	r11, 7
    cdac:	f4 c0       	rjmp	.+488    	; 0xcf96 <handle_serial_command+0x828>
	motor_adjusts[direction][1]+= atoi(token);
    cdae:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cdb2:	8a 0d       	add	r24, r10
    cdb4:	9b 1d       	adc	r25, r11
    cdb6:	f1 01       	movw	r30, r2
    cdb8:	82 83       	std	Z+2, r24	; 0x02
    cdba:	93 83       	std	Z+3, r25	; 0x03
	else
	motor_adjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
    cdbc:	b8 01       	movw	r22, r16
    cdbe:	80 e0       	ldi	r24, 0x00	; 0
    cdc0:	90 e0       	ldi	r25, 0x00	; 0
    cdc2:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    cdc6:	00 97       	sbiw	r24, 0x00	; 0
    cdc8:	09 f4       	brne	.+2      	; 0xcdcc <handle_serial_command+0x65e>
    cdca:	ab c1       	rjmp	.+854    	; 0xd122 <handle_serial_command+0x9b4>
	if(motor_adjusts[direction][2]>=0)
    cdcc:	96 01       	movw	r18, r12
    cdce:	2e 0d       	add	r18, r14
    cdd0:	3f 1d       	adc	r19, r15
    cdd2:	22 0f       	add	r18, r18
    cdd4:	33 1f       	adc	r19, r19
    cdd6:	a9 01       	movw	r20, r18
    cdd8:	4d 50       	subi	r20, 0x0D	; 13
    cdda:	56 4d       	sbci	r21, 0xD6	; 214
    cddc:	5a 01       	movw	r10, r20
    cdde:	fa 01       	movw	r30, r20
    cde0:	04 81       	ldd	r16, Z+4	; 0x04
    cde2:	15 81       	ldd	r17, Z+5	; 0x05
    cde4:	17 fd       	sbrc	r17, 7
    cde6:	66 c1       	rjmp	.+716    	; 0xd0b4 <handle_serial_command+0x946>
	motor_adjusts[direction][2]+= atoi(token);
    cde8:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cdec:	80 0f       	add	r24, r16
    cdee:	91 1f       	adc	r25, r17
    cdf0:	f5 01       	movw	r30, r10
    cdf2:	84 83       	std	Z+4, r24	; 0x04
    cdf4:	95 83       	std	Z+5, r25	; 0x05
	else
	motor_adjusts[direction][2]-= atoi(token);

	printf_P(PSTR("Got adjust_motors command. direction: %hu, New Settings: (%d, %d, %d)\r\n"), direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    cdf6:	9f 93       	push	r25
    cdf8:	8f 93       	push	r24
    cdfa:	f6 01       	movw	r30, r12
    cdfc:	ee 0d       	add	r30, r14
    cdfe:	ff 1d       	adc	r31, r15
    ce00:	ee 0f       	add	r30, r30
    ce02:	ff 1f       	adc	r31, r31
    ce04:	ed 50       	subi	r30, 0x0D	; 13
    ce06:	f6 4d       	sbci	r31, 0xD6	; 214
    ce08:	83 81       	ldd	r24, Z+3	; 0x03
    ce0a:	8f 93       	push	r24
    ce0c:	82 81       	ldd	r24, Z+2	; 0x02
    ce0e:	8f 93       	push	r24
    ce10:	81 81       	ldd	r24, Z+1	; 0x01
    ce12:	8f 93       	push	r24
    ce14:	80 81       	ld	r24, Z
    ce16:	8f 93       	push	r24
    ce18:	ff 92       	push	r15
    ce1a:	ef 92       	push	r14
    ce1c:	81 e8       	ldi	r24, 0x81	; 129
    ce1e:	90 e1       	ldi	r25, 0x10	; 16
    ce20:	9f 93       	push	r25
    ce22:	8f 93       	push	r24
    ce24:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	set_rgb(r,g,b);
    ce28:	48 2d       	mov	r20, r8
    ce2a:	66 2d       	mov	r22, r6
    ce2c:	84 2d       	mov	r24, r4
    ce2e:	0e 94 4a 5a 	call	0xb494	; 0xb494 <set_rgb>
    ce32:	cd bf       	out	0x3d, r28	; 61
    ce34:	de bf       	out	0x3e, r29	; 62
    ce36:	b7 cc       	rjmp	.-1682   	; 0xc7a6 <handle_serial_command+0x38>
static void handle_rnb_broadcast(void){
	schedule_task(5,broadcast_rnb_data,NULL);
}

static void handle_set_led(char* command_args){
	const char delim[2] = " ";
    ce38:	8e 01       	movw	r16, r28
    ce3a:	0f 57       	subi	r16, 0x7F	; 127
    ce3c:	1f 4f       	sbci	r17, 0xFF	; 255
    ce3e:	80 e2       	ldi	r24, 0x20	; 32
    ce40:	90 e0       	ldi	r25, 0x00	; 0
    ce42:	f8 01       	movw	r30, r16
    ce44:	80 83       	st	Z, r24
    ce46:	91 83       	std	Z+1, r25	; 0x01
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    ce48:	b8 01       	movw	r22, r16
    ce4a:	9e 01       	movw	r18, r28
    ce4c:	2f 5f       	subi	r18, 0xFF	; 255
    ce4e:	3f 4f       	sbci	r19, 0xFF	; 255
    ce50:	59 01       	movw	r10, r18
    ce52:	c9 01       	movw	r24, r18
    ce54:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
    ce58:	7c 01       	movw	r14, r24
	
	int length = strlen(colors);
    ce5a:	fc 01       	movw	r30, r24
    ce5c:	01 90       	ld	r0, Z+
    ce5e:	00 20       	and	r0, r0
    ce60:	e9 f7       	brne	.-6      	; 0xce5c <handle_serial_command+0x6ee>
    ce62:	31 97       	sbiw	r30, 0x01	; 1
    ce64:	6f 01       	movw	r12, r30
    ce66:	c8 1a       	sub	r12, r24
    ce68:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0){
    ce6a:	65 e0       	ldi	r22, 0x05	; 5
    ce6c:	75 e2       	ldi	r23, 0x25	; 37
    ce6e:	0e 94 f6 7c 	call	0xf9ec	; 0xf9ec <strcmp>
    ce72:	89 2b       	or	r24, r25
    ce74:	09 f4       	brne	.+2      	; 0xce78 <handle_serial_command+0x70a>
    ce76:	9f c0       	rjmp	.+318    	; 0xcfb6 <handle_serial_command+0x848>
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
    ce78:	1c 14       	cp	r1, r12
    ce7a:	1d 04       	cpc	r1, r13
    ce7c:	ec f5       	brge	.+122    	; 0xcef8 <handle_serial_command+0x78a>
    ce7e:	ce 0c       	add	r12, r14
    ce80:	df 1c       	adc	r13, r15
    ce82:	0f c0       	rjmp	.+30     	; 0xcea2 <handle_serial_command+0x734>
			token = strtok(NULL,delim);
			if(colors[i]=='r'){
				set_red_led(atoi(token));
				successful_read=1;
			}else if(colors[i]=='g'){
    ce84:	27 36       	cpi	r18, 0x67	; 103
    ce86:	f9 f0       	breq	.+62     	; 0xcec6 <handle_serial_command+0x758>
				set_green_led(atoi(token));
				successful_read=1;
			}else if(colors[i]=='b'){
    ce88:	22 36       	cpi	r18, 0x62	; 98
    ce8a:	b1 f5       	brne	.+108    	; 0xcef8 <handle_serial_command+0x78a>
				set_blue_led(atoi(token));
    ce8c:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
inline void set_blue_led(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    ce90:	99 27       	eor	r25, r25
    ce92:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    ce96:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}else{
		for(int i=0 ; i < length ; i++){
    ce9a:	ec 14       	cp	r14, r12
    ce9c:	fd 04       	cpc	r15, r13
    ce9e:	09 f4       	brne	.+2      	; 0xcea2 <handle_serial_command+0x734>
    cea0:	82 cc       	rjmp	.-1788   	; 0xc7a6 <handle_serial_command+0x38>
			token = strtok(NULL,delim);
    cea2:	b8 01       	movw	r22, r16
    cea4:	80 e0       	ldi	r24, 0x00	; 0
    cea6:	90 e0       	ldi	r25, 0x00	; 0
    cea8:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
			if(colors[i]=='r'){
    ceac:	f7 01       	movw	r30, r14
    ceae:	21 91       	ld	r18, Z+
    ceb0:	7f 01       	movw	r14, r30
    ceb2:	22 37       	cpi	r18, 0x72	; 114
    ceb4:	39 f7       	brne	.-50     	; 0xce84 <handle_serial_command+0x716>
				set_red_led(atoi(token));
    ceb6:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    ceba:	99 27       	eor	r25, r25
    cebc:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    cec0:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
    cec4:	ea cf       	rjmp	.-44     	; 0xce9a <handle_serial_command+0x72c>
				successful_read=1;
			}else if(colors[i]=='g'){
				set_green_led(atoi(token));
    cec6:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>

// Get and set intensity for green LED
inline uint8_t get_green_led(void){ return TCE1.CCABUF; }
inline void set_green_led(uint8_t saturation) { TCE1.CCABUF = saturation; }
    ceca:	99 27       	eor	r25, r25
    cecc:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    ced0:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
    ced4:	e2 cf       	rjmp	.-60     	; 0xce9a <handle_serial_command+0x72c>
static void handle_broadcast_id(void){
	schedule_task(5, send_id, NULL);
}

static void handle_get_id(void){
	printf_P(PSTR("My ID is: %04X\r\n"),get_droplet_id());
    ced6:	80 91 9a 26 	lds	r24, 0x269A	; 0x80269a <droplet_ID+0x1>
    ceda:	8f 93       	push	r24
    cedc:	80 91 99 26 	lds	r24, 0x2699	; 0x802699 <droplet_ID>
    cee0:	8f 93       	push	r24
    cee2:	8b e6       	ldi	r24, 0x6B	; 107
    cee4:	9f e0       	ldi	r25, 0x0F	; 15
    cee6:	9f 93       	push	r25
    cee8:	8f 93       	push	r24
    ceea:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    ceee:	0f 90       	pop	r0
    cef0:	0f 90       	pop	r0
    cef2:	0f 90       	pop	r0
    cef4:	0f 90       	pop	r0
    cef6:	57 cc       	rjmp	.-1874   	; 0xc7a6 <handle_serial_command+0x38>
			}
		}
	}

	if(successful_read!=1){
		printf_P(PSTR("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n"),command_args);
    cef8:	bf 92       	push	r11
    cefa:	af 92       	push	r10
    cefc:	86 e3       	ldi	r24, 0x36	; 54
    cefe:	90 e1       	ldi	r25, 0x10	; 16
    cf00:	9f 93       	push	r25
    cf02:	8f 93       	push	r24
    cf04:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		printf_P(PSTR("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n"));
    cf08:	82 ef       	ldi	r24, 0xF2	; 242
    cf0a:	9f e0       	ldi	r25, 0x0F	; 15
    cf0c:	9f 93       	push	r25
    cf0e:	8f 93       	push	r24
    cf10:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		printf_P(PSTR("\t order, indicating the brightness of the associated LEDs. Example: \r\n"));
    cf14:	8b ea       	ldi	r24, 0xAB	; 171
    cf16:	9f e0       	ldi	r25, 0x0F	; 15
    cf18:	9f 93       	push	r25
    cf1a:	8f 93       	push	r24
    cf1c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
		printf_P(PSTR("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n"));
    cf20:	8c e7       	ldi	r24, 0x7C	; 124
    cf22:	9f e0       	ldi	r25, 0x0F	; 15
    cf24:	9f 93       	push	r25
    cf26:	8f 93       	push	r24
    cf28:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    cf2c:	cd bf       	out	0x3d, r28	; 61
    cf2e:	de bf       	out	0x3e, r29	; 62
    cf30:	3a cc       	rjmp	.-1932   	; 0xc7a6 <handle_serial_command+0x38>
	}
}

static void handle_broadcast_id(void){
	schedule_task(5, send_id, NULL);
    cf32:	20 e0       	ldi	r18, 0x00	; 0
    cf34:	30 e0       	ldi	r19, 0x00	; 0
    cf36:	4a e8       	ldi	r20, 0x8A	; 138
    cf38:	53 e6       	ldi	r21, 0x63	; 99
    cf3a:	65 e0       	ldi	r22, 0x05	; 5
    cf3c:	70 e0       	ldi	r23, 0x00	; 0
    cf3e:	80 e0       	ldi	r24, 0x00	; 0
    cf40:	90 e0       	ldi	r25, 0x00	; 0
    cf42:	0e 94 37 60 	call	0xc06e	; 0xc06e <schedule_task>
    cf46:	2f cc       	rjmp	.-1954   	; 0xc7a6 <handle_serial_command+0x38>
	sprintf(msg, "%04X", get_droplet_id());
	ir_send(ALL_DIRS, msg, 4);
}

static void handle_cmd(char* command_args){
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"),(uint8_t*)command_args, strlen(command_args));
    cf48:	8e 01       	movw	r16, r28
    cf4a:	0f 5f       	subi	r16, 0xFF	; 255
    cf4c:	1f 4f       	sbci	r17, 0xFF	; 255
    cf4e:	f8 01       	movw	r30, r16
    cf50:	01 90       	ld	r0, Z+
    cf52:	00 20       	and	r0, r0
    cf54:	e9 f7       	brne	.-6      	; 0xcf50 <handle_serial_command+0x7e2>
    cf56:	31 97       	sbiw	r30, 0x01	; 1
    cf58:	e0 1b       	sub	r30, r16
    cf5a:	f1 0b       	sbc	r31, r17
    cf5c:	ff 93       	push	r31
    cf5e:	ef 93       	push	r30
    cf60:	1f 93       	push	r17
    cf62:	0f 93       	push	r16
    cf64:	8f e3       	ldi	r24, 0x3F	; 63
    cf66:	9f e0       	ldi	r25, 0x0F	; 15
    cf68:	9f 93       	push	r25
    cf6a:	8f 93       	push	r24
    cf6c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    cf70:	f8 01       	movw	r30, r16
    cf72:	01 90       	ld	r0, Z+
    cf74:	00 20       	and	r0, r0
    cf76:	e9 f7       	brne	.-6      	; 0xcf72 <handle_serial_command+0x804>
    cf78:	31 97       	sbiw	r30, 0x01	; 1
    cf7a:	af 01       	movw	r20, r30
    cf7c:	40 1b       	sub	r20, r16
    cf7e:	51 0b       	sbc	r21, r17
    cf80:	b8 01       	movw	r22, r16
    cf82:	8f e3       	ldi	r24, 0x3F	; 63
    cf84:	0e 94 3e 22 	call	0x447c	; 0x447c <ir_cmd>
    cf88:	0f 90       	pop	r0
    cf8a:	0f 90       	pop	r0
    cf8c:	0f 90       	pop	r0
    cf8e:	0f 90       	pop	r0
    cf90:	0f 90       	pop	r0
    cf92:	0f 90       	pop	r0
    cf94:	08 cc       	rjmp	.-2032   	; 0xc7a6 <handle_serial_command+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	if(motor_adjusts[direction][1]>=0)
	motor_adjusts[direction][1]+= atoi(token);
	else
	motor_adjusts[direction][1]-= atoi(token);
    cf96:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cf9a:	a8 1a       	sub	r10, r24
    cf9c:	b9 0a       	sbc	r11, r25
    cf9e:	f1 01       	movw	r30, r2
    cfa0:	a2 82       	std	Z+2, r10	; 0x02
    cfa2:	b3 82       	std	Z+3, r11	; 0x03
    cfa4:	0b cf       	rjmp	.-490    	; 0xcdbc <handle_serial_command+0x64e>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
	if(motor_adjusts[direction][0]>=0)
		motor_adjusts[direction][0]+= atoi(token);
	else
		motor_adjusts[direction][0]-= atoi(token);
    cfa6:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cfaa:	a8 1a       	sub	r10, r24
    cfac:	b9 0a       	sbc	r11, r25
    cfae:	f1 01       	movw	r30, r2
    cfb0:	a0 82       	st	Z, r10
    cfb2:	b1 82       	std	Z+1, r11	; 0x01
    cfb4:	e6 ce       	rjmp	.-564    	; 0xcd82 <handle_serial_command+0x614>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    cfb6:	b8 01       	movw	r22, r16
    cfb8:	80 e0       	ldi	r24, 0x00	; 0
    cfba:	90 e0       	ldi	r25, 0x00	; 0
    cfbc:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
		hVal = atoi(token);
    cfc0:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cfc4:	7c 01       	movw	r14, r24
		token = strtok(NULL,delim);
    cfc6:	b8 01       	movw	r22, r16
    cfc8:	80 e0       	ldi	r24, 0x00	; 0
    cfca:	90 e0       	ldi	r25, 0x00	; 0
    cfcc:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
		sVal = atoi(token);
    cfd0:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    cfd4:	d8 2e       	mov	r13, r24
		token = strtok(NULL,delim);	
    cfd6:	b8 01       	movw	r22, r16
    cfd8:	80 e0       	ldi	r24, 0x00	; 0
    cfda:	90 e0       	ldi	r25, 0x00	; 0
    cfdc:	0e 94 e9 7c 	call	0xf9d2	; 0xf9d2 <strtok>
		vVal = atoi(token);
    cfe0:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
		set_hsv(hVal,sVal,vVal);
    cfe4:	48 2f       	mov	r20, r24
    cfe6:	6d 2d       	mov	r22, r13
    cfe8:	c7 01       	movw	r24, r14
    cfea:	0e 94 0a 5c 	call	0xb814	; 0xb814 <set_hsv>
    cfee:	db cb       	rjmp	.-2122   	; 0xc7a6 <handle_serial_command+0x38>
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}

static void handle_targeted_cmd(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    cff0:	61 e5       	ldi	r22, 0x51	; 81
    cff2:	71 e2       	ldi	r23, 0x21	; 33
    cff4:	ce 01       	movw	r24, r28
    cff6:	01 96       	adiw	r24, 0x01	; 1
    cff8:	0e 94 06 7d 	call	0xfa0c	; 0xfa0c <strcspn>
    cffc:	8c 01       	movw	r16, r24
    cffe:	11 27       	eor	r17, r17
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    d000:	a8 01       	movw	r20, r16
    d002:	be 01       	movw	r22, r28
    d004:	6f 5f       	subi	r22, 0xFF	; 255
    d006:	7f 4f       	sbci	r23, 0xFF	; 255
    d008:	ce 01       	movw	r24, r28
    d00a:	8f 55       	subi	r24, 0x5F	; 95
    d00c:	9f 4f       	sbci	r25, 0xFF	; 255
    d00e:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <strncpy>
	strcpy(cmdString, command_args+loc+1);
    d012:	b8 01       	movw	r22, r16
    d014:	6f 5f       	subi	r22, 0xFF	; 255
    d016:	7f 4f       	sbci	r23, 0xFF	; 255
    d018:	41 e0       	ldi	r20, 0x01	; 1
    d01a:	50 e0       	ldi	r21, 0x00	; 0
    d01c:	4c 0f       	add	r20, r28
    d01e:	5d 1f       	adc	r21, r29
    d020:	64 0f       	add	r22, r20
    d022:	75 1f       	adc	r23, r21
    d024:	8e 01       	movw	r16, r28
    d026:	0f 57       	subi	r16, 0x7F	; 127
    d028:	1f 4f       	sbci	r17, 0xFF	; 255
    d02a:	c8 01       	movw	r24, r16
    d02c:	0e 94 ff 7c 	call	0xf9fe	; 0xf9fe <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    d030:	40 e1       	ldi	r20, 0x10	; 16
    d032:	50 e0       	ldi	r21, 0x00	; 0
    d034:	60 e0       	ldi	r22, 0x00	; 0
    d036:	70 e0       	ldi	r23, 0x00	; 0
    d038:	ce 01       	movw	r24, r28
    d03a:	8f 55       	subi	r24, 0x5F	; 95
    d03c:	9f 4f       	sbci	r25, 0xFF	; 255
    d03e:	0e 94 b6 7a 	call	0xf56c	; 0xf56c <strtoul>
    d042:	6b 01       	movw	r12, r22
    d044:	7c 01       	movw	r14, r24
	printf_P(PSTR("command string: %s, length: %z\r\n"),cmdString, strlen(cmdString));
    d046:	f8 01       	movw	r30, r16
    d048:	01 90       	ld	r0, Z+
    d04a:	00 20       	and	r0, r0
    d04c:	e9 f7       	brne	.-6      	; 0xd048 <handle_serial_command+0x8da>
    d04e:	31 97       	sbiw	r30, 0x01	; 1
    d050:	e0 1b       	sub	r30, r16
    d052:	f1 0b       	sbc	r31, r17
    d054:	ff 93       	push	r31
    d056:	ef 93       	push	r30
    d058:	1f 93       	push	r17
    d05a:	0f 93       	push	r16
    d05c:	8e e1       	ldi	r24, 0x1E	; 30
    d05e:	9f e0       	ldi	r25, 0x0F	; 15
    d060:	9f 93       	push	r25
    d062:	8f 93       	push	r24
    d064:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    d068:	f8 01       	movw	r30, r16
    d06a:	01 90       	ld	r0, Z+
    d06c:	00 20       	and	r0, r0
    d06e:	e9 f7       	brne	.-6      	; 0xd06a <handle_serial_command+0x8fc>
    d070:	31 97       	sbiw	r30, 0x01	; 1
    d072:	af 01       	movw	r20, r30
    d074:	40 1b       	sub	r20, r16
    d076:	51 0b       	sbc	r21, r17
    d078:	96 01       	movw	r18, r12
    d07a:	b8 01       	movw	r22, r16
    d07c:	8f e3       	ldi	r24, 0x3F	; 63
    d07e:	0e 94 b8 21 	call	0x4370	; 0x4370 <ir_targeted_cmd>
    d082:	0f 90       	pop	r0
    d084:	0f 90       	pop	r0
    d086:	0f 90       	pop	r0
    d088:	0f 90       	pop	r0
    d08a:	0f 90       	pop	r0
    d08c:	0f 90       	pop	r0
    d08e:	8b cb       	rjmp	.-2282   	; 0xc7a6 <handle_serial_command+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
	motor_adjusts[direction][0] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    d090:	8b ed       	ldi	r24, 0xDB	; 219
    d092:	91 e1       	ldi	r25, 0x11	; 17
    d094:	9f 93       	push	r25
    d096:	8f 93       	push	r24
    d098:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d09c:	0f 90       	pop	r0
    d09e:	0f 90       	pop	r0
    d0a0:	82 cb       	rjmp	.-2300   	; 0xc7a6 <handle_serial_command+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    d0a2:	81 e0       	ldi	r24, 0x01	; 1
    d0a4:	92 e1       	ldi	r25, 0x12	; 18
    d0a6:	9f 93       	push	r25
    d0a8:	8f 93       	push	r24
    d0aa:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d0ae:	0f 90       	pop	r0
    d0b0:	0f 90       	pop	r0
    d0b2:	79 cb       	rjmp	.-2318   	; 0xc7a6 <handle_serial_command+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
	if(motor_adjusts[direction][2]>=0)
	motor_adjusts[direction][2]+= atoi(token);
	else
	motor_adjusts[direction][2]-= atoi(token);
    d0b4:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
    d0b8:	98 01       	movw	r18, r16
    d0ba:	28 1b       	sub	r18, r24
    d0bc:	39 0b       	sbc	r19, r25
    d0be:	c9 01       	movw	r24, r18
    d0c0:	f5 01       	movw	r30, r10
    d0c2:	24 83       	std	Z+4, r18	; 0x04
    d0c4:	35 83       	std	Z+5, r19	; 0x05
    d0c6:	97 ce       	rjmp	.-722    	; 0xcdf6 <handle_serial_command+0x688>
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    d0c8:	81 e4       	ldi	r24, 0x41	; 65
    d0ca:	92 e1       	ldi	r25, 0x12	; 18
    d0cc:	9f 93       	push	r25
    d0ce:	8f 93       	push	r24
    d0d0:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d0d4:	0f 90       	pop	r0
    d0d6:	0f 90       	pop	r0
    d0d8:	66 cb       	rjmp	.-2356   	; 0xc7a6 <handle_serial_command+0x38>
	uint8_t r = get_red_led(), g = get_green_led(), b = get_blue_led();
	set_rgb(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    d0da:	84 e5       	ldi	r24, 0x54	; 84
    d0dc:	91 e1       	ldi	r25, 0x11	; 17
    d0de:	9f 93       	push	r25
    d0e0:	8f 93       	push	r24
    d0e2:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d0e6:	0f 90       	pop	r0
    d0e8:	0f 90       	pop	r0
    d0ea:	5d cb       	rjmp	.-2374   	; 0xc7a6 <handle_serial_command+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	motor_adjusts[direction][1] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    d0ec:	86 eb       	ldi	r24, 0xB6	; 182
    d0ee:	91 e1       	ldi	r25, 0x11	; 17
    d0f0:	9f 93       	push	r25
    d0f2:	8f 93       	push	r24
    d0f4:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d0f8:	0f 90       	pop	r0
    d0fa:	0f 90       	pop	r0
    d0fc:	54 cb       	rjmp	.-2392   	; 0xc7a6 <handle_serial_command+0x38>
		motor_adjusts[direction][0]+= atoi(token);
	else
		motor_adjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    d0fe:	8e ee       	ldi	r24, 0xEE	; 238
    d100:	90 e1       	ldi	r25, 0x10	; 16
    d102:	9f 93       	push	r25
    d104:	8f 93       	push	r24
    d106:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d10a:	0f 90       	pop	r0
    d10c:	0f 90       	pop	r0
    d10e:	4b cb       	rjmp	.-2410   	; 0xc7a6 <handle_serial_command+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    d110:	84 e1       	ldi	r24, 0x14	; 20
    d112:	91 e1       	ldi	r25, 0x11	; 17
    d114:	9f 93       	push	r25
    d116:	8f 93       	push	r24
    d118:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d11c:	0f 90       	pop	r0
    d11e:	0f 90       	pop	r0
    d120:	42 cb       	rjmp	.-2428   	; 0xc7a6 <handle_serial_command+0x38>
	motor_adjusts[direction][1]+= atoi(token);
	else
	motor_adjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    d122:	89 ec       	ldi	r24, 0xC9	; 201
    d124:	90 e1       	ldi	r25, 0x10	; 16
    d126:	9f 93       	push	r25
    d128:	8f 93       	push	r24
    d12a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d12e:	0f 90       	pop	r0
    d130:	0f 90       	pop	r0
    d132:	39 cb       	rjmp	.-2446   	; 0xc7a6 <handle_serial_command+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	write_motor_settings();
    d134:	67 eb       	ldi	r22, 0xB7	; 183
    d136:	72 e1       	ldi	r23, 0x12	; 18
    d138:	c8 01       	movw	r24, r16
    d13a:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    d13e:	89 2b       	or	r24, r25
    d140:	09 f4       	brne	.+2      	; 0xd144 <handle_serial_command+0x9d6>
    d142:	8f c0       	rjmp	.+286    	; 0xd262 <handle_serial_command+0xaf4>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    d144:	62 ea       	ldi	r22, 0xA2	; 162
    d146:	72 e1       	ldi	r23, 0x12	; 18
    d148:	c8 01       	movw	r24, r16
    d14a:	0e 94 d5 7c 	call	0xf9aa	; 0xf9aa <strcmp_P>
    d14e:	89 2b       	or	r24, r25
    d150:	09 f4       	brne	.+2      	; 0xd154 <handle_serial_command+0x9e6>
    d152:	82 c0       	rjmp	.+260    	; 0xd258 <handle_serial_command+0xaea>
																		print_motor_values();
																		print_dist_per_step();																	
		}else if(user_handle_command){ //First, make sure the function is defined
    d154:	86 e5       	ldi	r24, 0x56	; 86
    d156:	92 e1       	ldi	r25, 0x12	; 18
    d158:	89 2b       	or	r24, r25
    d15a:	41 f0       	breq	.+16     	; 0xd16c <handle_serial_command+0x9fe>
			if(!user_handle_command(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    d15c:	be 01       	movw	r22, r28
    d15e:	6f 5f       	subi	r22, 0xFF	; 255
    d160:	7f 4f       	sbci	r23, 0xFF	; 255
    d162:	c8 01       	movw	r24, r16
    d164:	0e 94 56 12 	call	0x24ac	; 0x24ac <user_handle_command>
    d168:	81 11       	cpse	r24, r1
    d16a:	1d cb       	rjmp	.-2502   	; 0xc7a6 <handle_serial_command+0x38>
    d16c:	1f 93       	push	r17
    d16e:	0f 93       	push	r16
    d170:	8c e6       	ldi	r24, 0x6C	; 108
    d172:	93 e1       	ldi	r25, 0x13	; 19
    d174:	9f 93       	push	r25
    d176:	8f 93       	push	r24
    d178:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d17c:	0f 90       	pop	r0
    d17e:	0f 90       	pop	r0
    d180:	0f 90       	pop	r0
    d182:	0f 90       	pop	r0
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    d184:	10 cb       	rjmp	.-2528   	; 0xc7a6 <handle_serial_command+0x38>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
    d186:	0e 94 02 5f 	call	0xbe04	; 0xbe04 <print_task_queue>
    d18a:	0d cb       	rjmp	.-2534   	; 0xc7a6 <handle_serial_command+0x38>
	
	ir_send(dir_mask, msg,16);
}

static void handle_target(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    d18c:	61 e5       	ldi	r22, 0x51	; 81
    d18e:	71 e2       	ldi	r23, 0x21	; 33
    d190:	ce 01       	movw	r24, r28
    d192:	01 96       	adiw	r24, 0x01	; 1
    d194:	0e 94 06 7d 	call	0xfa0c	; 0xfa0c <strcspn>
    d198:	8c 01       	movw	r16, r24
    d19a:	11 27       	eor	r17, r17
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    d19c:	a8 01       	movw	r20, r16
    d19e:	be 01       	movw	r22, r28
    d1a0:	6f 5f       	subi	r22, 0xFF	; 255
    d1a2:	7f 4f       	sbci	r23, 0xFF	; 255
    d1a4:	ce 01       	movw	r24, r28
    d1a6:	8f 55       	subi	r24, 0x5F	; 95
    d1a8:	9f 4f       	sbci	r25, 0xFF	; 255
    d1aa:	0e 94 15 7d 	call	0xfa2a	; 0xfa2a <strncpy>
	strcpy(msgString, command_args+loc);
    d1ae:	61 e0       	ldi	r22, 0x01	; 1
    d1b0:	70 e0       	ldi	r23, 0x00	; 0
    d1b2:	6c 0f       	add	r22, r28
    d1b4:	7d 1f       	adc	r23, r29
    d1b6:	60 0f       	add	r22, r16
    d1b8:	71 1f       	adc	r23, r17
    d1ba:	8e 01       	movw	r16, r28
    d1bc:	0f 57       	subi	r16, 0x7F	; 127
    d1be:	1f 4f       	sbci	r17, 0xFF	; 255
    d1c0:	c8 01       	movw	r24, r16
    d1c2:	0e 94 ff 7c 	call	0xf9fe	; 0xf9fe <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    d1c6:	40 e1       	ldi	r20, 0x10	; 16
    d1c8:	50 e0       	ldi	r21, 0x00	; 0
    d1ca:	60 e0       	ldi	r22, 0x00	; 0
    d1cc:	70 e0       	ldi	r23, 0x00	; 0
    d1ce:	ce 01       	movw	r24, r28
    d1d0:	8f 55       	subi	r24, 0x5F	; 95
    d1d2:	9f 4f       	sbci	r25, 0xFF	; 255
    d1d4:	0e 94 b6 7a 	call	0xf56c	; 0xf56c <strtoul>
	
	//printf("Target: %04X\r\n",target);
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    d1d8:	f8 01       	movw	r30, r16
    d1da:	01 90       	ld	r0, Z+
    d1dc:	00 20       	and	r0, r0
    d1de:	e9 f7       	brne	.-6      	; 0xd1da <handle_serial_command+0xa6c>
    d1e0:	31 97       	sbiw	r30, 0x01	; 1
    d1e2:	af 01       	movw	r20, r30
    d1e4:	40 1b       	sub	r20, r16
    d1e6:	51 0b       	sbc	r21, r17
    d1e8:	9b 01       	movw	r18, r22
    d1ea:	b8 01       	movw	r22, r16
    d1ec:	8f e3       	ldi	r24, 0x3F	; 63
    d1ee:	0e 94 c3 22 	call	0x4586	; 0x4586 <ir_targeted_send>
    d1f2:	d9 ca       	rjmp	.-2638   	; 0xc7a6 <handle_serial_command+0x38>
	}
	ir_send(ALL_DIRS, command_args,strlen(command_args));
}

static void handle_msg_test(char* command_args){
	uint8_t dir_mask = atoi(command_args);
    d1f4:	ce 01       	movw	r24, r28
    d1f6:	01 96       	adiw	r24, 0x01	; 1
    d1f8:	0e 94 c3 7b 	call	0xf786	; 0xf786 <atoi>
	char msg[16] = "Unique New York.";
    d1fc:	90 e1       	ldi	r25, 0x10	; 16
    d1fe:	eb ee       	ldi	r30, 0xEB	; 235
    d200:	f4 e2       	ldi	r31, 0x24	; 36
    d202:	de 01       	movw	r26, r28
    d204:	af 57       	subi	r26, 0x7F	; 127
    d206:	bf 4f       	sbci	r27, 0xFF	; 255
    d208:	01 90       	ld	r0, Z+
    d20a:	0d 92       	st	X+, r0
    d20c:	9a 95       	dec	r25
    d20e:	e1 f7       	brne	.-8      	; 0xd208 <handle_serial_command+0xa9a>
	
	ir_send(dir_mask, msg,16);
    d210:	40 e1       	ldi	r20, 0x10	; 16
    d212:	be 01       	movw	r22, r28
    d214:	6f 57       	subi	r22, 0x7F	; 127
    d216:	7f 4f       	sbci	r23, 0xFF	; 255
    d218:	0e 94 4c 23 	call	0x4698	; 0x4698 <ir_send>
    d21c:	c4 ca       	rjmp	.-2680   	; 0xc7a6 <handle_serial_command+0x38>
	printf_P(PSTR("command string: %s, length: %z\r\n"),cmdString, strlen(cmdString));
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
}

static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
    d21e:	89 81       	ldd	r24, Y+1	; 0x01
    d220:	88 23       	and	r24, r24
    d222:	a1 f1       	breq	.+104    	; 0xd28c <handle_serial_command+0xb1e>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    d224:	fe 01       	movw	r30, r28
    d226:	31 96       	adiw	r30, 0x01	; 1
    d228:	df 01       	movw	r26, r30
    d22a:	0d 90       	ld	r0, X+
    d22c:	00 20       	and	r0, r0
    d22e:	e9 f7       	brne	.-6      	; 0xd22a <handle_serial_command+0xabc>
    d230:	11 97       	sbiw	r26, 0x01	; 1
    d232:	cd 01       	movw	r24, r26
    d234:	8e 1b       	sub	r24, r30
    d236:	9f 0b       	sbc	r25, r31
    d238:	89 32       	cpi	r24, 0x29	; 41
    d23a:	91 05       	cpc	r25, r1
    d23c:	a8 f4       	brcc	.+42     	; 0xd268 <handle_serial_command+0xafa>
    d23e:	bf 01       	movw	r22, r30
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	ir_send(ALL_DIRS, command_args,strlen(command_args));
    d240:	fb 01       	movw	r30, r22
    d242:	01 90       	ld	r0, Z+
    d244:	00 20       	and	r0, r0
    d246:	e9 f7       	brne	.-6      	; 0xd242 <handle_serial_command+0xad4>
    d248:	31 97       	sbiw	r30, 0x01	; 1
    d24a:	af 01       	movw	r20, r30
    d24c:	46 1b       	sub	r20, r22
    d24e:	57 0b       	sbc	r21, r23
    d250:	8f e3       	ldi	r24, 0x3F	; 63
    d252:	0e 94 4c 23 	call	0x4698	; 0x4698 <ir_send>
    d256:	a7 ca       	rjmp	.-2738   	; 0xc7a6 <handle_serial_command+0x38>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	write_motor_settings();
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
																		print_motor_values();
    d258:	0e 94 5b 4d 	call	0x9ab6	; 0x9ab6 <print_motor_values>
																		print_dist_per_step();																	
    d25c:	0e 94 b4 4d 	call	0x9b68	; 0x9b68 <print_dist_per_step>
    d260:	a2 ca       	rjmp	.-2748   	; 0xc7a6 <handle_serial_command+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				print_task_queue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	write_motor_settings();
    d262:	0e 94 19 4d 	call	0x9a32	; 0x9a32 <write_motor_settings>
    d266:	9f ca       	rjmp	.-2754   	; 0xc7a6 <handle_serial_command+0x38>

static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
    d268:	1f 92       	push	r1
    d26a:	28 e2       	ldi	r18, 0x28	; 40
    d26c:	2f 93       	push	r18
    d26e:	9f 93       	push	r25
    d270:	8f 93       	push	r24
    d272:	81 ee       	ldi	r24, 0xE1	; 225
    d274:	9e e0       	ldi	r25, 0x0E	; 14
    d276:	9f 93       	push	r25
    d278:	8f 93       	push	r24
    d27a:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <printf_P>
    d27e:	0f 90       	pop	r0
    d280:	0f 90       	pop	r0
    d282:	0f 90       	pop	r0
    d284:	0f 90       	pop	r0
    d286:	0f 90       	pop	r0
    d288:	0f 90       	pop	r0
    d28a:	8d ca       	rjmp	.-2790   	; 0xc7a6 <handle_serial_command+0x38>
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
}

static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    d28c:	6b ee       	ldi	r22, 0xEB	; 235
    d28e:	74 e2       	ldi	r23, 0x24	; 36
    d290:	d7 cf       	rjmp	.-82     	; 0xd240 <handle_serial_command+0xad2>

0000d292 <vfprintf>:
    d292:	2f 92       	push	r2
    d294:	3f 92       	push	r3
    d296:	4f 92       	push	r4
    d298:	5f 92       	push	r5
    d29a:	6f 92       	push	r6
    d29c:	7f 92       	push	r7
    d29e:	8f 92       	push	r8
    d2a0:	9f 92       	push	r9
    d2a2:	af 92       	push	r10
    d2a4:	bf 92       	push	r11
    d2a6:	cf 92       	push	r12
    d2a8:	df 92       	push	r13
    d2aa:	ef 92       	push	r14
    d2ac:	ff 92       	push	r15
    d2ae:	0f 93       	push	r16
    d2b0:	1f 93       	push	r17
    d2b2:	cf 93       	push	r28
    d2b4:	df 93       	push	r29
    d2b6:	cd b7       	in	r28, 0x3d	; 61
    d2b8:	de b7       	in	r29, 0x3e	; 62
    d2ba:	60 97       	sbiw	r28, 0x10	; 16
    d2bc:	cd bf       	out	0x3d, r28	; 61
    d2be:	de bf       	out	0x3e, r29	; 62
    d2c0:	7c 01       	movw	r14, r24
    d2c2:	1b 01       	movw	r2, r22
    d2c4:	6a 01       	movw	r12, r20
    d2c6:	fc 01       	movw	r30, r24
    d2c8:	16 82       	std	Z+6, r1	; 0x06
    d2ca:	17 82       	std	Z+7, r1	; 0x07
    d2cc:	83 81       	ldd	r24, Z+3	; 0x03
    d2ce:	81 ff       	sbrs	r24, 1
    d2d0:	44 c3       	rjmp	.+1672   	; 0xd95a <vfprintf+0x6c8>
    d2d2:	9e 01       	movw	r18, r28
    d2d4:	2f 5f       	subi	r18, 0xFF	; 255
    d2d6:	3f 4f       	sbci	r19, 0xFF	; 255
    d2d8:	39 01       	movw	r6, r18
    d2da:	f7 01       	movw	r30, r14
    d2dc:	93 81       	ldd	r25, Z+3	; 0x03
    d2de:	f1 01       	movw	r30, r2
    d2e0:	93 fd       	sbrc	r25, 3
    d2e2:	85 91       	lpm	r24, Z+
    d2e4:	93 ff       	sbrs	r25, 3
    d2e6:	81 91       	ld	r24, Z+
    d2e8:	1f 01       	movw	r2, r30
    d2ea:	88 23       	and	r24, r24
    d2ec:	09 f4       	brne	.+2      	; 0xd2f0 <vfprintf+0x5e>
    d2ee:	31 c3       	rjmp	.+1634   	; 0xd952 <vfprintf+0x6c0>
    d2f0:	85 32       	cpi	r24, 0x25	; 37
    d2f2:	39 f4       	brne	.+14     	; 0xd302 <vfprintf+0x70>
    d2f4:	93 fd       	sbrc	r25, 3
    d2f6:	85 91       	lpm	r24, Z+
    d2f8:	93 ff       	sbrs	r25, 3
    d2fa:	81 91       	ld	r24, Z+
    d2fc:	1f 01       	movw	r2, r30
    d2fe:	85 32       	cpi	r24, 0x25	; 37
    d300:	39 f4       	brne	.+14     	; 0xd310 <vfprintf+0x7e>
    d302:	b7 01       	movw	r22, r14
    d304:	90 e0       	ldi	r25, 0x00	; 0
    d306:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d30a:	56 01       	movw	r10, r12
    d30c:	65 01       	movw	r12, r10
    d30e:	e5 cf       	rjmp	.-54     	; 0xd2da <vfprintf+0x48>
    d310:	10 e0       	ldi	r17, 0x00	; 0
    d312:	51 2c       	mov	r5, r1
    d314:	91 2c       	mov	r9, r1
    d316:	ff e1       	ldi	r31, 0x1F	; 31
    d318:	f9 15       	cp	r31, r9
    d31a:	d8 f0       	brcs	.+54     	; 0xd352 <vfprintf+0xc0>
    d31c:	8b 32       	cpi	r24, 0x2B	; 43
    d31e:	79 f0       	breq	.+30     	; 0xd33e <vfprintf+0xac>
    d320:	38 f4       	brcc	.+14     	; 0xd330 <vfprintf+0x9e>
    d322:	80 32       	cpi	r24, 0x20	; 32
    d324:	79 f0       	breq	.+30     	; 0xd344 <vfprintf+0xb2>
    d326:	83 32       	cpi	r24, 0x23	; 35
    d328:	a1 f4       	brne	.+40     	; 0xd352 <vfprintf+0xc0>
    d32a:	f9 2d       	mov	r31, r9
    d32c:	f0 61       	ori	r31, 0x10	; 16
    d32e:	2e c0       	rjmp	.+92     	; 0xd38c <vfprintf+0xfa>
    d330:	8d 32       	cpi	r24, 0x2D	; 45
    d332:	61 f0       	breq	.+24     	; 0xd34c <vfprintf+0xba>
    d334:	80 33       	cpi	r24, 0x30	; 48
    d336:	69 f4       	brne	.+26     	; 0xd352 <vfprintf+0xc0>
    d338:	29 2d       	mov	r18, r9
    d33a:	21 60       	ori	r18, 0x01	; 1
    d33c:	2d c0       	rjmp	.+90     	; 0xd398 <vfprintf+0x106>
    d33e:	39 2d       	mov	r19, r9
    d340:	32 60       	ori	r19, 0x02	; 2
    d342:	93 2e       	mov	r9, r19
    d344:	89 2d       	mov	r24, r9
    d346:	84 60       	ori	r24, 0x04	; 4
    d348:	98 2e       	mov	r9, r24
    d34a:	2a c0       	rjmp	.+84     	; 0xd3a0 <vfprintf+0x10e>
    d34c:	e9 2d       	mov	r30, r9
    d34e:	e8 60       	ori	r30, 0x08	; 8
    d350:	15 c0       	rjmp	.+42     	; 0xd37c <vfprintf+0xea>
    d352:	97 fc       	sbrc	r9, 7
    d354:	2d c0       	rjmp	.+90     	; 0xd3b0 <vfprintf+0x11e>
    d356:	20 ed       	ldi	r18, 0xD0	; 208
    d358:	28 0f       	add	r18, r24
    d35a:	2a 30       	cpi	r18, 0x0A	; 10
    d35c:	88 f4       	brcc	.+34     	; 0xd380 <vfprintf+0xee>
    d35e:	96 fe       	sbrs	r9, 6
    d360:	06 c0       	rjmp	.+12     	; 0xd36e <vfprintf+0xdc>
    d362:	3a e0       	ldi	r19, 0x0A	; 10
    d364:	13 9f       	mul	r17, r19
    d366:	20 0d       	add	r18, r0
    d368:	11 24       	eor	r1, r1
    d36a:	12 2f       	mov	r17, r18
    d36c:	19 c0       	rjmp	.+50     	; 0xd3a0 <vfprintf+0x10e>
    d36e:	8a e0       	ldi	r24, 0x0A	; 10
    d370:	58 9e       	mul	r5, r24
    d372:	20 0d       	add	r18, r0
    d374:	11 24       	eor	r1, r1
    d376:	52 2e       	mov	r5, r18
    d378:	e9 2d       	mov	r30, r9
    d37a:	e0 62       	ori	r30, 0x20	; 32
    d37c:	9e 2e       	mov	r9, r30
    d37e:	10 c0       	rjmp	.+32     	; 0xd3a0 <vfprintf+0x10e>
    d380:	8e 32       	cpi	r24, 0x2E	; 46
    d382:	31 f4       	brne	.+12     	; 0xd390 <vfprintf+0xfe>
    d384:	96 fc       	sbrc	r9, 6
    d386:	e5 c2       	rjmp	.+1482   	; 0xd952 <vfprintf+0x6c0>
    d388:	f9 2d       	mov	r31, r9
    d38a:	f0 64       	ori	r31, 0x40	; 64
    d38c:	9f 2e       	mov	r9, r31
    d38e:	08 c0       	rjmp	.+16     	; 0xd3a0 <vfprintf+0x10e>
    d390:	8c 36       	cpi	r24, 0x6C	; 108
    d392:	21 f4       	brne	.+8      	; 0xd39c <vfprintf+0x10a>
    d394:	29 2d       	mov	r18, r9
    d396:	20 68       	ori	r18, 0x80	; 128
    d398:	92 2e       	mov	r9, r18
    d39a:	02 c0       	rjmp	.+4      	; 0xd3a0 <vfprintf+0x10e>
    d39c:	88 36       	cpi	r24, 0x68	; 104
    d39e:	41 f4       	brne	.+16     	; 0xd3b0 <vfprintf+0x11e>
    d3a0:	f1 01       	movw	r30, r2
    d3a2:	93 fd       	sbrc	r25, 3
    d3a4:	85 91       	lpm	r24, Z+
    d3a6:	93 ff       	sbrs	r25, 3
    d3a8:	81 91       	ld	r24, Z+
    d3aa:	1f 01       	movw	r2, r30
    d3ac:	81 11       	cpse	r24, r1
    d3ae:	b3 cf       	rjmp	.-154    	; 0xd316 <vfprintf+0x84>
    d3b0:	9b eb       	ldi	r25, 0xBB	; 187
    d3b2:	98 0f       	add	r25, r24
    d3b4:	93 30       	cpi	r25, 0x03	; 3
    d3b6:	20 f4       	brcc	.+8      	; 0xd3c0 <vfprintf+0x12e>
    d3b8:	99 2d       	mov	r25, r9
    d3ba:	90 61       	ori	r25, 0x10	; 16
    d3bc:	80 5e       	subi	r24, 0xE0	; 224
    d3be:	07 c0       	rjmp	.+14     	; 0xd3ce <vfprintf+0x13c>
    d3c0:	9b e9       	ldi	r25, 0x9B	; 155
    d3c2:	98 0f       	add	r25, r24
    d3c4:	93 30       	cpi	r25, 0x03	; 3
    d3c6:	08 f0       	brcs	.+2      	; 0xd3ca <vfprintf+0x138>
    d3c8:	66 c1       	rjmp	.+716    	; 0xd696 <vfprintf+0x404>
    d3ca:	99 2d       	mov	r25, r9
    d3cc:	9f 7e       	andi	r25, 0xEF	; 239
    d3ce:	96 ff       	sbrs	r25, 6
    d3d0:	16 e0       	ldi	r17, 0x06	; 6
    d3d2:	9f 73       	andi	r25, 0x3F	; 63
    d3d4:	99 2e       	mov	r9, r25
    d3d6:	85 36       	cpi	r24, 0x65	; 101
    d3d8:	19 f4       	brne	.+6      	; 0xd3e0 <vfprintf+0x14e>
    d3da:	90 64       	ori	r25, 0x40	; 64
    d3dc:	99 2e       	mov	r9, r25
    d3de:	08 c0       	rjmp	.+16     	; 0xd3f0 <vfprintf+0x15e>
    d3e0:	86 36       	cpi	r24, 0x66	; 102
    d3e2:	21 f4       	brne	.+8      	; 0xd3ec <vfprintf+0x15a>
    d3e4:	39 2f       	mov	r19, r25
    d3e6:	30 68       	ori	r19, 0x80	; 128
    d3e8:	93 2e       	mov	r9, r19
    d3ea:	02 c0       	rjmp	.+4      	; 0xd3f0 <vfprintf+0x15e>
    d3ec:	11 11       	cpse	r17, r1
    d3ee:	11 50       	subi	r17, 0x01	; 1
    d3f0:	97 fe       	sbrs	r9, 7
    d3f2:	07 c0       	rjmp	.+14     	; 0xd402 <vfprintf+0x170>
    d3f4:	1c 33       	cpi	r17, 0x3C	; 60
    d3f6:	50 f4       	brcc	.+20     	; 0xd40c <vfprintf+0x17a>
    d3f8:	44 24       	eor	r4, r4
    d3fa:	43 94       	inc	r4
    d3fc:	41 0e       	add	r4, r17
    d3fe:	27 e0       	ldi	r18, 0x07	; 7
    d400:	0b c0       	rjmp	.+22     	; 0xd418 <vfprintf+0x186>
    d402:	18 30       	cpi	r17, 0x08	; 8
    d404:	38 f0       	brcs	.+14     	; 0xd414 <vfprintf+0x182>
    d406:	27 e0       	ldi	r18, 0x07	; 7
    d408:	17 e0       	ldi	r17, 0x07	; 7
    d40a:	05 c0       	rjmp	.+10     	; 0xd416 <vfprintf+0x184>
    d40c:	27 e0       	ldi	r18, 0x07	; 7
    d40e:	9c e3       	ldi	r25, 0x3C	; 60
    d410:	49 2e       	mov	r4, r25
    d412:	02 c0       	rjmp	.+4      	; 0xd418 <vfprintf+0x186>
    d414:	21 2f       	mov	r18, r17
    d416:	41 2c       	mov	r4, r1
    d418:	56 01       	movw	r10, r12
    d41a:	84 e0       	ldi	r24, 0x04	; 4
    d41c:	a8 0e       	add	r10, r24
    d41e:	b1 1c       	adc	r11, r1
    d420:	f6 01       	movw	r30, r12
    d422:	60 81       	ld	r22, Z
    d424:	71 81       	ldd	r23, Z+1	; 0x01
    d426:	82 81       	ldd	r24, Z+2	; 0x02
    d428:	93 81       	ldd	r25, Z+3	; 0x03
    d42a:	04 2d       	mov	r16, r4
    d42c:	a3 01       	movw	r20, r6
    d42e:	0e 94 e1 7b 	call	0xf7c2	; 0xf7c2 <__ftoa_engine>
    d432:	6c 01       	movw	r12, r24
    d434:	f9 81       	ldd	r31, Y+1	; 0x01
    d436:	fc 87       	std	Y+12, r31	; 0x0c
    d438:	f0 ff       	sbrs	r31, 0
    d43a:	02 c0       	rjmp	.+4      	; 0xd440 <vfprintf+0x1ae>
    d43c:	f3 ff       	sbrs	r31, 3
    d43e:	06 c0       	rjmp	.+12     	; 0xd44c <vfprintf+0x1ba>
    d440:	91 fc       	sbrc	r9, 1
    d442:	06 c0       	rjmp	.+12     	; 0xd450 <vfprintf+0x1be>
    d444:	92 fe       	sbrs	r9, 2
    d446:	06 c0       	rjmp	.+12     	; 0xd454 <vfprintf+0x1c2>
    d448:	00 e2       	ldi	r16, 0x20	; 32
    d44a:	05 c0       	rjmp	.+10     	; 0xd456 <vfprintf+0x1c4>
    d44c:	0d e2       	ldi	r16, 0x2D	; 45
    d44e:	03 c0       	rjmp	.+6      	; 0xd456 <vfprintf+0x1c4>
    d450:	0b e2       	ldi	r16, 0x2B	; 43
    d452:	01 c0       	rjmp	.+2      	; 0xd456 <vfprintf+0x1c4>
    d454:	00 e0       	ldi	r16, 0x00	; 0
    d456:	8c 85       	ldd	r24, Y+12	; 0x0c
    d458:	8c 70       	andi	r24, 0x0C	; 12
    d45a:	19 f0       	breq	.+6      	; 0xd462 <vfprintf+0x1d0>
    d45c:	01 11       	cpse	r16, r1
    d45e:	5a c2       	rjmp	.+1204   	; 0xd914 <vfprintf+0x682>
    d460:	9b c2       	rjmp	.+1334   	; 0xd998 <vfprintf+0x706>
    d462:	97 fe       	sbrs	r9, 7
    d464:	10 c0       	rjmp	.+32     	; 0xd486 <vfprintf+0x1f4>
    d466:	4c 0c       	add	r4, r12
    d468:	fc 85       	ldd	r31, Y+12	; 0x0c
    d46a:	f4 ff       	sbrs	r31, 4
    d46c:	04 c0       	rjmp	.+8      	; 0xd476 <vfprintf+0x1e4>
    d46e:	8a 81       	ldd	r24, Y+2	; 0x02
    d470:	81 33       	cpi	r24, 0x31	; 49
    d472:	09 f4       	brne	.+2      	; 0xd476 <vfprintf+0x1e4>
    d474:	4a 94       	dec	r4
    d476:	14 14       	cp	r1, r4
    d478:	74 f5       	brge	.+92     	; 0xd4d6 <vfprintf+0x244>
    d47a:	28 e0       	ldi	r18, 0x08	; 8
    d47c:	24 15       	cp	r18, r4
    d47e:	78 f5       	brcc	.+94     	; 0xd4de <vfprintf+0x24c>
    d480:	88 e0       	ldi	r24, 0x08	; 8
    d482:	48 2e       	mov	r4, r24
    d484:	2c c0       	rjmp	.+88     	; 0xd4de <vfprintf+0x24c>
    d486:	96 fc       	sbrc	r9, 6
    d488:	2a c0       	rjmp	.+84     	; 0xd4de <vfprintf+0x24c>
    d48a:	81 2f       	mov	r24, r17
    d48c:	90 e0       	ldi	r25, 0x00	; 0
    d48e:	8c 15       	cp	r24, r12
    d490:	9d 05       	cpc	r25, r13
    d492:	9c f0       	brlt	.+38     	; 0xd4ba <vfprintf+0x228>
    d494:	3c ef       	ldi	r19, 0xFC	; 252
    d496:	c3 16       	cp	r12, r19
    d498:	3f ef       	ldi	r19, 0xFF	; 255
    d49a:	d3 06       	cpc	r13, r19
    d49c:	74 f0       	brlt	.+28     	; 0xd4ba <vfprintf+0x228>
    d49e:	89 2d       	mov	r24, r9
    d4a0:	80 68       	ori	r24, 0x80	; 128
    d4a2:	98 2e       	mov	r9, r24
    d4a4:	0a c0       	rjmp	.+20     	; 0xd4ba <vfprintf+0x228>
    d4a6:	e2 e0       	ldi	r30, 0x02	; 2
    d4a8:	f0 e0       	ldi	r31, 0x00	; 0
    d4aa:	ec 0f       	add	r30, r28
    d4ac:	fd 1f       	adc	r31, r29
    d4ae:	e1 0f       	add	r30, r17
    d4b0:	f1 1d       	adc	r31, r1
    d4b2:	80 81       	ld	r24, Z
    d4b4:	80 33       	cpi	r24, 0x30	; 48
    d4b6:	19 f4       	brne	.+6      	; 0xd4be <vfprintf+0x22c>
    d4b8:	11 50       	subi	r17, 0x01	; 1
    d4ba:	11 11       	cpse	r17, r1
    d4bc:	f4 cf       	rjmp	.-24     	; 0xd4a6 <vfprintf+0x214>
    d4be:	97 fe       	sbrs	r9, 7
    d4c0:	0e c0       	rjmp	.+28     	; 0xd4de <vfprintf+0x24c>
    d4c2:	44 24       	eor	r4, r4
    d4c4:	43 94       	inc	r4
    d4c6:	41 0e       	add	r4, r17
    d4c8:	81 2f       	mov	r24, r17
    d4ca:	90 e0       	ldi	r25, 0x00	; 0
    d4cc:	c8 16       	cp	r12, r24
    d4ce:	d9 06       	cpc	r13, r25
    d4d0:	2c f4       	brge	.+10     	; 0xd4dc <vfprintf+0x24a>
    d4d2:	1c 19       	sub	r17, r12
    d4d4:	04 c0       	rjmp	.+8      	; 0xd4de <vfprintf+0x24c>
    d4d6:	44 24       	eor	r4, r4
    d4d8:	43 94       	inc	r4
    d4da:	01 c0       	rjmp	.+2      	; 0xd4de <vfprintf+0x24c>
    d4dc:	10 e0       	ldi	r17, 0x00	; 0
    d4de:	97 fe       	sbrs	r9, 7
    d4e0:	06 c0       	rjmp	.+12     	; 0xd4ee <vfprintf+0x25c>
    d4e2:	1c 14       	cp	r1, r12
    d4e4:	1d 04       	cpc	r1, r13
    d4e6:	34 f4       	brge	.+12     	; 0xd4f4 <vfprintf+0x262>
    d4e8:	c6 01       	movw	r24, r12
    d4ea:	01 96       	adiw	r24, 0x01	; 1
    d4ec:	05 c0       	rjmp	.+10     	; 0xd4f8 <vfprintf+0x266>
    d4ee:	85 e0       	ldi	r24, 0x05	; 5
    d4f0:	90 e0       	ldi	r25, 0x00	; 0
    d4f2:	02 c0       	rjmp	.+4      	; 0xd4f8 <vfprintf+0x266>
    d4f4:	81 e0       	ldi	r24, 0x01	; 1
    d4f6:	90 e0       	ldi	r25, 0x00	; 0
    d4f8:	01 11       	cpse	r16, r1
    d4fa:	01 96       	adiw	r24, 0x01	; 1
    d4fc:	11 23       	and	r17, r17
    d4fe:	31 f0       	breq	.+12     	; 0xd50c <vfprintf+0x27a>
    d500:	21 2f       	mov	r18, r17
    d502:	30 e0       	ldi	r19, 0x00	; 0
    d504:	2f 5f       	subi	r18, 0xFF	; 255
    d506:	3f 4f       	sbci	r19, 0xFF	; 255
    d508:	82 0f       	add	r24, r18
    d50a:	93 1f       	adc	r25, r19
    d50c:	25 2d       	mov	r18, r5
    d50e:	30 e0       	ldi	r19, 0x00	; 0
    d510:	82 17       	cp	r24, r18
    d512:	93 07       	cpc	r25, r19
    d514:	14 f4       	brge	.+4      	; 0xd51a <vfprintf+0x288>
    d516:	58 1a       	sub	r5, r24
    d518:	01 c0       	rjmp	.+2      	; 0xd51c <vfprintf+0x28a>
    d51a:	51 2c       	mov	r5, r1
    d51c:	89 2d       	mov	r24, r9
    d51e:	89 70       	andi	r24, 0x09	; 9
    d520:	49 f4       	brne	.+18     	; 0xd534 <vfprintf+0x2a2>
    d522:	55 20       	and	r5, r5
    d524:	39 f0       	breq	.+14     	; 0xd534 <vfprintf+0x2a2>
    d526:	b7 01       	movw	r22, r14
    d528:	80 e2       	ldi	r24, 0x20	; 32
    d52a:	90 e0       	ldi	r25, 0x00	; 0
    d52c:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d530:	5a 94       	dec	r5
    d532:	f7 cf       	rjmp	.-18     	; 0xd522 <vfprintf+0x290>
    d534:	00 23       	and	r16, r16
    d536:	29 f0       	breq	.+10     	; 0xd542 <vfprintf+0x2b0>
    d538:	b7 01       	movw	r22, r14
    d53a:	80 2f       	mov	r24, r16
    d53c:	90 e0       	ldi	r25, 0x00	; 0
    d53e:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d542:	93 fc       	sbrc	r9, 3
    d544:	09 c0       	rjmp	.+18     	; 0xd558 <vfprintf+0x2c6>
    d546:	55 20       	and	r5, r5
    d548:	39 f0       	breq	.+14     	; 0xd558 <vfprintf+0x2c6>
    d54a:	b7 01       	movw	r22, r14
    d54c:	80 e3       	ldi	r24, 0x30	; 48
    d54e:	90 e0       	ldi	r25, 0x00	; 0
    d550:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d554:	5a 94       	dec	r5
    d556:	f7 cf       	rjmp	.-18     	; 0xd546 <vfprintf+0x2b4>
    d558:	97 fe       	sbrs	r9, 7
    d55a:	4c c0       	rjmp	.+152    	; 0xd5f4 <vfprintf+0x362>
    d55c:	46 01       	movw	r8, r12
    d55e:	d7 fe       	sbrs	r13, 7
    d560:	02 c0       	rjmp	.+4      	; 0xd566 <vfprintf+0x2d4>
    d562:	81 2c       	mov	r8, r1
    d564:	91 2c       	mov	r9, r1
    d566:	c6 01       	movw	r24, r12
    d568:	88 19       	sub	r24, r8
    d56a:	99 09       	sbc	r25, r9
    d56c:	f3 01       	movw	r30, r6
    d56e:	e8 0f       	add	r30, r24
    d570:	f9 1f       	adc	r31, r25
    d572:	ed 87       	std	Y+13, r30	; 0x0d
    d574:	fe 87       	std	Y+14, r31	; 0x0e
    d576:	96 01       	movw	r18, r12
    d578:	24 19       	sub	r18, r4
    d57a:	31 09       	sbc	r19, r1
    d57c:	2f 87       	std	Y+15, r18	; 0x0f
    d57e:	38 8b       	std	Y+16, r19	; 0x10
    d580:	01 2f       	mov	r16, r17
    d582:	10 e0       	ldi	r17, 0x00	; 0
    d584:	11 95       	neg	r17
    d586:	01 95       	neg	r16
    d588:	11 09       	sbc	r17, r1
    d58a:	3f ef       	ldi	r19, 0xFF	; 255
    d58c:	83 16       	cp	r8, r19
    d58e:	93 06       	cpc	r9, r19
    d590:	29 f4       	brne	.+10     	; 0xd59c <vfprintf+0x30a>
    d592:	b7 01       	movw	r22, r14
    d594:	8e e2       	ldi	r24, 0x2E	; 46
    d596:	90 e0       	ldi	r25, 0x00	; 0
    d598:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d59c:	c8 14       	cp	r12, r8
    d59e:	d9 04       	cpc	r13, r9
    d5a0:	4c f0       	brlt	.+18     	; 0xd5b4 <vfprintf+0x322>
    d5a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    d5a4:	98 89       	ldd	r25, Y+16	; 0x10
    d5a6:	88 15       	cp	r24, r8
    d5a8:	99 05       	cpc	r25, r9
    d5aa:	24 f4       	brge	.+8      	; 0xd5b4 <vfprintf+0x322>
    d5ac:	ed 85       	ldd	r30, Y+13	; 0x0d
    d5ae:	fe 85       	ldd	r31, Y+14	; 0x0e
    d5b0:	81 81       	ldd	r24, Z+1	; 0x01
    d5b2:	01 c0       	rjmp	.+2      	; 0xd5b6 <vfprintf+0x324>
    d5b4:	80 e3       	ldi	r24, 0x30	; 48
    d5b6:	f1 e0       	ldi	r31, 0x01	; 1
    d5b8:	8f 1a       	sub	r8, r31
    d5ba:	91 08       	sbc	r9, r1
    d5bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    d5be:	3e 85       	ldd	r19, Y+14	; 0x0e
    d5c0:	2f 5f       	subi	r18, 0xFF	; 255
    d5c2:	3f 4f       	sbci	r19, 0xFF	; 255
    d5c4:	2d 87       	std	Y+13, r18	; 0x0d
    d5c6:	3e 87       	std	Y+14, r19	; 0x0e
    d5c8:	80 16       	cp	r8, r16
    d5ca:	91 06       	cpc	r9, r17
    d5cc:	2c f0       	brlt	.+10     	; 0xd5d8 <vfprintf+0x346>
    d5ce:	b7 01       	movw	r22, r14
    d5d0:	90 e0       	ldi	r25, 0x00	; 0
    d5d2:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d5d6:	d9 cf       	rjmp	.-78     	; 0xd58a <vfprintf+0x2f8>
    d5d8:	c8 14       	cp	r12, r8
    d5da:	d9 04       	cpc	r13, r9
    d5dc:	41 f4       	brne	.+16     	; 0xd5ee <vfprintf+0x35c>
    d5de:	9a 81       	ldd	r25, Y+2	; 0x02
    d5e0:	96 33       	cpi	r25, 0x36	; 54
    d5e2:	20 f4       	brcc	.+8      	; 0xd5ec <vfprintf+0x35a>
    d5e4:	95 33       	cpi	r25, 0x35	; 53
    d5e6:	19 f4       	brne	.+6      	; 0xd5ee <vfprintf+0x35c>
    d5e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    d5ea:	34 ff       	sbrs	r19, 4
    d5ec:	81 e3       	ldi	r24, 0x31	; 49
    d5ee:	b7 01       	movw	r22, r14
    d5f0:	90 e0       	ldi	r25, 0x00	; 0
    d5f2:	4e c0       	rjmp	.+156    	; 0xd690 <vfprintf+0x3fe>
    d5f4:	8a 81       	ldd	r24, Y+2	; 0x02
    d5f6:	81 33       	cpi	r24, 0x31	; 49
    d5f8:	19 f0       	breq	.+6      	; 0xd600 <vfprintf+0x36e>
    d5fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    d5fc:	9f 7e       	andi	r25, 0xEF	; 239
    d5fe:	9c 87       	std	Y+12, r25	; 0x0c
    d600:	b7 01       	movw	r22, r14
    d602:	90 e0       	ldi	r25, 0x00	; 0
    d604:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d608:	11 11       	cpse	r17, r1
    d60a:	05 c0       	rjmp	.+10     	; 0xd616 <vfprintf+0x384>
    d60c:	94 fc       	sbrc	r9, 4
    d60e:	18 c0       	rjmp	.+48     	; 0xd640 <vfprintf+0x3ae>
    d610:	85 e6       	ldi	r24, 0x65	; 101
    d612:	90 e0       	ldi	r25, 0x00	; 0
    d614:	17 c0       	rjmp	.+46     	; 0xd644 <vfprintf+0x3b2>
    d616:	b7 01       	movw	r22, r14
    d618:	8e e2       	ldi	r24, 0x2E	; 46
    d61a:	90 e0       	ldi	r25, 0x00	; 0
    d61c:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d620:	1e 5f       	subi	r17, 0xFE	; 254
    d622:	82 e0       	ldi	r24, 0x02	; 2
    d624:	01 e0       	ldi	r16, 0x01	; 1
    d626:	08 0f       	add	r16, r24
    d628:	f3 01       	movw	r30, r6
    d62a:	e8 0f       	add	r30, r24
    d62c:	f1 1d       	adc	r31, r1
    d62e:	80 81       	ld	r24, Z
    d630:	b7 01       	movw	r22, r14
    d632:	90 e0       	ldi	r25, 0x00	; 0
    d634:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d638:	80 2f       	mov	r24, r16
    d63a:	01 13       	cpse	r16, r17
    d63c:	f3 cf       	rjmp	.-26     	; 0xd624 <vfprintf+0x392>
    d63e:	e6 cf       	rjmp	.-52     	; 0xd60c <vfprintf+0x37a>
    d640:	85 e4       	ldi	r24, 0x45	; 69
    d642:	90 e0       	ldi	r25, 0x00	; 0
    d644:	b7 01       	movw	r22, r14
    d646:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d64a:	d7 fc       	sbrc	r13, 7
    d64c:	06 c0       	rjmp	.+12     	; 0xd65a <vfprintf+0x3c8>
    d64e:	c1 14       	cp	r12, r1
    d650:	d1 04       	cpc	r13, r1
    d652:	41 f4       	brne	.+16     	; 0xd664 <vfprintf+0x3d2>
    d654:	ec 85       	ldd	r30, Y+12	; 0x0c
    d656:	e4 ff       	sbrs	r30, 4
    d658:	05 c0       	rjmp	.+10     	; 0xd664 <vfprintf+0x3d2>
    d65a:	d1 94       	neg	r13
    d65c:	c1 94       	neg	r12
    d65e:	d1 08       	sbc	r13, r1
    d660:	8d e2       	ldi	r24, 0x2D	; 45
    d662:	01 c0       	rjmp	.+2      	; 0xd666 <vfprintf+0x3d4>
    d664:	8b e2       	ldi	r24, 0x2B	; 43
    d666:	b7 01       	movw	r22, r14
    d668:	90 e0       	ldi	r25, 0x00	; 0
    d66a:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d66e:	80 e3       	ldi	r24, 0x30	; 48
    d670:	2a e0       	ldi	r18, 0x0A	; 10
    d672:	c2 16       	cp	r12, r18
    d674:	d1 04       	cpc	r13, r1
    d676:	2c f0       	brlt	.+10     	; 0xd682 <vfprintf+0x3f0>
    d678:	8f 5f       	subi	r24, 0xFF	; 255
    d67a:	fa e0       	ldi	r31, 0x0A	; 10
    d67c:	cf 1a       	sub	r12, r31
    d67e:	d1 08       	sbc	r13, r1
    d680:	f7 cf       	rjmp	.-18     	; 0xd670 <vfprintf+0x3de>
    d682:	b7 01       	movw	r22, r14
    d684:	90 e0       	ldi	r25, 0x00	; 0
    d686:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d68a:	b7 01       	movw	r22, r14
    d68c:	c6 01       	movw	r24, r12
    d68e:	c0 96       	adiw	r24, 0x30	; 48
    d690:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d694:	54 c1       	rjmp	.+680    	; 0xd93e <vfprintf+0x6ac>
    d696:	83 36       	cpi	r24, 0x63	; 99
    d698:	31 f0       	breq	.+12     	; 0xd6a6 <vfprintf+0x414>
    d69a:	83 37       	cpi	r24, 0x73	; 115
    d69c:	79 f0       	breq	.+30     	; 0xd6bc <vfprintf+0x42a>
    d69e:	83 35       	cpi	r24, 0x53	; 83
    d6a0:	09 f0       	breq	.+2      	; 0xd6a4 <vfprintf+0x412>
    d6a2:	56 c0       	rjmp	.+172    	; 0xd750 <vfprintf+0x4be>
    d6a4:	20 c0       	rjmp	.+64     	; 0xd6e6 <vfprintf+0x454>
    d6a6:	56 01       	movw	r10, r12
    d6a8:	32 e0       	ldi	r19, 0x02	; 2
    d6aa:	a3 0e       	add	r10, r19
    d6ac:	b1 1c       	adc	r11, r1
    d6ae:	f6 01       	movw	r30, r12
    d6b0:	80 81       	ld	r24, Z
    d6b2:	89 83       	std	Y+1, r24	; 0x01
    d6b4:	01 e0       	ldi	r16, 0x01	; 1
    d6b6:	10 e0       	ldi	r17, 0x00	; 0
    d6b8:	63 01       	movw	r12, r6
    d6ba:	12 c0       	rjmp	.+36     	; 0xd6e0 <vfprintf+0x44e>
    d6bc:	56 01       	movw	r10, r12
    d6be:	f2 e0       	ldi	r31, 0x02	; 2
    d6c0:	af 0e       	add	r10, r31
    d6c2:	b1 1c       	adc	r11, r1
    d6c4:	f6 01       	movw	r30, r12
    d6c6:	c0 80       	ld	r12, Z
    d6c8:	d1 80       	ldd	r13, Z+1	; 0x01
    d6ca:	96 fe       	sbrs	r9, 6
    d6cc:	03 c0       	rjmp	.+6      	; 0xd6d4 <vfprintf+0x442>
    d6ce:	61 2f       	mov	r22, r17
    d6d0:	70 e0       	ldi	r23, 0x00	; 0
    d6d2:	02 c0       	rjmp	.+4      	; 0xd6d8 <vfprintf+0x446>
    d6d4:	6f ef       	ldi	r22, 0xFF	; 255
    d6d6:	7f ef       	ldi	r23, 0xFF	; 255
    d6d8:	c6 01       	movw	r24, r12
    d6da:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <strnlen>
    d6de:	8c 01       	movw	r16, r24
    d6e0:	f9 2d       	mov	r31, r9
    d6e2:	ff 77       	andi	r31, 0x7F	; 127
    d6e4:	14 c0       	rjmp	.+40     	; 0xd70e <vfprintf+0x47c>
    d6e6:	56 01       	movw	r10, r12
    d6e8:	22 e0       	ldi	r18, 0x02	; 2
    d6ea:	a2 0e       	add	r10, r18
    d6ec:	b1 1c       	adc	r11, r1
    d6ee:	f6 01       	movw	r30, r12
    d6f0:	c0 80       	ld	r12, Z
    d6f2:	d1 80       	ldd	r13, Z+1	; 0x01
    d6f4:	96 fe       	sbrs	r9, 6
    d6f6:	03 c0       	rjmp	.+6      	; 0xd6fe <vfprintf+0x46c>
    d6f8:	61 2f       	mov	r22, r17
    d6fa:	70 e0       	ldi	r23, 0x00	; 0
    d6fc:	02 c0       	rjmp	.+4      	; 0xd702 <vfprintf+0x470>
    d6fe:	6f ef       	ldi	r22, 0xFF	; 255
    d700:	7f ef       	ldi	r23, 0xFF	; 255
    d702:	c6 01       	movw	r24, r12
    d704:	0e 94 de 7c 	call	0xf9bc	; 0xf9bc <strnlen_P>
    d708:	8c 01       	movw	r16, r24
    d70a:	f9 2d       	mov	r31, r9
    d70c:	f0 68       	ori	r31, 0x80	; 128
    d70e:	9f 2e       	mov	r9, r31
    d710:	f3 fd       	sbrc	r31, 3
    d712:	1a c0       	rjmp	.+52     	; 0xd748 <vfprintf+0x4b6>
    d714:	85 2d       	mov	r24, r5
    d716:	90 e0       	ldi	r25, 0x00	; 0
    d718:	08 17       	cp	r16, r24
    d71a:	19 07       	cpc	r17, r25
    d71c:	a8 f4       	brcc	.+42     	; 0xd748 <vfprintf+0x4b6>
    d71e:	b7 01       	movw	r22, r14
    d720:	80 e2       	ldi	r24, 0x20	; 32
    d722:	90 e0       	ldi	r25, 0x00	; 0
    d724:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d728:	5a 94       	dec	r5
    d72a:	f4 cf       	rjmp	.-24     	; 0xd714 <vfprintf+0x482>
    d72c:	f6 01       	movw	r30, r12
    d72e:	97 fc       	sbrc	r9, 7
    d730:	85 91       	lpm	r24, Z+
    d732:	97 fe       	sbrs	r9, 7
    d734:	81 91       	ld	r24, Z+
    d736:	6f 01       	movw	r12, r30
    d738:	b7 01       	movw	r22, r14
    d73a:	90 e0       	ldi	r25, 0x00	; 0
    d73c:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d740:	51 10       	cpse	r5, r1
    d742:	5a 94       	dec	r5
    d744:	01 50       	subi	r16, 0x01	; 1
    d746:	11 09       	sbc	r17, r1
    d748:	01 15       	cp	r16, r1
    d74a:	11 05       	cpc	r17, r1
    d74c:	79 f7       	brne	.-34     	; 0xd72c <vfprintf+0x49a>
    d74e:	f7 c0       	rjmp	.+494    	; 0xd93e <vfprintf+0x6ac>
    d750:	84 36       	cpi	r24, 0x64	; 100
    d752:	11 f0       	breq	.+4      	; 0xd758 <vfprintf+0x4c6>
    d754:	89 36       	cpi	r24, 0x69	; 105
    d756:	61 f5       	brne	.+88     	; 0xd7b0 <vfprintf+0x51e>
    d758:	56 01       	movw	r10, r12
    d75a:	97 fe       	sbrs	r9, 7
    d75c:	09 c0       	rjmp	.+18     	; 0xd770 <vfprintf+0x4de>
    d75e:	24 e0       	ldi	r18, 0x04	; 4
    d760:	a2 0e       	add	r10, r18
    d762:	b1 1c       	adc	r11, r1
    d764:	f6 01       	movw	r30, r12
    d766:	60 81       	ld	r22, Z
    d768:	71 81       	ldd	r23, Z+1	; 0x01
    d76a:	82 81       	ldd	r24, Z+2	; 0x02
    d76c:	93 81       	ldd	r25, Z+3	; 0x03
    d76e:	0a c0       	rjmp	.+20     	; 0xd784 <vfprintf+0x4f2>
    d770:	f2 e0       	ldi	r31, 0x02	; 2
    d772:	af 0e       	add	r10, r31
    d774:	b1 1c       	adc	r11, r1
    d776:	f6 01       	movw	r30, r12
    d778:	60 81       	ld	r22, Z
    d77a:	71 81       	ldd	r23, Z+1	; 0x01
    d77c:	07 2e       	mov	r0, r23
    d77e:	00 0c       	add	r0, r0
    d780:	88 0b       	sbc	r24, r24
    d782:	99 0b       	sbc	r25, r25
    d784:	f9 2d       	mov	r31, r9
    d786:	ff 76       	andi	r31, 0x6F	; 111
    d788:	9f 2e       	mov	r9, r31
    d78a:	97 ff       	sbrs	r25, 7
    d78c:	09 c0       	rjmp	.+18     	; 0xd7a0 <vfprintf+0x50e>
    d78e:	90 95       	com	r25
    d790:	80 95       	com	r24
    d792:	70 95       	com	r23
    d794:	61 95       	neg	r22
    d796:	7f 4f       	sbci	r23, 0xFF	; 255
    d798:	8f 4f       	sbci	r24, 0xFF	; 255
    d79a:	9f 4f       	sbci	r25, 0xFF	; 255
    d79c:	f0 68       	ori	r31, 0x80	; 128
    d79e:	9f 2e       	mov	r9, r31
    d7a0:	2a e0       	ldi	r18, 0x0A	; 10
    d7a2:	30 e0       	ldi	r19, 0x00	; 0
    d7a4:	a3 01       	movw	r20, r6
    d7a6:	0e 94 8c 7e 	call	0xfd18	; 0xfd18 <__ultoa_invert>
    d7aa:	c8 2e       	mov	r12, r24
    d7ac:	c6 18       	sub	r12, r6
    d7ae:	3f c0       	rjmp	.+126    	; 0xd82e <vfprintf+0x59c>
    d7b0:	09 2d       	mov	r16, r9
    d7b2:	85 37       	cpi	r24, 0x75	; 117
    d7b4:	21 f4       	brne	.+8      	; 0xd7be <vfprintf+0x52c>
    d7b6:	0f 7e       	andi	r16, 0xEF	; 239
    d7b8:	2a e0       	ldi	r18, 0x0A	; 10
    d7ba:	30 e0       	ldi	r19, 0x00	; 0
    d7bc:	1d c0       	rjmp	.+58     	; 0xd7f8 <vfprintf+0x566>
    d7be:	09 7f       	andi	r16, 0xF9	; 249
    d7c0:	8f 36       	cpi	r24, 0x6F	; 111
    d7c2:	91 f0       	breq	.+36     	; 0xd7e8 <vfprintf+0x556>
    d7c4:	18 f4       	brcc	.+6      	; 0xd7cc <vfprintf+0x53a>
    d7c6:	88 35       	cpi	r24, 0x58	; 88
    d7c8:	59 f0       	breq	.+22     	; 0xd7e0 <vfprintf+0x54e>
    d7ca:	c3 c0       	rjmp	.+390    	; 0xd952 <vfprintf+0x6c0>
    d7cc:	80 37       	cpi	r24, 0x70	; 112
    d7ce:	19 f0       	breq	.+6      	; 0xd7d6 <vfprintf+0x544>
    d7d0:	88 37       	cpi	r24, 0x78	; 120
    d7d2:	11 f0       	breq	.+4      	; 0xd7d8 <vfprintf+0x546>
    d7d4:	be c0       	rjmp	.+380    	; 0xd952 <vfprintf+0x6c0>
    d7d6:	00 61       	ori	r16, 0x10	; 16
    d7d8:	04 ff       	sbrs	r16, 4
    d7da:	09 c0       	rjmp	.+18     	; 0xd7ee <vfprintf+0x55c>
    d7dc:	04 60       	ori	r16, 0x04	; 4
    d7de:	07 c0       	rjmp	.+14     	; 0xd7ee <vfprintf+0x55c>
    d7e0:	94 fe       	sbrs	r9, 4
    d7e2:	08 c0       	rjmp	.+16     	; 0xd7f4 <vfprintf+0x562>
    d7e4:	06 60       	ori	r16, 0x06	; 6
    d7e6:	06 c0       	rjmp	.+12     	; 0xd7f4 <vfprintf+0x562>
    d7e8:	28 e0       	ldi	r18, 0x08	; 8
    d7ea:	30 e0       	ldi	r19, 0x00	; 0
    d7ec:	05 c0       	rjmp	.+10     	; 0xd7f8 <vfprintf+0x566>
    d7ee:	20 e1       	ldi	r18, 0x10	; 16
    d7f0:	30 e0       	ldi	r19, 0x00	; 0
    d7f2:	02 c0       	rjmp	.+4      	; 0xd7f8 <vfprintf+0x566>
    d7f4:	20 e1       	ldi	r18, 0x10	; 16
    d7f6:	32 e0       	ldi	r19, 0x02	; 2
    d7f8:	56 01       	movw	r10, r12
    d7fa:	07 ff       	sbrs	r16, 7
    d7fc:	09 c0       	rjmp	.+18     	; 0xd810 <vfprintf+0x57e>
    d7fe:	84 e0       	ldi	r24, 0x04	; 4
    d800:	a8 0e       	add	r10, r24
    d802:	b1 1c       	adc	r11, r1
    d804:	f6 01       	movw	r30, r12
    d806:	60 81       	ld	r22, Z
    d808:	71 81       	ldd	r23, Z+1	; 0x01
    d80a:	82 81       	ldd	r24, Z+2	; 0x02
    d80c:	93 81       	ldd	r25, Z+3	; 0x03
    d80e:	08 c0       	rjmp	.+16     	; 0xd820 <vfprintf+0x58e>
    d810:	f2 e0       	ldi	r31, 0x02	; 2
    d812:	af 0e       	add	r10, r31
    d814:	b1 1c       	adc	r11, r1
    d816:	f6 01       	movw	r30, r12
    d818:	60 81       	ld	r22, Z
    d81a:	71 81       	ldd	r23, Z+1	; 0x01
    d81c:	80 e0       	ldi	r24, 0x00	; 0
    d81e:	90 e0       	ldi	r25, 0x00	; 0
    d820:	a3 01       	movw	r20, r6
    d822:	0e 94 8c 7e 	call	0xfd18	; 0xfd18 <__ultoa_invert>
    d826:	c8 2e       	mov	r12, r24
    d828:	c6 18       	sub	r12, r6
    d82a:	0f 77       	andi	r16, 0x7F	; 127
    d82c:	90 2e       	mov	r9, r16
    d82e:	96 fe       	sbrs	r9, 6
    d830:	0b c0       	rjmp	.+22     	; 0xd848 <vfprintf+0x5b6>
    d832:	09 2d       	mov	r16, r9
    d834:	0e 7f       	andi	r16, 0xFE	; 254
    d836:	c1 16       	cp	r12, r17
    d838:	50 f4       	brcc	.+20     	; 0xd84e <vfprintf+0x5bc>
    d83a:	94 fe       	sbrs	r9, 4
    d83c:	0a c0       	rjmp	.+20     	; 0xd852 <vfprintf+0x5c0>
    d83e:	92 fc       	sbrc	r9, 2
    d840:	08 c0       	rjmp	.+16     	; 0xd852 <vfprintf+0x5c0>
    d842:	09 2d       	mov	r16, r9
    d844:	0e 7e       	andi	r16, 0xEE	; 238
    d846:	05 c0       	rjmp	.+10     	; 0xd852 <vfprintf+0x5c0>
    d848:	dc 2c       	mov	r13, r12
    d84a:	09 2d       	mov	r16, r9
    d84c:	03 c0       	rjmp	.+6      	; 0xd854 <vfprintf+0x5c2>
    d84e:	dc 2c       	mov	r13, r12
    d850:	01 c0       	rjmp	.+2      	; 0xd854 <vfprintf+0x5c2>
    d852:	d1 2e       	mov	r13, r17
    d854:	04 ff       	sbrs	r16, 4
    d856:	0d c0       	rjmp	.+26     	; 0xd872 <vfprintf+0x5e0>
    d858:	fe 01       	movw	r30, r28
    d85a:	ec 0d       	add	r30, r12
    d85c:	f1 1d       	adc	r31, r1
    d85e:	80 81       	ld	r24, Z
    d860:	80 33       	cpi	r24, 0x30	; 48
    d862:	11 f4       	brne	.+4      	; 0xd868 <vfprintf+0x5d6>
    d864:	09 7e       	andi	r16, 0xE9	; 233
    d866:	09 c0       	rjmp	.+18     	; 0xd87a <vfprintf+0x5e8>
    d868:	02 ff       	sbrs	r16, 2
    d86a:	06 c0       	rjmp	.+12     	; 0xd878 <vfprintf+0x5e6>
    d86c:	d3 94       	inc	r13
    d86e:	d3 94       	inc	r13
    d870:	04 c0       	rjmp	.+8      	; 0xd87a <vfprintf+0x5e8>
    d872:	80 2f       	mov	r24, r16
    d874:	86 78       	andi	r24, 0x86	; 134
    d876:	09 f0       	breq	.+2      	; 0xd87a <vfprintf+0x5e8>
    d878:	d3 94       	inc	r13
    d87a:	03 fd       	sbrc	r16, 3
    d87c:	11 c0       	rjmp	.+34     	; 0xd8a0 <vfprintf+0x60e>
    d87e:	00 ff       	sbrs	r16, 0
    d880:	06 c0       	rjmp	.+12     	; 0xd88e <vfprintf+0x5fc>
    d882:	1c 2d       	mov	r17, r12
    d884:	d5 14       	cp	r13, r5
    d886:	80 f4       	brcc	.+32     	; 0xd8a8 <vfprintf+0x616>
    d888:	15 0d       	add	r17, r5
    d88a:	1d 19       	sub	r17, r13
    d88c:	0d c0       	rjmp	.+26     	; 0xd8a8 <vfprintf+0x616>
    d88e:	d5 14       	cp	r13, r5
    d890:	58 f4       	brcc	.+22     	; 0xd8a8 <vfprintf+0x616>
    d892:	b7 01       	movw	r22, r14
    d894:	80 e2       	ldi	r24, 0x20	; 32
    d896:	90 e0       	ldi	r25, 0x00	; 0
    d898:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d89c:	d3 94       	inc	r13
    d89e:	f7 cf       	rjmp	.-18     	; 0xd88e <vfprintf+0x5fc>
    d8a0:	d5 14       	cp	r13, r5
    d8a2:	10 f4       	brcc	.+4      	; 0xd8a8 <vfprintf+0x616>
    d8a4:	5d 18       	sub	r5, r13
    d8a6:	01 c0       	rjmp	.+2      	; 0xd8aa <vfprintf+0x618>
    d8a8:	51 2c       	mov	r5, r1
    d8aa:	04 ff       	sbrs	r16, 4
    d8ac:	10 c0       	rjmp	.+32     	; 0xd8ce <vfprintf+0x63c>
    d8ae:	b7 01       	movw	r22, r14
    d8b0:	80 e3       	ldi	r24, 0x30	; 48
    d8b2:	90 e0       	ldi	r25, 0x00	; 0
    d8b4:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d8b8:	02 ff       	sbrs	r16, 2
    d8ba:	17 c0       	rjmp	.+46     	; 0xd8ea <vfprintf+0x658>
    d8bc:	01 fd       	sbrc	r16, 1
    d8be:	03 c0       	rjmp	.+6      	; 0xd8c6 <vfprintf+0x634>
    d8c0:	88 e7       	ldi	r24, 0x78	; 120
    d8c2:	90 e0       	ldi	r25, 0x00	; 0
    d8c4:	02 c0       	rjmp	.+4      	; 0xd8ca <vfprintf+0x638>
    d8c6:	88 e5       	ldi	r24, 0x58	; 88
    d8c8:	90 e0       	ldi	r25, 0x00	; 0
    d8ca:	b7 01       	movw	r22, r14
    d8cc:	0c c0       	rjmp	.+24     	; 0xd8e6 <vfprintf+0x654>
    d8ce:	80 2f       	mov	r24, r16
    d8d0:	86 78       	andi	r24, 0x86	; 134
    d8d2:	59 f0       	breq	.+22     	; 0xd8ea <vfprintf+0x658>
    d8d4:	01 ff       	sbrs	r16, 1
    d8d6:	02 c0       	rjmp	.+4      	; 0xd8dc <vfprintf+0x64a>
    d8d8:	8b e2       	ldi	r24, 0x2B	; 43
    d8da:	01 c0       	rjmp	.+2      	; 0xd8de <vfprintf+0x64c>
    d8dc:	80 e2       	ldi	r24, 0x20	; 32
    d8de:	07 fd       	sbrc	r16, 7
    d8e0:	8d e2       	ldi	r24, 0x2D	; 45
    d8e2:	b7 01       	movw	r22, r14
    d8e4:	90 e0       	ldi	r25, 0x00	; 0
    d8e6:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d8ea:	c1 16       	cp	r12, r17
    d8ec:	38 f4       	brcc	.+14     	; 0xd8fc <vfprintf+0x66a>
    d8ee:	b7 01       	movw	r22, r14
    d8f0:	80 e3       	ldi	r24, 0x30	; 48
    d8f2:	90 e0       	ldi	r25, 0x00	; 0
    d8f4:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d8f8:	11 50       	subi	r17, 0x01	; 1
    d8fa:	f7 cf       	rjmp	.-18     	; 0xd8ea <vfprintf+0x658>
    d8fc:	ca 94       	dec	r12
    d8fe:	f3 01       	movw	r30, r6
    d900:	ec 0d       	add	r30, r12
    d902:	f1 1d       	adc	r31, r1
    d904:	80 81       	ld	r24, Z
    d906:	b7 01       	movw	r22, r14
    d908:	90 e0       	ldi	r25, 0x00	; 0
    d90a:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d90e:	c1 10       	cpse	r12, r1
    d910:	f5 cf       	rjmp	.-22     	; 0xd8fc <vfprintf+0x66a>
    d912:	15 c0       	rjmp	.+42     	; 0xd93e <vfprintf+0x6ac>
    d914:	f4 e0       	ldi	r31, 0x04	; 4
    d916:	f5 15       	cp	r31, r5
    d918:	60 f5       	brcc	.+88     	; 0xd972 <vfprintf+0x6e0>
    d91a:	84 e0       	ldi	r24, 0x04	; 4
    d91c:	58 1a       	sub	r5, r24
    d91e:	93 fe       	sbrs	r9, 3
    d920:	1f c0       	rjmp	.+62     	; 0xd960 <vfprintf+0x6ce>
    d922:	01 11       	cpse	r16, r1
    d924:	27 c0       	rjmp	.+78     	; 0xd974 <vfprintf+0x6e2>
    d926:	2c 85       	ldd	r18, Y+12	; 0x0c
    d928:	23 ff       	sbrs	r18, 3
    d92a:	2a c0       	rjmp	.+84     	; 0xd980 <vfprintf+0x6ee>
    d92c:	02 e9       	ldi	r16, 0x92	; 146
    d92e:	13 e0       	ldi	r17, 0x03	; 3
    d930:	39 2d       	mov	r19, r9
    d932:	30 71       	andi	r19, 0x10	; 16
    d934:	93 2e       	mov	r9, r19
    d936:	f8 01       	movw	r30, r16
    d938:	84 91       	lpm	r24, Z
    d93a:	81 11       	cpse	r24, r1
    d93c:	24 c0       	rjmp	.+72     	; 0xd986 <vfprintf+0x6f4>
    d93e:	55 20       	and	r5, r5
    d940:	09 f4       	brne	.+2      	; 0xd944 <vfprintf+0x6b2>
    d942:	e4 cc       	rjmp	.-1592   	; 0xd30c <vfprintf+0x7a>
    d944:	b7 01       	movw	r22, r14
    d946:	80 e2       	ldi	r24, 0x20	; 32
    d948:	90 e0       	ldi	r25, 0x00	; 0
    d94a:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d94e:	5a 94       	dec	r5
    d950:	f6 cf       	rjmp	.-20     	; 0xd93e <vfprintf+0x6ac>
    d952:	f7 01       	movw	r30, r14
    d954:	86 81       	ldd	r24, Z+6	; 0x06
    d956:	97 81       	ldd	r25, Z+7	; 0x07
    d958:	26 c0       	rjmp	.+76     	; 0xd9a6 <vfprintf+0x714>
    d95a:	8f ef       	ldi	r24, 0xFF	; 255
    d95c:	9f ef       	ldi	r25, 0xFF	; 255
    d95e:	23 c0       	rjmp	.+70     	; 0xd9a6 <vfprintf+0x714>
    d960:	b7 01       	movw	r22, r14
    d962:	80 e2       	ldi	r24, 0x20	; 32
    d964:	90 e0       	ldi	r25, 0x00	; 0
    d966:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d96a:	5a 94       	dec	r5
    d96c:	51 10       	cpse	r5, r1
    d96e:	f8 cf       	rjmp	.-16     	; 0xd960 <vfprintf+0x6ce>
    d970:	d8 cf       	rjmp	.-80     	; 0xd922 <vfprintf+0x690>
    d972:	51 2c       	mov	r5, r1
    d974:	b7 01       	movw	r22, r14
    d976:	80 2f       	mov	r24, r16
    d978:	90 e0       	ldi	r25, 0x00	; 0
    d97a:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d97e:	d3 cf       	rjmp	.-90     	; 0xd926 <vfprintf+0x694>
    d980:	06 e9       	ldi	r16, 0x96	; 150
    d982:	13 e0       	ldi	r17, 0x03	; 3
    d984:	d5 cf       	rjmp	.-86     	; 0xd930 <vfprintf+0x69e>
    d986:	91 10       	cpse	r9, r1
    d988:	80 52       	subi	r24, 0x20	; 32
    d98a:	b7 01       	movw	r22, r14
    d98c:	90 e0       	ldi	r25, 0x00	; 0
    d98e:	0e 94 9c 7d 	call	0xfb38	; 0xfb38 <fputc>
    d992:	0f 5f       	subi	r16, 0xFF	; 255
    d994:	1f 4f       	sbci	r17, 0xFF	; 255
    d996:	cf cf       	rjmp	.-98     	; 0xd936 <vfprintf+0x6a4>
    d998:	23 e0       	ldi	r18, 0x03	; 3
    d99a:	25 15       	cp	r18, r5
    d99c:	10 f4       	brcc	.+4      	; 0xd9a2 <vfprintf+0x710>
    d99e:	83 e0       	ldi	r24, 0x03	; 3
    d9a0:	bd cf       	rjmp	.-134    	; 0xd91c <vfprintf+0x68a>
    d9a2:	51 2c       	mov	r5, r1
    d9a4:	c0 cf       	rjmp	.-128    	; 0xd926 <vfprintf+0x694>
    d9a6:	60 96       	adiw	r28, 0x10	; 16
    d9a8:	cd bf       	out	0x3d, r28	; 61
    d9aa:	de bf       	out	0x3e, r29	; 62
    d9ac:	df 91       	pop	r29
    d9ae:	cf 91       	pop	r28
    d9b0:	1f 91       	pop	r17
    d9b2:	0f 91       	pop	r16
    d9b4:	ff 90       	pop	r15
    d9b6:	ef 90       	pop	r14
    d9b8:	df 90       	pop	r13
    d9ba:	cf 90       	pop	r12
    d9bc:	bf 90       	pop	r11
    d9be:	af 90       	pop	r10
    d9c0:	9f 90       	pop	r9
    d9c2:	8f 90       	pop	r8
    d9c4:	7f 90       	pop	r7
    d9c6:	6f 90       	pop	r6
    d9c8:	5f 90       	pop	r5
    d9ca:	4f 90       	pop	r4
    d9cc:	3f 90       	pop	r3
    d9ce:	2f 90       	pop	r2
    d9d0:	08 95       	ret

0000d9d2 <putval>:
    d9d2:	20 fd       	sbrc	r18, 0
    d9d4:	09 c0       	rjmp	.+18     	; 0xd9e8 <putval+0x16>
    d9d6:	fc 01       	movw	r30, r24
    d9d8:	23 fd       	sbrc	r18, 3
    d9da:	05 c0       	rjmp	.+10     	; 0xd9e6 <putval+0x14>
    d9dc:	22 ff       	sbrs	r18, 2
    d9de:	02 c0       	rjmp	.+4      	; 0xd9e4 <putval+0x12>
    d9e0:	73 83       	std	Z+3, r23	; 0x03
    d9e2:	62 83       	std	Z+2, r22	; 0x02
    d9e4:	51 83       	std	Z+1, r21	; 0x01
    d9e6:	40 83       	st	Z, r20
    d9e8:	08 95       	ret

0000d9ea <mulacc>:
    d9ea:	44 fd       	sbrc	r20, 4
    d9ec:	17 c0       	rjmp	.+46     	; 0xda1c <mulacc+0x32>
    d9ee:	46 fd       	sbrc	r20, 6
    d9f0:	17 c0       	rjmp	.+46     	; 0xda20 <mulacc+0x36>
    d9f2:	ab 01       	movw	r20, r22
    d9f4:	bc 01       	movw	r22, r24
    d9f6:	da 01       	movw	r26, r20
    d9f8:	fb 01       	movw	r30, r22
    d9fa:	aa 0f       	add	r26, r26
    d9fc:	bb 1f       	adc	r27, r27
    d9fe:	ee 1f       	adc	r30, r30
    da00:	ff 1f       	adc	r31, r31
    da02:	10 94       	com	r1
    da04:	d1 f7       	brne	.-12     	; 0xd9fa <mulacc+0x10>
    da06:	4a 0f       	add	r20, r26
    da08:	5b 1f       	adc	r21, r27
    da0a:	6e 1f       	adc	r22, r30
    da0c:	7f 1f       	adc	r23, r31
    da0e:	cb 01       	movw	r24, r22
    da10:	ba 01       	movw	r22, r20
    da12:	66 0f       	add	r22, r22
    da14:	77 1f       	adc	r23, r23
    da16:	88 1f       	adc	r24, r24
    da18:	99 1f       	adc	r25, r25
    da1a:	09 c0       	rjmp	.+18     	; 0xda2e <mulacc+0x44>
    da1c:	33 e0       	ldi	r19, 0x03	; 3
    da1e:	01 c0       	rjmp	.+2      	; 0xda22 <mulacc+0x38>
    da20:	34 e0       	ldi	r19, 0x04	; 4
    da22:	66 0f       	add	r22, r22
    da24:	77 1f       	adc	r23, r23
    da26:	88 1f       	adc	r24, r24
    da28:	99 1f       	adc	r25, r25
    da2a:	31 50       	subi	r19, 0x01	; 1
    da2c:	d1 f7       	brne	.-12     	; 0xda22 <mulacc+0x38>
    da2e:	62 0f       	add	r22, r18
    da30:	71 1d       	adc	r23, r1
    da32:	81 1d       	adc	r24, r1
    da34:	91 1d       	adc	r25, r1
    da36:	08 95       	ret

0000da38 <skip_spaces>:
    da38:	0f 93       	push	r16
    da3a:	1f 93       	push	r17
    da3c:	cf 93       	push	r28
    da3e:	df 93       	push	r29
    da40:	8c 01       	movw	r16, r24
    da42:	c8 01       	movw	r24, r16
    da44:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    da48:	ec 01       	movw	r28, r24
    da4a:	97 fd       	sbrc	r25, 7
    da4c:	08 c0       	rjmp	.+16     	; 0xda5e <skip_spaces+0x26>
    da4e:	0e 94 b9 7c 	call	0xf972	; 0xf972 <isspace>
    da52:	89 2b       	or	r24, r25
    da54:	b1 f7       	brne	.-20     	; 0xda42 <skip_spaces+0xa>
    da56:	b8 01       	movw	r22, r16
    da58:	ce 01       	movw	r24, r28
    da5a:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    da5e:	ce 01       	movw	r24, r28
    da60:	df 91       	pop	r29
    da62:	cf 91       	pop	r28
    da64:	1f 91       	pop	r17
    da66:	0f 91       	pop	r16
    da68:	08 95       	ret

0000da6a <conv_int>:
    da6a:	8f 92       	push	r8
    da6c:	9f 92       	push	r9
    da6e:	af 92       	push	r10
    da70:	bf 92       	push	r11
    da72:	cf 92       	push	r12
    da74:	df 92       	push	r13
    da76:	ef 92       	push	r14
    da78:	ff 92       	push	r15
    da7a:	0f 93       	push	r16
    da7c:	1f 93       	push	r17
    da7e:	cf 93       	push	r28
    da80:	df 93       	push	r29
    da82:	7c 01       	movw	r14, r24
    da84:	8b 01       	movw	r16, r22
    da86:	6a 01       	movw	r12, r20
    da88:	d2 2f       	mov	r29, r18
    da8a:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    da8e:	9c 01       	movw	r18, r24
    da90:	33 27       	eor	r19, r19
    da92:	2b 32       	cpi	r18, 0x2B	; 43
    da94:	31 05       	cpc	r19, r1
    da96:	21 f0       	breq	.+8      	; 0xdaa0 <conv_int+0x36>
    da98:	2d 32       	cpi	r18, 0x2D	; 45
    da9a:	31 05       	cpc	r19, r1
    da9c:	59 f4       	brne	.+22     	; 0xdab4 <conv_int+0x4a>
    da9e:	d0 68       	ori	r29, 0x80	; 128
    daa0:	01 50       	subi	r16, 0x01	; 1
    daa2:	11 09       	sbc	r17, r1
    daa4:	11 f4       	brne	.+4      	; 0xdaaa <conv_int+0x40>
    daa6:	80 e0       	ldi	r24, 0x00	; 0
    daa8:	6b c0       	rjmp	.+214    	; 0xdb80 <conv_int+0x116>
    daaa:	c7 01       	movw	r24, r14
    daac:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    dab0:	97 fd       	sbrc	r25, 7
    dab2:	f9 cf       	rjmp	.-14     	; 0xdaa6 <conv_int+0x3c>
    dab4:	cd 2f       	mov	r28, r29
    dab6:	cd 7f       	andi	r28, 0xFD	; 253
    dab8:	2d 2f       	mov	r18, r29
    daba:	20 73       	andi	r18, 0x30	; 48
    dabc:	19 f5       	brne	.+70     	; 0xdb04 <conv_int+0x9a>
    dabe:	80 33       	cpi	r24, 0x30	; 48
    dac0:	09 f5       	brne	.+66     	; 0xdb04 <conv_int+0x9a>
    dac2:	58 01       	movw	r10, r16
    dac4:	81 e0       	ldi	r24, 0x01	; 1
    dac6:	a8 1a       	sub	r10, r24
    dac8:	b1 08       	sbc	r11, r1
    daca:	09 f4       	brne	.+2      	; 0xdace <conv_int+0x64>
    dacc:	45 c0       	rjmp	.+138    	; 0xdb58 <conv_int+0xee>
    dace:	c7 01       	movw	r24, r14
    dad0:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    dad4:	97 fd       	sbrc	r25, 7
    dad6:	40 c0       	rjmp	.+128    	; 0xdb58 <conv_int+0xee>
    dad8:	9c 01       	movw	r18, r24
    dada:	2f 7d       	andi	r18, 0xDF	; 223
    dadc:	33 27       	eor	r19, r19
    dade:	28 35       	cpi	r18, 0x58	; 88
    dae0:	31 05       	cpc	r19, r1
    dae2:	51 f4       	brne	.+20     	; 0xdaf8 <conv_int+0x8e>
    dae4:	c2 64       	ori	r28, 0x42	; 66
    dae6:	02 50       	subi	r16, 0x02	; 2
    dae8:	11 09       	sbc	r17, r1
    daea:	b1 f1       	breq	.+108    	; 0xdb58 <conv_int+0xee>
    daec:	c7 01       	movw	r24, r14
    daee:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    daf2:	97 ff       	sbrs	r25, 7
    daf4:	07 c0       	rjmp	.+14     	; 0xdb04 <conv_int+0x9a>
    daf6:	30 c0       	rjmp	.+96     	; 0xdb58 <conv_int+0xee>
    daf8:	d6 ff       	sbrs	r29, 6
    dafa:	02 c0       	rjmp	.+4      	; 0xdb00 <conv_int+0x96>
    dafc:	c2 60       	ori	r28, 0x02	; 2
    dafe:	01 c0       	rjmp	.+2      	; 0xdb02 <conv_int+0x98>
    db00:	c2 61       	ori	r28, 0x12	; 18
    db02:	85 01       	movw	r16, r10
    db04:	81 2c       	mov	r8, r1
    db06:	91 2c       	mov	r9, r1
    db08:	54 01       	movw	r10, r8
    db0a:	20 ed       	ldi	r18, 0xD0	; 208
    db0c:	28 0f       	add	r18, r24
    db0e:	28 30       	cpi	r18, 0x08	; 8
    db10:	80 f0       	brcs	.+32     	; 0xdb32 <conv_int+0xc8>
    db12:	c4 ff       	sbrs	r28, 4
    db14:	04 c0       	rjmp	.+8      	; 0xdb1e <conv_int+0xb4>
    db16:	b7 01       	movw	r22, r14
    db18:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    db1c:	1a c0       	rjmp	.+52     	; 0xdb52 <conv_int+0xe8>
    db1e:	2a 30       	cpi	r18, 0x0A	; 10
    db20:	40 f0       	brcs	.+16     	; 0xdb32 <conv_int+0xc8>
    db22:	c6 ff       	sbrs	r28, 6
    db24:	f8 cf       	rjmp	.-16     	; 0xdb16 <conv_int+0xac>
    db26:	2f 7d       	andi	r18, 0xDF	; 223
    db28:	3f ee       	ldi	r19, 0xEF	; 239
    db2a:	32 0f       	add	r19, r18
    db2c:	36 30       	cpi	r19, 0x06	; 6
    db2e:	98 f7       	brcc	.-26     	; 0xdb16 <conv_int+0xac>
    db30:	27 50       	subi	r18, 0x07	; 7
    db32:	4c 2f       	mov	r20, r28
    db34:	c5 01       	movw	r24, r10
    db36:	b4 01       	movw	r22, r8
    db38:	0e 94 f5 6c 	call	0xd9ea	; 0xd9ea <mulacc>
    db3c:	4b 01       	movw	r8, r22
    db3e:	5c 01       	movw	r10, r24
    db40:	c2 60       	ori	r28, 0x02	; 2
    db42:	01 50       	subi	r16, 0x01	; 1
    db44:	11 09       	sbc	r17, r1
    db46:	59 f0       	breq	.+22     	; 0xdb5e <conv_int+0xf4>
    db48:	c7 01       	movw	r24, r14
    db4a:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    db4e:	97 ff       	sbrs	r25, 7
    db50:	dc cf       	rjmp	.-72     	; 0xdb0a <conv_int+0xa0>
    db52:	c1 fd       	sbrc	r28, 1
    db54:	04 c0       	rjmp	.+8      	; 0xdb5e <conv_int+0xf4>
    db56:	a7 cf       	rjmp	.-178    	; 0xdaa6 <conv_int+0x3c>
    db58:	81 2c       	mov	r8, r1
    db5a:	91 2c       	mov	r9, r1
    db5c:	54 01       	movw	r10, r8
    db5e:	c7 ff       	sbrs	r28, 7
    db60:	08 c0       	rjmp	.+16     	; 0xdb72 <conv_int+0x108>
    db62:	b0 94       	com	r11
    db64:	a0 94       	com	r10
    db66:	90 94       	com	r9
    db68:	80 94       	com	r8
    db6a:	81 1c       	adc	r8, r1
    db6c:	91 1c       	adc	r9, r1
    db6e:	a1 1c       	adc	r10, r1
    db70:	b1 1c       	adc	r11, r1
    db72:	2c 2f       	mov	r18, r28
    db74:	b5 01       	movw	r22, r10
    db76:	a4 01       	movw	r20, r8
    db78:	c6 01       	movw	r24, r12
    db7a:	0e 94 e9 6c 	call	0xd9d2	; 0xd9d2 <putval>
    db7e:	81 e0       	ldi	r24, 0x01	; 1
    db80:	df 91       	pop	r29
    db82:	cf 91       	pop	r28
    db84:	1f 91       	pop	r17
    db86:	0f 91       	pop	r16
    db88:	ff 90       	pop	r15
    db8a:	ef 90       	pop	r14
    db8c:	df 90       	pop	r13
    db8e:	cf 90       	pop	r12
    db90:	bf 90       	pop	r11
    db92:	af 90       	pop	r10
    db94:	9f 90       	pop	r9
    db96:	8f 90       	pop	r8
    db98:	08 95       	ret

0000db9a <conv_brk>:
    db9a:	4f 92       	push	r4
    db9c:	5f 92       	push	r5
    db9e:	6f 92       	push	r6
    dba0:	7f 92       	push	r7
    dba2:	8f 92       	push	r8
    dba4:	9f 92       	push	r9
    dba6:	af 92       	push	r10
    dba8:	bf 92       	push	r11
    dbaa:	cf 92       	push	r12
    dbac:	df 92       	push	r13
    dbae:	ef 92       	push	r14
    dbb0:	ff 92       	push	r15
    dbb2:	0f 93       	push	r16
    dbb4:	1f 93       	push	r17
    dbb6:	cf 93       	push	r28
    dbb8:	df 93       	push	r29
    dbba:	cd b7       	in	r28, 0x3d	; 61
    dbbc:	de b7       	in	r29, 0x3e	; 62
    dbbe:	a0 97       	sbiw	r28, 0x20	; 32
    dbc0:	cd bf       	out	0x3d, r28	; 61
    dbc2:	de bf       	out	0x3e, r29	; 62
    dbc4:	5c 01       	movw	r10, r24
    dbc6:	4b 01       	movw	r8, r22
    dbc8:	7a 01       	movw	r14, r20
    dbca:	8e 01       	movw	r16, r28
    dbcc:	0f 5f       	subi	r16, 0xFF	; 255
    dbce:	1f 4f       	sbci	r17, 0xFF	; 255
    dbd0:	68 01       	movw	r12, r16
    dbd2:	80 e2       	ldi	r24, 0x20	; 32
    dbd4:	f8 01       	movw	r30, r16
    dbd6:	11 92       	st	Z+, r1
    dbd8:	8a 95       	dec	r24
    dbda:	e9 f7       	brne	.-6      	; 0xdbd6 <conv_brk+0x3c>
    dbdc:	f5 01       	movw	r30, r10
    dbde:	53 80       	ldd	r5, Z+3	; 0x03
    dbe0:	40 e0       	ldi	r20, 0x00	; 0
    dbe2:	50 e0       	ldi	r21, 0x00	; 0
    dbe4:	61 2c       	mov	r6, r1
    dbe6:	90 e0       	ldi	r25, 0x00	; 0
    dbe8:	71 2c       	mov	r7, r1
    dbea:	a1 e0       	ldi	r26, 0x01	; 1
    dbec:	b0 e0       	ldi	r27, 0x00	; 0
    dbee:	f9 01       	movw	r30, r18
    dbf0:	53 fc       	sbrc	r5, 3
    dbf2:	85 91       	lpm	r24, Z+
    dbf4:	53 fe       	sbrs	r5, 3
    dbf6:	81 91       	ld	r24, Z+
    dbf8:	8f 01       	movw	r16, r30
    dbfa:	48 2e       	mov	r4, r24
    dbfc:	9f 01       	movw	r18, r30
    dbfe:	81 11       	cpse	r24, r1
    dc00:	03 c0       	rjmp	.+6      	; 0xdc08 <conv_brk+0x6e>
    dc02:	80 e0       	ldi	r24, 0x00	; 0
    dc04:	90 e0       	ldi	r25, 0x00	; 0
    dc06:	96 c0       	rjmp	.+300    	; 0xdd34 <conv_brk+0x19a>
    dc08:	8e 35       	cpi	r24, 0x5E	; 94
    dc0a:	19 f4       	brne	.+6      	; 0xdc12 <conv_brk+0x78>
    dc0c:	41 15       	cp	r20, r1
    dc0e:	51 05       	cpc	r21, r1
    dc10:	51 f1       	breq	.+84     	; 0xdc66 <conv_brk+0xcc>
    dc12:	67 2d       	mov	r22, r7
    dc14:	70 e0       	ldi	r23, 0x00	; 0
    dc16:	64 17       	cp	r22, r20
    dc18:	75 07       	cpc	r23, r21
    dc1a:	3c f4       	brge	.+14     	; 0xdc2a <conv_brk+0x90>
    dc1c:	8d 35       	cpi	r24, 0x5D	; 93
    dc1e:	61 f1       	breq	.+88     	; 0xdc78 <conv_brk+0xde>
    dc20:	8d 32       	cpi	r24, 0x2D	; 45
    dc22:	19 f4       	brne	.+6      	; 0xdc2a <conv_brk+0x90>
    dc24:	99 23       	and	r25, r25
    dc26:	11 f1       	breq	.+68     	; 0xdc6c <conv_brk+0xd2>
    dc28:	03 c0       	rjmp	.+6      	; 0xdc30 <conv_brk+0x96>
    dc2a:	99 23       	and	r25, r25
    dc2c:	09 f4       	brne	.+2      	; 0xdc30 <conv_brk+0x96>
    dc2e:	6d c0       	rjmp	.+218    	; 0xdd0a <conv_brk+0x170>
    dc30:	84 2d       	mov	r24, r4
    dc32:	86 95       	lsr	r24
    dc34:	86 95       	lsr	r24
    dc36:	86 95       	lsr	r24
    dc38:	f6 01       	movw	r30, r12
    dc3a:	e8 0f       	add	r30, r24
    dc3c:	f1 1d       	adc	r31, r1
    dc3e:	84 2d       	mov	r24, r4
    dc40:	87 70       	andi	r24, 0x07	; 7
    dc42:	8d 01       	movw	r16, r26
    dc44:	02 c0       	rjmp	.+4      	; 0xdc4a <conv_brk+0xb0>
    dc46:	00 0f       	add	r16, r16
    dc48:	11 1f       	adc	r17, r17
    dc4a:	8a 95       	dec	r24
    dc4c:	e2 f7       	brpl	.-8      	; 0xdc46 <conv_brk+0xac>
    dc4e:	c8 01       	movw	r24, r16
    dc50:	90 81       	ld	r25, Z
    dc52:	89 2b       	or	r24, r25
    dc54:	80 83       	st	Z, r24
    dc56:	64 14       	cp	r6, r4
    dc58:	59 f0       	breq	.+22     	; 0xdc70 <conv_brk+0xd6>
    dc5a:	46 14       	cp	r4, r6
    dc5c:	10 f4       	brcc	.+4      	; 0xdc62 <conv_brk+0xc8>
    dc5e:	43 94       	inc	r4
    dc60:	e7 cf       	rjmp	.-50     	; 0xdc30 <conv_brk+0x96>
    dc62:	4a 94       	dec	r4
    dc64:	e5 cf       	rjmp	.-54     	; 0xdc30 <conv_brk+0x96>
    dc66:	77 24       	eor	r7, r7
    dc68:	73 94       	inc	r7
    dc6a:	03 c0       	rjmp	.+6      	; 0xdc72 <conv_brk+0xd8>
    dc6c:	91 e0       	ldi	r25, 0x01	; 1
    dc6e:	01 c0       	rjmp	.+2      	; 0xdc72 <conv_brk+0xd8>
    dc70:	90 e0       	ldi	r25, 0x00	; 0
    dc72:	4f 5f       	subi	r20, 0xFF	; 255
    dc74:	5f 4f       	sbci	r21, 0xFF	; 255
    dc76:	bb cf       	rjmp	.-138    	; 0xdbee <conv_brk+0x54>
    dc78:	99 23       	and	r25, r25
    dc7a:	19 f0       	breq	.+6      	; 0xdc82 <conv_brk+0xe8>
    dc7c:	8e 81       	ldd	r24, Y+6	; 0x06
    dc7e:	80 62       	ori	r24, 0x20	; 32
    dc80:	8e 83       	std	Y+6, r24	; 0x06
    dc82:	71 10       	cpse	r7, r1
    dc84:	03 c0       	rjmp	.+6      	; 0xdc8c <conv_brk+0xf2>
    dc86:	77 24       	eor	r7, r7
    dc88:	73 94       	inc	r7
    dc8a:	19 c0       	rjmp	.+50     	; 0xdcbe <conv_brk+0x124>
    dc8c:	f6 01       	movw	r30, r12
    dc8e:	9e 01       	movw	r18, r28
    dc90:	2f 5d       	subi	r18, 0xDF	; 223
    dc92:	3f 4f       	sbci	r19, 0xFF	; 255
    dc94:	80 81       	ld	r24, Z
    dc96:	80 95       	com	r24
    dc98:	81 93       	st	Z+, r24
    dc9a:	2e 17       	cp	r18, r30
    dc9c:	3f 07       	cpc	r19, r31
    dc9e:	d1 f7       	brne	.-12     	; 0xdc94 <conv_brk+0xfa>
    dca0:	f2 cf       	rjmp	.-28     	; 0xdc86 <conv_brk+0xec>
    dca2:	e1 14       	cp	r14, r1
    dca4:	f1 04       	cpc	r15, r1
    dca6:	31 f0       	breq	.+12     	; 0xdcb4 <conv_brk+0x11a>
    dca8:	f7 01       	movw	r30, r14
    dcaa:	80 83       	st	Z, r24
    dcac:	b7 01       	movw	r22, r14
    dcae:	6f 5f       	subi	r22, 0xFF	; 255
    dcb0:	7f 4f       	sbci	r23, 0xFF	; 255
    dcb2:	7b 01       	movw	r14, r22
    dcb4:	71 e0       	ldi	r23, 0x01	; 1
    dcb6:	87 1a       	sub	r8, r23
    dcb8:	91 08       	sbc	r9, r1
    dcba:	71 2c       	mov	r7, r1
    dcbc:	f9 f0       	breq	.+62     	; 0xdcfc <conv_brk+0x162>
    dcbe:	c5 01       	movw	r24, r10
    dcc0:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    dcc4:	97 fd       	sbrc	r25, 7
    dcc6:	18 c0       	rjmp	.+48     	; 0xdcf8 <conv_brk+0x15e>
    dcc8:	fc 01       	movw	r30, r24
    dcca:	ff 27       	eor	r31, r31
    dccc:	23 e0       	ldi	r18, 0x03	; 3
    dcce:	f5 95       	asr	r31
    dcd0:	e7 95       	ror	r30
    dcd2:	2a 95       	dec	r18
    dcd4:	e1 f7       	brne	.-8      	; 0xdcce <conv_brk+0x134>
    dcd6:	ec 0d       	add	r30, r12
    dcd8:	fd 1d       	adc	r31, r13
    dcda:	20 81       	ld	r18, Z
    dcdc:	30 e0       	ldi	r19, 0x00	; 0
    dcde:	ac 01       	movw	r20, r24
    dce0:	47 70       	andi	r20, 0x07	; 7
    dce2:	55 27       	eor	r21, r21
    dce4:	02 c0       	rjmp	.+4      	; 0xdcea <conv_brk+0x150>
    dce6:	35 95       	asr	r19
    dce8:	27 95       	ror	r18
    dcea:	4a 95       	dec	r20
    dcec:	e2 f7       	brpl	.-8      	; 0xdce6 <conv_brk+0x14c>
    dcee:	20 fd       	sbrc	r18, 0
    dcf0:	d8 cf       	rjmp	.-80     	; 0xdca2 <conv_brk+0x108>
    dcf2:	b5 01       	movw	r22, r10
    dcf4:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    dcf8:	71 10       	cpse	r7, r1
    dcfa:	83 cf       	rjmp	.-250    	; 0xdc02 <conv_brk+0x68>
    dcfc:	e1 14       	cp	r14, r1
    dcfe:	f1 04       	cpc	r15, r1
    dd00:	11 f0       	breq	.+4      	; 0xdd06 <conv_brk+0x16c>
    dd02:	f7 01       	movw	r30, r14
    dd04:	10 82       	st	Z, r1
    dd06:	c8 01       	movw	r24, r16
    dd08:	15 c0       	rjmp	.+42     	; 0xdd34 <conv_brk+0x19a>
    dd0a:	68 2f       	mov	r22, r24
    dd0c:	66 95       	lsr	r22
    dd0e:	66 95       	lsr	r22
    dd10:	66 95       	lsr	r22
    dd12:	f6 01       	movw	r30, r12
    dd14:	e6 0f       	add	r30, r22
    dd16:	f1 1d       	adc	r31, r1
    dd18:	68 2f       	mov	r22, r24
    dd1a:	67 70       	andi	r22, 0x07	; 7
    dd1c:	8d 01       	movw	r16, r26
    dd1e:	02 c0       	rjmp	.+4      	; 0xdd24 <conv_brk+0x18a>
    dd20:	00 0f       	add	r16, r16
    dd22:	11 1f       	adc	r17, r17
    dd24:	6a 95       	dec	r22
    dd26:	e2 f7       	brpl	.-8      	; 0xdd20 <conv_brk+0x186>
    dd28:	b8 01       	movw	r22, r16
    dd2a:	70 81       	ld	r23, Z
    dd2c:	67 2b       	or	r22, r23
    dd2e:	60 83       	st	Z, r22
    dd30:	68 2e       	mov	r6, r24
    dd32:	9f cf       	rjmp	.-194    	; 0xdc72 <conv_brk+0xd8>
    dd34:	a0 96       	adiw	r28, 0x20	; 32
    dd36:	cd bf       	out	0x3d, r28	; 61
    dd38:	de bf       	out	0x3e, r29	; 62
    dd3a:	df 91       	pop	r29
    dd3c:	cf 91       	pop	r28
    dd3e:	1f 91       	pop	r17
    dd40:	0f 91       	pop	r16
    dd42:	ff 90       	pop	r15
    dd44:	ef 90       	pop	r14
    dd46:	df 90       	pop	r13
    dd48:	cf 90       	pop	r12
    dd4a:	bf 90       	pop	r11
    dd4c:	af 90       	pop	r10
    dd4e:	9f 90       	pop	r9
    dd50:	8f 90       	pop	r8
    dd52:	7f 90       	pop	r7
    dd54:	6f 90       	pop	r6
    dd56:	5f 90       	pop	r5
    dd58:	4f 90       	pop	r4
    dd5a:	08 95       	ret

0000dd5c <conv_flt>:
    dd5c:	2f 92       	push	r2
    dd5e:	3f 92       	push	r3
    dd60:	4f 92       	push	r4
    dd62:	5f 92       	push	r5
    dd64:	6f 92       	push	r6
    dd66:	7f 92       	push	r7
    dd68:	9f 92       	push	r9
    dd6a:	af 92       	push	r10
    dd6c:	bf 92       	push	r11
    dd6e:	cf 92       	push	r12
    dd70:	df 92       	push	r13
    dd72:	ef 92       	push	r14
    dd74:	ff 92       	push	r15
    dd76:	0f 93       	push	r16
    dd78:	1f 93       	push	r17
    dd7a:	cf 93       	push	r28
    dd7c:	df 93       	push	r29
    dd7e:	6c 01       	movw	r12, r24
    dd80:	8b 01       	movw	r16, r22
    dd82:	1a 01       	movw	r2, r20
    dd84:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    dd88:	ec 01       	movw	r28, r24
    dd8a:	99 27       	eor	r25, r25
    dd8c:	8b 32       	cpi	r24, 0x2B	; 43
    dd8e:	91 05       	cpc	r25, r1
    dd90:	29 f0       	breq	.+10     	; 0xdd9c <conv_flt+0x40>
    dd92:	8d 97       	sbiw	r24, 0x2d	; 45
    dd94:	81 f4       	brne	.+32     	; 0xddb6 <conv_flt+0x5a>
    dd96:	30 e8       	ldi	r19, 0x80	; 128
    dd98:	93 2e       	mov	r9, r19
    dd9a:	01 c0       	rjmp	.+2      	; 0xdd9e <conv_flt+0x42>
    dd9c:	91 2c       	mov	r9, r1
    dd9e:	01 50       	subi	r16, 0x01	; 1
    dda0:	11 09       	sbc	r17, r1
    dda2:	11 f4       	brne	.+4      	; 0xdda8 <conv_flt+0x4c>
    dda4:	80 e0       	ldi	r24, 0x00	; 0
    dda6:	0c c1       	rjmp	.+536    	; 0xdfc0 <conv_flt+0x264>
    dda8:	c6 01       	movw	r24, r12
    ddaa:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    ddae:	ec 01       	movw	r28, r24
    ddb0:	97 ff       	sbrs	r25, 7
    ddb2:	02 c0       	rjmp	.+4      	; 0xddb8 <conv_flt+0x5c>
    ddb4:	f7 cf       	rjmp	.-18     	; 0xdda4 <conv_flt+0x48>
    ddb6:	91 2c       	mov	r9, r1
    ddb8:	ce 01       	movw	r24, r28
    ddba:	0e 94 c2 7c 	call	0xf984	; 0xf984 <tolower>
    ddbe:	89 36       	cpi	r24, 0x69	; 105
    ddc0:	91 05       	cpc	r25, r1
    ddc2:	31 f0       	breq	.+12     	; 0xddd0 <conv_flt+0x74>
    ddc4:	8e 36       	cpi	r24, 0x6E	; 110
    ddc6:	91 05       	cpc	r25, r1
    ddc8:	99 f5       	brne	.+102    	; 0xde30 <conv_flt+0xd4>
    ddca:	c0 ea       	ldi	r28, 0xA0	; 160
    ddcc:	d3 e1       	ldi	r29, 0x13	; 19
    ddce:	02 c0       	rjmp	.+4      	; 0xddd4 <conv_flt+0x78>
    ddd0:	c3 ea       	ldi	r28, 0xA3	; 163
    ddd2:	d3 e1       	ldi	r29, 0x13	; 19
    ddd4:	21 96       	adiw	r28, 0x01	; 1
    ddd6:	fe 01       	movw	r30, r28
    ddd8:	31 97       	sbiw	r30, 0x01	; 1
    ddda:	b4 90       	lpm	r11, Z
    dddc:	bb 20       	and	r11, r11
    ddde:	c9 f0       	breq	.+50     	; 0xde12 <conv_flt+0xb6>
    dde0:	01 50       	subi	r16, 0x01	; 1
    dde2:	11 09       	sbc	r17, r1
    dde4:	91 f0       	breq	.+36     	; 0xde0a <conv_flt+0xae>
    dde6:	c6 01       	movw	r24, r12
    dde8:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    ddec:	7c 01       	movw	r14, r24
    ddee:	97 fd       	sbrc	r25, 7
    ddf0:	0c c0       	rjmp	.+24     	; 0xde0a <conv_flt+0xae>
    ddf2:	0e 94 c2 7c 	call	0xf984	; 0xf984 <tolower>
    ddf6:	99 27       	eor	r25, r25
    ddf8:	eb 2d       	mov	r30, r11
    ddfa:	f0 e0       	ldi	r31, 0x00	; 0
    ddfc:	8e 17       	cp	r24, r30
    ddfe:	9f 07       	cpc	r25, r31
    de00:	49 f3       	breq	.-46     	; 0xddd4 <conv_flt+0x78>
    de02:	b6 01       	movw	r22, r12
    de04:	c7 01       	movw	r24, r14
    de06:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    de0a:	c6 5a       	subi	r28, 0xA6	; 166
    de0c:	d3 41       	sbci	r29, 0x13	; 19
    de0e:	51 f6       	brne	.-108    	; 0xdda4 <conv_flt+0x48>
    de10:	03 c0       	rjmp	.+6      	; 0xde18 <conv_flt+0xbc>
    de12:	c3 5a       	subi	r28, 0xA3	; 163
    de14:	d3 41       	sbci	r29, 0x13	; 19
    de16:	29 f0       	breq	.+10     	; 0xde22 <conv_flt+0xc6>
    de18:	80 e0       	ldi	r24, 0x00	; 0
    de1a:	90 e0       	ldi	r25, 0x00	; 0
    de1c:	a0 e8       	ldi	r26, 0x80	; 128
    de1e:	bf e7       	ldi	r27, 0x7F	; 127
    de20:	04 c0       	rjmp	.+8      	; 0xde2a <conv_flt+0xce>
    de22:	80 e0       	ldi	r24, 0x00	; 0
    de24:	90 e0       	ldi	r25, 0x00	; 0
    de26:	a0 ec       	ldi	r26, 0xC0	; 192
    de28:	bf e7       	ldi	r27, 0x7F	; 127
    de2a:	bc 01       	movw	r22, r24
    de2c:	cd 01       	movw	r24, r26
    de2e:	b8 c0       	rjmp	.+368    	; 0xdfa0 <conv_flt+0x244>
    de30:	41 2c       	mov	r4, r1
    de32:	51 2c       	mov	r5, r1
    de34:	32 01       	movw	r6, r4
    de36:	e1 2c       	mov	r14, r1
    de38:	f1 2c       	mov	r15, r1
    de3a:	2c 2f       	mov	r18, r28
    de3c:	20 53       	subi	r18, 0x30	; 48
    de3e:	2a 30       	cpi	r18, 0x0A	; 10
    de40:	10 f5       	brcc	.+68     	; 0xde86 <conv_flt+0x12a>
    de42:	e9 2d       	mov	r30, r9
    de44:	e2 60       	ori	r30, 0x02	; 2
    de46:	be 2e       	mov	r11, r30
    de48:	89 2d       	mov	r24, r9
    de4a:	88 70       	andi	r24, 0x08	; 8
    de4c:	92 fe       	sbrs	r9, 2
    de4e:	06 c0       	rjmp	.+12     	; 0xde5c <conv_flt+0x100>
    de50:	81 11       	cpse	r24, r1
    de52:	20 c0       	rjmp	.+64     	; 0xde94 <conv_flt+0x138>
    de54:	ff ef       	ldi	r31, 0xFF	; 255
    de56:	ef 1a       	sub	r14, r31
    de58:	ff 0a       	sbc	r15, r31
    de5a:	1c c0       	rjmp	.+56     	; 0xde94 <conv_flt+0x138>
    de5c:	88 23       	and	r24, r24
    de5e:	19 f0       	breq	.+6      	; 0xde66 <conv_flt+0x10a>
    de60:	81 e0       	ldi	r24, 0x01	; 1
    de62:	e8 1a       	sub	r14, r24
    de64:	f1 08       	sbc	r15, r1
    de66:	40 e2       	ldi	r20, 0x20	; 32
    de68:	c3 01       	movw	r24, r6
    de6a:	b2 01       	movw	r22, r4
    de6c:	0e 94 f5 6c 	call	0xd9ea	; 0xd9ea <mulacc>
    de70:	2b 01       	movw	r4, r22
    de72:	3c 01       	movw	r6, r24
    de74:	68 39       	cpi	r22, 0x98	; 152
    de76:	79 49       	sbci	r23, 0x99	; 153
    de78:	89 49       	sbci	r24, 0x99	; 153
    de7a:	99 41       	sbci	r25, 0x19	; 25
    de7c:	58 f0       	brcs	.+22     	; 0xde94 <conv_flt+0x138>
    de7e:	f9 2d       	mov	r31, r9
    de80:	f6 60       	ori	r31, 0x06	; 6
    de82:	bf 2e       	mov	r11, r31
    de84:	07 c0       	rjmp	.+14     	; 0xde94 <conv_flt+0x138>
    de86:	2e 3f       	cpi	r18, 0xFE	; 254
    de88:	89 f4       	brne	.+34     	; 0xdeac <conv_flt+0x150>
    de8a:	93 fc       	sbrc	r9, 3
    de8c:	0f c0       	rjmp	.+30     	; 0xdeac <conv_flt+0x150>
    de8e:	29 2d       	mov	r18, r9
    de90:	28 60       	ori	r18, 0x08	; 8
    de92:	b2 2e       	mov	r11, r18
    de94:	01 50       	subi	r16, 0x01	; 1
    de96:	11 09       	sbc	r17, r1
    de98:	41 f0       	breq	.+16     	; 0xdeaa <conv_flt+0x14e>
    de9a:	c6 01       	movw	r24, r12
    de9c:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    dea0:	ec 01       	movw	r28, r24
    dea2:	9b 2c       	mov	r9, r11
    dea4:	97 ff       	sbrs	r25, 7
    dea6:	c9 cf       	rjmp	.-110    	; 0xde3a <conv_flt+0xde>
    dea8:	01 c0       	rjmp	.+2      	; 0xdeac <conv_flt+0x150>
    deaa:	9b 2c       	mov	r9, r11
    deac:	91 fe       	sbrs	r9, 1
    deae:	7a cf       	rjmp	.-268    	; 0xdda4 <conv_flt+0x48>
    deb0:	ce 01       	movw	r24, r28
    deb2:	8f 7d       	andi	r24, 0xDF	; 223
    deb4:	99 27       	eor	r25, r25
    deb6:	85 34       	cpi	r24, 0x45	; 69
    deb8:	91 05       	cpc	r25, r1
    deba:	09 f0       	breq	.+2      	; 0xdebe <conv_flt+0x162>
    debc:	42 c0       	rjmp	.+132    	; 0xdf42 <conv_flt+0x1e6>
    debe:	58 01       	movw	r10, r16
    dec0:	81 e0       	ldi	r24, 0x01	; 1
    dec2:	a8 1a       	sub	r10, r24
    dec4:	b1 08       	sbc	r11, r1
    dec6:	09 f4       	brne	.+2      	; 0xdeca <conv_flt+0x16e>
    dec8:	6d cf       	rjmp	.-294    	; 0xdda4 <conv_flt+0x48>
    deca:	c6 01       	movw	r24, r12
    decc:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    ded0:	ec 01       	movw	r28, r24
    ded2:	97 fd       	sbrc	r25, 7
    ded4:	67 cf       	rjmp	.-306    	; 0xdda4 <conv_flt+0x48>
    ded6:	99 27       	eor	r25, r25
    ded8:	8b 32       	cpi	r24, 0x2B	; 43
    deda:	91 05       	cpc	r25, r1
    dedc:	29 f0       	breq	.+10     	; 0xdee8 <conv_flt+0x18c>
    dede:	8d 97       	sbiw	r24, 0x2d	; 45
    dee0:	69 f4       	brne	.+26     	; 0xdefc <conv_flt+0x1a0>
    dee2:	e9 2d       	mov	r30, r9
    dee4:	e0 61       	ori	r30, 0x10	; 16
    dee6:	9e 2e       	mov	r9, r30
    dee8:	58 01       	movw	r10, r16
    deea:	f2 e0       	ldi	r31, 0x02	; 2
    deec:	af 1a       	sub	r10, r31
    deee:	b1 08       	sbc	r11, r1
    def0:	09 f4       	brne	.+2      	; 0xdef4 <conv_flt+0x198>
    def2:	58 cf       	rjmp	.-336    	; 0xdda4 <conv_flt+0x48>
    def4:	c6 01       	movw	r24, r12
    def6:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    defa:	ec 01       	movw	r28, r24
    defc:	ce 01       	movw	r24, r28
    defe:	c0 97       	sbiw	r24, 0x30	; 48
    df00:	0a 97       	sbiw	r24, 0x0a	; 10
    df02:	08 f0       	brcs	.+2      	; 0xdf06 <conv_flt+0x1aa>
    df04:	4f cf       	rjmp	.-354    	; 0xdda4 <conv_flt+0x48>
    df06:	85 01       	movw	r16, r10
    df08:	a1 2c       	mov	r10, r1
    df0a:	b1 2c       	mov	r11, r1
    df0c:	b5 01       	movw	r22, r10
    df0e:	bb 0c       	add	r11, r11
    df10:	88 0b       	sbc	r24, r24
    df12:	99 0b       	sbc	r25, r25
    df14:	2c 2f       	mov	r18, r28
    df16:	20 53       	subi	r18, 0x30	; 48
    df18:	40 e2       	ldi	r20, 0x20	; 32
    df1a:	0e 94 f5 6c 	call	0xd9ea	; 0xd9ea <mulacc>
    df1e:	5b 01       	movw	r10, r22
    df20:	01 50       	subi	r16, 0x01	; 1
    df22:	11 09       	sbc	r17, r1
    df24:	39 f0       	breq	.+14     	; 0xdf34 <conv_flt+0x1d8>
    df26:	c6 01       	movw	r24, r12
    df28:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    df2c:	ec 01       	movw	r28, r24
    df2e:	c0 97       	sbiw	r24, 0x30	; 48
    df30:	0a 97       	sbiw	r24, 0x0a	; 10
    df32:	60 f3       	brcs	.-40     	; 0xdf0c <conv_flt+0x1b0>
    df34:	94 fe       	sbrs	r9, 4
    df36:	03 c0       	rjmp	.+6      	; 0xdf3e <conv_flt+0x1e2>
    df38:	b1 94       	neg	r11
    df3a:	a1 94       	neg	r10
    df3c:	b1 08       	sbc	r11, r1
    df3e:	ea 0c       	add	r14, r10
    df40:	fb 1c       	adc	r15, r11
    df42:	01 2b       	or	r16, r17
    df44:	31 f0       	breq	.+12     	; 0xdf52 <conv_flt+0x1f6>
    df46:	d7 fd       	sbrc	r29, 7
    df48:	04 c0       	rjmp	.+8      	; 0xdf52 <conv_flt+0x1f6>
    df4a:	b6 01       	movw	r22, r12
    df4c:	ce 01       	movw	r24, r28
    df4e:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    df52:	c3 01       	movw	r24, r6
    df54:	b2 01       	movw	r22, r4
    df56:	0e 94 12 73 	call	0xe624	; 0xe624 <__floatunsisf>
    df5a:	f7 fe       	sbrs	r15, 7
    df5c:	06 c0       	rjmp	.+12     	; 0xdf6a <conv_flt+0x20e>
    df5e:	f1 94       	neg	r15
    df60:	e1 94       	neg	r14
    df62:	f1 08       	sbc	r15, r1
    df64:	cf eb       	ldi	r28, 0xBF	; 191
    df66:	d3 e1       	ldi	r29, 0x13	; 19
    df68:	02 c0       	rjmp	.+4      	; 0xdf6e <conv_flt+0x212>
    df6a:	c7 ed       	ldi	r28, 0xD7	; 215
    df6c:	d3 e1       	ldi	r29, 0x13	; 19
    df6e:	6e 01       	movw	r12, r28
    df70:	28 e1       	ldi	r18, 0x18	; 24
    df72:	c2 1a       	sub	r12, r18
    df74:	d1 08       	sbc	r13, r1
    df76:	00 e2       	ldi	r16, 0x20	; 32
    df78:	10 e0       	ldi	r17, 0x00	; 0
    df7a:	e0 16       	cp	r14, r16
    df7c:	f1 06       	cpc	r15, r17
    df7e:	50 f0       	brcs	.+20     	; 0xdf94 <conv_flt+0x238>
    df80:	fe 01       	movw	r30, r28
    df82:	25 91       	lpm	r18, Z+
    df84:	35 91       	lpm	r19, Z+
    df86:	45 91       	lpm	r20, Z+
    df88:	54 91       	lpm	r21, Z
    df8a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    df8e:	e0 1a       	sub	r14, r16
    df90:	f1 0a       	sbc	r15, r17
    df92:	f3 cf       	rjmp	.-26     	; 0xdf7a <conv_flt+0x21e>
    df94:	24 97       	sbiw	r28, 0x04	; 4
    df96:	16 95       	lsr	r17
    df98:	07 95       	ror	r16
    df9a:	cc 16       	cp	r12, r28
    df9c:	dd 06       	cpc	r13, r29
    df9e:	69 f7       	brne	.-38     	; 0xdf7a <conv_flt+0x21e>
    dfa0:	97 fe       	sbrs	r9, 7
    dfa2:	05 c0       	rjmp	.+10     	; 0xdfae <conv_flt+0x252>
    dfa4:	dc 01       	movw	r26, r24
    dfa6:	cb 01       	movw	r24, r22
    dfa8:	b0 58       	subi	r27, 0x80	; 128
    dfaa:	bc 01       	movw	r22, r24
    dfac:	cd 01       	movw	r24, r26
    dfae:	21 14       	cp	r2, r1
    dfb0:	31 04       	cpc	r3, r1
    dfb2:	29 f0       	breq	.+10     	; 0xdfbe <conv_flt+0x262>
    dfb4:	f1 01       	movw	r30, r2
    dfb6:	60 83       	st	Z, r22
    dfb8:	71 83       	std	Z+1, r23	; 0x01
    dfba:	82 83       	std	Z+2, r24	; 0x02
    dfbc:	93 83       	std	Z+3, r25	; 0x03
    dfbe:	81 e0       	ldi	r24, 0x01	; 1
    dfc0:	df 91       	pop	r29
    dfc2:	cf 91       	pop	r28
    dfc4:	1f 91       	pop	r17
    dfc6:	0f 91       	pop	r16
    dfc8:	ff 90       	pop	r15
    dfca:	ef 90       	pop	r14
    dfcc:	df 90       	pop	r13
    dfce:	cf 90       	pop	r12
    dfd0:	bf 90       	pop	r11
    dfd2:	af 90       	pop	r10
    dfd4:	9f 90       	pop	r9
    dfd6:	7f 90       	pop	r7
    dfd8:	6f 90       	pop	r6
    dfda:	5f 90       	pop	r5
    dfdc:	4f 90       	pop	r4
    dfde:	3f 90       	pop	r3
    dfe0:	2f 90       	pop	r2
    dfe2:	08 95       	ret

0000dfe4 <vfscanf>:
    dfe4:	6f 92       	push	r6
    dfe6:	7f 92       	push	r7
    dfe8:	8f 92       	push	r8
    dfea:	9f 92       	push	r9
    dfec:	af 92       	push	r10
    dfee:	bf 92       	push	r11
    dff0:	cf 92       	push	r12
    dff2:	df 92       	push	r13
    dff4:	ef 92       	push	r14
    dff6:	ff 92       	push	r15
    dff8:	0f 93       	push	r16
    dffa:	1f 93       	push	r17
    dffc:	cf 93       	push	r28
    dffe:	df 93       	push	r29
    e000:	5c 01       	movw	r10, r24
    e002:	eb 01       	movw	r28, r22
    e004:	4a 01       	movw	r8, r20
    e006:	fc 01       	movw	r30, r24
    e008:	16 82       	std	Z+6, r1	; 0x06
    e00a:	17 82       	std	Z+7, r1	; 0x07
    e00c:	61 2c       	mov	r6, r1
    e00e:	f5 01       	movw	r30, r10
    e010:	03 81       	ldd	r16, Z+3	; 0x03
    e012:	fe 01       	movw	r30, r28
    e014:	03 fd       	sbrc	r16, 3
    e016:	85 91       	lpm	r24, Z+
    e018:	03 ff       	sbrs	r16, 3
    e01a:	81 91       	ld	r24, Z+
    e01c:	18 2f       	mov	r17, r24
    e01e:	ef 01       	movw	r28, r30
    e020:	88 23       	and	r24, r24
    e022:	09 f4       	brne	.+2      	; 0xe026 <vfscanf+0x42>
    e024:	0f c1       	rjmp	.+542    	; 0xe244 <vfscanf+0x260>
    e026:	90 e0       	ldi	r25, 0x00	; 0
    e028:	0e 94 b9 7c 	call	0xf972	; 0xf972 <isspace>
    e02c:	89 2b       	or	r24, r25
    e02e:	21 f0       	breq	.+8      	; 0xe038 <vfscanf+0x54>
    e030:	c5 01       	movw	r24, r10
    e032:	0e 94 1c 6d 	call	0xda38	; 0xda38 <skip_spaces>
    e036:	eb cf       	rjmp	.-42     	; 0xe00e <vfscanf+0x2a>
    e038:	15 32       	cpi	r17, 0x25	; 37
    e03a:	41 f4       	brne	.+16     	; 0xe04c <vfscanf+0x68>
    e03c:	fe 01       	movw	r30, r28
    e03e:	03 fd       	sbrc	r16, 3
    e040:	15 91       	lpm	r17, Z+
    e042:	03 ff       	sbrs	r16, 3
    e044:	11 91       	ld	r17, Z+
    e046:	ef 01       	movw	r28, r30
    e048:	15 32       	cpi	r17, 0x25	; 37
    e04a:	81 f4       	brne	.+32     	; 0xe06c <vfscanf+0x88>
    e04c:	c5 01       	movw	r24, r10
    e04e:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    e052:	97 fd       	sbrc	r25, 7
    e054:	f5 c0       	rjmp	.+490    	; 0xe240 <vfscanf+0x25c>
    e056:	41 2f       	mov	r20, r17
    e058:	50 e0       	ldi	r21, 0x00	; 0
    e05a:	9c 01       	movw	r18, r24
    e05c:	33 27       	eor	r19, r19
    e05e:	24 17       	cp	r18, r20
    e060:	35 07       	cpc	r19, r21
    e062:	a9 f2       	breq	.-86     	; 0xe00e <vfscanf+0x2a>
    e064:	b5 01       	movw	r22, r10
    e066:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    e06a:	ec c0       	rjmp	.+472    	; 0xe244 <vfscanf+0x260>
    e06c:	1a 32       	cpi	r17, 0x2A	; 42
    e06e:	41 f4       	brne	.+16     	; 0xe080 <vfscanf+0x9c>
    e070:	03 fd       	sbrc	r16, 3
    e072:	15 91       	lpm	r17, Z+
    e074:	03 ff       	sbrs	r16, 3
    e076:	11 91       	ld	r17, Z+
    e078:	ef 01       	movw	r28, r30
    e07a:	77 24       	eor	r7, r7
    e07c:	73 94       	inc	r7
    e07e:	01 c0       	rjmp	.+2      	; 0xe082 <vfscanf+0x9e>
    e080:	71 2c       	mov	r7, r1
    e082:	e1 2c       	mov	r14, r1
    e084:	f1 2c       	mov	r15, r1
    e086:	20 ed       	ldi	r18, 0xD0	; 208
    e088:	21 0f       	add	r18, r17
    e08a:	2a 30       	cpi	r18, 0x0A	; 10
    e08c:	88 f4       	brcc	.+34     	; 0xe0b0 <vfscanf+0xcc>
    e08e:	f7 2d       	mov	r31, r7
    e090:	f2 60       	ori	r31, 0x02	; 2
    e092:	7f 2e       	mov	r7, r31
    e094:	b7 01       	movw	r22, r14
    e096:	80 e0       	ldi	r24, 0x00	; 0
    e098:	90 e0       	ldi	r25, 0x00	; 0
    e09a:	40 e2       	ldi	r20, 0x20	; 32
    e09c:	0e 94 f5 6c 	call	0xd9ea	; 0xd9ea <mulacc>
    e0a0:	7b 01       	movw	r14, r22
    e0a2:	fe 01       	movw	r30, r28
    e0a4:	03 fd       	sbrc	r16, 3
    e0a6:	15 91       	lpm	r17, Z+
    e0a8:	03 ff       	sbrs	r16, 3
    e0aa:	11 91       	ld	r17, Z+
    e0ac:	ef 01       	movw	r28, r30
    e0ae:	eb cf       	rjmp	.-42     	; 0xe086 <vfscanf+0xa2>
    e0b0:	71 fe       	sbrs	r7, 1
    e0b2:	04 c0       	rjmp	.+8      	; 0xe0bc <vfscanf+0xd8>
    e0b4:	e1 14       	cp	r14, r1
    e0b6:	f1 04       	cpc	r15, r1
    e0b8:	21 f4       	brne	.+8      	; 0xe0c2 <vfscanf+0xde>
    e0ba:	c4 c0       	rjmp	.+392    	; 0xe244 <vfscanf+0x260>
    e0bc:	ee 24       	eor	r14, r14
    e0be:	ea 94       	dec	r14
    e0c0:	fe 2c       	mov	r15, r14
    e0c2:	18 36       	cpi	r17, 0x68	; 104
    e0c4:	19 f0       	breq	.+6      	; 0xe0cc <vfscanf+0xe8>
    e0c6:	1c 36       	cpi	r17, 0x6C	; 108
    e0c8:	61 f0       	breq	.+24     	; 0xe0e2 <vfscanf+0xfe>
    e0ca:	14 c0       	rjmp	.+40     	; 0xe0f4 <vfscanf+0x110>
    e0cc:	fe 01       	movw	r30, r28
    e0ce:	03 fd       	sbrc	r16, 3
    e0d0:	15 91       	lpm	r17, Z+
    e0d2:	03 ff       	sbrs	r16, 3
    e0d4:	11 91       	ld	r17, Z+
    e0d6:	ef 01       	movw	r28, r30
    e0d8:	18 36       	cpi	r17, 0x68	; 104
    e0da:	61 f4       	brne	.+24     	; 0xe0f4 <vfscanf+0x110>
    e0dc:	87 2d       	mov	r24, r7
    e0de:	88 60       	ori	r24, 0x08	; 8
    e0e0:	78 2e       	mov	r7, r24
    e0e2:	97 2d       	mov	r25, r7
    e0e4:	94 60       	ori	r25, 0x04	; 4
    e0e6:	79 2e       	mov	r7, r25
    e0e8:	fe 01       	movw	r30, r28
    e0ea:	03 fd       	sbrc	r16, 3
    e0ec:	15 91       	lpm	r17, Z+
    e0ee:	03 ff       	sbrs	r16, 3
    e0f0:	11 91       	ld	r17, Z+
    e0f2:	ef 01       	movw	r28, r30
    e0f4:	11 23       	and	r17, r17
    e0f6:	09 f4       	brne	.+2      	; 0xe0fa <vfscanf+0x116>
    e0f8:	a5 c0       	rjmp	.+330    	; 0xe244 <vfscanf+0x260>
    e0fa:	61 2f       	mov	r22, r17
    e0fc:	70 e0       	ldi	r23, 0x00	; 0
    e0fe:	8e e8       	ldi	r24, 0x8E	; 142
    e100:	93 e1       	ldi	r25, 0x13	; 19
    e102:	0e 94 ca 7c 	call	0xf994	; 0xf994 <strchr_P>
    e106:	89 2b       	or	r24, r25
    e108:	09 f4       	brne	.+2      	; 0xe10c <vfscanf+0x128>
    e10a:	9c c0       	rjmp	.+312    	; 0xe244 <vfscanf+0x260>
    e10c:	70 fc       	sbrc	r7, 0
    e10e:	07 c0       	rjmp	.+14     	; 0xe11e <vfscanf+0x13a>
    e110:	f4 01       	movw	r30, r8
    e112:	c0 80       	ld	r12, Z
    e114:	d1 80       	ldd	r13, Z+1	; 0x01
    e116:	c4 01       	movw	r24, r8
    e118:	02 96       	adiw	r24, 0x02	; 2
    e11a:	4c 01       	movw	r8, r24
    e11c:	02 c0       	rjmp	.+4      	; 0xe122 <vfscanf+0x13e>
    e11e:	c1 2c       	mov	r12, r1
    e120:	d1 2c       	mov	r13, r1
    e122:	1e 36       	cpi	r17, 0x6E	; 110
    e124:	51 f4       	brne	.+20     	; 0xe13a <vfscanf+0x156>
    e126:	f5 01       	movw	r30, r10
    e128:	46 81       	ldd	r20, Z+6	; 0x06
    e12a:	57 81       	ldd	r21, Z+7	; 0x07
    e12c:	60 e0       	ldi	r22, 0x00	; 0
    e12e:	70 e0       	ldi	r23, 0x00	; 0
    e130:	27 2d       	mov	r18, r7
    e132:	c6 01       	movw	r24, r12
    e134:	0e 94 e9 6c 	call	0xd9d2	; 0xd9d2 <putval>
    e138:	6a cf       	rjmp	.-300    	; 0xe00e <vfscanf+0x2a>
    e13a:	13 36       	cpi	r17, 0x63	; 99
    e13c:	b9 f4       	brne	.+46     	; 0xe16c <vfscanf+0x188>
    e13e:	71 fc       	sbrc	r7, 1
    e140:	03 c0       	rjmp	.+6      	; 0xe148 <vfscanf+0x164>
    e142:	ee 24       	eor	r14, r14
    e144:	e3 94       	inc	r14
    e146:	f1 2c       	mov	r15, r1
    e148:	c5 01       	movw	r24, r10
    e14a:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    e14e:	97 fd       	sbrc	r25, 7
    e150:	77 c0       	rjmp	.+238    	; 0xe240 <vfscanf+0x25c>
    e152:	c1 14       	cp	r12, r1
    e154:	d1 04       	cpc	r13, r1
    e156:	29 f0       	breq	.+10     	; 0xe162 <vfscanf+0x17e>
    e158:	f6 01       	movw	r30, r12
    e15a:	80 83       	st	Z, r24
    e15c:	c6 01       	movw	r24, r12
    e15e:	01 96       	adiw	r24, 0x01	; 1
    e160:	6c 01       	movw	r12, r24
    e162:	91 e0       	ldi	r25, 0x01	; 1
    e164:	e9 1a       	sub	r14, r25
    e166:	f1 08       	sbc	r15, r1
    e168:	79 f7       	brne	.-34     	; 0xe148 <vfscanf+0x164>
    e16a:	66 c0       	rjmp	.+204    	; 0xe238 <vfscanf+0x254>
    e16c:	1b 35       	cpi	r17, 0x5B	; 91
    e16e:	59 f4       	brne	.+22     	; 0xe186 <vfscanf+0x1a2>
    e170:	9e 01       	movw	r18, r28
    e172:	a6 01       	movw	r20, r12
    e174:	b7 01       	movw	r22, r14
    e176:	c5 01       	movw	r24, r10
    e178:	0e 94 cd 6d 	call	0xdb9a	; 0xdb9a <conv_brk>
    e17c:	ec 01       	movw	r28, r24
    e17e:	89 2b       	or	r24, r25
    e180:	09 f0       	breq	.+2      	; 0xe184 <vfscanf+0x1a0>
    e182:	5a c0       	rjmp	.+180    	; 0xe238 <vfscanf+0x254>
    e184:	54 c0       	rjmp	.+168    	; 0xe22e <vfscanf+0x24a>
    e186:	c5 01       	movw	r24, r10
    e188:	0e 94 1c 6d 	call	0xda38	; 0xda38 <skip_spaces>
    e18c:	97 fd       	sbrc	r25, 7
    e18e:	58 c0       	rjmp	.+176    	; 0xe240 <vfscanf+0x25c>
    e190:	1f 36       	cpi	r17, 0x6F	; 111
    e192:	e1 f1       	breq	.+120    	; 0xe20c <vfscanf+0x228>
    e194:	40 f4       	brcc	.+16     	; 0xe1a6 <vfscanf+0x1c2>
    e196:	14 36       	cpi	r17, 0x64	; 100
    e198:	a9 f1       	breq	.+106    	; 0xe204 <vfscanf+0x220>
    e19a:	19 36       	cpi	r17, 0x69	; 105
    e19c:	d1 f1       	breq	.+116    	; 0xe212 <vfscanf+0x22e>
    e19e:	18 35       	cpi	r17, 0x58	; 88
    e1a0:	09 f0       	breq	.+2      	; 0xe1a4 <vfscanf+0x1c0>
    e1a2:	3e c0       	rjmp	.+124    	; 0xe220 <vfscanf+0x23c>
    e1a4:	2b c0       	rjmp	.+86     	; 0xe1fc <vfscanf+0x218>
    e1a6:	13 37       	cpi	r17, 0x73	; 115
    e1a8:	a9 f0       	breq	.+42     	; 0xe1d4 <vfscanf+0x1f0>
    e1aa:	18 f4       	brcc	.+6      	; 0xe1b2 <vfscanf+0x1ce>
    e1ac:	10 37       	cpi	r17, 0x70	; 112
    e1ae:	31 f1       	breq	.+76     	; 0xe1fc <vfscanf+0x218>
    e1b0:	37 c0       	rjmp	.+110    	; 0xe220 <vfscanf+0x23c>
    e1b2:	15 37       	cpi	r17, 0x75	; 117
    e1b4:	39 f1       	breq	.+78     	; 0xe204 <vfscanf+0x220>
    e1b6:	18 37       	cpi	r17, 0x78	; 120
    e1b8:	09 f1       	breq	.+66     	; 0xe1fc <vfscanf+0x218>
    e1ba:	32 c0       	rjmp	.+100    	; 0xe220 <vfscanf+0x23c>
    e1bc:	c1 14       	cp	r12, r1
    e1be:	d1 04       	cpc	r13, r1
    e1c0:	29 f0       	breq	.+10     	; 0xe1cc <vfscanf+0x1e8>
    e1c2:	f6 01       	movw	r30, r12
    e1c4:	00 83       	st	Z, r16
    e1c6:	c6 01       	movw	r24, r12
    e1c8:	01 96       	adiw	r24, 0x01	; 1
    e1ca:	6c 01       	movw	r12, r24
    e1cc:	91 e0       	ldi	r25, 0x01	; 1
    e1ce:	e9 1a       	sub	r14, r25
    e1d0:	f1 08       	sbc	r15, r1
    e1d2:	71 f0       	breq	.+28     	; 0xe1f0 <vfscanf+0x20c>
    e1d4:	c5 01       	movw	r24, r10
    e1d6:	0e 94 5e 7d 	call	0xfabc	; 0xfabc <fgetc>
    e1da:	8c 01       	movw	r16, r24
    e1dc:	97 fd       	sbrc	r25, 7
    e1de:	08 c0       	rjmp	.+16     	; 0xe1f0 <vfscanf+0x20c>
    e1e0:	0e 94 b9 7c 	call	0xf972	; 0xf972 <isspace>
    e1e4:	89 2b       	or	r24, r25
    e1e6:	51 f3       	breq	.-44     	; 0xe1bc <vfscanf+0x1d8>
    e1e8:	b5 01       	movw	r22, r10
    e1ea:	c8 01       	movw	r24, r16
    e1ec:	0e 94 73 7e 	call	0xfce6	; 0xfce6 <ungetc>
    e1f0:	c1 14       	cp	r12, r1
    e1f2:	d1 04       	cpc	r13, r1
    e1f4:	09 f1       	breq	.+66     	; 0xe238 <vfscanf+0x254>
    e1f6:	f6 01       	movw	r30, r12
    e1f8:	10 82       	st	Z, r1
    e1fa:	1e c0       	rjmp	.+60     	; 0xe238 <vfscanf+0x254>
    e1fc:	f7 2d       	mov	r31, r7
    e1fe:	f0 64       	ori	r31, 0x40	; 64
    e200:	7f 2e       	mov	r7, r31
    e202:	07 c0       	rjmp	.+14     	; 0xe212 <vfscanf+0x22e>
    e204:	87 2d       	mov	r24, r7
    e206:	80 62       	ori	r24, 0x20	; 32
    e208:	78 2e       	mov	r7, r24
    e20a:	03 c0       	rjmp	.+6      	; 0xe212 <vfscanf+0x22e>
    e20c:	97 2d       	mov	r25, r7
    e20e:	90 61       	ori	r25, 0x10	; 16
    e210:	79 2e       	mov	r7, r25
    e212:	27 2d       	mov	r18, r7
    e214:	a6 01       	movw	r20, r12
    e216:	b7 01       	movw	r22, r14
    e218:	c5 01       	movw	r24, r10
    e21a:	0e 94 35 6d 	call	0xda6a	; 0xda6a <conv_int>
    e21e:	05 c0       	rjmp	.+10     	; 0xe22a <vfscanf+0x246>
    e220:	a6 01       	movw	r20, r12
    e222:	b7 01       	movw	r22, r14
    e224:	c5 01       	movw	r24, r10
    e226:	0e 94 ae 6e 	call	0xdd5c	; 0xdd5c <conv_flt>
    e22a:	81 11       	cpse	r24, r1
    e22c:	05 c0       	rjmp	.+10     	; 0xe238 <vfscanf+0x254>
    e22e:	f5 01       	movw	r30, r10
    e230:	83 81       	ldd	r24, Z+3	; 0x03
    e232:	80 73       	andi	r24, 0x30	; 48
    e234:	29 f4       	brne	.+10     	; 0xe240 <vfscanf+0x25c>
    e236:	06 c0       	rjmp	.+12     	; 0xe244 <vfscanf+0x260>
    e238:	70 fc       	sbrc	r7, 0
    e23a:	e9 ce       	rjmp	.-558    	; 0xe00e <vfscanf+0x2a>
    e23c:	63 94       	inc	r6
    e23e:	e7 ce       	rjmp	.-562    	; 0xe00e <vfscanf+0x2a>
    e240:	66 20       	and	r6, r6
    e242:	19 f0       	breq	.+6      	; 0xe24a <vfscanf+0x266>
    e244:	86 2d       	mov	r24, r6
    e246:	90 e0       	ldi	r25, 0x00	; 0
    e248:	02 c0       	rjmp	.+4      	; 0xe24e <vfscanf+0x26a>
    e24a:	8f ef       	ldi	r24, 0xFF	; 255
    e24c:	9f ef       	ldi	r25, 0xFF	; 255
    e24e:	df 91       	pop	r29
    e250:	cf 91       	pop	r28
    e252:	1f 91       	pop	r17
    e254:	0f 91       	pop	r16
    e256:	ff 90       	pop	r15
    e258:	ef 90       	pop	r14
    e25a:	df 90       	pop	r13
    e25c:	cf 90       	pop	r12
    e25e:	bf 90       	pop	r11
    e260:	af 90       	pop	r10
    e262:	9f 90       	pop	r9
    e264:	8f 90       	pop	r8
    e266:	7f 90       	pop	r7
    e268:	6f 90       	pop	r6
    e26a:	08 95       	ret

0000e26c <acos>:
    e26c:	9f 93       	push	r25
    e26e:	9f 77       	andi	r25, 0x7F	; 127
    e270:	0e 94 a3 73 	call	0xe746	; 0xe746 <__fp_arccos>
    e274:	0f 90       	pop	r0
    e276:	00 20       	and	r0, r0
    e278:	42 f4       	brpl	.+16     	; 0xe28a <acos+0x1e>
    e27a:	90 58       	subi	r25, 0x80	; 128
    e27c:	a2 ea       	ldi	r26, 0xA2	; 162
    e27e:	2a ed       	ldi	r18, 0xDA	; 218
    e280:	3f e0       	ldi	r19, 0x0F	; 15
    e282:	49 e4       	ldi	r20, 0x49	; 73
    e284:	50 e4       	ldi	r21, 0x40	; 64
    e286:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    e28a:	0c 94 5e 74 	jmp	0xe8bc	; 0xe8bc <__fp_round>

0000e28e <__subsf3>:
    e28e:	50 58       	subi	r21, 0x80	; 128

0000e290 <__addsf3>:
    e290:	bb 27       	eor	r27, r27
    e292:	aa 27       	eor	r26, r26
    e294:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    e298:	0c 94 5e 74 	jmp	0xe8bc	; 0xe8bc <__fp_round>
    e29c:	0e 94 25 74 	call	0xe84a	; 0xe84a <__fp_pscA>
    e2a0:	38 f0       	brcs	.+14     	; 0xe2b0 <__addsf3+0x20>
    e2a2:	0e 94 2c 74 	call	0xe858	; 0xe858 <__fp_pscB>
    e2a6:	20 f0       	brcs	.+8      	; 0xe2b0 <__addsf3+0x20>
    e2a8:	39 f4       	brne	.+14     	; 0xe2b8 <__addsf3+0x28>
    e2aa:	9f 3f       	cpi	r25, 0xFF	; 255
    e2ac:	19 f4       	brne	.+6      	; 0xe2b4 <__addsf3+0x24>
    e2ae:	26 f4       	brtc	.+8      	; 0xe2b8 <__addsf3+0x28>
    e2b0:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    e2b4:	0e f4       	brtc	.+2      	; 0xe2b8 <__addsf3+0x28>
    e2b6:	e0 95       	com	r30
    e2b8:	e7 fb       	bst	r30, 7
    e2ba:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>

0000e2be <__addsf3x>:
    e2be:	e9 2f       	mov	r30, r25
    e2c0:	0e 94 83 74 	call	0xe906	; 0xe906 <__fp_split3>
    e2c4:	58 f3       	brcs	.-42     	; 0xe29c <__addsf3+0xc>
    e2c6:	ba 17       	cp	r27, r26
    e2c8:	62 07       	cpc	r22, r18
    e2ca:	73 07       	cpc	r23, r19
    e2cc:	84 07       	cpc	r24, r20
    e2ce:	95 07       	cpc	r25, r21
    e2d0:	20 f0       	brcs	.+8      	; 0xe2da <__addsf3x+0x1c>
    e2d2:	79 f4       	brne	.+30     	; 0xe2f2 <__addsf3x+0x34>
    e2d4:	a6 f5       	brtc	.+104    	; 0xe33e <__addsf3x+0x80>
    e2d6:	0c 94 a5 74 	jmp	0xe94a	; 0xe94a <__fp_zero>
    e2da:	0e f4       	brtc	.+2      	; 0xe2de <__addsf3x+0x20>
    e2dc:	e0 95       	com	r30
    e2de:	0b 2e       	mov	r0, r27
    e2e0:	ba 2f       	mov	r27, r26
    e2e2:	a0 2d       	mov	r26, r0
    e2e4:	0b 01       	movw	r0, r22
    e2e6:	b9 01       	movw	r22, r18
    e2e8:	90 01       	movw	r18, r0
    e2ea:	0c 01       	movw	r0, r24
    e2ec:	ca 01       	movw	r24, r20
    e2ee:	a0 01       	movw	r20, r0
    e2f0:	11 24       	eor	r1, r1
    e2f2:	ff 27       	eor	r31, r31
    e2f4:	59 1b       	sub	r21, r25
    e2f6:	99 f0       	breq	.+38     	; 0xe31e <__addsf3x+0x60>
    e2f8:	59 3f       	cpi	r21, 0xF9	; 249
    e2fa:	50 f4       	brcc	.+20     	; 0xe310 <__addsf3x+0x52>
    e2fc:	50 3e       	cpi	r21, 0xE0	; 224
    e2fe:	68 f1       	brcs	.+90     	; 0xe35a <__addsf3x+0x9c>
    e300:	1a 16       	cp	r1, r26
    e302:	f0 40       	sbci	r31, 0x00	; 0
    e304:	a2 2f       	mov	r26, r18
    e306:	23 2f       	mov	r18, r19
    e308:	34 2f       	mov	r19, r20
    e30a:	44 27       	eor	r20, r20
    e30c:	58 5f       	subi	r21, 0xF8	; 248
    e30e:	f3 cf       	rjmp	.-26     	; 0xe2f6 <__addsf3x+0x38>
    e310:	46 95       	lsr	r20
    e312:	37 95       	ror	r19
    e314:	27 95       	ror	r18
    e316:	a7 95       	ror	r26
    e318:	f0 40       	sbci	r31, 0x00	; 0
    e31a:	53 95       	inc	r21
    e31c:	c9 f7       	brne	.-14     	; 0xe310 <__addsf3x+0x52>
    e31e:	7e f4       	brtc	.+30     	; 0xe33e <__addsf3x+0x80>
    e320:	1f 16       	cp	r1, r31
    e322:	ba 0b       	sbc	r27, r26
    e324:	62 0b       	sbc	r22, r18
    e326:	73 0b       	sbc	r23, r19
    e328:	84 0b       	sbc	r24, r20
    e32a:	ba f0       	brmi	.+46     	; 0xe35a <__addsf3x+0x9c>
    e32c:	91 50       	subi	r25, 0x01	; 1
    e32e:	a1 f0       	breq	.+40     	; 0xe358 <__addsf3x+0x9a>
    e330:	ff 0f       	add	r31, r31
    e332:	bb 1f       	adc	r27, r27
    e334:	66 1f       	adc	r22, r22
    e336:	77 1f       	adc	r23, r23
    e338:	88 1f       	adc	r24, r24
    e33a:	c2 f7       	brpl	.-16     	; 0xe32c <__addsf3x+0x6e>
    e33c:	0e c0       	rjmp	.+28     	; 0xe35a <__addsf3x+0x9c>
    e33e:	ba 0f       	add	r27, r26
    e340:	62 1f       	adc	r22, r18
    e342:	73 1f       	adc	r23, r19
    e344:	84 1f       	adc	r24, r20
    e346:	48 f4       	brcc	.+18     	; 0xe35a <__addsf3x+0x9c>
    e348:	87 95       	ror	r24
    e34a:	77 95       	ror	r23
    e34c:	67 95       	ror	r22
    e34e:	b7 95       	ror	r27
    e350:	f7 95       	ror	r31
    e352:	9e 3f       	cpi	r25, 0xFE	; 254
    e354:	08 f0       	brcs	.+2      	; 0xe358 <__addsf3x+0x9a>
    e356:	b0 cf       	rjmp	.-160    	; 0xe2b8 <__addsf3+0x28>
    e358:	93 95       	inc	r25
    e35a:	88 0f       	add	r24, r24
    e35c:	08 f0       	brcs	.+2      	; 0xe360 <__addsf3x+0xa2>
    e35e:	99 27       	eor	r25, r25
    e360:	ee 0f       	add	r30, r30
    e362:	97 95       	ror	r25
    e364:	87 95       	ror	r24
    e366:	08 95       	ret
    e368:	0e 94 25 74 	call	0xe84a	; 0xe84a <__fp_pscA>
    e36c:	60 f0       	brcs	.+24     	; 0xe386 <__addsf3x+0xc8>
    e36e:	80 e8       	ldi	r24, 0x80	; 128
    e370:	91 e0       	ldi	r25, 0x01	; 1
    e372:	09 f4       	brne	.+2      	; 0xe376 <__addsf3x+0xb8>
    e374:	9e ef       	ldi	r25, 0xFE	; 254
    e376:	0e 94 2c 74 	call	0xe858	; 0xe858 <__fp_pscB>
    e37a:	28 f0       	brcs	.+10     	; 0xe386 <__addsf3x+0xc8>
    e37c:	40 e8       	ldi	r20, 0x80	; 128
    e37e:	51 e0       	ldi	r21, 0x01	; 1
    e380:	71 f4       	brne	.+28     	; 0xe39e <atan2+0x10>
    e382:	5e ef       	ldi	r21, 0xFE	; 254
    e384:	0c c0       	rjmp	.+24     	; 0xe39e <atan2+0x10>
    e386:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    e38a:	0c 94 a5 74 	jmp	0xe94a	; 0xe94a <__fp_zero>

0000e38e <atan2>:
    e38e:	e9 2f       	mov	r30, r25
    e390:	e0 78       	andi	r30, 0x80	; 128
    e392:	0e 94 83 74 	call	0xe906	; 0xe906 <__fp_split3>
    e396:	40 f3       	brcs	.-48     	; 0xe368 <__addsf3x+0xaa>
    e398:	09 2e       	mov	r0, r25
    e39a:	05 2a       	or	r0, r21
    e39c:	b1 f3       	breq	.-20     	; 0xe38a <__addsf3x+0xcc>
    e39e:	26 17       	cp	r18, r22
    e3a0:	37 07       	cpc	r19, r23
    e3a2:	48 07       	cpc	r20, r24
    e3a4:	59 07       	cpc	r21, r25
    e3a6:	38 f0       	brcs	.+14     	; 0xe3b6 <atan2+0x28>
    e3a8:	0e 2e       	mov	r0, r30
    e3aa:	07 f8       	bld	r0, 7
    e3ac:	e0 25       	eor	r30, r0
    e3ae:	69 f0       	breq	.+26     	; 0xe3ca <atan2+0x3c>
    e3b0:	e0 25       	eor	r30, r0
    e3b2:	e0 64       	ori	r30, 0x40	; 64
    e3b4:	0a c0       	rjmp	.+20     	; 0xe3ca <atan2+0x3c>
    e3b6:	ef 63       	ori	r30, 0x3F	; 63
    e3b8:	07 f8       	bld	r0, 7
    e3ba:	00 94       	com	r0
    e3bc:	07 fa       	bst	r0, 7
    e3be:	db 01       	movw	r26, r22
    e3c0:	b9 01       	movw	r22, r18
    e3c2:	9d 01       	movw	r18, r26
    e3c4:	dc 01       	movw	r26, r24
    e3c6:	ca 01       	movw	r24, r20
    e3c8:	ad 01       	movw	r20, r26
    e3ca:	ef 93       	push	r30
    e3cc:	0e 94 47 72 	call	0xe48e	; 0xe48e <__divsf3_pse>
    e3d0:	0e 94 5e 74 	call	0xe8bc	; 0xe8bc <__fp_round>
    e3d4:	0e 94 f7 71 	call	0xe3ee	; 0xe3ee <atan>
    e3d8:	5f 91       	pop	r21
    e3da:	55 23       	and	r21, r21
    e3dc:	39 f0       	breq	.+14     	; 0xe3ec <atan2+0x5e>
    e3de:	2b ed       	ldi	r18, 0xDB	; 219
    e3e0:	3f e0       	ldi	r19, 0x0F	; 15
    e3e2:	49 e4       	ldi	r20, 0x49	; 73
    e3e4:	50 fd       	sbrc	r21, 0
    e3e6:	49 ec       	ldi	r20, 0xC9	; 201
    e3e8:	0c 94 48 71 	jmp	0xe290	; 0xe290 <__addsf3>
    e3ec:	08 95       	ret

0000e3ee <atan>:
    e3ee:	df 93       	push	r29
    e3f0:	dd 27       	eor	r29, r29
    e3f2:	b9 2f       	mov	r27, r25
    e3f4:	bf 77       	andi	r27, 0x7F	; 127
    e3f6:	40 e8       	ldi	r20, 0x80	; 128
    e3f8:	5f e3       	ldi	r21, 0x3F	; 63
    e3fa:	16 16       	cp	r1, r22
    e3fc:	17 06       	cpc	r1, r23
    e3fe:	48 07       	cpc	r20, r24
    e400:	5b 07       	cpc	r21, r27
    e402:	18 f4       	brcc	.+6      	; 0xe40a <atan+0x1c>
    e404:	d9 2f       	mov	r29, r25
    e406:	0e 94 1e 75 	call	0xea3c	; 0xea3c <inverse>
    e40a:	9f 93       	push	r25
    e40c:	8f 93       	push	r24
    e40e:	7f 93       	push	r23
    e410:	6f 93       	push	r22
    e412:	0e 94 ef 76 	call	0xedde	; 0xedde <square>
    e416:	ec e1       	ldi	r30, 0x1C	; 28
    e418:	f2 e0       	ldi	r31, 0x02	; 2
    e41a:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__fp_powser>
    e41e:	0e 94 5e 74 	call	0xe8bc	; 0xe8bc <__fp_round>
    e422:	2f 91       	pop	r18
    e424:	3f 91       	pop	r19
    e426:	4f 91       	pop	r20
    e428:	5f 91       	pop	r21
    e42a:	0e 94 f7 75 	call	0xebee	; 0xebee <__mulsf3x>
    e42e:	dd 23       	and	r29, r29
    e430:	51 f0       	breq	.+20     	; 0xe446 <atan+0x58>
    e432:	90 58       	subi	r25, 0x80	; 128
    e434:	a2 ea       	ldi	r26, 0xA2	; 162
    e436:	2a ed       	ldi	r18, 0xDA	; 218
    e438:	3f e0       	ldi	r19, 0x0F	; 15
    e43a:	49 ec       	ldi	r20, 0xC9	; 201
    e43c:	5f e3       	ldi	r21, 0x3F	; 63
    e43e:	d0 78       	andi	r29, 0x80	; 128
    e440:	5d 27       	eor	r21, r29
    e442:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    e446:	df 91       	pop	r29
    e448:	0c 94 5e 74 	jmp	0xe8bc	; 0xe8bc <__fp_round>

0000e44c <__cmpsf2>:
    e44c:	0e 94 c3 73 	call	0xe786	; 0xe786 <__fp_cmp>
    e450:	08 f4       	brcc	.+2      	; 0xe454 <__cmpsf2+0x8>
    e452:	81 e0       	ldi	r24, 0x01	; 1
    e454:	08 95       	ret

0000e456 <cos>:
    e456:	0e 94 35 74 	call	0xe86a	; 0xe86a <__fp_rempio2>
    e45a:	e3 95       	inc	r30
    e45c:	0c 94 6f 74 	jmp	0xe8de	; 0xe8de <__fp_sinus>

0000e460 <__divsf3>:
    e460:	0e 94 44 72 	call	0xe488	; 0xe488 <__divsf3x>
    e464:	0c 94 5e 74 	jmp	0xe8bc	; 0xe8bc <__fp_round>
    e468:	0e 94 2c 74 	call	0xe858	; 0xe858 <__fp_pscB>
    e46c:	58 f0       	brcs	.+22     	; 0xe484 <__divsf3+0x24>
    e46e:	0e 94 25 74 	call	0xe84a	; 0xe84a <__fp_pscA>
    e472:	40 f0       	brcs	.+16     	; 0xe484 <__divsf3+0x24>
    e474:	29 f4       	brne	.+10     	; 0xe480 <__divsf3+0x20>
    e476:	5f 3f       	cpi	r21, 0xFF	; 255
    e478:	29 f0       	breq	.+10     	; 0xe484 <__divsf3+0x24>
    e47a:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    e47e:	51 11       	cpse	r21, r1
    e480:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>
    e484:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>

0000e488 <__divsf3x>:
    e488:	0e 94 83 74 	call	0xe906	; 0xe906 <__fp_split3>
    e48c:	68 f3       	brcs	.-38     	; 0xe468 <__divsf3+0x8>

0000e48e <__divsf3_pse>:
    e48e:	99 23       	and	r25, r25
    e490:	b1 f3       	breq	.-20     	; 0xe47e <__divsf3+0x1e>
    e492:	55 23       	and	r21, r21
    e494:	91 f3       	breq	.-28     	; 0xe47a <__divsf3+0x1a>
    e496:	95 1b       	sub	r25, r21
    e498:	55 0b       	sbc	r21, r21
    e49a:	bb 27       	eor	r27, r27
    e49c:	aa 27       	eor	r26, r26
    e49e:	62 17       	cp	r22, r18
    e4a0:	73 07       	cpc	r23, r19
    e4a2:	84 07       	cpc	r24, r20
    e4a4:	38 f0       	brcs	.+14     	; 0xe4b4 <__divsf3_pse+0x26>
    e4a6:	9f 5f       	subi	r25, 0xFF	; 255
    e4a8:	5f 4f       	sbci	r21, 0xFF	; 255
    e4aa:	22 0f       	add	r18, r18
    e4ac:	33 1f       	adc	r19, r19
    e4ae:	44 1f       	adc	r20, r20
    e4b0:	aa 1f       	adc	r26, r26
    e4b2:	a9 f3       	breq	.-22     	; 0xe49e <__divsf3_pse+0x10>
    e4b4:	35 d0       	rcall	.+106    	; 0xe520 <__divsf3_pse+0x92>
    e4b6:	0e 2e       	mov	r0, r30
    e4b8:	3a f0       	brmi	.+14     	; 0xe4c8 <__divsf3_pse+0x3a>
    e4ba:	e0 e8       	ldi	r30, 0x80	; 128
    e4bc:	32 d0       	rcall	.+100    	; 0xe522 <__divsf3_pse+0x94>
    e4be:	91 50       	subi	r25, 0x01	; 1
    e4c0:	50 40       	sbci	r21, 0x00	; 0
    e4c2:	e6 95       	lsr	r30
    e4c4:	00 1c       	adc	r0, r0
    e4c6:	ca f7       	brpl	.-14     	; 0xe4ba <__divsf3_pse+0x2c>
    e4c8:	2b d0       	rcall	.+86     	; 0xe520 <__divsf3_pse+0x92>
    e4ca:	fe 2f       	mov	r31, r30
    e4cc:	29 d0       	rcall	.+82     	; 0xe520 <__divsf3_pse+0x92>
    e4ce:	66 0f       	add	r22, r22
    e4d0:	77 1f       	adc	r23, r23
    e4d2:	88 1f       	adc	r24, r24
    e4d4:	bb 1f       	adc	r27, r27
    e4d6:	26 17       	cp	r18, r22
    e4d8:	37 07       	cpc	r19, r23
    e4da:	48 07       	cpc	r20, r24
    e4dc:	ab 07       	cpc	r26, r27
    e4de:	b0 e8       	ldi	r27, 0x80	; 128
    e4e0:	09 f0       	breq	.+2      	; 0xe4e4 <__divsf3_pse+0x56>
    e4e2:	bb 0b       	sbc	r27, r27
    e4e4:	80 2d       	mov	r24, r0
    e4e6:	bf 01       	movw	r22, r30
    e4e8:	ff 27       	eor	r31, r31
    e4ea:	93 58       	subi	r25, 0x83	; 131
    e4ec:	5f 4f       	sbci	r21, 0xFF	; 255
    e4ee:	3a f0       	brmi	.+14     	; 0xe4fe <__divsf3_pse+0x70>
    e4f0:	9e 3f       	cpi	r25, 0xFE	; 254
    e4f2:	51 05       	cpc	r21, r1
    e4f4:	78 f0       	brcs	.+30     	; 0xe514 <__divsf3_pse+0x86>
    e4f6:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    e4fa:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>
    e4fe:	5f 3f       	cpi	r21, 0xFF	; 255
    e500:	e4 f3       	brlt	.-8      	; 0xe4fa <__divsf3_pse+0x6c>
    e502:	98 3e       	cpi	r25, 0xE8	; 232
    e504:	d4 f3       	brlt	.-12     	; 0xe4fa <__divsf3_pse+0x6c>
    e506:	86 95       	lsr	r24
    e508:	77 95       	ror	r23
    e50a:	67 95       	ror	r22
    e50c:	b7 95       	ror	r27
    e50e:	f7 95       	ror	r31
    e510:	9f 5f       	subi	r25, 0xFF	; 255
    e512:	c9 f7       	brne	.-14     	; 0xe506 <__divsf3_pse+0x78>
    e514:	88 0f       	add	r24, r24
    e516:	91 1d       	adc	r25, r1
    e518:	96 95       	lsr	r25
    e51a:	87 95       	ror	r24
    e51c:	97 f9       	bld	r25, 7
    e51e:	08 95       	ret
    e520:	e1 e0       	ldi	r30, 0x01	; 1
    e522:	66 0f       	add	r22, r22
    e524:	77 1f       	adc	r23, r23
    e526:	88 1f       	adc	r24, r24
    e528:	bb 1f       	adc	r27, r27
    e52a:	62 17       	cp	r22, r18
    e52c:	73 07       	cpc	r23, r19
    e52e:	84 07       	cpc	r24, r20
    e530:	ba 07       	cpc	r27, r26
    e532:	20 f0       	brcs	.+8      	; 0xe53c <__divsf3_pse+0xae>
    e534:	62 1b       	sub	r22, r18
    e536:	73 0b       	sbc	r23, r19
    e538:	84 0b       	sbc	r24, r20
    e53a:	ba 0b       	sbc	r27, r26
    e53c:	ee 1f       	adc	r30, r30
    e53e:	88 f7       	brcc	.-30     	; 0xe522 <__divsf3_pse+0x94>
    e540:	e0 95       	com	r30
    e542:	08 95       	ret
    e544:	29 f4       	brne	.+10     	; 0xe550 <__divsf3_pse+0xc2>
    e546:	16 f0       	brts	.+4      	; 0xe54c <__divsf3_pse+0xbe>
    e548:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    e54c:	0c 94 a5 74 	jmp	0xe94a	; 0xe94a <__fp_zero>
    e550:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>

0000e554 <exp>:
    e554:	0e 94 8b 74 	call	0xe916	; 0xe916 <__fp_splitA>
    e558:	a8 f3       	brcs	.-22     	; 0xe544 <__divsf3_pse+0xb6>
    e55a:	96 38       	cpi	r25, 0x86	; 134
    e55c:	a0 f7       	brcc	.-24     	; 0xe546 <__divsf3_pse+0xb8>
    e55e:	07 f8       	bld	r0, 7
    e560:	0f 92       	push	r0
    e562:	e8 94       	clt
    e564:	2b e3       	ldi	r18, 0x3B	; 59
    e566:	3a ea       	ldi	r19, 0xAA	; 170
    e568:	48 eb       	ldi	r20, 0xB8	; 184
    e56a:	5f e7       	ldi	r21, 0x7F	; 127
    e56c:	0e 94 fa 75 	call	0xebf4	; 0xebf4 <__mulsf3_pse>
    e570:	0f 92       	push	r0
    e572:	0f 92       	push	r0
    e574:	0f 92       	push	r0
    e576:	4d b7       	in	r20, 0x3d	; 61
    e578:	5e b7       	in	r21, 0x3e	; 62
    e57a:	0f 92       	push	r0
    e57c:	0e 94 b0 75 	call	0xeb60	; 0xeb60 <modf>
    e580:	e9 e4       	ldi	r30, 0x49	; 73
    e582:	f2 e0       	ldi	r31, 0x02	; 2
    e584:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__fp_powser>
    e588:	4f 91       	pop	r20
    e58a:	5f 91       	pop	r21
    e58c:	ef 91       	pop	r30
    e58e:	ff 91       	pop	r31
    e590:	e5 95       	asr	r30
    e592:	ee 1f       	adc	r30, r30
    e594:	ff 1f       	adc	r31, r31
    e596:	49 f0       	breq	.+18     	; 0xe5aa <exp+0x56>
    e598:	fe 57       	subi	r31, 0x7E	; 126
    e59a:	e0 68       	ori	r30, 0x80	; 128
    e59c:	44 27       	eor	r20, r20
    e59e:	ee 0f       	add	r30, r30
    e5a0:	44 1f       	adc	r20, r20
    e5a2:	fa 95       	dec	r31
    e5a4:	e1 f7       	brne	.-8      	; 0xe59e <exp+0x4a>
    e5a6:	41 95       	neg	r20
    e5a8:	55 0b       	sbc	r21, r21
    e5aa:	0e 94 2a 75 	call	0xea54	; 0xea54 <ldexp>
    e5ae:	0f 90       	pop	r0
    e5b0:	07 fe       	sbrs	r0, 7
    e5b2:	0c 94 1e 75 	jmp	0xea3c	; 0xea3c <inverse>
    e5b6:	08 95       	ret

0000e5b8 <__fixsfsi>:
    e5b8:	0e 94 e3 72 	call	0xe5c6	; 0xe5c6 <__fixunssfsi>
    e5bc:	68 94       	set
    e5be:	b1 11       	cpse	r27, r1
    e5c0:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>
    e5c4:	08 95       	ret

0000e5c6 <__fixunssfsi>:
    e5c6:	0e 94 8b 74 	call	0xe916	; 0xe916 <__fp_splitA>
    e5ca:	88 f0       	brcs	.+34     	; 0xe5ee <__fixunssfsi+0x28>
    e5cc:	9f 57       	subi	r25, 0x7F	; 127
    e5ce:	98 f0       	brcs	.+38     	; 0xe5f6 <__fixunssfsi+0x30>
    e5d0:	b9 2f       	mov	r27, r25
    e5d2:	99 27       	eor	r25, r25
    e5d4:	b7 51       	subi	r27, 0x17	; 23
    e5d6:	b0 f0       	brcs	.+44     	; 0xe604 <__fixunssfsi+0x3e>
    e5d8:	e1 f0       	breq	.+56     	; 0xe612 <__fixunssfsi+0x4c>
    e5da:	66 0f       	add	r22, r22
    e5dc:	77 1f       	adc	r23, r23
    e5de:	88 1f       	adc	r24, r24
    e5e0:	99 1f       	adc	r25, r25
    e5e2:	1a f0       	brmi	.+6      	; 0xe5ea <__fixunssfsi+0x24>
    e5e4:	ba 95       	dec	r27
    e5e6:	c9 f7       	brne	.-14     	; 0xe5da <__fixunssfsi+0x14>
    e5e8:	14 c0       	rjmp	.+40     	; 0xe612 <__fixunssfsi+0x4c>
    e5ea:	b1 30       	cpi	r27, 0x01	; 1
    e5ec:	91 f0       	breq	.+36     	; 0xe612 <__fixunssfsi+0x4c>
    e5ee:	0e 94 a5 74 	call	0xe94a	; 0xe94a <__fp_zero>
    e5f2:	b1 e0       	ldi	r27, 0x01	; 1
    e5f4:	08 95       	ret
    e5f6:	0c 94 a5 74 	jmp	0xe94a	; 0xe94a <__fp_zero>
    e5fa:	67 2f       	mov	r22, r23
    e5fc:	78 2f       	mov	r23, r24
    e5fe:	88 27       	eor	r24, r24
    e600:	b8 5f       	subi	r27, 0xF8	; 248
    e602:	39 f0       	breq	.+14     	; 0xe612 <__fixunssfsi+0x4c>
    e604:	b9 3f       	cpi	r27, 0xF9	; 249
    e606:	cc f3       	brlt	.-14     	; 0xe5fa <__fixunssfsi+0x34>
    e608:	86 95       	lsr	r24
    e60a:	77 95       	ror	r23
    e60c:	67 95       	ror	r22
    e60e:	b3 95       	inc	r27
    e610:	d9 f7       	brne	.-10     	; 0xe608 <__fixunssfsi+0x42>
    e612:	3e f4       	brtc	.+14     	; 0xe622 <__fixunssfsi+0x5c>
    e614:	90 95       	com	r25
    e616:	80 95       	com	r24
    e618:	70 95       	com	r23
    e61a:	61 95       	neg	r22
    e61c:	7f 4f       	sbci	r23, 0xFF	; 255
    e61e:	8f 4f       	sbci	r24, 0xFF	; 255
    e620:	9f 4f       	sbci	r25, 0xFF	; 255
    e622:	08 95       	ret

0000e624 <__floatunsisf>:
    e624:	e8 94       	clt
    e626:	09 c0       	rjmp	.+18     	; 0xe63a <__floatsisf+0x12>

0000e628 <__floatsisf>:
    e628:	97 fb       	bst	r25, 7
    e62a:	3e f4       	brtc	.+14     	; 0xe63a <__floatsisf+0x12>
    e62c:	90 95       	com	r25
    e62e:	80 95       	com	r24
    e630:	70 95       	com	r23
    e632:	61 95       	neg	r22
    e634:	7f 4f       	sbci	r23, 0xFF	; 255
    e636:	8f 4f       	sbci	r24, 0xFF	; 255
    e638:	9f 4f       	sbci	r25, 0xFF	; 255
    e63a:	99 23       	and	r25, r25
    e63c:	a9 f0       	breq	.+42     	; 0xe668 <__floatsisf+0x40>
    e63e:	f9 2f       	mov	r31, r25
    e640:	96 e9       	ldi	r25, 0x96	; 150
    e642:	bb 27       	eor	r27, r27
    e644:	93 95       	inc	r25
    e646:	f6 95       	lsr	r31
    e648:	87 95       	ror	r24
    e64a:	77 95       	ror	r23
    e64c:	67 95       	ror	r22
    e64e:	b7 95       	ror	r27
    e650:	f1 11       	cpse	r31, r1
    e652:	f8 cf       	rjmp	.-16     	; 0xe644 <__floatsisf+0x1c>
    e654:	fa f4       	brpl	.+62     	; 0xe694 <__floatsisf+0x6c>
    e656:	bb 0f       	add	r27, r27
    e658:	11 f4       	brne	.+4      	; 0xe65e <__floatsisf+0x36>
    e65a:	60 ff       	sbrs	r22, 0
    e65c:	1b c0       	rjmp	.+54     	; 0xe694 <__floatsisf+0x6c>
    e65e:	6f 5f       	subi	r22, 0xFF	; 255
    e660:	7f 4f       	sbci	r23, 0xFF	; 255
    e662:	8f 4f       	sbci	r24, 0xFF	; 255
    e664:	9f 4f       	sbci	r25, 0xFF	; 255
    e666:	16 c0       	rjmp	.+44     	; 0xe694 <__floatsisf+0x6c>
    e668:	88 23       	and	r24, r24
    e66a:	11 f0       	breq	.+4      	; 0xe670 <__floatsisf+0x48>
    e66c:	96 e9       	ldi	r25, 0x96	; 150
    e66e:	11 c0       	rjmp	.+34     	; 0xe692 <__floatsisf+0x6a>
    e670:	77 23       	and	r23, r23
    e672:	21 f0       	breq	.+8      	; 0xe67c <__floatsisf+0x54>
    e674:	9e e8       	ldi	r25, 0x8E	; 142
    e676:	87 2f       	mov	r24, r23
    e678:	76 2f       	mov	r23, r22
    e67a:	05 c0       	rjmp	.+10     	; 0xe686 <__floatsisf+0x5e>
    e67c:	66 23       	and	r22, r22
    e67e:	71 f0       	breq	.+28     	; 0xe69c <__floatsisf+0x74>
    e680:	96 e8       	ldi	r25, 0x86	; 134
    e682:	86 2f       	mov	r24, r22
    e684:	70 e0       	ldi	r23, 0x00	; 0
    e686:	60 e0       	ldi	r22, 0x00	; 0
    e688:	2a f0       	brmi	.+10     	; 0xe694 <__floatsisf+0x6c>
    e68a:	9a 95       	dec	r25
    e68c:	66 0f       	add	r22, r22
    e68e:	77 1f       	adc	r23, r23
    e690:	88 1f       	adc	r24, r24
    e692:	da f7       	brpl	.-10     	; 0xe68a <__floatsisf+0x62>
    e694:	88 0f       	add	r24, r24
    e696:	96 95       	lsr	r25
    e698:	87 95       	ror	r24
    e69a:	97 f9       	bld	r25, 7
    e69c:	08 95       	ret
    e69e:	0e 94 25 74 	call	0xe84a	; 0xe84a <__fp_pscA>
    e6a2:	20 f0       	brcs	.+8      	; 0xe6ac <__floatsisf+0x84>
    e6a4:	19 f0       	breq	.+6      	; 0xe6ac <__floatsisf+0x84>
    e6a6:	0e 94 2c 74 	call	0xe858	; 0xe858 <__fp_pscB>
    e6aa:	50 f4       	brcc	.+20     	; 0xe6c0 <fmod+0xc>
    e6ac:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    e6b0:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>

0000e6b4 <fmod>:
    e6b4:	e9 2f       	mov	r30, r25
    e6b6:	0e 94 83 74 	call	0xe906	; 0xe906 <__fp_split3>
    e6ba:	88 f3       	brcs	.-30     	; 0xe69e <__floatsisf+0x76>
    e6bc:	55 23       	and	r21, r21
    e6be:	b1 f3       	breq	.-20     	; 0xe6ac <__floatsisf+0x84>
    e6c0:	e7 fb       	bst	r30, 7
    e6c2:	62 17       	cp	r22, r18
    e6c4:	73 07       	cpc	r23, r19
    e6c6:	84 07       	cpc	r24, r20
    e6c8:	95 07       	cpc	r25, r21
    e6ca:	a8 f1       	brcs	.+106    	; 0xe736 <fmod+0x82>
    e6cc:	89 f3       	breq	.-30     	; 0xe6b0 <__floatsisf+0x88>
    e6ce:	e9 2f       	mov	r30, r25
    e6d0:	ff 27       	eor	r31, r31
    e6d2:	88 23       	and	r24, r24
    e6d4:	2a f0       	brmi	.+10     	; 0xe6e0 <fmod+0x2c>
    e6d6:	31 97       	sbiw	r30, 0x01	; 1
    e6d8:	66 0f       	add	r22, r22
    e6da:	77 1f       	adc	r23, r23
    e6dc:	88 1f       	adc	r24, r24
    e6de:	da f7       	brpl	.-10     	; 0xe6d6 <fmod+0x22>
    e6e0:	95 2f       	mov	r25, r21
    e6e2:	55 27       	eor	r21, r21
    e6e4:	44 23       	and	r20, r20
    e6e6:	32 f0       	brmi	.+12     	; 0xe6f4 <fmod+0x40>
    e6e8:	91 50       	subi	r25, 0x01	; 1
    e6ea:	50 40       	sbci	r21, 0x00	; 0
    e6ec:	22 0f       	add	r18, r18
    e6ee:	33 1f       	adc	r19, r19
    e6f0:	44 1f       	adc	r20, r20
    e6f2:	d2 f7       	brpl	.-12     	; 0xe6e8 <fmod+0x34>
    e6f4:	bb 27       	eor	r27, r27
    e6f6:	e9 1b       	sub	r30, r25
    e6f8:	f5 0b       	sbc	r31, r21
    e6fa:	62 1b       	sub	r22, r18
    e6fc:	73 0b       	sbc	r23, r19
    e6fe:	84 0b       	sbc	r24, r20
    e700:	b1 09       	sbc	r27, r1
    e702:	b1 f2       	breq	.-84     	; 0xe6b0 <__floatsisf+0x88>
    e704:	22 f4       	brpl	.+8      	; 0xe70e <fmod+0x5a>
    e706:	62 0f       	add	r22, r18
    e708:	73 1f       	adc	r23, r19
    e70a:	84 1f       	adc	r24, r20
    e70c:	b1 1d       	adc	r27, r1
    e70e:	31 97       	sbiw	r30, 0x01	; 1
    e710:	2a f0       	brmi	.+10     	; 0xe71c <fmod+0x68>
    e712:	66 0f       	add	r22, r22
    e714:	77 1f       	adc	r23, r23
    e716:	88 1f       	adc	r24, r24
    e718:	bb 1f       	adc	r27, r27
    e71a:	ef cf       	rjmp	.-34     	; 0xe6fa <fmod+0x46>
    e71c:	91 50       	subi	r25, 0x01	; 1
    e71e:	50 40       	sbci	r21, 0x00	; 0
    e720:	62 f0       	brmi	.+24     	; 0xe73a <fmod+0x86>
    e722:	41 f0       	breq	.+16     	; 0xe734 <fmod+0x80>
    e724:	88 23       	and	r24, r24
    e726:	32 f0       	brmi	.+12     	; 0xe734 <fmod+0x80>
    e728:	66 0f       	add	r22, r22
    e72a:	77 1f       	adc	r23, r23
    e72c:	88 1f       	adc	r24, r24
    e72e:	91 50       	subi	r25, 0x01	; 1
    e730:	50 40       	sbci	r21, 0x00	; 0
    e732:	c1 f7       	brne	.-16     	; 0xe724 <fmod+0x70>
    e734:	93 95       	inc	r25
    e736:	0c 94 ed 73 	jmp	0xe7da	; 0xe7da <__fp_mpack>
    e73a:	86 95       	lsr	r24
    e73c:	77 95       	ror	r23
    e73e:	67 95       	ror	r22
    e740:	9f 5f       	subi	r25, 0xFF	; 255
    e742:	d9 f7       	brne	.-10     	; 0xe73a <fmod+0x86>
    e744:	f7 cf       	rjmp	.-18     	; 0xe734 <fmod+0x80>

0000e746 <__fp_arccos>:
    e746:	df 93       	push	r29
    e748:	cf 93       	push	r28
    e74a:	1f 93       	push	r17
    e74c:	0f 93       	push	r16
    e74e:	8b 01       	movw	r16, r22
    e750:	ec 01       	movw	r28, r24
    e752:	e1 e7       	ldi	r30, 0x71	; 113
    e754:	f2 e0       	ldi	r31, 0x02	; 2
    e756:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__fp_powser>
    e75a:	0e 94 5e 74 	call	0xe8bc	; 0xe8bc <__fp_round>
    e75e:	98 01       	movw	r18, r16
    e760:	ae 01       	movw	r20, r28
    e762:	8b 01       	movw	r16, r22
    e764:	ec 01       	movw	r28, r24
    e766:	60 e0       	ldi	r22, 0x00	; 0
    e768:	70 e0       	ldi	r23, 0x00	; 0
    e76a:	80 e8       	ldi	r24, 0x80	; 128
    e76c:	9f e3       	ldi	r25, 0x3F	; 63
    e76e:	0e 94 47 71 	call	0xe28e	; 0xe28e <__subsf3>
    e772:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    e776:	98 01       	movw	r18, r16
    e778:	ae 01       	movw	r20, r28
    e77a:	0f 91       	pop	r16
    e77c:	1f 91       	pop	r17
    e77e:	cf 91       	pop	r28
    e780:	df 91       	pop	r29
    e782:	0c 94 f7 75 	jmp	0xebee	; 0xebee <__mulsf3x>

0000e786 <__fp_cmp>:
    e786:	99 0f       	add	r25, r25
    e788:	00 08       	sbc	r0, r0
    e78a:	55 0f       	add	r21, r21
    e78c:	aa 0b       	sbc	r26, r26
    e78e:	e0 e8       	ldi	r30, 0x80	; 128
    e790:	fe ef       	ldi	r31, 0xFE	; 254
    e792:	16 16       	cp	r1, r22
    e794:	17 06       	cpc	r1, r23
    e796:	e8 07       	cpc	r30, r24
    e798:	f9 07       	cpc	r31, r25
    e79a:	c0 f0       	brcs	.+48     	; 0xe7cc <__fp_cmp+0x46>
    e79c:	12 16       	cp	r1, r18
    e79e:	13 06       	cpc	r1, r19
    e7a0:	e4 07       	cpc	r30, r20
    e7a2:	f5 07       	cpc	r31, r21
    e7a4:	98 f0       	brcs	.+38     	; 0xe7cc <__fp_cmp+0x46>
    e7a6:	62 1b       	sub	r22, r18
    e7a8:	73 0b       	sbc	r23, r19
    e7aa:	84 0b       	sbc	r24, r20
    e7ac:	95 0b       	sbc	r25, r21
    e7ae:	39 f4       	brne	.+14     	; 0xe7be <__fp_cmp+0x38>
    e7b0:	0a 26       	eor	r0, r26
    e7b2:	61 f0       	breq	.+24     	; 0xe7cc <__fp_cmp+0x46>
    e7b4:	23 2b       	or	r18, r19
    e7b6:	24 2b       	or	r18, r20
    e7b8:	25 2b       	or	r18, r21
    e7ba:	21 f4       	brne	.+8      	; 0xe7c4 <__fp_cmp+0x3e>
    e7bc:	08 95       	ret
    e7be:	0a 26       	eor	r0, r26
    e7c0:	09 f4       	brne	.+2      	; 0xe7c4 <__fp_cmp+0x3e>
    e7c2:	a1 40       	sbci	r26, 0x01	; 1
    e7c4:	a6 95       	lsr	r26
    e7c6:	8f ef       	ldi	r24, 0xFF	; 255
    e7c8:	81 1d       	adc	r24, r1
    e7ca:	81 1d       	adc	r24, r1
    e7cc:	08 95       	ret

0000e7ce <__fp_inf>:
    e7ce:	97 f9       	bld	r25, 7
    e7d0:	9f 67       	ori	r25, 0x7F	; 127
    e7d2:	80 e8       	ldi	r24, 0x80	; 128
    e7d4:	70 e0       	ldi	r23, 0x00	; 0
    e7d6:	60 e0       	ldi	r22, 0x00	; 0
    e7d8:	08 95       	ret

0000e7da <__fp_mpack>:
    e7da:	9f 3f       	cpi	r25, 0xFF	; 255
    e7dc:	31 f0       	breq	.+12     	; 0xe7ea <__fp_mpack_finite+0xc>

0000e7de <__fp_mpack_finite>:
    e7de:	91 50       	subi	r25, 0x01	; 1
    e7e0:	20 f4       	brcc	.+8      	; 0xe7ea <__fp_mpack_finite+0xc>
    e7e2:	87 95       	ror	r24
    e7e4:	77 95       	ror	r23
    e7e6:	67 95       	ror	r22
    e7e8:	b7 95       	ror	r27
    e7ea:	88 0f       	add	r24, r24
    e7ec:	91 1d       	adc	r25, r1
    e7ee:	96 95       	lsr	r25
    e7f0:	87 95       	ror	r24
    e7f2:	97 f9       	bld	r25, 7
    e7f4:	08 95       	ret

0000e7f6 <__fp_nan>:
    e7f6:	9f ef       	ldi	r25, 0xFF	; 255
    e7f8:	80 ec       	ldi	r24, 0xC0	; 192
    e7fa:	08 95       	ret

0000e7fc <__fp_powser>:
    e7fc:	df 93       	push	r29
    e7fe:	cf 93       	push	r28
    e800:	1f 93       	push	r17
    e802:	0f 93       	push	r16
    e804:	ff 92       	push	r15
    e806:	ef 92       	push	r14
    e808:	df 92       	push	r13
    e80a:	7b 01       	movw	r14, r22
    e80c:	8c 01       	movw	r16, r24
    e80e:	68 94       	set
    e810:	06 c0       	rjmp	.+12     	; 0xe81e <__fp_powser+0x22>
    e812:	da 2e       	mov	r13, r26
    e814:	ef 01       	movw	r28, r30
    e816:	0e 94 f7 75 	call	0xebee	; 0xebee <__mulsf3x>
    e81a:	fe 01       	movw	r30, r28
    e81c:	e8 94       	clt
    e81e:	a5 91       	lpm	r26, Z+
    e820:	25 91       	lpm	r18, Z+
    e822:	35 91       	lpm	r19, Z+
    e824:	45 91       	lpm	r20, Z+
    e826:	55 91       	lpm	r21, Z+
    e828:	a6 f3       	brts	.-24     	; 0xe812 <__fp_powser+0x16>
    e82a:	ef 01       	movw	r28, r30
    e82c:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    e830:	fe 01       	movw	r30, r28
    e832:	97 01       	movw	r18, r14
    e834:	a8 01       	movw	r20, r16
    e836:	da 94       	dec	r13
    e838:	69 f7       	brne	.-38     	; 0xe814 <__fp_powser+0x18>
    e83a:	df 90       	pop	r13
    e83c:	ef 90       	pop	r14
    e83e:	ff 90       	pop	r15
    e840:	0f 91       	pop	r16
    e842:	1f 91       	pop	r17
    e844:	cf 91       	pop	r28
    e846:	df 91       	pop	r29
    e848:	08 95       	ret

0000e84a <__fp_pscA>:
    e84a:	00 24       	eor	r0, r0
    e84c:	0a 94       	dec	r0
    e84e:	16 16       	cp	r1, r22
    e850:	17 06       	cpc	r1, r23
    e852:	18 06       	cpc	r1, r24
    e854:	09 06       	cpc	r0, r25
    e856:	08 95       	ret

0000e858 <__fp_pscB>:
    e858:	00 24       	eor	r0, r0
    e85a:	0a 94       	dec	r0
    e85c:	12 16       	cp	r1, r18
    e85e:	13 06       	cpc	r1, r19
    e860:	14 06       	cpc	r1, r20
    e862:	05 06       	cpc	r0, r21
    e864:	08 95       	ret
    e866:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>

0000e86a <__fp_rempio2>:
    e86a:	0e 94 8b 74 	call	0xe916	; 0xe916 <__fp_splitA>
    e86e:	d8 f3       	brcs	.-10     	; 0xe866 <__fp_pscB+0xe>
    e870:	e8 94       	clt
    e872:	e0 e0       	ldi	r30, 0x00	; 0
    e874:	bb 27       	eor	r27, r27
    e876:	9f 57       	subi	r25, 0x7F	; 127
    e878:	f0 f0       	brcs	.+60     	; 0xe8b6 <__fp_rempio2+0x4c>
    e87a:	2a ed       	ldi	r18, 0xDA	; 218
    e87c:	3f e0       	ldi	r19, 0x0F	; 15
    e87e:	49 ec       	ldi	r20, 0xC9	; 201
    e880:	06 c0       	rjmp	.+12     	; 0xe88e <__fp_rempio2+0x24>
    e882:	ee 0f       	add	r30, r30
    e884:	bb 0f       	add	r27, r27
    e886:	66 1f       	adc	r22, r22
    e888:	77 1f       	adc	r23, r23
    e88a:	88 1f       	adc	r24, r24
    e88c:	28 f0       	brcs	.+10     	; 0xe898 <__fp_rempio2+0x2e>
    e88e:	b2 3a       	cpi	r27, 0xA2	; 162
    e890:	62 07       	cpc	r22, r18
    e892:	73 07       	cpc	r23, r19
    e894:	84 07       	cpc	r24, r20
    e896:	28 f0       	brcs	.+10     	; 0xe8a2 <__fp_rempio2+0x38>
    e898:	b2 5a       	subi	r27, 0xA2	; 162
    e89a:	62 0b       	sbc	r22, r18
    e89c:	73 0b       	sbc	r23, r19
    e89e:	84 0b       	sbc	r24, r20
    e8a0:	e3 95       	inc	r30
    e8a2:	9a 95       	dec	r25
    e8a4:	72 f7       	brpl	.-36     	; 0xe882 <__fp_rempio2+0x18>
    e8a6:	80 38       	cpi	r24, 0x80	; 128
    e8a8:	30 f4       	brcc	.+12     	; 0xe8b6 <__fp_rempio2+0x4c>
    e8aa:	9a 95       	dec	r25
    e8ac:	bb 0f       	add	r27, r27
    e8ae:	66 1f       	adc	r22, r22
    e8b0:	77 1f       	adc	r23, r23
    e8b2:	88 1f       	adc	r24, r24
    e8b4:	d2 f7       	brpl	.-12     	; 0xe8aa <__fp_rempio2+0x40>
    e8b6:	90 48       	sbci	r25, 0x80	; 128
    e8b8:	0c 94 ef 73 	jmp	0xe7de	; 0xe7de <__fp_mpack_finite>

0000e8bc <__fp_round>:
    e8bc:	09 2e       	mov	r0, r25
    e8be:	03 94       	inc	r0
    e8c0:	00 0c       	add	r0, r0
    e8c2:	11 f4       	brne	.+4      	; 0xe8c8 <__fp_round+0xc>
    e8c4:	88 23       	and	r24, r24
    e8c6:	52 f0       	brmi	.+20     	; 0xe8dc <__fp_round+0x20>
    e8c8:	bb 0f       	add	r27, r27
    e8ca:	40 f4       	brcc	.+16     	; 0xe8dc <__fp_round+0x20>
    e8cc:	bf 2b       	or	r27, r31
    e8ce:	11 f4       	brne	.+4      	; 0xe8d4 <__fp_round+0x18>
    e8d0:	60 ff       	sbrs	r22, 0
    e8d2:	04 c0       	rjmp	.+8      	; 0xe8dc <__fp_round+0x20>
    e8d4:	6f 5f       	subi	r22, 0xFF	; 255
    e8d6:	7f 4f       	sbci	r23, 0xFF	; 255
    e8d8:	8f 4f       	sbci	r24, 0xFF	; 255
    e8da:	9f 4f       	sbci	r25, 0xFF	; 255
    e8dc:	08 95       	ret

0000e8de <__fp_sinus>:
    e8de:	ef 93       	push	r30
    e8e0:	e0 ff       	sbrs	r30, 0
    e8e2:	07 c0       	rjmp	.+14     	; 0xe8f2 <__fp_sinus+0x14>
    e8e4:	a2 ea       	ldi	r26, 0xA2	; 162
    e8e6:	2a ed       	ldi	r18, 0xDA	; 218
    e8e8:	3f e0       	ldi	r19, 0x0F	; 15
    e8ea:	49 ec       	ldi	r20, 0xC9	; 201
    e8ec:	5f eb       	ldi	r21, 0xBF	; 191
    e8ee:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    e8f2:	0e 94 5e 74 	call	0xe8bc	; 0xe8bc <__fp_round>
    e8f6:	0f 90       	pop	r0
    e8f8:	03 94       	inc	r0
    e8fa:	01 fc       	sbrc	r0, 1
    e8fc:	90 58       	subi	r25, 0x80	; 128
    e8fe:	e9 e9       	ldi	r30, 0x99	; 153
    e900:	f2 e0       	ldi	r31, 0x02	; 2
    e902:	0c 94 ff 76 	jmp	0xedfe	; 0xedfe <__fp_powsodd>

0000e906 <__fp_split3>:
    e906:	57 fd       	sbrc	r21, 7
    e908:	90 58       	subi	r25, 0x80	; 128
    e90a:	44 0f       	add	r20, r20
    e90c:	55 1f       	adc	r21, r21
    e90e:	59 f0       	breq	.+22     	; 0xe926 <__fp_splitA+0x10>
    e910:	5f 3f       	cpi	r21, 0xFF	; 255
    e912:	71 f0       	breq	.+28     	; 0xe930 <__fp_splitA+0x1a>
    e914:	47 95       	ror	r20

0000e916 <__fp_splitA>:
    e916:	88 0f       	add	r24, r24
    e918:	97 fb       	bst	r25, 7
    e91a:	99 1f       	adc	r25, r25
    e91c:	61 f0       	breq	.+24     	; 0xe936 <__fp_splitA+0x20>
    e91e:	9f 3f       	cpi	r25, 0xFF	; 255
    e920:	79 f0       	breq	.+30     	; 0xe940 <__fp_splitA+0x2a>
    e922:	87 95       	ror	r24
    e924:	08 95       	ret
    e926:	12 16       	cp	r1, r18
    e928:	13 06       	cpc	r1, r19
    e92a:	14 06       	cpc	r1, r20
    e92c:	55 1f       	adc	r21, r21
    e92e:	f2 cf       	rjmp	.-28     	; 0xe914 <__fp_split3+0xe>
    e930:	46 95       	lsr	r20
    e932:	f1 df       	rcall	.-30     	; 0xe916 <__fp_splitA>
    e934:	08 c0       	rjmp	.+16     	; 0xe946 <__fp_splitA+0x30>
    e936:	16 16       	cp	r1, r22
    e938:	17 06       	cpc	r1, r23
    e93a:	18 06       	cpc	r1, r24
    e93c:	99 1f       	adc	r25, r25
    e93e:	f1 cf       	rjmp	.-30     	; 0xe922 <__fp_splitA+0xc>
    e940:	86 95       	lsr	r24
    e942:	71 05       	cpc	r23, r1
    e944:	61 05       	cpc	r22, r1
    e946:	08 94       	sec
    e948:	08 95       	ret

0000e94a <__fp_zero>:
    e94a:	e8 94       	clt

0000e94c <__fp_szero>:
    e94c:	bb 27       	eor	r27, r27
    e94e:	66 27       	eor	r22, r22
    e950:	77 27       	eor	r23, r23
    e952:	cb 01       	movw	r24, r22
    e954:	97 f9       	bld	r25, 7
    e956:	08 95       	ret

0000e958 <__gesf2>:
    e958:	0e 94 c3 73 	call	0xe786	; 0xe786 <__fp_cmp>
    e95c:	08 f4       	brcc	.+2      	; 0xe960 <__gesf2+0x8>
    e95e:	8f ef       	ldi	r24, 0xFF	; 255
    e960:	08 95       	ret
    e962:	0e 94 25 74 	call	0xe84a	; 0xe84a <__fp_pscA>
    e966:	29 f0       	breq	.+10     	; 0xe972 <__gesf2+0x1a>
    e968:	0e 94 2c 74 	call	0xe858	; 0xe858 <__fp_pscB>
    e96c:	11 f0       	breq	.+4      	; 0xe972 <__gesf2+0x1a>
    e96e:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    e972:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    e976:	b9 01       	movw	r22, r18
    e978:	ca 01       	movw	r24, r20
    e97a:	0c 94 ed 73 	jmp	0xe7da	; 0xe7da <__fp_mpack>

0000e97e <hypot>:
    e97e:	9f 77       	andi	r25, 0x7F	; 127
    e980:	5f 77       	andi	r21, 0x7F	; 127
    e982:	0e 94 83 74 	call	0xe906	; 0xe906 <__fp_split3>
    e986:	68 f3       	brcs	.-38     	; 0xe962 <__gesf2+0xa>
    e988:	99 23       	and	r25, r25
    e98a:	a9 f3       	breq	.-22     	; 0xe976 <__gesf2+0x1e>
    e98c:	55 23       	and	r21, r21
    e98e:	a9 f3       	breq	.-22     	; 0xe97a <__gesf2+0x22>
    e990:	ff 27       	eor	r31, r31
    e992:	95 17       	cp	r25, r21
    e994:	58 f4       	brcc	.+22     	; 0xe9ac <hypot+0x2e>
    e996:	e5 2f       	mov	r30, r21
    e998:	e9 1b       	sub	r30, r25
    e99a:	ed 30       	cpi	r30, 0x0D	; 13
    e99c:	60 f7       	brcc	.-40     	; 0xe976 <__gesf2+0x1e>
    e99e:	5e 3b       	cpi	r21, 0xBE	; 190
    e9a0:	10 f0       	brcs	.+4      	; 0xe9a6 <hypot+0x28>
    e9a2:	f1 e4       	ldi	r31, 0x41	; 65
    e9a4:	1c c0       	rjmp	.+56     	; 0xe9de <hypot+0x60>
    e9a6:	90 34       	cpi	r25, 0x40	; 64
    e9a8:	e0 f4       	brcc	.+56     	; 0xe9e2 <hypot+0x64>
    e9aa:	0a c0       	rjmp	.+20     	; 0xe9c0 <hypot+0x42>
    e9ac:	e9 2f       	mov	r30, r25
    e9ae:	e5 1b       	sub	r30, r21
    e9b0:	ed 30       	cpi	r30, 0x0D	; 13
    e9b2:	18 f7       	brcc	.-58     	; 0xe97a <__gesf2+0x22>
    e9b4:	9e 3b       	cpi	r25, 0xBE	; 190
    e9b6:	10 f0       	brcs	.+4      	; 0xe9bc <hypot+0x3e>
    e9b8:	f1 e4       	ldi	r31, 0x41	; 65
    e9ba:	11 c0       	rjmp	.+34     	; 0xe9de <hypot+0x60>
    e9bc:	50 34       	cpi	r21, 0x40	; 64
    e9be:	88 f4       	brcc	.+34     	; 0xe9e2 <hypot+0x64>
    e9c0:	f9 ea       	ldi	r31, 0xA9	; 169
    e9c2:	88 23       	and	r24, r24
    e9c4:	2a f0       	brmi	.+10     	; 0xe9d0 <hypot+0x52>
    e9c6:	9a 95       	dec	r25
    e9c8:	66 0f       	add	r22, r22
    e9ca:	77 1f       	adc	r23, r23
    e9cc:	88 1f       	adc	r24, r24
    e9ce:	da f7       	brpl	.-10     	; 0xe9c6 <hypot+0x48>
    e9d0:	44 23       	and	r20, r20
    e9d2:	2a f0       	brmi	.+10     	; 0xe9de <hypot+0x60>
    e9d4:	5a 95       	dec	r21
    e9d6:	22 0f       	add	r18, r18
    e9d8:	33 1f       	adc	r19, r19
    e9da:	44 1f       	adc	r20, r20
    e9dc:	da f7       	brpl	.-10     	; 0xe9d4 <hypot+0x56>
    e9de:	9f 1b       	sub	r25, r31
    e9e0:	5f 1b       	sub	r21, r31
    e9e2:	ff 93       	push	r31
    e9e4:	1f 93       	push	r17
    e9e6:	0f 93       	push	r16
    e9e8:	ff 92       	push	r15
    e9ea:	ef 92       	push	r14
    e9ec:	79 01       	movw	r14, r18
    e9ee:	8a 01       	movw	r16, r20
    e9f0:	bb 27       	eor	r27, r27
    e9f2:	ab 2f       	mov	r26, r27
    e9f4:	9b 01       	movw	r18, r22
    e9f6:	ac 01       	movw	r20, r24
    e9f8:	0e 94 fa 75 	call	0xebf4	; 0xebf4 <__mulsf3_pse>
    e9fc:	97 01       	movw	r18, r14
    e9fe:	a8 01       	movw	r20, r16
    ea00:	bf 93       	push	r27
    ea02:	7b 01       	movw	r14, r22
    ea04:	8c 01       	movw	r16, r24
    ea06:	aa 27       	eor	r26, r26
    ea08:	ba 2f       	mov	r27, r26
    ea0a:	b9 01       	movw	r22, r18
    ea0c:	ca 01       	movw	r24, r20
    ea0e:	0e 94 fa 75 	call	0xebf4	; 0xebf4 <__mulsf3_pse>
    ea12:	af 91       	pop	r26
    ea14:	97 01       	movw	r18, r14
    ea16:	a8 01       	movw	r20, r16
    ea18:	ef 90       	pop	r14
    ea1a:	ff 90       	pop	r15
    ea1c:	0f 91       	pop	r16
    ea1e:	1f 91       	pop	r17
    ea20:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    ea24:	0e 94 5e 74 	call	0xe8bc	; 0xe8bc <__fp_round>
    ea28:	0e 94 af 76 	call	0xed5e	; 0xed5e <sqrt>
    ea2c:	4f 91       	pop	r20
    ea2e:	40 ff       	sbrs	r20, 0
    ea30:	08 95       	ret
    ea32:	55 27       	eor	r21, r21
    ea34:	47 fd       	sbrc	r20, 7
    ea36:	50 95       	com	r21
    ea38:	0c 94 2a 75 	jmp	0xea54	; 0xea54 <ldexp>

0000ea3c <inverse>:
    ea3c:	9b 01       	movw	r18, r22
    ea3e:	ac 01       	movw	r20, r24
    ea40:	60 e0       	ldi	r22, 0x00	; 0
    ea42:	70 e0       	ldi	r23, 0x00	; 0
    ea44:	80 e8       	ldi	r24, 0x80	; 128
    ea46:	9f e3       	ldi	r25, 0x3F	; 63
    ea48:	0c 94 30 72 	jmp	0xe460	; 0xe460 <__divsf3>
    ea4c:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    ea50:	0c 94 ed 73 	jmp	0xe7da	; 0xe7da <__fp_mpack>

0000ea54 <ldexp>:
    ea54:	0e 94 8b 74 	call	0xe916	; 0xe916 <__fp_splitA>
    ea58:	d8 f3       	brcs	.-10     	; 0xea50 <inverse+0x14>
    ea5a:	99 23       	and	r25, r25
    ea5c:	c9 f3       	breq	.-14     	; 0xea50 <inverse+0x14>
    ea5e:	94 0f       	add	r25, r20
    ea60:	51 1d       	adc	r21, r1
    ea62:	a3 f3       	brvs	.-24     	; 0xea4c <inverse+0x10>
    ea64:	91 50       	subi	r25, 0x01	; 1
    ea66:	50 40       	sbci	r21, 0x00	; 0
    ea68:	94 f0       	brlt	.+36     	; 0xea8e <ldexp+0x3a>
    ea6a:	59 f0       	breq	.+22     	; 0xea82 <ldexp+0x2e>
    ea6c:	88 23       	and	r24, r24
    ea6e:	32 f0       	brmi	.+12     	; 0xea7c <ldexp+0x28>
    ea70:	66 0f       	add	r22, r22
    ea72:	77 1f       	adc	r23, r23
    ea74:	88 1f       	adc	r24, r24
    ea76:	91 50       	subi	r25, 0x01	; 1
    ea78:	50 40       	sbci	r21, 0x00	; 0
    ea7a:	c1 f7       	brne	.-16     	; 0xea6c <ldexp+0x18>
    ea7c:	9e 3f       	cpi	r25, 0xFE	; 254
    ea7e:	51 05       	cpc	r21, r1
    ea80:	2c f7       	brge	.-54     	; 0xea4c <inverse+0x10>
    ea82:	88 0f       	add	r24, r24
    ea84:	91 1d       	adc	r25, r1
    ea86:	96 95       	lsr	r25
    ea88:	87 95       	ror	r24
    ea8a:	97 f9       	bld	r25, 7
    ea8c:	08 95       	ret
    ea8e:	5f 3f       	cpi	r21, 0xFF	; 255
    ea90:	ac f0       	brlt	.+42     	; 0xeabc <ldexp+0x68>
    ea92:	98 3e       	cpi	r25, 0xE8	; 232
    ea94:	9c f0       	brlt	.+38     	; 0xeabc <ldexp+0x68>
    ea96:	bb 27       	eor	r27, r27
    ea98:	86 95       	lsr	r24
    ea9a:	77 95       	ror	r23
    ea9c:	67 95       	ror	r22
    ea9e:	b7 95       	ror	r27
    eaa0:	08 f4       	brcc	.+2      	; 0xeaa4 <ldexp+0x50>
    eaa2:	b1 60       	ori	r27, 0x01	; 1
    eaa4:	93 95       	inc	r25
    eaa6:	c1 f7       	brne	.-16     	; 0xea98 <ldexp+0x44>
    eaa8:	bb 0f       	add	r27, r27
    eaaa:	58 f7       	brcc	.-42     	; 0xea82 <ldexp+0x2e>
    eaac:	11 f4       	brne	.+4      	; 0xeab2 <ldexp+0x5e>
    eaae:	60 ff       	sbrs	r22, 0
    eab0:	e8 cf       	rjmp	.-48     	; 0xea82 <ldexp+0x2e>
    eab2:	6f 5f       	subi	r22, 0xFF	; 255
    eab4:	7f 4f       	sbci	r23, 0xFF	; 255
    eab6:	8f 4f       	sbci	r24, 0xFF	; 255
    eab8:	9f 4f       	sbci	r25, 0xFF	; 255
    eaba:	e3 cf       	rjmp	.-58     	; 0xea82 <ldexp+0x2e>
    eabc:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>
    eac0:	16 f0       	brts	.+4      	; 0xeac6 <ldexp+0x72>
    eac2:	0c 94 ed 73 	jmp	0xe7da	; 0xe7da <__fp_mpack>
    eac6:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    eaca:	68 94       	set
    eacc:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>

0000ead0 <log>:
    ead0:	0e 94 8b 74 	call	0xe916	; 0xe916 <__fp_splitA>
    ead4:	a8 f3       	brcs	.-22     	; 0xeac0 <ldexp+0x6c>
    ead6:	99 23       	and	r25, r25
    ead8:	c1 f3       	breq	.-16     	; 0xeaca <ldexp+0x76>
    eada:	ae f3       	brts	.-22     	; 0xeac6 <ldexp+0x72>
    eadc:	df 93       	push	r29
    eade:	cf 93       	push	r28
    eae0:	1f 93       	push	r17
    eae2:	0f 93       	push	r16
    eae4:	ff 92       	push	r15
    eae6:	c9 2f       	mov	r28, r25
    eae8:	dd 27       	eor	r29, r29
    eaea:	88 23       	and	r24, r24
    eaec:	2a f0       	brmi	.+10     	; 0xeaf8 <log+0x28>
    eaee:	21 97       	sbiw	r28, 0x01	; 1
    eaf0:	66 0f       	add	r22, r22
    eaf2:	77 1f       	adc	r23, r23
    eaf4:	88 1f       	adc	r24, r24
    eaf6:	da f7       	brpl	.-10     	; 0xeaee <log+0x1e>
    eaf8:	20 e0       	ldi	r18, 0x00	; 0
    eafa:	30 e0       	ldi	r19, 0x00	; 0
    eafc:	40 e8       	ldi	r20, 0x80	; 128
    eafe:	5f eb       	ldi	r21, 0xBF	; 191
    eb00:	9f e3       	ldi	r25, 0x3F	; 63
    eb02:	88 39       	cpi	r24, 0x98	; 152
    eb04:	20 f0       	brcs	.+8      	; 0xeb0e <log+0x3e>
    eb06:	80 3e       	cpi	r24, 0xE0	; 224
    eb08:	38 f0       	brcs	.+14     	; 0xeb18 <log+0x48>
    eb0a:	21 96       	adiw	r28, 0x01	; 1
    eb0c:	8f 77       	andi	r24, 0x7F	; 127
    eb0e:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    eb12:	e7 eb       	ldi	r30, 0xB7	; 183
    eb14:	f2 e0       	ldi	r31, 0x02	; 2
    eb16:	04 c0       	rjmp	.+8      	; 0xeb20 <log+0x50>
    eb18:	0e 94 48 71 	call	0xe290	; 0xe290 <__addsf3>
    eb1c:	e4 ee       	ldi	r30, 0xE4	; 228
    eb1e:	f2 e0       	ldi	r31, 0x02	; 2
    eb20:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__fp_powser>
    eb24:	8b 01       	movw	r16, r22
    eb26:	be 01       	movw	r22, r28
    eb28:	ec 01       	movw	r28, r24
    eb2a:	fb 2e       	mov	r15, r27
    eb2c:	6f 57       	subi	r22, 0x7F	; 127
    eb2e:	71 09       	sbc	r23, r1
    eb30:	75 95       	asr	r23
    eb32:	77 1f       	adc	r23, r23
    eb34:	88 0b       	sbc	r24, r24
    eb36:	99 0b       	sbc	r25, r25
    eb38:	0e 94 14 73 	call	0xe628	; 0xe628 <__floatsisf>
    eb3c:	28 e1       	ldi	r18, 0x18	; 24
    eb3e:	32 e7       	ldi	r19, 0x72	; 114
    eb40:	41 e3       	ldi	r20, 0x31	; 49
    eb42:	5f e3       	ldi	r21, 0x3F	; 63
    eb44:	0e 94 f7 75 	call	0xebee	; 0xebee <__mulsf3x>
    eb48:	af 2d       	mov	r26, r15
    eb4a:	98 01       	movw	r18, r16
    eb4c:	ae 01       	movw	r20, r28
    eb4e:	ff 90       	pop	r15
    eb50:	0f 91       	pop	r16
    eb52:	1f 91       	pop	r17
    eb54:	cf 91       	pop	r28
    eb56:	df 91       	pop	r29
    eb58:	0e 94 5f 71 	call	0xe2be	; 0xe2be <__addsf3x>
    eb5c:	0c 94 5e 74 	jmp	0xe8bc	; 0xe8bc <__fp_round>

0000eb60 <modf>:
    eb60:	fa 01       	movw	r30, r20
    eb62:	dc 01       	movw	r26, r24
    eb64:	aa 0f       	add	r26, r26
    eb66:	bb 1f       	adc	r27, r27
    eb68:	9b 01       	movw	r18, r22
    eb6a:	ac 01       	movw	r20, r24
    eb6c:	bf 57       	subi	r27, 0x7F	; 127
    eb6e:	28 f4       	brcc	.+10     	; 0xeb7a <modf+0x1a>
    eb70:	22 27       	eor	r18, r18
    eb72:	33 27       	eor	r19, r19
    eb74:	44 27       	eor	r20, r20
    eb76:	50 78       	andi	r21, 0x80	; 128
    eb78:	20 c0       	rjmp	.+64     	; 0xebba <modf+0x5a>
    eb7a:	b7 51       	subi	r27, 0x17	; 23
    eb7c:	90 f4       	brcc	.+36     	; 0xeba2 <modf+0x42>
    eb7e:	ab 2f       	mov	r26, r27
    eb80:	00 24       	eor	r0, r0
    eb82:	46 95       	lsr	r20
    eb84:	37 95       	ror	r19
    eb86:	27 95       	ror	r18
    eb88:	01 1c       	adc	r0, r1
    eb8a:	a3 95       	inc	r26
    eb8c:	d2 f3       	brmi	.-12     	; 0xeb82 <modf+0x22>
    eb8e:	00 20       	and	r0, r0
    eb90:	71 f0       	breq	.+28     	; 0xebae <modf+0x4e>
    eb92:	22 0f       	add	r18, r18
    eb94:	33 1f       	adc	r19, r19
    eb96:	44 1f       	adc	r20, r20
    eb98:	b3 95       	inc	r27
    eb9a:	da f3       	brmi	.-10     	; 0xeb92 <modf+0x32>
    eb9c:	0e d0       	rcall	.+28     	; 0xebba <modf+0x5a>
    eb9e:	0c 94 47 71 	jmp	0xe28e	; 0xe28e <__subsf3>
    eba2:	61 30       	cpi	r22, 0x01	; 1
    eba4:	71 05       	cpc	r23, r1
    eba6:	a0 e8       	ldi	r26, 0x80	; 128
    eba8:	8a 07       	cpc	r24, r26
    ebaa:	b9 46       	sbci	r27, 0x69	; 105
    ebac:	30 f4       	brcc	.+12     	; 0xebba <modf+0x5a>
    ebae:	9b 01       	movw	r18, r22
    ebb0:	ac 01       	movw	r20, r24
    ebb2:	66 27       	eor	r22, r22
    ebb4:	77 27       	eor	r23, r23
    ebb6:	88 27       	eor	r24, r24
    ebb8:	90 78       	andi	r25, 0x80	; 128
    ebba:	30 96       	adiw	r30, 0x00	; 0
    ebbc:	21 f0       	breq	.+8      	; 0xebc6 <modf+0x66>
    ebbe:	20 83       	st	Z, r18
    ebc0:	31 83       	std	Z+1, r19	; 0x01
    ebc2:	42 83       	std	Z+2, r20	; 0x02
    ebc4:	53 83       	std	Z+3, r21	; 0x03
    ebc6:	08 95       	ret

0000ebc8 <__mulsf3>:
    ebc8:	0e 94 f7 75 	call	0xebee	; 0xebee <__mulsf3x>
    ebcc:	0c 94 5e 74 	jmp	0xe8bc	; 0xe8bc <__fp_round>
    ebd0:	0e 94 25 74 	call	0xe84a	; 0xe84a <__fp_pscA>
    ebd4:	38 f0       	brcs	.+14     	; 0xebe4 <__mulsf3+0x1c>
    ebd6:	0e 94 2c 74 	call	0xe858	; 0xe858 <__fp_pscB>
    ebda:	20 f0       	brcs	.+8      	; 0xebe4 <__mulsf3+0x1c>
    ebdc:	95 23       	and	r25, r21
    ebde:	11 f0       	breq	.+4      	; 0xebe4 <__mulsf3+0x1c>
    ebe0:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    ebe4:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    ebe8:	11 24       	eor	r1, r1
    ebea:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>

0000ebee <__mulsf3x>:
    ebee:	0e 94 83 74 	call	0xe906	; 0xe906 <__fp_split3>
    ebf2:	70 f3       	brcs	.-36     	; 0xebd0 <__mulsf3+0x8>

0000ebf4 <__mulsf3_pse>:
    ebf4:	95 9f       	mul	r25, r21
    ebf6:	c1 f3       	breq	.-16     	; 0xebe8 <__mulsf3+0x20>
    ebf8:	95 0f       	add	r25, r21
    ebfa:	50 e0       	ldi	r21, 0x00	; 0
    ebfc:	55 1f       	adc	r21, r21
    ebfe:	62 9f       	mul	r22, r18
    ec00:	f0 01       	movw	r30, r0
    ec02:	72 9f       	mul	r23, r18
    ec04:	bb 27       	eor	r27, r27
    ec06:	f0 0d       	add	r31, r0
    ec08:	b1 1d       	adc	r27, r1
    ec0a:	63 9f       	mul	r22, r19
    ec0c:	aa 27       	eor	r26, r26
    ec0e:	f0 0d       	add	r31, r0
    ec10:	b1 1d       	adc	r27, r1
    ec12:	aa 1f       	adc	r26, r26
    ec14:	64 9f       	mul	r22, r20
    ec16:	66 27       	eor	r22, r22
    ec18:	b0 0d       	add	r27, r0
    ec1a:	a1 1d       	adc	r26, r1
    ec1c:	66 1f       	adc	r22, r22
    ec1e:	82 9f       	mul	r24, r18
    ec20:	22 27       	eor	r18, r18
    ec22:	b0 0d       	add	r27, r0
    ec24:	a1 1d       	adc	r26, r1
    ec26:	62 1f       	adc	r22, r18
    ec28:	73 9f       	mul	r23, r19
    ec2a:	b0 0d       	add	r27, r0
    ec2c:	a1 1d       	adc	r26, r1
    ec2e:	62 1f       	adc	r22, r18
    ec30:	83 9f       	mul	r24, r19
    ec32:	a0 0d       	add	r26, r0
    ec34:	61 1d       	adc	r22, r1
    ec36:	22 1f       	adc	r18, r18
    ec38:	74 9f       	mul	r23, r20
    ec3a:	33 27       	eor	r19, r19
    ec3c:	a0 0d       	add	r26, r0
    ec3e:	61 1d       	adc	r22, r1
    ec40:	23 1f       	adc	r18, r19
    ec42:	84 9f       	mul	r24, r20
    ec44:	60 0d       	add	r22, r0
    ec46:	21 1d       	adc	r18, r1
    ec48:	82 2f       	mov	r24, r18
    ec4a:	76 2f       	mov	r23, r22
    ec4c:	6a 2f       	mov	r22, r26
    ec4e:	11 24       	eor	r1, r1
    ec50:	9f 57       	subi	r25, 0x7F	; 127
    ec52:	50 40       	sbci	r21, 0x00	; 0
    ec54:	9a f0       	brmi	.+38     	; 0xec7c <__mulsf3_pse+0x88>
    ec56:	f1 f0       	breq	.+60     	; 0xec94 <__mulsf3_pse+0xa0>
    ec58:	88 23       	and	r24, r24
    ec5a:	4a f0       	brmi	.+18     	; 0xec6e <__mulsf3_pse+0x7a>
    ec5c:	ee 0f       	add	r30, r30
    ec5e:	ff 1f       	adc	r31, r31
    ec60:	bb 1f       	adc	r27, r27
    ec62:	66 1f       	adc	r22, r22
    ec64:	77 1f       	adc	r23, r23
    ec66:	88 1f       	adc	r24, r24
    ec68:	91 50       	subi	r25, 0x01	; 1
    ec6a:	50 40       	sbci	r21, 0x00	; 0
    ec6c:	a9 f7       	brne	.-22     	; 0xec58 <__mulsf3_pse+0x64>
    ec6e:	9e 3f       	cpi	r25, 0xFE	; 254
    ec70:	51 05       	cpc	r21, r1
    ec72:	80 f0       	brcs	.+32     	; 0xec94 <__mulsf3_pse+0xa0>
    ec74:	0c 94 e7 73 	jmp	0xe7ce	; 0xe7ce <__fp_inf>
    ec78:	0c 94 a6 74 	jmp	0xe94c	; 0xe94c <__fp_szero>
    ec7c:	5f 3f       	cpi	r21, 0xFF	; 255
    ec7e:	e4 f3       	brlt	.-8      	; 0xec78 <__mulsf3_pse+0x84>
    ec80:	98 3e       	cpi	r25, 0xE8	; 232
    ec82:	d4 f3       	brlt	.-12     	; 0xec78 <__mulsf3_pse+0x84>
    ec84:	86 95       	lsr	r24
    ec86:	77 95       	ror	r23
    ec88:	67 95       	ror	r22
    ec8a:	b7 95       	ror	r27
    ec8c:	f7 95       	ror	r31
    ec8e:	e7 95       	ror	r30
    ec90:	9f 5f       	subi	r25, 0xFF	; 255
    ec92:	c1 f7       	brne	.-16     	; 0xec84 <__mulsf3_pse+0x90>
    ec94:	fe 2b       	or	r31, r30
    ec96:	88 0f       	add	r24, r24
    ec98:	91 1d       	adc	r25, r1
    ec9a:	96 95       	lsr	r25
    ec9c:	87 95       	ror	r24
    ec9e:	97 f9       	bld	r25, 7
    eca0:	08 95       	ret

0000eca2 <pow>:
    eca2:	fa 01       	movw	r30, r20
    eca4:	ee 0f       	add	r30, r30
    eca6:	ff 1f       	adc	r31, r31
    eca8:	30 96       	adiw	r30, 0x00	; 0
    ecaa:	21 05       	cpc	r18, r1
    ecac:	31 05       	cpc	r19, r1
    ecae:	a1 f1       	breq	.+104    	; 0xed18 <pow+0x76>
    ecb0:	61 15       	cp	r22, r1
    ecb2:	71 05       	cpc	r23, r1
    ecb4:	61 f4       	brne	.+24     	; 0xecce <pow+0x2c>
    ecb6:	80 38       	cpi	r24, 0x80	; 128
    ecb8:	bf e3       	ldi	r27, 0x3F	; 63
    ecba:	9b 07       	cpc	r25, r27
    ecbc:	49 f1       	breq	.+82     	; 0xed10 <pow+0x6e>
    ecbe:	68 94       	set
    ecc0:	90 38       	cpi	r25, 0x80	; 128
    ecc2:	81 05       	cpc	r24, r1
    ecc4:	61 f0       	breq	.+24     	; 0xecde <pow+0x3c>
    ecc6:	80 38       	cpi	r24, 0x80	; 128
    ecc8:	bf ef       	ldi	r27, 0xFF	; 255
    ecca:	9b 07       	cpc	r25, r27
    eccc:	41 f0       	breq	.+16     	; 0xecde <pow+0x3c>
    ecce:	99 23       	and	r25, r25
    ecd0:	4a f5       	brpl	.+82     	; 0xed24 <pow+0x82>
    ecd2:	ff 3f       	cpi	r31, 0xFF	; 255
    ecd4:	e1 05       	cpc	r30, r1
    ecd6:	31 05       	cpc	r19, r1
    ecd8:	21 05       	cpc	r18, r1
    ecda:	19 f1       	breq	.+70     	; 0xed22 <pow+0x80>
    ecdc:	e8 94       	clt
    ecde:	08 94       	sec
    ece0:	e7 95       	ror	r30
    ece2:	d9 01       	movw	r26, r18
    ece4:	aa 23       	and	r26, r26
    ece6:	29 f4       	brne	.+10     	; 0xecf2 <pow+0x50>
    ece8:	ab 2f       	mov	r26, r27
    ecea:	be 2f       	mov	r27, r30
    ecec:	f8 5f       	subi	r31, 0xF8	; 248
    ecee:	d0 f3       	brcs	.-12     	; 0xece4 <pow+0x42>
    ecf0:	10 c0       	rjmp	.+32     	; 0xed12 <pow+0x70>
    ecf2:	ff 5f       	subi	r31, 0xFF	; 255
    ecf4:	70 f4       	brcc	.+28     	; 0xed12 <pow+0x70>
    ecf6:	a6 95       	lsr	r26
    ecf8:	e0 f7       	brcc	.-8      	; 0xecf2 <pow+0x50>
    ecfa:	f7 39       	cpi	r31, 0x97	; 151
    ecfc:	50 f0       	brcs	.+20     	; 0xed12 <pow+0x70>
    ecfe:	19 f0       	breq	.+6      	; 0xed06 <pow+0x64>
    ed00:	ff 3a       	cpi	r31, 0xAF	; 175
    ed02:	38 f4       	brcc	.+14     	; 0xed12 <pow+0x70>
    ed04:	9f 77       	andi	r25, 0x7F	; 127
    ed06:	9f 93       	push	r25
    ed08:	0d d0       	rcall	.+26     	; 0xed24 <pow+0x82>
    ed0a:	0f 90       	pop	r0
    ed0c:	07 fc       	sbrc	r0, 7
    ed0e:	90 58       	subi	r25, 0x80	; 128
    ed10:	08 95       	ret
    ed12:	46 f0       	brts	.+16     	; 0xed24 <pow+0x82>
    ed14:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    ed18:	60 e0       	ldi	r22, 0x00	; 0
    ed1a:	70 e0       	ldi	r23, 0x00	; 0
    ed1c:	80 e8       	ldi	r24, 0x80	; 128
    ed1e:	9f e3       	ldi	r25, 0x3F	; 63
    ed20:	08 95       	ret
    ed22:	4f e7       	ldi	r20, 0x7F	; 127
    ed24:	9f 77       	andi	r25, 0x7F	; 127
    ed26:	5f 93       	push	r21
    ed28:	4f 93       	push	r20
    ed2a:	3f 93       	push	r19
    ed2c:	2f 93       	push	r18
    ed2e:	0e 94 68 75 	call	0xead0	; 0xead0 <log>
    ed32:	2f 91       	pop	r18
    ed34:	3f 91       	pop	r19
    ed36:	4f 91       	pop	r20
    ed38:	5f 91       	pop	r21
    ed3a:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    ed3e:	0c 94 aa 72 	jmp	0xe554	; 0xe554 <exp>

0000ed42 <sin>:
    ed42:	9f 93       	push	r25
    ed44:	0e 94 35 74 	call	0xe86a	; 0xe86a <__fp_rempio2>
    ed48:	0f 90       	pop	r0
    ed4a:	07 fc       	sbrc	r0, 7
    ed4c:	ee 5f       	subi	r30, 0xFE	; 254
    ed4e:	0c 94 6f 74 	jmp	0xe8de	; 0xe8de <__fp_sinus>
    ed52:	19 f4       	brne	.+6      	; 0xed5a <sin+0x18>
    ed54:	16 f4       	brtc	.+4      	; 0xed5a <sin+0x18>
    ed56:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <__fp_nan>
    ed5a:	0c 94 ed 73 	jmp	0xe7da	; 0xe7da <__fp_mpack>

0000ed5e <sqrt>:
    ed5e:	0e 94 8b 74 	call	0xe916	; 0xe916 <__fp_splitA>
    ed62:	b8 f3       	brcs	.-18     	; 0xed52 <sin+0x10>
    ed64:	99 23       	and	r25, r25
    ed66:	c9 f3       	breq	.-14     	; 0xed5a <sin+0x18>
    ed68:	b6 f3       	brts	.-20     	; 0xed56 <sin+0x14>
    ed6a:	9f 57       	subi	r25, 0x7F	; 127
    ed6c:	55 0b       	sbc	r21, r21
    ed6e:	87 ff       	sbrs	r24, 7
    ed70:	0e 94 f8 76 	call	0xedf0	; 0xedf0 <__fp_norm2>
    ed74:	00 24       	eor	r0, r0
    ed76:	a0 e6       	ldi	r26, 0x60	; 96
    ed78:	40 ea       	ldi	r20, 0xA0	; 160
    ed7a:	90 01       	movw	r18, r0
    ed7c:	80 58       	subi	r24, 0x80	; 128
    ed7e:	56 95       	lsr	r21
    ed80:	97 95       	ror	r25
    ed82:	28 f4       	brcc	.+10     	; 0xed8e <sqrt+0x30>
    ed84:	80 5c       	subi	r24, 0xC0	; 192
    ed86:	66 0f       	add	r22, r22
    ed88:	77 1f       	adc	r23, r23
    ed8a:	88 1f       	adc	r24, r24
    ed8c:	20 f0       	brcs	.+8      	; 0xed96 <sqrt+0x38>
    ed8e:	26 17       	cp	r18, r22
    ed90:	37 07       	cpc	r19, r23
    ed92:	48 07       	cpc	r20, r24
    ed94:	30 f4       	brcc	.+12     	; 0xeda2 <sqrt+0x44>
    ed96:	62 1b       	sub	r22, r18
    ed98:	73 0b       	sbc	r23, r19
    ed9a:	84 0b       	sbc	r24, r20
    ed9c:	20 29       	or	r18, r0
    ed9e:	31 29       	or	r19, r1
    eda0:	4a 2b       	or	r20, r26
    eda2:	a6 95       	lsr	r26
    eda4:	17 94       	ror	r1
    eda6:	07 94       	ror	r0
    eda8:	20 25       	eor	r18, r0
    edaa:	31 25       	eor	r19, r1
    edac:	4a 27       	eor	r20, r26
    edae:	58 f7       	brcc	.-42     	; 0xed86 <sqrt+0x28>
    edb0:	66 0f       	add	r22, r22
    edb2:	77 1f       	adc	r23, r23
    edb4:	88 1f       	adc	r24, r24
    edb6:	20 f0       	brcs	.+8      	; 0xedc0 <sqrt+0x62>
    edb8:	26 17       	cp	r18, r22
    edba:	37 07       	cpc	r19, r23
    edbc:	48 07       	cpc	r20, r24
    edbe:	30 f4       	brcc	.+12     	; 0xedcc <sqrt+0x6e>
    edc0:	62 0b       	sbc	r22, r18
    edc2:	73 0b       	sbc	r23, r19
    edc4:	84 0b       	sbc	r24, r20
    edc6:	20 0d       	add	r18, r0
    edc8:	31 1d       	adc	r19, r1
    edca:	41 1d       	adc	r20, r1
    edcc:	a0 95       	com	r26
    edce:	81 f7       	brne	.-32     	; 0xedb0 <sqrt+0x52>
    edd0:	b9 01       	movw	r22, r18
    edd2:	84 2f       	mov	r24, r20
    edd4:	91 58       	subi	r25, 0x81	; 129
    edd6:	88 0f       	add	r24, r24
    edd8:	96 95       	lsr	r25
    edda:	87 95       	ror	r24
    eddc:	08 95       	ret

0000edde <square>:
    edde:	9b 01       	movw	r18, r22
    ede0:	ac 01       	movw	r20, r24
    ede2:	0c 94 e4 75 	jmp	0xebc8	; 0xebc8 <__mulsf3>

0000ede6 <__unordsf2>:
    ede6:	0e 94 c3 73 	call	0xe786	; 0xe786 <__fp_cmp>
    edea:	88 0b       	sbc	r24, r24
    edec:	99 0b       	sbc	r25, r25
    edee:	08 95       	ret

0000edf0 <__fp_norm2>:
    edf0:	91 50       	subi	r25, 0x01	; 1
    edf2:	50 40       	sbci	r21, 0x00	; 0
    edf4:	66 0f       	add	r22, r22
    edf6:	77 1f       	adc	r23, r23
    edf8:	88 1f       	adc	r24, r24
    edfa:	d2 f7       	brpl	.-12     	; 0xedf0 <__fp_norm2>
    edfc:	08 95       	ret

0000edfe <__fp_powsodd>:
    edfe:	9f 93       	push	r25
    ee00:	8f 93       	push	r24
    ee02:	7f 93       	push	r23
    ee04:	6f 93       	push	r22
    ee06:	ff 93       	push	r31
    ee08:	ef 93       	push	r30
    ee0a:	9b 01       	movw	r18, r22
    ee0c:	ac 01       	movw	r20, r24
    ee0e:	0e 94 e4 75 	call	0xebc8	; 0xebc8 <__mulsf3>
    ee12:	ef 91       	pop	r30
    ee14:	ff 91       	pop	r31
    ee16:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__fp_powser>
    ee1a:	2f 91       	pop	r18
    ee1c:	3f 91       	pop	r19
    ee1e:	4f 91       	pop	r20
    ee20:	5f 91       	pop	r21
    ee22:	0c 94 e4 75 	jmp	0xebc8	; 0xebc8 <__mulsf3>

0000ee26 <__udivmodhi4>:
    ee26:	aa 1b       	sub	r26, r26
    ee28:	bb 1b       	sub	r27, r27
    ee2a:	51 e1       	ldi	r21, 0x11	; 17
    ee2c:	07 c0       	rjmp	.+14     	; 0xee3c <__udivmodhi4_ep>

0000ee2e <__udivmodhi4_loop>:
    ee2e:	aa 1f       	adc	r26, r26
    ee30:	bb 1f       	adc	r27, r27
    ee32:	a6 17       	cp	r26, r22
    ee34:	b7 07       	cpc	r27, r23
    ee36:	10 f0       	brcs	.+4      	; 0xee3c <__udivmodhi4_ep>
    ee38:	a6 1b       	sub	r26, r22
    ee3a:	b7 0b       	sbc	r27, r23

0000ee3c <__udivmodhi4_ep>:
    ee3c:	88 1f       	adc	r24, r24
    ee3e:	99 1f       	adc	r25, r25
    ee40:	5a 95       	dec	r21
    ee42:	a9 f7       	brne	.-22     	; 0xee2e <__udivmodhi4_loop>
    ee44:	80 95       	com	r24
    ee46:	90 95       	com	r25
    ee48:	bc 01       	movw	r22, r24
    ee4a:	cd 01       	movw	r24, r26
    ee4c:	08 95       	ret

0000ee4e <__divmodhi4>:
    ee4e:	97 fb       	bst	r25, 7
    ee50:	07 2e       	mov	r0, r23
    ee52:	16 f4       	brtc	.+4      	; 0xee58 <__divmodhi4+0xa>
    ee54:	00 94       	com	r0
    ee56:	07 d0       	rcall	.+14     	; 0xee66 <__divmodhi4_neg1>
    ee58:	77 fd       	sbrc	r23, 7
    ee5a:	09 d0       	rcall	.+18     	; 0xee6e <__divmodhi4_neg2>
    ee5c:	0e 94 13 77 	call	0xee26	; 0xee26 <__udivmodhi4>
    ee60:	07 fc       	sbrc	r0, 7
    ee62:	05 d0       	rcall	.+10     	; 0xee6e <__divmodhi4_neg2>
    ee64:	3e f4       	brtc	.+14     	; 0xee74 <__divmodhi4_exit>

0000ee66 <__divmodhi4_neg1>:
    ee66:	90 95       	com	r25
    ee68:	81 95       	neg	r24
    ee6a:	9f 4f       	sbci	r25, 0xFF	; 255
    ee6c:	08 95       	ret

0000ee6e <__divmodhi4_neg2>:
    ee6e:	70 95       	com	r23
    ee70:	61 95       	neg	r22
    ee72:	7f 4f       	sbci	r23, 0xFF	; 255

0000ee74 <__divmodhi4_exit>:
    ee74:	08 95       	ret

0000ee76 <__udivmodsi4>:
    ee76:	a1 e2       	ldi	r26, 0x21	; 33
    ee78:	1a 2e       	mov	r1, r26
    ee7a:	aa 1b       	sub	r26, r26
    ee7c:	bb 1b       	sub	r27, r27
    ee7e:	fd 01       	movw	r30, r26
    ee80:	0d c0       	rjmp	.+26     	; 0xee9c <__udivmodsi4_ep>

0000ee82 <__udivmodsi4_loop>:
    ee82:	aa 1f       	adc	r26, r26
    ee84:	bb 1f       	adc	r27, r27
    ee86:	ee 1f       	adc	r30, r30
    ee88:	ff 1f       	adc	r31, r31
    ee8a:	a2 17       	cp	r26, r18
    ee8c:	b3 07       	cpc	r27, r19
    ee8e:	e4 07       	cpc	r30, r20
    ee90:	f5 07       	cpc	r31, r21
    ee92:	20 f0       	brcs	.+8      	; 0xee9c <__udivmodsi4_ep>
    ee94:	a2 1b       	sub	r26, r18
    ee96:	b3 0b       	sbc	r27, r19
    ee98:	e4 0b       	sbc	r30, r20
    ee9a:	f5 0b       	sbc	r31, r21

0000ee9c <__udivmodsi4_ep>:
    ee9c:	66 1f       	adc	r22, r22
    ee9e:	77 1f       	adc	r23, r23
    eea0:	88 1f       	adc	r24, r24
    eea2:	99 1f       	adc	r25, r25
    eea4:	1a 94       	dec	r1
    eea6:	69 f7       	brne	.-38     	; 0xee82 <__udivmodsi4_loop>
    eea8:	60 95       	com	r22
    eeaa:	70 95       	com	r23
    eeac:	80 95       	com	r24
    eeae:	90 95       	com	r25
    eeb0:	9b 01       	movw	r18, r22
    eeb2:	ac 01       	movw	r20, r24
    eeb4:	bd 01       	movw	r22, r26
    eeb6:	cf 01       	movw	r24, r30
    eeb8:	08 95       	ret

0000eeba <__tablejump2__>:
    eeba:	ee 0f       	add	r30, r30
    eebc:	ff 1f       	adc	r31, r31
    eebe:	88 1f       	adc	r24, r24
    eec0:	8b bf       	out	0x3b, r24	; 59
    eec2:	07 90       	elpm	r0, Z+
    eec4:	f6 91       	elpm	r31, Z
    eec6:	e0 2d       	mov	r30, r0
    eec8:	19 94       	eijmp

0000eeca <__umulhisi3>:
    eeca:	a2 9f       	mul	r26, r18
    eecc:	b0 01       	movw	r22, r0
    eece:	b3 9f       	mul	r27, r19
    eed0:	c0 01       	movw	r24, r0
    eed2:	a3 9f       	mul	r26, r19
    eed4:	70 0d       	add	r23, r0
    eed6:	81 1d       	adc	r24, r1
    eed8:	11 24       	eor	r1, r1
    eeda:	91 1d       	adc	r25, r1
    eedc:	b2 9f       	mul	r27, r18
    eede:	70 0d       	add	r23, r0
    eee0:	81 1d       	adc	r24, r1
    eee2:	11 24       	eor	r1, r1
    eee4:	91 1d       	adc	r25, r1
    eee6:	08 95       	ret

0000eee8 <__mulshisi3>:
    eee8:	b7 ff       	sbrs	r27, 7
    eeea:	0c 94 7c 77 	jmp	0xeef8	; 0xeef8 <__muluhisi3>

0000eeee <__mulohisi3>:
    eeee:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__muluhisi3>
    eef2:	82 1b       	sub	r24, r18
    eef4:	93 0b       	sbc	r25, r19
    eef6:	08 95       	ret

0000eef8 <__muluhisi3>:
    eef8:	0e 94 65 77 	call	0xeeca	; 0xeeca <__umulhisi3>
    eefc:	a5 9f       	mul	r26, r21
    eefe:	90 0d       	add	r25, r0
    ef00:	b4 9f       	mul	r27, r20
    ef02:	90 0d       	add	r25, r0
    ef04:	a4 9f       	mul	r26, r20
    ef06:	80 0d       	add	r24, r0
    ef08:	91 1d       	adc	r25, r1
    ef0a:	11 24       	eor	r1, r1
    ef0c:	08 95       	ret

0000ef0e <malloc>:
    ef0e:	0f 93       	push	r16
    ef10:	1f 93       	push	r17
    ef12:	cf 93       	push	r28
    ef14:	df 93       	push	r29
    ef16:	82 30       	cpi	r24, 0x02	; 2
    ef18:	91 05       	cpc	r25, r1
    ef1a:	10 f4       	brcc	.+4      	; 0xef20 <malloc+0x12>
    ef1c:	82 e0       	ldi	r24, 0x02	; 2
    ef1e:	90 e0       	ldi	r25, 0x00	; 0
    ef20:	e0 91 4c 2a 	lds	r30, 0x2A4C	; 0x802a4c <__flp>
    ef24:	f0 91 4d 2a 	lds	r31, 0x2A4D	; 0x802a4d <__flp+0x1>
    ef28:	20 e0       	ldi	r18, 0x00	; 0
    ef2a:	30 e0       	ldi	r19, 0x00	; 0
    ef2c:	a0 e0       	ldi	r26, 0x00	; 0
    ef2e:	b0 e0       	ldi	r27, 0x00	; 0
    ef30:	30 97       	sbiw	r30, 0x00	; 0
    ef32:	19 f1       	breq	.+70     	; 0xef7a <malloc+0x6c>
    ef34:	40 81       	ld	r20, Z
    ef36:	51 81       	ldd	r21, Z+1	; 0x01
    ef38:	02 81       	ldd	r16, Z+2	; 0x02
    ef3a:	13 81       	ldd	r17, Z+3	; 0x03
    ef3c:	48 17       	cp	r20, r24
    ef3e:	59 07       	cpc	r21, r25
    ef40:	c8 f0       	brcs	.+50     	; 0xef74 <malloc+0x66>
    ef42:	84 17       	cp	r24, r20
    ef44:	95 07       	cpc	r25, r21
    ef46:	69 f4       	brne	.+26     	; 0xef62 <malloc+0x54>
    ef48:	10 97       	sbiw	r26, 0x00	; 0
    ef4a:	31 f0       	breq	.+12     	; 0xef58 <malloc+0x4a>
    ef4c:	12 96       	adiw	r26, 0x02	; 2
    ef4e:	0c 93       	st	X, r16
    ef50:	12 97       	sbiw	r26, 0x02	; 2
    ef52:	13 96       	adiw	r26, 0x03	; 3
    ef54:	1c 93       	st	X, r17
    ef56:	27 c0       	rjmp	.+78     	; 0xefa6 <malloc+0x98>
    ef58:	00 93 4c 2a 	sts	0x2A4C, r16	; 0x802a4c <__flp>
    ef5c:	10 93 4d 2a 	sts	0x2A4D, r17	; 0x802a4d <__flp+0x1>
    ef60:	22 c0       	rjmp	.+68     	; 0xefa6 <malloc+0x98>
    ef62:	21 15       	cp	r18, r1
    ef64:	31 05       	cpc	r19, r1
    ef66:	19 f0       	breq	.+6      	; 0xef6e <malloc+0x60>
    ef68:	42 17       	cp	r20, r18
    ef6a:	53 07       	cpc	r21, r19
    ef6c:	18 f4       	brcc	.+6      	; 0xef74 <malloc+0x66>
    ef6e:	9a 01       	movw	r18, r20
    ef70:	bd 01       	movw	r22, r26
    ef72:	ef 01       	movw	r28, r30
    ef74:	df 01       	movw	r26, r30
    ef76:	f8 01       	movw	r30, r16
    ef78:	db cf       	rjmp	.-74     	; 0xef30 <malloc+0x22>
    ef7a:	21 15       	cp	r18, r1
    ef7c:	31 05       	cpc	r19, r1
    ef7e:	f9 f0       	breq	.+62     	; 0xefbe <malloc+0xb0>
    ef80:	28 1b       	sub	r18, r24
    ef82:	39 0b       	sbc	r19, r25
    ef84:	24 30       	cpi	r18, 0x04	; 4
    ef86:	31 05       	cpc	r19, r1
    ef88:	80 f4       	brcc	.+32     	; 0xefaa <malloc+0x9c>
    ef8a:	8a 81       	ldd	r24, Y+2	; 0x02
    ef8c:	9b 81       	ldd	r25, Y+3	; 0x03
    ef8e:	61 15       	cp	r22, r1
    ef90:	71 05       	cpc	r23, r1
    ef92:	21 f0       	breq	.+8      	; 0xef9c <malloc+0x8e>
    ef94:	fb 01       	movw	r30, r22
    ef96:	82 83       	std	Z+2, r24	; 0x02
    ef98:	93 83       	std	Z+3, r25	; 0x03
    ef9a:	04 c0       	rjmp	.+8      	; 0xefa4 <malloc+0x96>
    ef9c:	80 93 4c 2a 	sts	0x2A4C, r24	; 0x802a4c <__flp>
    efa0:	90 93 4d 2a 	sts	0x2A4D, r25	; 0x802a4d <__flp+0x1>
    efa4:	fe 01       	movw	r30, r28
    efa6:	32 96       	adiw	r30, 0x02	; 2
    efa8:	44 c0       	rjmp	.+136    	; 0xf032 <malloc+0x124>
    efaa:	fe 01       	movw	r30, r28
    efac:	e2 0f       	add	r30, r18
    efae:	f3 1f       	adc	r31, r19
    efb0:	81 93       	st	Z+, r24
    efb2:	91 93       	st	Z+, r25
    efb4:	22 50       	subi	r18, 0x02	; 2
    efb6:	31 09       	sbc	r19, r1
    efb8:	28 83       	st	Y, r18
    efba:	39 83       	std	Y+1, r19	; 0x01
    efbc:	3a c0       	rjmp	.+116    	; 0xf032 <malloc+0x124>
    efbe:	20 91 4a 2a 	lds	r18, 0x2A4A	; 0x802a4a <__brkval>
    efc2:	30 91 4b 2a 	lds	r19, 0x2A4B	; 0x802a4b <__brkval+0x1>
    efc6:	23 2b       	or	r18, r19
    efc8:	41 f4       	brne	.+16     	; 0xefda <malloc+0xcc>
    efca:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    efce:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    efd2:	20 93 4a 2a 	sts	0x2A4A, r18	; 0x802a4a <__brkval>
    efd6:	30 93 4b 2a 	sts	0x2A4B, r19	; 0x802a4b <__brkval+0x1>
    efda:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    efde:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    efe2:	21 15       	cp	r18, r1
    efe4:	31 05       	cpc	r19, r1
    efe6:	41 f4       	brne	.+16     	; 0xeff8 <malloc+0xea>
    efe8:	2d b7       	in	r18, 0x3d	; 61
    efea:	3e b7       	in	r19, 0x3e	; 62
    efec:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    eff0:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    eff4:	24 1b       	sub	r18, r20
    eff6:	35 0b       	sbc	r19, r21
    eff8:	e0 91 4a 2a 	lds	r30, 0x2A4A	; 0x802a4a <__brkval>
    effc:	f0 91 4b 2a 	lds	r31, 0x2A4B	; 0x802a4b <__brkval+0x1>
    f000:	e2 17       	cp	r30, r18
    f002:	f3 07       	cpc	r31, r19
    f004:	a0 f4       	brcc	.+40     	; 0xf02e <malloc+0x120>
    f006:	2e 1b       	sub	r18, r30
    f008:	3f 0b       	sbc	r19, r31
    f00a:	28 17       	cp	r18, r24
    f00c:	39 07       	cpc	r19, r25
    f00e:	78 f0       	brcs	.+30     	; 0xf02e <malloc+0x120>
    f010:	ac 01       	movw	r20, r24
    f012:	4e 5f       	subi	r20, 0xFE	; 254
    f014:	5f 4f       	sbci	r21, 0xFF	; 255
    f016:	24 17       	cp	r18, r20
    f018:	35 07       	cpc	r19, r21
    f01a:	48 f0       	brcs	.+18     	; 0xf02e <malloc+0x120>
    f01c:	4e 0f       	add	r20, r30
    f01e:	5f 1f       	adc	r21, r31
    f020:	40 93 4a 2a 	sts	0x2A4A, r20	; 0x802a4a <__brkval>
    f024:	50 93 4b 2a 	sts	0x2A4B, r21	; 0x802a4b <__brkval+0x1>
    f028:	81 93       	st	Z+, r24
    f02a:	91 93       	st	Z+, r25
    f02c:	02 c0       	rjmp	.+4      	; 0xf032 <malloc+0x124>
    f02e:	e0 e0       	ldi	r30, 0x00	; 0
    f030:	f0 e0       	ldi	r31, 0x00	; 0
    f032:	cf 01       	movw	r24, r30
    f034:	df 91       	pop	r29
    f036:	cf 91       	pop	r28
    f038:	1f 91       	pop	r17
    f03a:	0f 91       	pop	r16
    f03c:	08 95       	ret

0000f03e <free>:
    f03e:	cf 93       	push	r28
    f040:	df 93       	push	r29
    f042:	00 97       	sbiw	r24, 0x00	; 0
    f044:	09 f4       	brne	.+2      	; 0xf048 <free+0xa>
    f046:	81 c0       	rjmp	.+258    	; 0xf14a <free+0x10c>
    f048:	fc 01       	movw	r30, r24
    f04a:	32 97       	sbiw	r30, 0x02	; 2
    f04c:	12 82       	std	Z+2, r1	; 0x02
    f04e:	13 82       	std	Z+3, r1	; 0x03
    f050:	a0 91 4c 2a 	lds	r26, 0x2A4C	; 0x802a4c <__flp>
    f054:	b0 91 4d 2a 	lds	r27, 0x2A4D	; 0x802a4d <__flp+0x1>
    f058:	10 97       	sbiw	r26, 0x00	; 0
    f05a:	81 f4       	brne	.+32     	; 0xf07c <free+0x3e>
    f05c:	20 81       	ld	r18, Z
    f05e:	31 81       	ldd	r19, Z+1	; 0x01
    f060:	82 0f       	add	r24, r18
    f062:	93 1f       	adc	r25, r19
    f064:	20 91 4a 2a 	lds	r18, 0x2A4A	; 0x802a4a <__brkval>
    f068:	30 91 4b 2a 	lds	r19, 0x2A4B	; 0x802a4b <__brkval+0x1>
    f06c:	28 17       	cp	r18, r24
    f06e:	39 07       	cpc	r19, r25
    f070:	51 f5       	brne	.+84     	; 0xf0c6 <free+0x88>
    f072:	e0 93 4a 2a 	sts	0x2A4A, r30	; 0x802a4a <__brkval>
    f076:	f0 93 4b 2a 	sts	0x2A4B, r31	; 0x802a4b <__brkval+0x1>
    f07a:	67 c0       	rjmp	.+206    	; 0xf14a <free+0x10c>
    f07c:	ed 01       	movw	r28, r26
    f07e:	20 e0       	ldi	r18, 0x00	; 0
    f080:	30 e0       	ldi	r19, 0x00	; 0
    f082:	ce 17       	cp	r28, r30
    f084:	df 07       	cpc	r29, r31
    f086:	40 f4       	brcc	.+16     	; 0xf098 <free+0x5a>
    f088:	4a 81       	ldd	r20, Y+2	; 0x02
    f08a:	5b 81       	ldd	r21, Y+3	; 0x03
    f08c:	9e 01       	movw	r18, r28
    f08e:	41 15       	cp	r20, r1
    f090:	51 05       	cpc	r21, r1
    f092:	f1 f0       	breq	.+60     	; 0xf0d0 <free+0x92>
    f094:	ea 01       	movw	r28, r20
    f096:	f5 cf       	rjmp	.-22     	; 0xf082 <free+0x44>
    f098:	c2 83       	std	Z+2, r28	; 0x02
    f09a:	d3 83       	std	Z+3, r29	; 0x03
    f09c:	40 81       	ld	r20, Z
    f09e:	51 81       	ldd	r21, Z+1	; 0x01
    f0a0:	84 0f       	add	r24, r20
    f0a2:	95 1f       	adc	r25, r21
    f0a4:	c8 17       	cp	r28, r24
    f0a6:	d9 07       	cpc	r29, r25
    f0a8:	59 f4       	brne	.+22     	; 0xf0c0 <free+0x82>
    f0aa:	88 81       	ld	r24, Y
    f0ac:	99 81       	ldd	r25, Y+1	; 0x01
    f0ae:	84 0f       	add	r24, r20
    f0b0:	95 1f       	adc	r25, r21
    f0b2:	02 96       	adiw	r24, 0x02	; 2
    f0b4:	80 83       	st	Z, r24
    f0b6:	91 83       	std	Z+1, r25	; 0x01
    f0b8:	8a 81       	ldd	r24, Y+2	; 0x02
    f0ba:	9b 81       	ldd	r25, Y+3	; 0x03
    f0bc:	82 83       	std	Z+2, r24	; 0x02
    f0be:	93 83       	std	Z+3, r25	; 0x03
    f0c0:	21 15       	cp	r18, r1
    f0c2:	31 05       	cpc	r19, r1
    f0c4:	29 f4       	brne	.+10     	; 0xf0d0 <free+0x92>
    f0c6:	e0 93 4c 2a 	sts	0x2A4C, r30	; 0x802a4c <__flp>
    f0ca:	f0 93 4d 2a 	sts	0x2A4D, r31	; 0x802a4d <__flp+0x1>
    f0ce:	3d c0       	rjmp	.+122    	; 0xf14a <free+0x10c>
    f0d0:	e9 01       	movw	r28, r18
    f0d2:	ea 83       	std	Y+2, r30	; 0x02
    f0d4:	fb 83       	std	Y+3, r31	; 0x03
    f0d6:	49 91       	ld	r20, Y+
    f0d8:	59 91       	ld	r21, Y+
    f0da:	c4 0f       	add	r28, r20
    f0dc:	d5 1f       	adc	r29, r21
    f0de:	ec 17       	cp	r30, r28
    f0e0:	fd 07       	cpc	r31, r29
    f0e2:	61 f4       	brne	.+24     	; 0xf0fc <free+0xbe>
    f0e4:	80 81       	ld	r24, Z
    f0e6:	91 81       	ldd	r25, Z+1	; 0x01
    f0e8:	84 0f       	add	r24, r20
    f0ea:	95 1f       	adc	r25, r21
    f0ec:	02 96       	adiw	r24, 0x02	; 2
    f0ee:	e9 01       	movw	r28, r18
    f0f0:	88 83       	st	Y, r24
    f0f2:	99 83       	std	Y+1, r25	; 0x01
    f0f4:	82 81       	ldd	r24, Z+2	; 0x02
    f0f6:	93 81       	ldd	r25, Z+3	; 0x03
    f0f8:	8a 83       	std	Y+2, r24	; 0x02
    f0fa:	9b 83       	std	Y+3, r25	; 0x03
    f0fc:	e0 e0       	ldi	r30, 0x00	; 0
    f0fe:	f0 e0       	ldi	r31, 0x00	; 0
    f100:	12 96       	adiw	r26, 0x02	; 2
    f102:	8d 91       	ld	r24, X+
    f104:	9c 91       	ld	r25, X
    f106:	13 97       	sbiw	r26, 0x03	; 3
    f108:	00 97       	sbiw	r24, 0x00	; 0
    f10a:	19 f0       	breq	.+6      	; 0xf112 <free+0xd4>
    f10c:	fd 01       	movw	r30, r26
    f10e:	dc 01       	movw	r26, r24
    f110:	f7 cf       	rjmp	.-18     	; 0xf100 <free+0xc2>
    f112:	8d 91       	ld	r24, X+
    f114:	9c 91       	ld	r25, X
    f116:	11 97       	sbiw	r26, 0x01	; 1
    f118:	9d 01       	movw	r18, r26
    f11a:	2e 5f       	subi	r18, 0xFE	; 254
    f11c:	3f 4f       	sbci	r19, 0xFF	; 255
    f11e:	82 0f       	add	r24, r18
    f120:	93 1f       	adc	r25, r19
    f122:	20 91 4a 2a 	lds	r18, 0x2A4A	; 0x802a4a <__brkval>
    f126:	30 91 4b 2a 	lds	r19, 0x2A4B	; 0x802a4b <__brkval+0x1>
    f12a:	28 17       	cp	r18, r24
    f12c:	39 07       	cpc	r19, r25
    f12e:	69 f4       	brne	.+26     	; 0xf14a <free+0x10c>
    f130:	30 97       	sbiw	r30, 0x00	; 0
    f132:	29 f4       	brne	.+10     	; 0xf13e <free+0x100>
    f134:	10 92 4c 2a 	sts	0x2A4C, r1	; 0x802a4c <__flp>
    f138:	10 92 4d 2a 	sts	0x2A4D, r1	; 0x802a4d <__flp+0x1>
    f13c:	02 c0       	rjmp	.+4      	; 0xf142 <free+0x104>
    f13e:	12 82       	std	Z+2, r1	; 0x02
    f140:	13 82       	std	Z+3, r1	; 0x03
    f142:	a0 93 4a 2a 	sts	0x2A4A, r26	; 0x802a4a <__brkval>
    f146:	b0 93 4b 2a 	sts	0x2A4B, r27	; 0x802a4b <__brkval+0x1>
    f14a:	df 91       	pop	r29
    f14c:	cf 91       	pop	r28
    f14e:	08 95       	ret

0000f150 <swapfunc>:
    f150:	dc 01       	movw	r26, r24
    f152:	fb 01       	movw	r30, r22
    f154:	8c 91       	ld	r24, X
    f156:	90 81       	ld	r25, Z
    f158:	9d 93       	st	X+, r25
    f15a:	81 93       	st	Z+, r24
    f15c:	41 50       	subi	r20, 0x01	; 1
    f15e:	51 09       	sbc	r21, r1
    f160:	14 16       	cp	r1, r20
    f162:	15 06       	cpc	r1, r21
    f164:	bc f3       	brlt	.-18     	; 0xf154 <swapfunc+0x4>
    f166:	08 95       	ret

0000f168 <med3>:
    f168:	cf 92       	push	r12
    f16a:	df 92       	push	r13
    f16c:	ef 92       	push	r14
    f16e:	ff 92       	push	r15
    f170:	0f 93       	push	r16
    f172:	1f 93       	push	r17
    f174:	cf 93       	push	r28
    f176:	df 93       	push	r29
    f178:	7c 01       	movw	r14, r24
    f17a:	6b 01       	movw	r12, r22
    f17c:	d4 2f       	mov	r29, r20
    f17e:	c5 2f       	mov	r28, r21
    f180:	89 01       	movw	r16, r18
    f182:	f9 01       	movw	r30, r18
    f184:	19 95       	eicall
    f186:	6d 2f       	mov	r22, r29
    f188:	7c 2f       	mov	r23, r28
    f18a:	97 ff       	sbrs	r25, 7
    f18c:	10 c0       	rjmp	.+32     	; 0xf1ae <med3+0x46>
    f18e:	c6 01       	movw	r24, r12
    f190:	f8 01       	movw	r30, r16
    f192:	19 95       	eicall
    f194:	97 ff       	sbrs	r25, 7
    f196:	02 c0       	rjmp	.+4      	; 0xf19c <med3+0x34>
    f198:	c6 01       	movw	r24, r12
    f19a:	18 c0       	rjmp	.+48     	; 0xf1cc <med3+0x64>
    f19c:	6d 2f       	mov	r22, r29
    f19e:	7c 2f       	mov	r23, r28
    f1a0:	c7 01       	movw	r24, r14
    f1a2:	f8 01       	movw	r30, r16
    f1a4:	19 95       	eicall
    f1a6:	97 fd       	sbrc	r25, 7
    f1a8:	0f c0       	rjmp	.+30     	; 0xf1c8 <med3+0x60>
    f1aa:	c7 01       	movw	r24, r14
    f1ac:	0f c0       	rjmp	.+30     	; 0xf1cc <med3+0x64>
    f1ae:	c6 01       	movw	r24, r12
    f1b0:	f8 01       	movw	r30, r16
    f1b2:	19 95       	eicall
    f1b4:	18 16       	cp	r1, r24
    f1b6:	19 06       	cpc	r1, r25
    f1b8:	7c f3       	brlt	.-34     	; 0xf198 <med3+0x30>
    f1ba:	6d 2f       	mov	r22, r29
    f1bc:	7c 2f       	mov	r23, r28
    f1be:	c7 01       	movw	r24, r14
    f1c0:	f8 01       	movw	r30, r16
    f1c2:	19 95       	eicall
    f1c4:	97 fd       	sbrc	r25, 7
    f1c6:	f1 cf       	rjmp	.-30     	; 0xf1aa <med3+0x42>
    f1c8:	8d 2f       	mov	r24, r29
    f1ca:	9c 2f       	mov	r25, r28
    f1cc:	df 91       	pop	r29
    f1ce:	cf 91       	pop	r28
    f1d0:	1f 91       	pop	r17
    f1d2:	0f 91       	pop	r16
    f1d4:	ff 90       	pop	r15
    f1d6:	ef 90       	pop	r14
    f1d8:	df 90       	pop	r13
    f1da:	cf 90       	pop	r12
    f1dc:	08 95       	ret

0000f1de <qsort>:
    f1de:	2f 92       	push	r2
    f1e0:	3f 92       	push	r3
    f1e2:	4f 92       	push	r4
    f1e4:	5f 92       	push	r5
    f1e6:	6f 92       	push	r6
    f1e8:	7f 92       	push	r7
    f1ea:	8f 92       	push	r8
    f1ec:	9f 92       	push	r9
    f1ee:	af 92       	push	r10
    f1f0:	bf 92       	push	r11
    f1f2:	cf 92       	push	r12
    f1f4:	df 92       	push	r13
    f1f6:	ef 92       	push	r14
    f1f8:	ff 92       	push	r15
    f1fa:	0f 93       	push	r16
    f1fc:	1f 93       	push	r17
    f1fe:	cf 93       	push	r28
    f200:	df 93       	push	r29
    f202:	cd b7       	in	r28, 0x3d	; 61
    f204:	de b7       	in	r29, 0x3e	; 62
    f206:	2a 97       	sbiw	r28, 0x0a	; 10
    f208:	cd bf       	out	0x3d, r28	; 61
    f20a:	de bf       	out	0x3e, r29	; 62
    f20c:	8c 01       	movw	r16, r24
    f20e:	7b 01       	movw	r14, r22
    f210:	49 87       	std	Y+9, r20	; 0x09
    f212:	5a 87       	std	Y+10, r21	; 0x0a
    f214:	69 01       	movw	r12, r18
    f216:	29 85       	ldd	r18, Y+9	; 0x09
    f218:	3a 85       	ldd	r19, Y+10	; 0x0a
    f21a:	20 0f       	add	r18, r16
    f21c:	31 1f       	adc	r19, r17
    f21e:	29 83       	std	Y+1, r18	; 0x01
    f220:	3a 83       	std	Y+2, r19	; 0x02
    f222:	37 e0       	ldi	r19, 0x07	; 7
    f224:	e3 16       	cp	r14, r19
    f226:	f1 04       	cpc	r15, r1
    f228:	70 f5       	brcc	.+92     	; 0xf286 <qsort+0xa8>
    f22a:	69 80       	ldd	r6, Y+1	; 0x01
    f22c:	7a 80       	ldd	r7, Y+2	; 0x02
    f22e:	49 85       	ldd	r20, Y+9	; 0x09
    f230:	5a 85       	ldd	r21, Y+10	; 0x0a
    f232:	e4 9e       	mul	r14, r20
    f234:	50 01       	movw	r10, r0
    f236:	e5 9e       	mul	r14, r21
    f238:	b0 0c       	add	r11, r0
    f23a:	f4 9e       	mul	r15, r20
    f23c:	b0 0c       	add	r11, r0
    f23e:	11 24       	eor	r1, r1
    f240:	a0 0e       	add	r10, r16
    f242:	b1 1e       	adc	r11, r17
    f244:	6a 14       	cp	r6, r10
    f246:	7b 04       	cpc	r7, r11
    f248:	08 f0       	brcs	.+2      	; 0xf24c <qsort+0x6e>
    f24a:	7a c1       	rjmp	.+756    	; 0xf540 <qsort+0x362>
    f24c:	73 01       	movw	r14, r6
    f24e:	0e 15       	cp	r16, r14
    f250:	1f 05       	cpc	r17, r15
    f252:	28 f0       	brcs	.+10     	; 0xf25e <qsort+0x80>
    f254:	89 85       	ldd	r24, Y+9	; 0x09
    f256:	9a 85       	ldd	r25, Y+10	; 0x0a
    f258:	68 0e       	add	r6, r24
    f25a:	79 1e       	adc	r7, r25
    f25c:	f3 cf       	rjmp	.-26     	; 0xf244 <qsort+0x66>
    f25e:	47 01       	movw	r8, r14
    f260:	e9 85       	ldd	r30, Y+9	; 0x09
    f262:	fa 85       	ldd	r31, Y+10	; 0x0a
    f264:	8e 1a       	sub	r8, r30
    f266:	9f 0a       	sbc	r9, r31
    f268:	b7 01       	movw	r22, r14
    f26a:	c4 01       	movw	r24, r8
    f26c:	f6 01       	movw	r30, r12
    f26e:	19 95       	eicall
    f270:	18 16       	cp	r1, r24
    f272:	19 06       	cpc	r1, r25
    f274:	7c f7       	brge	.-34     	; 0xf254 <qsort+0x76>
    f276:	49 85       	ldd	r20, Y+9	; 0x09
    f278:	5a 85       	ldd	r21, Y+10	; 0x0a
    f27a:	b4 01       	movw	r22, r8
    f27c:	c7 01       	movw	r24, r14
    f27e:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f282:	74 01       	movw	r14, r8
    f284:	e4 cf       	rjmp	.-56     	; 0xf24e <qsort+0x70>
    f286:	c7 01       	movw	r24, r14
    f288:	96 95       	lsr	r25
    f28a:	87 95       	ror	r24
    f28c:	29 85       	ldd	r18, Y+9	; 0x09
    f28e:	3a 85       	ldd	r19, Y+10	; 0x0a
    f290:	82 9f       	mul	r24, r18
    f292:	50 01       	movw	r10, r0
    f294:	83 9f       	mul	r24, r19
    f296:	b0 0c       	add	r11, r0
    f298:	92 9f       	mul	r25, r18
    f29a:	b0 0c       	add	r11, r0
    f29c:	11 24       	eor	r1, r1
    f29e:	a0 0e       	add	r10, r16
    f2a0:	b1 1e       	adc	r11, r17
    f2a2:	a7 01       	movw	r20, r14
    f2a4:	41 50       	subi	r20, 0x01	; 1
    f2a6:	51 09       	sbc	r21, r1
    f2a8:	4b 83       	std	Y+3, r20	; 0x03
    f2aa:	5c 83       	std	Y+4, r21	; 0x04
    f2ac:	57 e0       	ldi	r21, 0x07	; 7
    f2ae:	e5 16       	cp	r14, r21
    f2b0:	f1 04       	cpc	r15, r1
    f2b2:	09 f4       	brne	.+2      	; 0xf2b6 <qsort+0xd8>
    f2b4:	4c c0       	rjmp	.+152    	; 0xf34e <qsort+0x170>
    f2b6:	8b 81       	ldd	r24, Y+3	; 0x03
    f2b8:	9c 81       	ldd	r25, Y+4	; 0x04
    f2ba:	82 9f       	mul	r24, r18
    f2bc:	30 01       	movw	r6, r0
    f2be:	83 9f       	mul	r24, r19
    f2c0:	70 0c       	add	r7, r0
    f2c2:	92 9f       	mul	r25, r18
    f2c4:	70 0c       	add	r7, r0
    f2c6:	11 24       	eor	r1, r1
    f2c8:	60 0e       	add	r6, r16
    f2ca:	71 1e       	adc	r7, r17
    f2cc:	99 e2       	ldi	r25, 0x29	; 41
    f2ce:	e9 16       	cp	r14, r25
    f2d0:	f1 04       	cpc	r15, r1
    f2d2:	a8 f1       	brcs	.+106    	; 0xf33e <qsort+0x160>
    f2d4:	c7 01       	movw	r24, r14
    f2d6:	43 e0       	ldi	r20, 0x03	; 3
    f2d8:	96 95       	lsr	r25
    f2da:	87 95       	ror	r24
    f2dc:	4a 95       	dec	r20
    f2de:	e1 f7       	brne	.-8      	; 0xf2d8 <qsort+0xfa>
    f2e0:	82 9f       	mul	r24, r18
    f2e2:	40 01       	movw	r8, r0
    f2e4:	83 9f       	mul	r24, r19
    f2e6:	90 0c       	add	r9, r0
    f2e8:	92 9f       	mul	r25, r18
    f2ea:	90 0c       	add	r9, r0
    f2ec:	11 24       	eor	r1, r1
    f2ee:	14 01       	movw	r2, r8
    f2f0:	22 0c       	add	r2, r2
    f2f2:	33 1c       	adc	r3, r3
    f2f4:	a8 01       	movw	r20, r16
    f2f6:	42 0d       	add	r20, r2
    f2f8:	53 1d       	adc	r21, r3
    f2fa:	b8 01       	movw	r22, r16
    f2fc:	68 0d       	add	r22, r8
    f2fe:	79 1d       	adc	r23, r9
    f300:	96 01       	movw	r18, r12
    f302:	c8 01       	movw	r24, r16
    f304:	0e 94 b4 78 	call	0xf168	; 0xf168 <med3>
    f308:	2c 01       	movw	r4, r24
    f30a:	a5 01       	movw	r20, r10
    f30c:	48 0d       	add	r20, r8
    f30e:	59 1d       	adc	r21, r9
    f310:	91 94       	neg	r9
    f312:	81 94       	neg	r8
    f314:	91 08       	sbc	r9, r1
    f316:	96 01       	movw	r18, r12
    f318:	b5 01       	movw	r22, r10
    f31a:	c5 01       	movw	r24, r10
    f31c:	88 0d       	add	r24, r8
    f31e:	99 1d       	adc	r25, r9
    f320:	0e 94 b4 78 	call	0xf168	; 0xf168 <med3>
    f324:	5c 01       	movw	r10, r24
    f326:	b3 01       	movw	r22, r6
    f328:	68 0d       	add	r22, r8
    f32a:	79 1d       	adc	r23, r9
    f32c:	96 01       	movw	r18, r12
    f32e:	a3 01       	movw	r20, r6
    f330:	c3 01       	movw	r24, r6
    f332:	82 19       	sub	r24, r2
    f334:	93 09       	sbc	r25, r3
    f336:	0e 94 b4 78 	call	0xf168	; 0xf168 <med3>
    f33a:	3c 01       	movw	r6, r24
    f33c:	01 c0       	rjmp	.+2      	; 0xf340 <qsort+0x162>
    f33e:	28 01       	movw	r4, r16
    f340:	96 01       	movw	r18, r12
    f342:	a3 01       	movw	r20, r6
    f344:	b5 01       	movw	r22, r10
    f346:	c2 01       	movw	r24, r4
    f348:	0e 94 b4 78 	call	0xf168	; 0xf168 <med3>
    f34c:	5c 01       	movw	r10, r24
    f34e:	49 85       	ldd	r20, Y+9	; 0x09
    f350:	5a 85       	ldd	r21, Y+10	; 0x0a
    f352:	b5 01       	movw	r22, r10
    f354:	c8 01       	movw	r24, r16
    f356:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f35a:	69 80       	ldd	r6, Y+1	; 0x01
    f35c:	7a 80       	ldd	r7, Y+2	; 0x02
    f35e:	2b 81       	ldd	r18, Y+3	; 0x03
    f360:	3c 81       	ldd	r19, Y+4	; 0x04
    f362:	49 85       	ldd	r20, Y+9	; 0x09
    f364:	5a 85       	ldd	r21, Y+10	; 0x0a
    f366:	24 9f       	mul	r18, r20
    f368:	f0 01       	movw	r30, r0
    f36a:	25 9f       	mul	r18, r21
    f36c:	f0 0d       	add	r31, r0
    f36e:	34 9f       	mul	r19, r20
    f370:	f0 0d       	add	r31, r0
    f372:	11 24       	eor	r1, r1
    f374:	ed 83       	std	Y+5, r30	; 0x05
    f376:	fe 83       	std	Y+6, r31	; 0x06
    f378:	5f 01       	movw	r10, r30
    f37a:	a0 0e       	add	r10, r16
    f37c:	b1 1e       	adc	r11, r17
    f37e:	46 0d       	add	r20, r6
    f380:	57 1d       	adc	r21, r7
    f382:	4b 83       	std	Y+3, r20	; 0x03
    f384:	5c 83       	std	Y+4, r21	; 0x04
    f386:	25 01       	movw	r4, r10
    f388:	13 01       	movw	r2, r6
    f38a:	19 82       	std	Y+1, r1	; 0x01
    f38c:	1a 82       	std	Y+2, r1	; 0x02
    f38e:	8b 80       	ldd	r8, Y+3	; 0x03
    f390:	9c 80       	ldd	r9, Y+4	; 0x04
    f392:	89 85       	ldd	r24, Y+9	; 0x09
    f394:	9a 85       	ldd	r25, Y+10	; 0x0a
    f396:	88 1a       	sub	r8, r24
    f398:	99 0a       	sbc	r9, r25
    f39a:	a8 14       	cp	r10, r8
    f39c:	b9 04       	cpc	r11, r9
    f39e:	08 f4       	brcc	.+2      	; 0xf3a2 <qsort+0x1c4>
    f3a0:	50 c0       	rjmp	.+160    	; 0xf442 <qsort+0x264>
    f3a2:	b8 01       	movw	r22, r16
    f3a4:	c4 01       	movw	r24, r8
    f3a6:	f6 01       	movw	r30, r12
    f3a8:	19 95       	eicall
    f3aa:	18 16       	cp	r1, r24
    f3ac:	19 06       	cpc	r1, r25
    f3ae:	c4 f1       	brlt	.+112    	; 0xf420 <qsort+0x242>
    f3b0:	89 2b       	or	r24, r25
    f3b2:	71 f4       	brne	.+28     	; 0xf3d0 <qsort+0x1f2>
    f3b4:	49 85       	ldd	r20, Y+9	; 0x09
    f3b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    f3b8:	b4 01       	movw	r22, r8
    f3ba:	c1 01       	movw	r24, r2
    f3bc:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f3c0:	89 85       	ldd	r24, Y+9	; 0x09
    f3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    f3c4:	28 0e       	add	r2, r24
    f3c6:	39 1e       	adc	r3, r25
    f3c8:	e1 e0       	ldi	r30, 0x01	; 1
    f3ca:	f0 e0       	ldi	r31, 0x00	; 0
    f3cc:	e9 83       	std	Y+1, r30	; 0x01
    f3ce:	fa 83       	std	Y+2, r31	; 0x02
    f3d0:	2b 81       	ldd	r18, Y+3	; 0x03
    f3d2:	3c 81       	ldd	r19, Y+4	; 0x04
    f3d4:	49 85       	ldd	r20, Y+9	; 0x09
    f3d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    f3d8:	24 0f       	add	r18, r20
    f3da:	35 1f       	adc	r19, r21
    f3dc:	2b 83       	std	Y+3, r18	; 0x03
    f3de:	3c 83       	std	Y+4, r19	; 0x04
    f3e0:	d6 cf       	rjmp	.-84     	; 0xf38e <qsort+0x1b0>
    f3e2:	b8 01       	movw	r22, r16
    f3e4:	c5 01       	movw	r24, r10
    f3e6:	f6 01       	movw	r30, r12
    f3e8:	19 95       	eicall
    f3ea:	95 01       	movw	r18, r10
    f3ec:	49 85       	ldd	r20, Y+9	; 0x09
    f3ee:	5a 85       	ldd	r21, Y+10	; 0x0a
    f3f0:	24 1b       	sub	r18, r20
    f3f2:	35 0b       	sbc	r19, r21
    f3f4:	2f 83       	std	Y+7, r18	; 0x07
    f3f6:	38 87       	std	Y+8, r19	; 0x08
    f3f8:	97 fd       	sbrc	r25, 7
    f3fa:	16 c0       	rjmp	.+44     	; 0xf428 <qsort+0x24a>
    f3fc:	89 2b       	or	r24, r25
    f3fe:	71 f4       	brne	.+28     	; 0xf41c <qsort+0x23e>
    f400:	49 85       	ldd	r20, Y+9	; 0x09
    f402:	5a 85       	ldd	r21, Y+10	; 0x0a
    f404:	b2 01       	movw	r22, r4
    f406:	c5 01       	movw	r24, r10
    f408:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f40c:	29 85       	ldd	r18, Y+9	; 0x09
    f40e:	3a 85       	ldd	r19, Y+10	; 0x0a
    f410:	42 1a       	sub	r4, r18
    f412:	53 0a       	sbc	r5, r19
    f414:	41 e0       	ldi	r20, 0x01	; 1
    f416:	50 e0       	ldi	r21, 0x00	; 0
    f418:	49 83       	std	Y+1, r20	; 0x01
    f41a:	5a 83       	std	Y+2, r21	; 0x02
    f41c:	af 80       	ldd	r10, Y+7	; 0x07
    f41e:	b8 84       	ldd	r11, Y+8	; 0x08
    f420:	a8 14       	cp	r10, r8
    f422:	b9 04       	cpc	r11, r9
    f424:	f0 f6       	brcc	.-68     	; 0xf3e2 <qsort+0x204>
    f426:	0d c0       	rjmp	.+26     	; 0xf442 <qsort+0x264>
    f428:	49 85       	ldd	r20, Y+9	; 0x09
    f42a:	5a 85       	ldd	r21, Y+10	; 0x0a
    f42c:	b5 01       	movw	r22, r10
    f42e:	c4 01       	movw	r24, r8
    f430:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f434:	af 80       	ldd	r10, Y+7	; 0x07
    f436:	b8 84       	ldd	r11, Y+8	; 0x08
    f438:	41 e0       	ldi	r20, 0x01	; 1
    f43a:	50 e0       	ldi	r21, 0x00	; 0
    f43c:	49 83       	std	Y+1, r20	; 0x01
    f43e:	5a 83       	std	Y+2, r21	; 0x02
    f440:	c7 cf       	rjmp	.-114    	; 0xf3d0 <qsort+0x1f2>
    f442:	89 81       	ldd	r24, Y+1	; 0x01
    f444:	9a 81       	ldd	r25, Y+2	; 0x02
    f446:	89 2b       	or	r24, r25
    f448:	09 f4       	brne	.+2      	; 0xf44c <qsort+0x26e>
    f44a:	4f c0       	rjmp	.+158    	; 0xf4ea <qsort+0x30c>
    f44c:	6d 80       	ldd	r6, Y+5	; 0x05
    f44e:	7e 80       	ldd	r7, Y+6	; 0x06
    f450:	29 85       	ldd	r18, Y+9	; 0x09
    f452:	3a 85       	ldd	r19, Y+10	; 0x0a
    f454:	62 0e       	add	r6, r18
    f456:	73 1e       	adc	r7, r19
    f458:	60 0e       	add	r6, r16
    f45a:	71 1e       	adc	r7, r17
    f45c:	74 01       	movw	r14, r8
    f45e:	e2 18       	sub	r14, r2
    f460:	f3 08       	sbc	r15, r3
    f462:	a1 01       	movw	r20, r2
    f464:	40 1b       	sub	r20, r16
    f466:	51 0b       	sbc	r21, r17
    f468:	e4 16       	cp	r14, r20
    f46a:	f5 06       	cpc	r15, r21
    f46c:	0c f4       	brge	.+2      	; 0xf470 <qsort+0x292>
    f46e:	a7 01       	movw	r20, r14
    f470:	14 16       	cp	r1, r20
    f472:	15 06       	cpc	r1, r21
    f474:	34 f4       	brge	.+12     	; 0xf482 <qsort+0x2a4>
    f476:	b4 01       	movw	r22, r8
    f478:	64 1b       	sub	r22, r20
    f47a:	75 0b       	sbc	r23, r21
    f47c:	c8 01       	movw	r24, r16
    f47e:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f482:	a2 01       	movw	r20, r4
    f484:	4a 19       	sub	r20, r10
    f486:	5b 09       	sbc	r21, r11
    f488:	5a 01       	movw	r10, r20
    f48a:	a3 01       	movw	r20, r6
    f48c:	44 19       	sub	r20, r4
    f48e:	55 09       	sbc	r21, r5
    f490:	89 85       	ldd	r24, Y+9	; 0x09
    f492:	9a 85       	ldd	r25, Y+10	; 0x0a
    f494:	48 1b       	sub	r20, r24
    f496:	59 0b       	sbc	r21, r25
    f498:	a4 16       	cp	r10, r20
    f49a:	b5 06       	cpc	r11, r21
    f49c:	08 f4       	brcc	.+2      	; 0xf4a0 <qsort+0x2c2>
    f49e:	a5 01       	movw	r20, r10
    f4a0:	14 16       	cp	r1, r20
    f4a2:	15 06       	cpc	r1, r21
    f4a4:	34 f4       	brge	.+12     	; 0xf4b2 <qsort+0x2d4>
    f4a6:	b3 01       	movw	r22, r6
    f4a8:	64 1b       	sub	r22, r20
    f4aa:	75 0b       	sbc	r23, r21
    f4ac:	c4 01       	movw	r24, r8
    f4ae:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f4b2:	e9 85       	ldd	r30, Y+9	; 0x09
    f4b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    f4b6:	ee 15       	cp	r30, r14
    f4b8:	ff 05       	cpc	r31, r15
    f4ba:	48 f4       	brcc	.+18     	; 0xf4ce <qsort+0x2f0>
    f4bc:	c7 01       	movw	r24, r14
    f4be:	bf 01       	movw	r22, r30
    f4c0:	0e 94 13 77 	call	0xee26	; 0xee26 <__udivmodhi4>
    f4c4:	96 01       	movw	r18, r12
    f4c6:	af 01       	movw	r20, r30
    f4c8:	c8 01       	movw	r24, r16
    f4ca:	0e 94 ef 78 	call	0xf1de	; 0xf1de <qsort>
    f4ce:	29 85       	ldd	r18, Y+9	; 0x09
    f4d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    f4d2:	2a 15       	cp	r18, r10
    f4d4:	3b 05       	cpc	r19, r11
    f4d6:	a0 f5       	brcc	.+104    	; 0xf540 <qsort+0x362>
    f4d8:	83 01       	movw	r16, r6
    f4da:	0a 19       	sub	r16, r10
    f4dc:	1b 09       	sbc	r17, r11
    f4de:	c5 01       	movw	r24, r10
    f4e0:	b9 01       	movw	r22, r18
    f4e2:	0e 94 13 77 	call	0xee26	; 0xee26 <__udivmodhi4>
    f4e6:	7b 01       	movw	r14, r22
    f4e8:	96 ce       	rjmp	.-724    	; 0xf216 <qsort+0x38>
    f4ea:	e9 85       	ldd	r30, Y+9	; 0x09
    f4ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    f4ee:	ee 9e       	mul	r14, r30
    f4f0:	50 01       	movw	r10, r0
    f4f2:	ef 9e       	mul	r14, r31
    f4f4:	b0 0c       	add	r11, r0
    f4f6:	fe 9e       	mul	r15, r30
    f4f8:	b0 0c       	add	r11, r0
    f4fa:	11 24       	eor	r1, r1
    f4fc:	a0 0e       	add	r10, r16
    f4fe:	b1 1e       	adc	r11, r17
    f500:	6a 14       	cp	r6, r10
    f502:	7b 04       	cpc	r7, r11
    f504:	e8 f4       	brcc	.+58     	; 0xf540 <qsort+0x362>
    f506:	73 01       	movw	r14, r6
    f508:	0e 15       	cp	r16, r14
    f50a:	1f 05       	cpc	r17, r15
    f50c:	28 f0       	brcs	.+10     	; 0xf518 <qsort+0x33a>
    f50e:	89 85       	ldd	r24, Y+9	; 0x09
    f510:	9a 85       	ldd	r25, Y+10	; 0x0a
    f512:	68 0e       	add	r6, r24
    f514:	79 1e       	adc	r7, r25
    f516:	f4 cf       	rjmp	.-24     	; 0xf500 <qsort+0x322>
    f518:	47 01       	movw	r8, r14
    f51a:	e9 85       	ldd	r30, Y+9	; 0x09
    f51c:	fa 85       	ldd	r31, Y+10	; 0x0a
    f51e:	8e 1a       	sub	r8, r30
    f520:	9f 0a       	sbc	r9, r31
    f522:	b7 01       	movw	r22, r14
    f524:	c4 01       	movw	r24, r8
    f526:	f6 01       	movw	r30, r12
    f528:	19 95       	eicall
    f52a:	18 16       	cp	r1, r24
    f52c:	19 06       	cpc	r1, r25
    f52e:	7c f7       	brge	.-34     	; 0xf50e <qsort+0x330>
    f530:	49 85       	ldd	r20, Y+9	; 0x09
    f532:	5a 85       	ldd	r21, Y+10	; 0x0a
    f534:	b4 01       	movw	r22, r8
    f536:	c7 01       	movw	r24, r14
    f538:	0e 94 a8 78 	call	0xf150	; 0xf150 <swapfunc>
    f53c:	74 01       	movw	r14, r8
    f53e:	e4 cf       	rjmp	.-56     	; 0xf508 <qsort+0x32a>
    f540:	2a 96       	adiw	r28, 0x0a	; 10
    f542:	cd bf       	out	0x3d, r28	; 61
    f544:	de bf       	out	0x3e, r29	; 62
    f546:	df 91       	pop	r29
    f548:	cf 91       	pop	r28
    f54a:	1f 91       	pop	r17
    f54c:	0f 91       	pop	r16
    f54e:	ff 90       	pop	r15
    f550:	ef 90       	pop	r14
    f552:	df 90       	pop	r13
    f554:	cf 90       	pop	r12
    f556:	bf 90       	pop	r11
    f558:	af 90       	pop	r10
    f55a:	9f 90       	pop	r9
    f55c:	8f 90       	pop	r8
    f55e:	7f 90       	pop	r7
    f560:	6f 90       	pop	r6
    f562:	5f 90       	pop	r5
    f564:	4f 90       	pop	r4
    f566:	3f 90       	pop	r3
    f568:	2f 90       	pop	r2
    f56a:	08 95       	ret

0000f56c <strtoul>:
    f56c:	3f 92       	push	r3
    f56e:	4f 92       	push	r4
    f570:	5f 92       	push	r5
    f572:	6f 92       	push	r6
    f574:	7f 92       	push	r7
    f576:	8f 92       	push	r8
    f578:	9f 92       	push	r9
    f57a:	af 92       	push	r10
    f57c:	bf 92       	push	r11
    f57e:	cf 92       	push	r12
    f580:	df 92       	push	r13
    f582:	ef 92       	push	r14
    f584:	ff 92       	push	r15
    f586:	0f 93       	push	r16
    f588:	1f 93       	push	r17
    f58a:	cf 93       	push	r28
    f58c:	df 93       	push	r29
    f58e:	5c 01       	movw	r10, r24
    f590:	6b 01       	movw	r12, r22
    f592:	7a 01       	movw	r14, r20
    f594:	61 15       	cp	r22, r1
    f596:	71 05       	cpc	r23, r1
    f598:	19 f0       	breq	.+6      	; 0xf5a0 <strtoul+0x34>
    f59a:	fb 01       	movw	r30, r22
    f59c:	80 83       	st	Z, r24
    f59e:	91 83       	std	Z+1, r25	; 0x01
    f5a0:	e1 14       	cp	r14, r1
    f5a2:	f1 04       	cpc	r15, r1
    f5a4:	29 f0       	breq	.+10     	; 0xf5b0 <strtoul+0x44>
    f5a6:	c7 01       	movw	r24, r14
    f5a8:	02 97       	sbiw	r24, 0x02	; 2
    f5aa:	83 97       	sbiw	r24, 0x23	; 35
    f5ac:	08 f0       	brcs	.+2      	; 0xf5b0 <strtoul+0x44>
    f5ae:	c9 c0       	rjmp	.+402    	; 0xf742 <strtoul+0x1d6>
    f5b0:	e5 01       	movw	r28, r10
    f5b2:	21 96       	adiw	r28, 0x01	; 1
    f5b4:	f5 01       	movw	r30, r10
    f5b6:	10 81       	ld	r17, Z
    f5b8:	81 2f       	mov	r24, r17
    f5ba:	90 e0       	ldi	r25, 0x00	; 0
    f5bc:	0e 94 b9 7c 	call	0xf972	; 0xf972 <isspace>
    f5c0:	89 2b       	or	r24, r25
    f5c2:	11 f0       	breq	.+4      	; 0xf5c8 <strtoul+0x5c>
    f5c4:	5e 01       	movw	r10, r28
    f5c6:	f4 cf       	rjmp	.-24     	; 0xf5b0 <strtoul+0x44>
    f5c8:	1d 32       	cpi	r17, 0x2D	; 45
    f5ca:	29 f4       	brne	.+10     	; 0xf5d6 <strtoul+0x6a>
    f5cc:	21 96       	adiw	r28, 0x01	; 1
    f5ce:	f5 01       	movw	r30, r10
    f5d0:	11 81       	ldd	r17, Z+1	; 0x01
    f5d2:	01 e0       	ldi	r16, 0x01	; 1
    f5d4:	07 c0       	rjmp	.+14     	; 0xf5e4 <strtoul+0x78>
    f5d6:	1b 32       	cpi	r17, 0x2B	; 43
    f5d8:	21 f4       	brne	.+8      	; 0xf5e2 <strtoul+0x76>
    f5da:	e5 01       	movw	r28, r10
    f5dc:	22 96       	adiw	r28, 0x02	; 2
    f5de:	f5 01       	movw	r30, r10
    f5e0:	11 81       	ldd	r17, Z+1	; 0x01
    f5e2:	00 e0       	ldi	r16, 0x00	; 0
    f5e4:	e1 14       	cp	r14, r1
    f5e6:	f1 04       	cpc	r15, r1
    f5e8:	b1 f0       	breq	.+44     	; 0xf616 <strtoul+0xaa>
    f5ea:	f0 e1       	ldi	r31, 0x10	; 16
    f5ec:	ef 16       	cp	r14, r31
    f5ee:	f1 04       	cpc	r15, r1
    f5f0:	29 f4       	brne	.+10     	; 0xf5fc <strtoul+0x90>
    f5f2:	b0 c0       	rjmp	.+352    	; 0xf754 <strtoul+0x1e8>
    f5f4:	10 e3       	ldi	r17, 0x30	; 48
    f5f6:	e1 14       	cp	r14, r1
    f5f8:	f1 04       	cpc	r15, r1
    f5fa:	01 f1       	breq	.+64     	; 0xf63c <strtoul+0xd0>
    f5fc:	2a e0       	ldi	r18, 0x0A	; 10
    f5fe:	e2 16       	cp	r14, r18
    f600:	f1 04       	cpc	r15, r1
    f602:	b1 f1       	breq	.+108    	; 0xf670 <strtoul+0x104>
    f604:	80 e1       	ldi	r24, 0x10	; 16
    f606:	e8 16       	cp	r14, r24
    f608:	f1 04       	cpc	r15, r1
    f60a:	71 f0       	breq	.+28     	; 0xf628 <strtoul+0xbc>
    f60c:	e8 e0       	ldi	r30, 0x08	; 8
    f60e:	ee 16       	cp	r14, r30
    f610:	f1 04       	cpc	r15, r1
    f612:	f1 f4       	brne	.+60     	; 0xf650 <strtoul+0xe4>
    f614:	13 c0       	rjmp	.+38     	; 0xf63c <strtoul+0xd0>
    f616:	10 33       	cpi	r17, 0x30	; 48
    f618:	41 f5       	brne	.+80     	; 0xf66a <strtoul+0xfe>
    f61a:	88 81       	ld	r24, Y
    f61c:	8f 7d       	andi	r24, 0xDF	; 223
    f61e:	88 35       	cpi	r24, 0x58	; 88
    f620:	49 f7       	brne	.-46     	; 0xf5f4 <strtoul+0x88>
    f622:	19 81       	ldd	r17, Y+1	; 0x01
    f624:	22 96       	adiw	r28, 0x02	; 2
    f626:	02 60       	ori	r16, 0x02	; 2
    f628:	f0 e1       	ldi	r31, 0x10	; 16
    f62a:	ef 2e       	mov	r14, r31
    f62c:	f1 2c       	mov	r15, r1
    f62e:	88 24       	eor	r8, r8
    f630:	8a 94       	dec	r8
    f632:	98 2c       	mov	r9, r8
    f634:	a8 2c       	mov	r10, r8
    f636:	af e0       	ldi	r26, 0x0F	; 15
    f638:	ba 2e       	mov	r11, r26
    f63a:	20 c0       	rjmp	.+64     	; 0xf67c <strtoul+0x110>
    f63c:	78 e0       	ldi	r23, 0x08	; 8
    f63e:	e7 2e       	mov	r14, r23
    f640:	f1 2c       	mov	r15, r1
    f642:	88 24       	eor	r8, r8
    f644:	8a 94       	dec	r8
    f646:	98 2c       	mov	r9, r8
    f648:	a8 2c       	mov	r10, r8
    f64a:	ef e1       	ldi	r30, 0x1F	; 31
    f64c:	be 2e       	mov	r11, r30
    f64e:	16 c0       	rjmp	.+44     	; 0xf67c <strtoul+0x110>
    f650:	6f ef       	ldi	r22, 0xFF	; 255
    f652:	7f ef       	ldi	r23, 0xFF	; 255
    f654:	cb 01       	movw	r24, r22
    f656:	97 01       	movw	r18, r14
    f658:	0f 2c       	mov	r0, r15
    f65a:	00 0c       	add	r0, r0
    f65c:	44 0b       	sbc	r20, r20
    f65e:	55 0b       	sbc	r21, r21
    f660:	0e 94 3b 77 	call	0xee76	; 0xee76 <__udivmodsi4>
    f664:	49 01       	movw	r8, r18
    f666:	5a 01       	movw	r10, r20
    f668:	09 c0       	rjmp	.+18     	; 0xf67c <strtoul+0x110>
    f66a:	8a e0       	ldi	r24, 0x0A	; 10
    f66c:	e8 2e       	mov	r14, r24
    f66e:	f1 2c       	mov	r15, r1
    f670:	69 e9       	ldi	r22, 0x99	; 153
    f672:	86 2e       	mov	r8, r22
    f674:	98 2c       	mov	r9, r8
    f676:	a8 2c       	mov	r10, r8
    f678:	69 e1       	ldi	r22, 0x19	; 25
    f67a:	b6 2e       	mov	r11, r22
    f67c:	40 e0       	ldi	r20, 0x00	; 0
    f67e:	60 e0       	ldi	r22, 0x00	; 0
    f680:	70 e0       	ldi	r23, 0x00	; 0
    f682:	cb 01       	movw	r24, r22
    f684:	27 01       	movw	r4, r14
    f686:	0f 2c       	mov	r0, r15
    f688:	00 0c       	add	r0, r0
    f68a:	66 08       	sbc	r6, r6
    f68c:	77 08       	sbc	r7, r7
    f68e:	fe 01       	movw	r30, r28
    f690:	50 ed       	ldi	r21, 0xD0	; 208
    f692:	35 2e       	mov	r3, r21
    f694:	31 0e       	add	r3, r17
    f696:	29 e0       	ldi	r18, 0x09	; 9
    f698:	23 15       	cp	r18, r3
    f69a:	70 f4       	brcc	.+28     	; 0xf6b8 <strtoul+0x14c>
    f69c:	2f eb       	ldi	r18, 0xBF	; 191
    f69e:	21 0f       	add	r18, r17
    f6a0:	2a 31       	cpi	r18, 0x1A	; 26
    f6a2:	18 f4       	brcc	.+6      	; 0xf6aa <strtoul+0x13e>
    f6a4:	39 ec       	ldi	r19, 0xC9	; 201
    f6a6:	33 2e       	mov	r3, r19
    f6a8:	06 c0       	rjmp	.+12     	; 0xf6b6 <strtoul+0x14a>
    f6aa:	2f e9       	ldi	r18, 0x9F	; 159
    f6ac:	21 0f       	add	r18, r17
    f6ae:	2a 31       	cpi	r18, 0x1A	; 26
    f6b0:	30 f5       	brcc	.+76     	; 0xf6fe <strtoul+0x192>
    f6b2:	29 ea       	ldi	r18, 0xA9	; 169
    f6b4:	32 2e       	mov	r3, r18
    f6b6:	31 0e       	add	r3, r17
    f6b8:	23 2d       	mov	r18, r3
    f6ba:	30 e0       	ldi	r19, 0x00	; 0
    f6bc:	2e 15       	cp	r18, r14
    f6be:	3f 05       	cpc	r19, r15
    f6c0:	f4 f4       	brge	.+60     	; 0xf6fe <strtoul+0x192>
    f6c2:	4f 3f       	cpi	r20, 0xFF	; 255
    f6c4:	c9 f0       	breq	.+50     	; 0xf6f8 <strtoul+0x18c>
    f6c6:	86 16       	cp	r8, r22
    f6c8:	97 06       	cpc	r9, r23
    f6ca:	a8 06       	cpc	r10, r24
    f6cc:	b9 06       	cpc	r11, r25
    f6ce:	88 f0       	brcs	.+34     	; 0xf6f2 <strtoul+0x186>
    f6d0:	a3 01       	movw	r20, r6
    f6d2:	92 01       	movw	r18, r4
    f6d4:	0e 94 ed 7e 	call	0xfdda	; 0xfdda <__mulsi3>
    f6d8:	23 2d       	mov	r18, r3
    f6da:	30 e0       	ldi	r19, 0x00	; 0
    f6dc:	40 e0       	ldi	r20, 0x00	; 0
    f6de:	50 e0       	ldi	r21, 0x00	; 0
    f6e0:	62 0f       	add	r22, r18
    f6e2:	73 1f       	adc	r23, r19
    f6e4:	84 1f       	adc	r24, r20
    f6e6:	95 1f       	adc	r25, r21
    f6e8:	62 17       	cp	r22, r18
    f6ea:	73 07       	cpc	r23, r19
    f6ec:	84 07       	cpc	r24, r20
    f6ee:	95 07       	cpc	r25, r21
    f6f0:	10 f4       	brcc	.+4      	; 0xf6f6 <strtoul+0x18a>
    f6f2:	4f ef       	ldi	r20, 0xFF	; 255
    f6f4:	01 c0       	rjmp	.+2      	; 0xf6f8 <strtoul+0x18c>
    f6f6:	41 e0       	ldi	r20, 0x01	; 1
    f6f8:	21 96       	adiw	r28, 0x01	; 1
    f6fa:	10 81       	ld	r17, Z
    f6fc:	c8 cf       	rjmp	.-112    	; 0xf68e <strtoul+0x122>
    f6fe:	c1 14       	cp	r12, r1
    f700:	d1 04       	cpc	r13, r1
    f702:	51 f0       	breq	.+20     	; 0xf718 <strtoul+0x1ac>
    f704:	44 23       	and	r20, r20
    f706:	11 f0       	breq	.+4      	; 0xf70c <strtoul+0x1a0>
    f708:	21 97       	sbiw	r28, 0x01	; 1
    f70a:	03 c0       	rjmp	.+6      	; 0xf712 <strtoul+0x1a6>
    f70c:	01 ff       	sbrs	r16, 1
    f70e:	04 c0       	rjmp	.+8      	; 0xf718 <strtoul+0x1ac>
    f710:	22 97       	sbiw	r28, 0x02	; 2
    f712:	f6 01       	movw	r30, r12
    f714:	c0 83       	st	Z, r28
    f716:	d1 83       	std	Z+1, r29	; 0x01
    f718:	00 ff       	sbrs	r16, 0
    f71a:	07 c0       	rjmp	.+14     	; 0xf72a <strtoul+0x1be>
    f71c:	90 95       	com	r25
    f71e:	80 95       	com	r24
    f720:	70 95       	com	r23
    f722:	61 95       	neg	r22
    f724:	7f 4f       	sbci	r23, 0xFF	; 255
    f726:	8f 4f       	sbci	r24, 0xFF	; 255
    f728:	9f 4f       	sbci	r25, 0xFF	; 255
    f72a:	4f 3f       	cpi	r20, 0xFF	; 255
    f72c:	79 f4       	brne	.+30     	; 0xf74c <strtoul+0x1e0>
    f72e:	82 e2       	ldi	r24, 0x22	; 34
    f730:	90 e0       	ldi	r25, 0x00	; 0
    f732:	80 93 54 2a 	sts	0x2A54, r24	; 0x802a54 <errno>
    f736:	90 93 55 2a 	sts	0x2A55, r25	; 0x802a55 <errno+0x1>
    f73a:	3f ef       	ldi	r19, 0xFF	; 255
    f73c:	2f ef       	ldi	r18, 0xFF	; 255
    f73e:	9f ef       	ldi	r25, 0xFF	; 255
    f740:	0d c0       	rjmp	.+26     	; 0xf75c <strtoul+0x1f0>
    f742:	40 e0       	ldi	r20, 0x00	; 0
    f744:	30 e0       	ldi	r19, 0x00	; 0
    f746:	20 e0       	ldi	r18, 0x00	; 0
    f748:	90 e0       	ldi	r25, 0x00	; 0
    f74a:	08 c0       	rjmp	.+16     	; 0xf75c <strtoul+0x1f0>
    f74c:	46 2f       	mov	r20, r22
    f74e:	37 2f       	mov	r19, r23
    f750:	28 2f       	mov	r18, r24
    f752:	04 c0       	rjmp	.+8      	; 0xf75c <strtoul+0x1f0>
    f754:	10 33       	cpi	r17, 0x30	; 48
    f756:	09 f0       	breq	.+2      	; 0xf75a <strtoul+0x1ee>
    f758:	67 cf       	rjmp	.-306    	; 0xf628 <strtoul+0xbc>
    f75a:	5f cf       	rjmp	.-322    	; 0xf61a <strtoul+0xae>
    f75c:	64 2f       	mov	r22, r20
    f75e:	73 2f       	mov	r23, r19
    f760:	82 2f       	mov	r24, r18
    f762:	df 91       	pop	r29
    f764:	cf 91       	pop	r28
    f766:	1f 91       	pop	r17
    f768:	0f 91       	pop	r16
    f76a:	ff 90       	pop	r15
    f76c:	ef 90       	pop	r14
    f76e:	df 90       	pop	r13
    f770:	cf 90       	pop	r12
    f772:	bf 90       	pop	r11
    f774:	af 90       	pop	r10
    f776:	9f 90       	pop	r9
    f778:	8f 90       	pop	r8
    f77a:	7f 90       	pop	r7
    f77c:	6f 90       	pop	r6
    f77e:	5f 90       	pop	r5
    f780:	4f 90       	pop	r4
    f782:	3f 90       	pop	r3
    f784:	08 95       	ret

0000f786 <atoi>:
    f786:	fc 01       	movw	r30, r24
    f788:	88 27       	eor	r24, r24
    f78a:	99 27       	eor	r25, r25
    f78c:	e8 94       	clt
    f78e:	21 91       	ld	r18, Z+
    f790:	20 32       	cpi	r18, 0x20	; 32
    f792:	e9 f3       	breq	.-6      	; 0xf78e <atoi+0x8>
    f794:	29 30       	cpi	r18, 0x09	; 9
    f796:	10 f0       	brcs	.+4      	; 0xf79c <atoi+0x16>
    f798:	2e 30       	cpi	r18, 0x0E	; 14
    f79a:	c8 f3       	brcs	.-14     	; 0xf78e <atoi+0x8>
    f79c:	2b 32       	cpi	r18, 0x2B	; 43
    f79e:	41 f0       	breq	.+16     	; 0xf7b0 <atoi+0x2a>
    f7a0:	2d 32       	cpi	r18, 0x2D	; 45
    f7a2:	39 f4       	brne	.+14     	; 0xf7b2 <atoi+0x2c>
    f7a4:	68 94       	set
    f7a6:	04 c0       	rjmp	.+8      	; 0xf7b0 <atoi+0x2a>
    f7a8:	0e 94 56 7d 	call	0xfaac	; 0xfaac <__mulhi_const_10>
    f7ac:	82 0f       	add	r24, r18
    f7ae:	91 1d       	adc	r25, r1
    f7b0:	21 91       	ld	r18, Z+
    f7b2:	20 53       	subi	r18, 0x30	; 48
    f7b4:	2a 30       	cpi	r18, 0x0A	; 10
    f7b6:	c0 f3       	brcs	.-16     	; 0xf7a8 <atoi+0x22>
    f7b8:	1e f4       	brtc	.+6      	; 0xf7c0 <atoi+0x3a>
    f7ba:	90 95       	com	r25
    f7bc:	81 95       	neg	r24
    f7be:	9f 4f       	sbci	r25, 0xFF	; 255
    f7c0:	08 95       	ret

0000f7c2 <__ftoa_engine>:
    f7c2:	28 30       	cpi	r18, 0x08	; 8
    f7c4:	08 f0       	brcs	.+2      	; 0xf7c8 <__ftoa_engine+0x6>
    f7c6:	27 e0       	ldi	r18, 0x07	; 7
    f7c8:	33 27       	eor	r19, r19
    f7ca:	da 01       	movw	r26, r20
    f7cc:	99 0f       	add	r25, r25
    f7ce:	31 1d       	adc	r19, r1
    f7d0:	87 fd       	sbrc	r24, 7
    f7d2:	91 60       	ori	r25, 0x01	; 1
    f7d4:	00 96       	adiw	r24, 0x00	; 0
    f7d6:	61 05       	cpc	r22, r1
    f7d8:	71 05       	cpc	r23, r1
    f7da:	39 f4       	brne	.+14     	; 0xf7ea <__ftoa_engine+0x28>
    f7dc:	32 60       	ori	r19, 0x02	; 2
    f7de:	2e 5f       	subi	r18, 0xFE	; 254
    f7e0:	3d 93       	st	X+, r19
    f7e2:	30 e3       	ldi	r19, 0x30	; 48
    f7e4:	2a 95       	dec	r18
    f7e6:	e1 f7       	brne	.-8      	; 0xf7e0 <__ftoa_engine+0x1e>
    f7e8:	08 95       	ret
    f7ea:	9f 3f       	cpi	r25, 0xFF	; 255
    f7ec:	30 f0       	brcs	.+12     	; 0xf7fa <__ftoa_engine+0x38>
    f7ee:	80 38       	cpi	r24, 0x80	; 128
    f7f0:	71 05       	cpc	r23, r1
    f7f2:	61 05       	cpc	r22, r1
    f7f4:	09 f0       	breq	.+2      	; 0xf7f8 <__ftoa_engine+0x36>
    f7f6:	3c 5f       	subi	r19, 0xFC	; 252
    f7f8:	3c 5f       	subi	r19, 0xFC	; 252
    f7fa:	3d 93       	st	X+, r19
    f7fc:	91 30       	cpi	r25, 0x01	; 1
    f7fe:	08 f0       	brcs	.+2      	; 0xf802 <__ftoa_engine+0x40>
    f800:	80 68       	ori	r24, 0x80	; 128
    f802:	91 1d       	adc	r25, r1
    f804:	df 93       	push	r29
    f806:	cf 93       	push	r28
    f808:	1f 93       	push	r17
    f80a:	0f 93       	push	r16
    f80c:	ff 92       	push	r15
    f80e:	ef 92       	push	r14
    f810:	19 2f       	mov	r17, r25
    f812:	98 7f       	andi	r25, 0xF8	; 248
    f814:	96 95       	lsr	r25
    f816:	e9 2f       	mov	r30, r25
    f818:	96 95       	lsr	r25
    f81a:	96 95       	lsr	r25
    f81c:	e9 0f       	add	r30, r25
    f81e:	ff 27       	eor	r31, r31
    f820:	ec 50       	subi	r30, 0x0C	; 12
    f822:	fc 4f       	sbci	r31, 0xFC	; 252
    f824:	99 27       	eor	r25, r25
    f826:	33 27       	eor	r19, r19
    f828:	ee 24       	eor	r14, r14
    f82a:	ff 24       	eor	r15, r15
    f82c:	a7 01       	movw	r20, r14
    f82e:	e7 01       	movw	r28, r14
    f830:	05 90       	lpm	r0, Z+
    f832:	08 94       	sec
    f834:	07 94       	ror	r0
    f836:	28 f4       	brcc	.+10     	; 0xf842 <__ftoa_engine+0x80>
    f838:	36 0f       	add	r19, r22
    f83a:	e7 1e       	adc	r14, r23
    f83c:	f8 1e       	adc	r15, r24
    f83e:	49 1f       	adc	r20, r25
    f840:	51 1d       	adc	r21, r1
    f842:	66 0f       	add	r22, r22
    f844:	77 1f       	adc	r23, r23
    f846:	88 1f       	adc	r24, r24
    f848:	99 1f       	adc	r25, r25
    f84a:	06 94       	lsr	r0
    f84c:	a1 f7       	brne	.-24     	; 0xf836 <__ftoa_engine+0x74>
    f84e:	05 90       	lpm	r0, Z+
    f850:	07 94       	ror	r0
    f852:	28 f4       	brcc	.+10     	; 0xf85e <__ftoa_engine+0x9c>
    f854:	e7 0e       	add	r14, r23
    f856:	f8 1e       	adc	r15, r24
    f858:	49 1f       	adc	r20, r25
    f85a:	56 1f       	adc	r21, r22
    f85c:	c1 1d       	adc	r28, r1
    f85e:	77 0f       	add	r23, r23
    f860:	88 1f       	adc	r24, r24
    f862:	99 1f       	adc	r25, r25
    f864:	66 1f       	adc	r22, r22
    f866:	06 94       	lsr	r0
    f868:	a1 f7       	brne	.-24     	; 0xf852 <__ftoa_engine+0x90>
    f86a:	05 90       	lpm	r0, Z+
    f86c:	07 94       	ror	r0
    f86e:	28 f4       	brcc	.+10     	; 0xf87a <__ftoa_engine+0xb8>
    f870:	f8 0e       	add	r15, r24
    f872:	49 1f       	adc	r20, r25
    f874:	56 1f       	adc	r21, r22
    f876:	c7 1f       	adc	r28, r23
    f878:	d1 1d       	adc	r29, r1
    f87a:	88 0f       	add	r24, r24
    f87c:	99 1f       	adc	r25, r25
    f87e:	66 1f       	adc	r22, r22
    f880:	77 1f       	adc	r23, r23
    f882:	06 94       	lsr	r0
    f884:	a1 f7       	brne	.-24     	; 0xf86e <__ftoa_engine+0xac>
    f886:	05 90       	lpm	r0, Z+
    f888:	07 94       	ror	r0
    f88a:	20 f4       	brcc	.+8      	; 0xf894 <__ftoa_engine+0xd2>
    f88c:	49 0f       	add	r20, r25
    f88e:	56 1f       	adc	r21, r22
    f890:	c7 1f       	adc	r28, r23
    f892:	d8 1f       	adc	r29, r24
    f894:	99 0f       	add	r25, r25
    f896:	66 1f       	adc	r22, r22
    f898:	77 1f       	adc	r23, r23
    f89a:	88 1f       	adc	r24, r24
    f89c:	06 94       	lsr	r0
    f89e:	a9 f7       	brne	.-22     	; 0xf88a <__ftoa_engine+0xc8>
    f8a0:	84 91       	lpm	r24, Z
    f8a2:	10 95       	com	r17
    f8a4:	17 70       	andi	r17, 0x07	; 7
    f8a6:	41 f0       	breq	.+16     	; 0xf8b8 <__ftoa_engine+0xf6>
    f8a8:	d6 95       	lsr	r29
    f8aa:	c7 95       	ror	r28
    f8ac:	57 95       	ror	r21
    f8ae:	47 95       	ror	r20
    f8b0:	f7 94       	ror	r15
    f8b2:	e7 94       	ror	r14
    f8b4:	1a 95       	dec	r17
    f8b6:	c1 f7       	brne	.-16     	; 0xf8a8 <__ftoa_engine+0xe6>
    f8b8:	ea e9       	ldi	r30, 0x9A	; 154
    f8ba:	f3 e0       	ldi	r31, 0x03	; 3
    f8bc:	68 94       	set
    f8be:	15 90       	lpm	r1, Z+
    f8c0:	15 91       	lpm	r17, Z+
    f8c2:	35 91       	lpm	r19, Z+
    f8c4:	65 91       	lpm	r22, Z+
    f8c6:	95 91       	lpm	r25, Z+
    f8c8:	05 90       	lpm	r0, Z+
    f8ca:	7f e2       	ldi	r23, 0x2F	; 47
    f8cc:	73 95       	inc	r23
    f8ce:	e1 18       	sub	r14, r1
    f8d0:	f1 0a       	sbc	r15, r17
    f8d2:	43 0b       	sbc	r20, r19
    f8d4:	56 0b       	sbc	r21, r22
    f8d6:	c9 0b       	sbc	r28, r25
    f8d8:	d0 09       	sbc	r29, r0
    f8da:	c0 f7       	brcc	.-16     	; 0xf8cc <__ftoa_engine+0x10a>
    f8dc:	e1 0c       	add	r14, r1
    f8de:	f1 1e       	adc	r15, r17
    f8e0:	43 1f       	adc	r20, r19
    f8e2:	56 1f       	adc	r21, r22
    f8e4:	c9 1f       	adc	r28, r25
    f8e6:	d0 1d       	adc	r29, r0
    f8e8:	7e f4       	brtc	.+30     	; 0xf908 <__ftoa_engine+0x146>
    f8ea:	70 33       	cpi	r23, 0x30	; 48
    f8ec:	11 f4       	brne	.+4      	; 0xf8f2 <__ftoa_engine+0x130>
    f8ee:	8a 95       	dec	r24
    f8f0:	e6 cf       	rjmp	.-52     	; 0xf8be <__ftoa_engine+0xfc>
    f8f2:	e8 94       	clt
    f8f4:	01 50       	subi	r16, 0x01	; 1
    f8f6:	30 f0       	brcs	.+12     	; 0xf904 <__ftoa_engine+0x142>
    f8f8:	08 0f       	add	r16, r24
    f8fa:	0a f4       	brpl	.+2      	; 0xf8fe <__ftoa_engine+0x13c>
    f8fc:	00 27       	eor	r16, r16
    f8fe:	02 17       	cp	r16, r18
    f900:	08 f4       	brcc	.+2      	; 0xf904 <__ftoa_engine+0x142>
    f902:	20 2f       	mov	r18, r16
    f904:	23 95       	inc	r18
    f906:	02 2f       	mov	r16, r18
    f908:	7a 33       	cpi	r23, 0x3A	; 58
    f90a:	28 f0       	brcs	.+10     	; 0xf916 <__ftoa_engine+0x154>
    f90c:	79 e3       	ldi	r23, 0x39	; 57
    f90e:	7d 93       	st	X+, r23
    f910:	2a 95       	dec	r18
    f912:	e9 f7       	brne	.-6      	; 0xf90e <__ftoa_engine+0x14c>
    f914:	10 c0       	rjmp	.+32     	; 0xf936 <__ftoa_engine+0x174>
    f916:	7d 93       	st	X+, r23
    f918:	2a 95       	dec	r18
    f91a:	89 f6       	brne	.-94     	; 0xf8be <__ftoa_engine+0xfc>
    f91c:	06 94       	lsr	r0
    f91e:	97 95       	ror	r25
    f920:	67 95       	ror	r22
    f922:	37 95       	ror	r19
    f924:	17 95       	ror	r17
    f926:	17 94       	ror	r1
    f928:	e1 18       	sub	r14, r1
    f92a:	f1 0a       	sbc	r15, r17
    f92c:	43 0b       	sbc	r20, r19
    f92e:	56 0b       	sbc	r21, r22
    f930:	c9 0b       	sbc	r28, r25
    f932:	d0 09       	sbc	r29, r0
    f934:	98 f0       	brcs	.+38     	; 0xf95c <__ftoa_engine+0x19a>
    f936:	23 95       	inc	r18
    f938:	7e 91       	ld	r23, -X
    f93a:	73 95       	inc	r23
    f93c:	7a 33       	cpi	r23, 0x3A	; 58
    f93e:	08 f0       	brcs	.+2      	; 0xf942 <__ftoa_engine+0x180>
    f940:	70 e3       	ldi	r23, 0x30	; 48
    f942:	7c 93       	st	X, r23
    f944:	20 13       	cpse	r18, r16
    f946:	b8 f7       	brcc	.-18     	; 0xf936 <__ftoa_engine+0x174>
    f948:	7e 91       	ld	r23, -X
    f94a:	70 61       	ori	r23, 0x10	; 16
    f94c:	7d 93       	st	X+, r23
    f94e:	30 f0       	brcs	.+12     	; 0xf95c <__ftoa_engine+0x19a>
    f950:	83 95       	inc	r24
    f952:	71 e3       	ldi	r23, 0x31	; 49
    f954:	7d 93       	st	X+, r23
    f956:	70 e3       	ldi	r23, 0x30	; 48
    f958:	2a 95       	dec	r18
    f95a:	e1 f7       	brne	.-8      	; 0xf954 <__ftoa_engine+0x192>
    f95c:	11 24       	eor	r1, r1
    f95e:	ef 90       	pop	r14
    f960:	ff 90       	pop	r15
    f962:	0f 91       	pop	r16
    f964:	1f 91       	pop	r17
    f966:	cf 91       	pop	r28
    f968:	df 91       	pop	r29
    f96a:	99 27       	eor	r25, r25
    f96c:	87 fd       	sbrc	r24, 7
    f96e:	90 95       	com	r25
    f970:	08 95       	ret

0000f972 <isspace>:
    f972:	91 11       	cpse	r25, r1
    f974:	0c 94 ea 7e 	jmp	0xfdd4	; 0xfdd4 <__ctype_isfalse>
    f978:	80 32       	cpi	r24, 0x20	; 32
    f97a:	19 f0       	breq	.+6      	; 0xf982 <isspace+0x10>
    f97c:	89 50       	subi	r24, 0x09	; 9
    f97e:	85 50       	subi	r24, 0x05	; 5
    f980:	c8 f7       	brcc	.-14     	; 0xf974 <isspace+0x2>
    f982:	08 95       	ret

0000f984 <tolower>:
    f984:	91 11       	cpse	r25, r1
    f986:	08 95       	ret
    f988:	81 54       	subi	r24, 0x41	; 65
    f98a:	8a 51       	subi	r24, 0x1A	; 26
    f98c:	08 f4       	brcc	.+2      	; 0xf990 <tolower+0xc>
    f98e:	80 5e       	subi	r24, 0xE0	; 224
    f990:	85 5a       	subi	r24, 0xA5	; 165
    f992:	08 95       	ret

0000f994 <strchr_P>:
    f994:	fc 01       	movw	r30, r24
    f996:	05 90       	lpm	r0, Z+
    f998:	06 16       	cp	r0, r22
    f99a:	21 f0       	breq	.+8      	; 0xf9a4 <strchr_P+0x10>
    f99c:	00 20       	and	r0, r0
    f99e:	d9 f7       	brne	.-10     	; 0xf996 <strchr_P+0x2>
    f9a0:	c0 01       	movw	r24, r0
    f9a2:	08 95       	ret
    f9a4:	31 97       	sbiw	r30, 0x01	; 1
    f9a6:	cf 01       	movw	r24, r30
    f9a8:	08 95       	ret

0000f9aa <strcmp_P>:
    f9aa:	fb 01       	movw	r30, r22
    f9ac:	dc 01       	movw	r26, r24
    f9ae:	8d 91       	ld	r24, X+
    f9b0:	05 90       	lpm	r0, Z+
    f9b2:	80 19       	sub	r24, r0
    f9b4:	01 10       	cpse	r0, r1
    f9b6:	d9 f3       	breq	.-10     	; 0xf9ae <strcmp_P+0x4>
    f9b8:	99 0b       	sbc	r25, r25
    f9ba:	08 95       	ret

0000f9bc <strnlen_P>:
    f9bc:	fc 01       	movw	r30, r24
    f9be:	05 90       	lpm	r0, Z+
    f9c0:	61 50       	subi	r22, 0x01	; 1
    f9c2:	70 40       	sbci	r23, 0x00	; 0
    f9c4:	01 10       	cpse	r0, r1
    f9c6:	d8 f7       	brcc	.-10     	; 0xf9be <strnlen_P+0x2>
    f9c8:	80 95       	com	r24
    f9ca:	90 95       	com	r25
    f9cc:	8e 0f       	add	r24, r30
    f9ce:	9f 1f       	adc	r25, r31
    f9d0:	08 95       	ret

0000f9d2 <strtok>:
    f9d2:	4a e0       	ldi	r20, 0x0A	; 10
    f9d4:	55 e2       	ldi	r21, 0x25	; 37
    f9d6:	0c 94 2f 7d 	jmp	0xfa5e	; 0xfa5e <strtok_r>

0000f9da <memcpy>:
    f9da:	fb 01       	movw	r30, r22
    f9dc:	dc 01       	movw	r26, r24
    f9de:	02 c0       	rjmp	.+4      	; 0xf9e4 <memcpy+0xa>
    f9e0:	01 90       	ld	r0, Z+
    f9e2:	0d 92       	st	X+, r0
    f9e4:	41 50       	subi	r20, 0x01	; 1
    f9e6:	50 40       	sbci	r21, 0x00	; 0
    f9e8:	d8 f7       	brcc	.-10     	; 0xf9e0 <memcpy+0x6>
    f9ea:	08 95       	ret

0000f9ec <strcmp>:
    f9ec:	fb 01       	movw	r30, r22
    f9ee:	dc 01       	movw	r26, r24
    f9f0:	8d 91       	ld	r24, X+
    f9f2:	01 90       	ld	r0, Z+
    f9f4:	80 19       	sub	r24, r0
    f9f6:	01 10       	cpse	r0, r1
    f9f8:	d9 f3       	breq	.-10     	; 0xf9f0 <strcmp+0x4>
    f9fa:	99 0b       	sbc	r25, r25
    f9fc:	08 95       	ret

0000f9fe <strcpy>:
    f9fe:	fb 01       	movw	r30, r22
    fa00:	dc 01       	movw	r26, r24
    fa02:	01 90       	ld	r0, Z+
    fa04:	0d 92       	st	X+, r0
    fa06:	00 20       	and	r0, r0
    fa08:	e1 f7       	brne	.-8      	; 0xfa02 <strcpy+0x4>
    fa0a:	08 95       	ret

0000fa0c <strcspn>:
    fa0c:	dc 01       	movw	r26, r24
    fa0e:	5d 91       	ld	r21, X+
    fa10:	55 23       	and	r21, r21
    fa12:	31 f0       	breq	.+12     	; 0xfa20 <strcspn+0x14>
    fa14:	fb 01       	movw	r30, r22
    fa16:	01 90       	ld	r0, Z+
    fa18:	05 16       	cp	r0, r21
    fa1a:	01 10       	cpse	r0, r1
    fa1c:	e1 f7       	brne	.-8      	; 0xfa16 <strcspn+0xa>
    fa1e:	b9 f7       	brne	.-18     	; 0xfa0e <strcspn+0x2>
    fa20:	80 95       	com	r24
    fa22:	90 95       	com	r25
    fa24:	8a 0f       	add	r24, r26
    fa26:	9b 1f       	adc	r25, r27
    fa28:	08 95       	ret

0000fa2a <strncpy>:
    fa2a:	fb 01       	movw	r30, r22
    fa2c:	dc 01       	movw	r26, r24
    fa2e:	41 50       	subi	r20, 0x01	; 1
    fa30:	50 40       	sbci	r21, 0x00	; 0
    fa32:	48 f0       	brcs	.+18     	; 0xfa46 <strncpy+0x1c>
    fa34:	01 90       	ld	r0, Z+
    fa36:	0d 92       	st	X+, r0
    fa38:	00 20       	and	r0, r0
    fa3a:	c9 f7       	brne	.-14     	; 0xfa2e <strncpy+0x4>
    fa3c:	01 c0       	rjmp	.+2      	; 0xfa40 <strncpy+0x16>
    fa3e:	1d 92       	st	X+, r1
    fa40:	41 50       	subi	r20, 0x01	; 1
    fa42:	50 40       	sbci	r21, 0x00	; 0
    fa44:	e0 f7       	brcc	.-8      	; 0xfa3e <strncpy+0x14>
    fa46:	08 95       	ret

0000fa48 <strnlen>:
    fa48:	fc 01       	movw	r30, r24
    fa4a:	61 50       	subi	r22, 0x01	; 1
    fa4c:	70 40       	sbci	r23, 0x00	; 0
    fa4e:	01 90       	ld	r0, Z+
    fa50:	01 10       	cpse	r0, r1
    fa52:	d8 f7       	brcc	.-10     	; 0xfa4a <strnlen+0x2>
    fa54:	80 95       	com	r24
    fa56:	90 95       	com	r25
    fa58:	8e 0f       	add	r24, r30
    fa5a:	9f 1f       	adc	r25, r31
    fa5c:	08 95       	ret

0000fa5e <strtok_r>:
    fa5e:	fa 01       	movw	r30, r20
    fa60:	a1 91       	ld	r26, Z+
    fa62:	b0 81       	ld	r27, Z
    fa64:	00 97       	sbiw	r24, 0x00	; 0
    fa66:	19 f4       	brne	.+6      	; 0xfa6e <strtok_r+0x10>
    fa68:	10 97       	sbiw	r26, 0x00	; 0
    fa6a:	e1 f0       	breq	.+56     	; 0xfaa4 <strtok_r+0x46>
    fa6c:	cd 01       	movw	r24, r26
    fa6e:	dc 01       	movw	r26, r24
    fa70:	cd 01       	movw	r24, r26
    fa72:	0d 90       	ld	r0, X+
    fa74:	00 20       	and	r0, r0
    fa76:	11 f4       	brne	.+4      	; 0xfa7c <strtok_r+0x1e>
    fa78:	c0 01       	movw	r24, r0
    fa7a:	13 c0       	rjmp	.+38     	; 0xfaa2 <strtok_r+0x44>
    fa7c:	fb 01       	movw	r30, r22
    fa7e:	21 91       	ld	r18, Z+
    fa80:	22 23       	and	r18, r18
    fa82:	19 f0       	breq	.+6      	; 0xfa8a <strtok_r+0x2c>
    fa84:	20 15       	cp	r18, r0
    fa86:	d9 f7       	brne	.-10     	; 0xfa7e <strtok_r+0x20>
    fa88:	f3 cf       	rjmp	.-26     	; 0xfa70 <strtok_r+0x12>
    fa8a:	fb 01       	movw	r30, r22
    fa8c:	21 91       	ld	r18, Z+
    fa8e:	20 15       	cp	r18, r0
    fa90:	19 f4       	brne	.+6      	; 0xfa98 <strtok_r+0x3a>
    fa92:	1e 92       	st	-X, r1
    fa94:	11 96       	adiw	r26, 0x01	; 1
    fa96:	06 c0       	rjmp	.+12     	; 0xfaa4 <strtok_r+0x46>
    fa98:	22 23       	and	r18, r18
    fa9a:	c1 f7       	brne	.-16     	; 0xfa8c <strtok_r+0x2e>
    fa9c:	0d 90       	ld	r0, X+
    fa9e:	00 20       	and	r0, r0
    faa0:	a1 f7       	brne	.-24     	; 0xfa8a <strtok_r+0x2c>
    faa2:	d0 01       	movw	r26, r0
    faa4:	fa 01       	movw	r30, r20
    faa6:	a1 93       	st	Z+, r26
    faa8:	b0 83       	st	Z, r27
    faaa:	08 95       	ret

0000faac <__mulhi_const_10>:
    faac:	7a e0       	ldi	r23, 0x0A	; 10
    faae:	97 9f       	mul	r25, r23
    fab0:	90 2d       	mov	r25, r0
    fab2:	87 9f       	mul	r24, r23
    fab4:	80 2d       	mov	r24, r0
    fab6:	91 0d       	add	r25, r1
    fab8:	11 24       	eor	r1, r1
    faba:	08 95       	ret

0000fabc <fgetc>:
    fabc:	cf 93       	push	r28
    fabe:	df 93       	push	r29
    fac0:	ec 01       	movw	r28, r24
    fac2:	2b 81       	ldd	r18, Y+3	; 0x03
    fac4:	20 ff       	sbrs	r18, 0
    fac6:	33 c0       	rjmp	.+102    	; 0xfb2e <fgetc+0x72>
    fac8:	26 ff       	sbrs	r18, 6
    faca:	0a c0       	rjmp	.+20     	; 0xfae0 <fgetc+0x24>
    facc:	2f 7b       	andi	r18, 0xBF	; 191
    face:	2b 83       	std	Y+3, r18	; 0x03
    fad0:	8e 81       	ldd	r24, Y+6	; 0x06
    fad2:	9f 81       	ldd	r25, Y+7	; 0x07
    fad4:	01 96       	adiw	r24, 0x01	; 1
    fad6:	8e 83       	std	Y+6, r24	; 0x06
    fad8:	9f 83       	std	Y+7, r25	; 0x07
    fada:	8a 81       	ldd	r24, Y+2	; 0x02
    fadc:	90 e0       	ldi	r25, 0x00	; 0
    fade:	29 c0       	rjmp	.+82     	; 0xfb32 <fgetc+0x76>
    fae0:	22 ff       	sbrs	r18, 2
    fae2:	0f c0       	rjmp	.+30     	; 0xfb02 <fgetc+0x46>
    fae4:	e8 81       	ld	r30, Y
    fae6:	f9 81       	ldd	r31, Y+1	; 0x01
    fae8:	80 81       	ld	r24, Z
    faea:	08 2e       	mov	r0, r24
    faec:	00 0c       	add	r0, r0
    faee:	99 0b       	sbc	r25, r25
    faf0:	00 97       	sbiw	r24, 0x00	; 0
    faf2:	19 f4       	brne	.+6      	; 0xfafa <fgetc+0x3e>
    faf4:	20 62       	ori	r18, 0x20	; 32
    faf6:	2b 83       	std	Y+3, r18	; 0x03
    faf8:	1a c0       	rjmp	.+52     	; 0xfb2e <fgetc+0x72>
    fafa:	31 96       	adiw	r30, 0x01	; 1
    fafc:	e8 83       	st	Y, r30
    fafe:	f9 83       	std	Y+1, r31	; 0x01
    fb00:	0e c0       	rjmp	.+28     	; 0xfb1e <fgetc+0x62>
    fb02:	ea 85       	ldd	r30, Y+10	; 0x0a
    fb04:	fb 85       	ldd	r31, Y+11	; 0x0b
    fb06:	19 95       	eicall
    fb08:	97 ff       	sbrs	r25, 7
    fb0a:	09 c0       	rjmp	.+18     	; 0xfb1e <fgetc+0x62>
    fb0c:	2b 81       	ldd	r18, Y+3	; 0x03
    fb0e:	01 96       	adiw	r24, 0x01	; 1
    fb10:	11 f0       	breq	.+4      	; 0xfb16 <fgetc+0x5a>
    fb12:	80 e2       	ldi	r24, 0x20	; 32
    fb14:	01 c0       	rjmp	.+2      	; 0xfb18 <fgetc+0x5c>
    fb16:	80 e1       	ldi	r24, 0x10	; 16
    fb18:	82 2b       	or	r24, r18
    fb1a:	8b 83       	std	Y+3, r24	; 0x03
    fb1c:	08 c0       	rjmp	.+16     	; 0xfb2e <fgetc+0x72>
    fb1e:	2e 81       	ldd	r18, Y+6	; 0x06
    fb20:	3f 81       	ldd	r19, Y+7	; 0x07
    fb22:	2f 5f       	subi	r18, 0xFF	; 255
    fb24:	3f 4f       	sbci	r19, 0xFF	; 255
    fb26:	2e 83       	std	Y+6, r18	; 0x06
    fb28:	3f 83       	std	Y+7, r19	; 0x07
    fb2a:	99 27       	eor	r25, r25
    fb2c:	02 c0       	rjmp	.+4      	; 0xfb32 <fgetc+0x76>
    fb2e:	8f ef       	ldi	r24, 0xFF	; 255
    fb30:	9f ef       	ldi	r25, 0xFF	; 255
    fb32:	df 91       	pop	r29
    fb34:	cf 91       	pop	r28
    fb36:	08 95       	ret

0000fb38 <fputc>:
    fb38:	0f 93       	push	r16
    fb3a:	1f 93       	push	r17
    fb3c:	cf 93       	push	r28
    fb3e:	df 93       	push	r29
    fb40:	fb 01       	movw	r30, r22
    fb42:	23 81       	ldd	r18, Z+3	; 0x03
    fb44:	21 fd       	sbrc	r18, 1
    fb46:	03 c0       	rjmp	.+6      	; 0xfb4e <fputc+0x16>
    fb48:	8f ef       	ldi	r24, 0xFF	; 255
    fb4a:	9f ef       	ldi	r25, 0xFF	; 255
    fb4c:	2c c0       	rjmp	.+88     	; 0xfba6 <fputc+0x6e>
    fb4e:	22 ff       	sbrs	r18, 2
    fb50:	16 c0       	rjmp	.+44     	; 0xfb7e <fputc+0x46>
    fb52:	46 81       	ldd	r20, Z+6	; 0x06
    fb54:	57 81       	ldd	r21, Z+7	; 0x07
    fb56:	24 81       	ldd	r18, Z+4	; 0x04
    fb58:	35 81       	ldd	r19, Z+5	; 0x05
    fb5a:	42 17       	cp	r20, r18
    fb5c:	53 07       	cpc	r21, r19
    fb5e:	44 f4       	brge	.+16     	; 0xfb70 <fputc+0x38>
    fb60:	a0 81       	ld	r26, Z
    fb62:	b1 81       	ldd	r27, Z+1	; 0x01
    fb64:	9d 01       	movw	r18, r26
    fb66:	2f 5f       	subi	r18, 0xFF	; 255
    fb68:	3f 4f       	sbci	r19, 0xFF	; 255
    fb6a:	20 83       	st	Z, r18
    fb6c:	31 83       	std	Z+1, r19	; 0x01
    fb6e:	8c 93       	st	X, r24
    fb70:	26 81       	ldd	r18, Z+6	; 0x06
    fb72:	37 81       	ldd	r19, Z+7	; 0x07
    fb74:	2f 5f       	subi	r18, 0xFF	; 255
    fb76:	3f 4f       	sbci	r19, 0xFF	; 255
    fb78:	26 83       	std	Z+6, r18	; 0x06
    fb7a:	37 83       	std	Z+7, r19	; 0x07
    fb7c:	14 c0       	rjmp	.+40     	; 0xfba6 <fputc+0x6e>
    fb7e:	8b 01       	movw	r16, r22
    fb80:	ec 01       	movw	r28, r24
    fb82:	fb 01       	movw	r30, r22
    fb84:	00 84       	ldd	r0, Z+8	; 0x08
    fb86:	f1 85       	ldd	r31, Z+9	; 0x09
    fb88:	e0 2d       	mov	r30, r0
    fb8a:	19 95       	eicall
    fb8c:	89 2b       	or	r24, r25
    fb8e:	e1 f6       	brne	.-72     	; 0xfb48 <fputc+0x10>
    fb90:	d8 01       	movw	r26, r16
    fb92:	16 96       	adiw	r26, 0x06	; 6
    fb94:	8d 91       	ld	r24, X+
    fb96:	9c 91       	ld	r25, X
    fb98:	17 97       	sbiw	r26, 0x07	; 7
    fb9a:	01 96       	adiw	r24, 0x01	; 1
    fb9c:	16 96       	adiw	r26, 0x06	; 6
    fb9e:	8d 93       	st	X+, r24
    fba0:	9c 93       	st	X, r25
    fba2:	17 97       	sbiw	r26, 0x07	; 7
    fba4:	ce 01       	movw	r24, r28
    fba6:	df 91       	pop	r29
    fba8:	cf 91       	pop	r28
    fbaa:	1f 91       	pop	r17
    fbac:	0f 91       	pop	r16
    fbae:	08 95       	ret

0000fbb0 <printf>:
    fbb0:	cf 93       	push	r28
    fbb2:	df 93       	push	r29
    fbb4:	cd b7       	in	r28, 0x3d	; 61
    fbb6:	de b7       	in	r29, 0x3e	; 62
    fbb8:	ae 01       	movw	r20, r28
    fbba:	4a 5f       	subi	r20, 0xFA	; 250
    fbbc:	5f 4f       	sbci	r21, 0xFF	; 255
    fbbe:	fa 01       	movw	r30, r20
    fbc0:	61 91       	ld	r22, Z+
    fbc2:	71 91       	ld	r23, Z+
    fbc4:	af 01       	movw	r20, r30
    fbc6:	80 91 50 2a 	lds	r24, 0x2A50	; 0x802a50 <__iob+0x2>
    fbca:	90 91 51 2a 	lds	r25, 0x2A51	; 0x802a51 <__iob+0x3>
    fbce:	0e 94 49 69 	call	0xd292	; 0xd292 <vfprintf>
    fbd2:	df 91       	pop	r29
    fbd4:	cf 91       	pop	r28
    fbd6:	08 95       	ret

0000fbd8 <printf_P>:
    fbd8:	0f 93       	push	r16
    fbda:	1f 93       	push	r17
    fbdc:	cf 93       	push	r28
    fbde:	df 93       	push	r29
    fbe0:	cd b7       	in	r28, 0x3d	; 61
    fbe2:	de b7       	in	r29, 0x3e	; 62
    fbe4:	ae 01       	movw	r20, r28
    fbe6:	48 5f       	subi	r20, 0xF8	; 248
    fbe8:	5f 4f       	sbci	r21, 0xFF	; 255
    fbea:	da 01       	movw	r26, r20
    fbec:	6d 91       	ld	r22, X+
    fbee:	7d 91       	ld	r23, X+
    fbf0:	ad 01       	movw	r20, r26
    fbf2:	0e e4       	ldi	r16, 0x4E	; 78
    fbf4:	1a e2       	ldi	r17, 0x2A	; 42
    fbf6:	f8 01       	movw	r30, r16
    fbf8:	82 81       	ldd	r24, Z+2	; 0x02
    fbfa:	93 81       	ldd	r25, Z+3	; 0x03
    fbfc:	dc 01       	movw	r26, r24
    fbfe:	13 96       	adiw	r26, 0x03	; 3
    fc00:	2c 91       	ld	r18, X
    fc02:	13 97       	sbiw	r26, 0x03	; 3
    fc04:	28 60       	ori	r18, 0x08	; 8
    fc06:	13 96       	adiw	r26, 0x03	; 3
    fc08:	2c 93       	st	X, r18
    fc0a:	0e 94 49 69 	call	0xd292	; 0xd292 <vfprintf>
    fc0e:	d8 01       	movw	r26, r16
    fc10:	12 96       	adiw	r26, 0x02	; 2
    fc12:	ed 91       	ld	r30, X+
    fc14:	fc 91       	ld	r31, X
    fc16:	13 97       	sbiw	r26, 0x03	; 3
    fc18:	23 81       	ldd	r18, Z+3	; 0x03
    fc1a:	27 7f       	andi	r18, 0xF7	; 247
    fc1c:	23 83       	std	Z+3, r18	; 0x03
    fc1e:	df 91       	pop	r29
    fc20:	cf 91       	pop	r28
    fc22:	1f 91       	pop	r17
    fc24:	0f 91       	pop	r16
    fc26:	08 95       	ret

0000fc28 <putchar>:
    fc28:	60 91 50 2a 	lds	r22, 0x2A50	; 0x802a50 <__iob+0x2>
    fc2c:	70 91 51 2a 	lds	r23, 0x2A51	; 0x802a51 <__iob+0x3>
    fc30:	0c 94 9c 7d 	jmp	0xfb38	; 0xfb38 <fputc>

0000fc34 <puts>:
    fc34:	0f 93       	push	r16
    fc36:	1f 93       	push	r17
    fc38:	cf 93       	push	r28
    fc3a:	df 93       	push	r29
    fc3c:	e0 91 50 2a 	lds	r30, 0x2A50	; 0x802a50 <__iob+0x2>
    fc40:	f0 91 51 2a 	lds	r31, 0x2A51	; 0x802a51 <__iob+0x3>
    fc44:	23 81       	ldd	r18, Z+3	; 0x03
    fc46:	21 ff       	sbrs	r18, 1
    fc48:	1b c0       	rjmp	.+54     	; 0xfc80 <puts+0x4c>
    fc4a:	8c 01       	movw	r16, r24
    fc4c:	d0 e0       	ldi	r29, 0x00	; 0
    fc4e:	c0 e0       	ldi	r28, 0x00	; 0
    fc50:	f8 01       	movw	r30, r16
    fc52:	81 91       	ld	r24, Z+
    fc54:	8f 01       	movw	r16, r30
    fc56:	60 91 50 2a 	lds	r22, 0x2A50	; 0x802a50 <__iob+0x2>
    fc5a:	70 91 51 2a 	lds	r23, 0x2A51	; 0x802a51 <__iob+0x3>
    fc5e:	db 01       	movw	r26, r22
    fc60:	18 96       	adiw	r26, 0x08	; 8
    fc62:	ed 91       	ld	r30, X+
    fc64:	fc 91       	ld	r31, X
    fc66:	19 97       	sbiw	r26, 0x09	; 9
    fc68:	88 23       	and	r24, r24
    fc6a:	31 f0       	breq	.+12     	; 0xfc78 <puts+0x44>
    fc6c:	19 95       	eicall
    fc6e:	89 2b       	or	r24, r25
    fc70:	79 f3       	breq	.-34     	; 0xfc50 <puts+0x1c>
    fc72:	df ef       	ldi	r29, 0xFF	; 255
    fc74:	cf ef       	ldi	r28, 0xFF	; 255
    fc76:	ec cf       	rjmp	.-40     	; 0xfc50 <puts+0x1c>
    fc78:	8a e0       	ldi	r24, 0x0A	; 10
    fc7a:	19 95       	eicall
    fc7c:	89 2b       	or	r24, r25
    fc7e:	19 f0       	breq	.+6      	; 0xfc86 <puts+0x52>
    fc80:	8f ef       	ldi	r24, 0xFF	; 255
    fc82:	9f ef       	ldi	r25, 0xFF	; 255
    fc84:	02 c0       	rjmp	.+4      	; 0xfc8a <puts+0x56>
    fc86:	8d 2f       	mov	r24, r29
    fc88:	9c 2f       	mov	r25, r28
    fc8a:	df 91       	pop	r29
    fc8c:	cf 91       	pop	r28
    fc8e:	1f 91       	pop	r17
    fc90:	0f 91       	pop	r16
    fc92:	08 95       	ret

0000fc94 <sprintf>:
    fc94:	0f 93       	push	r16
    fc96:	1f 93       	push	r17
    fc98:	cf 93       	push	r28
    fc9a:	df 93       	push	r29
    fc9c:	cd b7       	in	r28, 0x3d	; 61
    fc9e:	de b7       	in	r29, 0x3e	; 62
    fca0:	2e 97       	sbiw	r28, 0x0e	; 14
    fca2:	cd bf       	out	0x3d, r28	; 61
    fca4:	de bf       	out	0x3e, r29	; 62
    fca6:	0e 89       	ldd	r16, Y+22	; 0x16
    fca8:	1f 89       	ldd	r17, Y+23	; 0x17
    fcaa:	86 e0       	ldi	r24, 0x06	; 6
    fcac:	8c 83       	std	Y+4, r24	; 0x04
    fcae:	09 83       	std	Y+1, r16	; 0x01
    fcb0:	1a 83       	std	Y+2, r17	; 0x02
    fcb2:	8f ef       	ldi	r24, 0xFF	; 255
    fcb4:	9f e7       	ldi	r25, 0x7F	; 127
    fcb6:	8d 83       	std	Y+5, r24	; 0x05
    fcb8:	9e 83       	std	Y+6, r25	; 0x06
    fcba:	ae 01       	movw	r20, r28
    fcbc:	46 5e       	subi	r20, 0xE6	; 230
    fcbe:	5f 4f       	sbci	r21, 0xFF	; 255
    fcc0:	68 8d       	ldd	r22, Y+24	; 0x18
    fcc2:	79 8d       	ldd	r23, Y+25	; 0x19
    fcc4:	ce 01       	movw	r24, r28
    fcc6:	01 96       	adiw	r24, 0x01	; 1
    fcc8:	0e 94 49 69 	call	0xd292	; 0xd292 <vfprintf>
    fccc:	ef 81       	ldd	r30, Y+7	; 0x07
    fcce:	f8 85       	ldd	r31, Y+8	; 0x08
    fcd0:	e0 0f       	add	r30, r16
    fcd2:	f1 1f       	adc	r31, r17
    fcd4:	10 82       	st	Z, r1
    fcd6:	2e 96       	adiw	r28, 0x0e	; 14
    fcd8:	cd bf       	out	0x3d, r28	; 61
    fcda:	de bf       	out	0x3e, r29	; 62
    fcdc:	df 91       	pop	r29
    fcde:	cf 91       	pop	r28
    fce0:	1f 91       	pop	r17
    fce2:	0f 91       	pop	r16
    fce4:	08 95       	ret

0000fce6 <ungetc>:
    fce6:	fb 01       	movw	r30, r22
    fce8:	23 81       	ldd	r18, Z+3	; 0x03
    fcea:	20 ff       	sbrs	r18, 0
    fcec:	12 c0       	rjmp	.+36     	; 0xfd12 <ungetc+0x2c>
    fcee:	26 fd       	sbrc	r18, 6
    fcf0:	10 c0       	rjmp	.+32     	; 0xfd12 <ungetc+0x2c>
    fcf2:	8f 3f       	cpi	r24, 0xFF	; 255
    fcf4:	3f ef       	ldi	r19, 0xFF	; 255
    fcf6:	93 07       	cpc	r25, r19
    fcf8:	61 f0       	breq	.+24     	; 0xfd12 <ungetc+0x2c>
    fcfa:	82 83       	std	Z+2, r24	; 0x02
    fcfc:	2f 7d       	andi	r18, 0xDF	; 223
    fcfe:	20 64       	ori	r18, 0x40	; 64
    fd00:	23 83       	std	Z+3, r18	; 0x03
    fd02:	26 81       	ldd	r18, Z+6	; 0x06
    fd04:	37 81       	ldd	r19, Z+7	; 0x07
    fd06:	21 50       	subi	r18, 0x01	; 1
    fd08:	31 09       	sbc	r19, r1
    fd0a:	26 83       	std	Z+6, r18	; 0x06
    fd0c:	37 83       	std	Z+7, r19	; 0x07
    fd0e:	99 27       	eor	r25, r25
    fd10:	08 95       	ret
    fd12:	8f ef       	ldi	r24, 0xFF	; 255
    fd14:	9f ef       	ldi	r25, 0xFF	; 255
    fd16:	08 95       	ret

0000fd18 <__ultoa_invert>:
    fd18:	fa 01       	movw	r30, r20
    fd1a:	aa 27       	eor	r26, r26
    fd1c:	28 30       	cpi	r18, 0x08	; 8
    fd1e:	51 f1       	breq	.+84     	; 0xfd74 <__ultoa_invert+0x5c>
    fd20:	20 31       	cpi	r18, 0x10	; 16
    fd22:	81 f1       	breq	.+96     	; 0xfd84 <__ultoa_invert+0x6c>
    fd24:	e8 94       	clt
    fd26:	6f 93       	push	r22
    fd28:	6e 7f       	andi	r22, 0xFE	; 254
    fd2a:	6e 5f       	subi	r22, 0xFE	; 254
    fd2c:	7f 4f       	sbci	r23, 0xFF	; 255
    fd2e:	8f 4f       	sbci	r24, 0xFF	; 255
    fd30:	9f 4f       	sbci	r25, 0xFF	; 255
    fd32:	af 4f       	sbci	r26, 0xFF	; 255
    fd34:	b1 e0       	ldi	r27, 0x01	; 1
    fd36:	3e d0       	rcall	.+124    	; 0xfdb4 <__ultoa_invert+0x9c>
    fd38:	b4 e0       	ldi	r27, 0x04	; 4
    fd3a:	3c d0       	rcall	.+120    	; 0xfdb4 <__ultoa_invert+0x9c>
    fd3c:	67 0f       	add	r22, r23
    fd3e:	78 1f       	adc	r23, r24
    fd40:	89 1f       	adc	r24, r25
    fd42:	9a 1f       	adc	r25, r26
    fd44:	a1 1d       	adc	r26, r1
    fd46:	68 0f       	add	r22, r24
    fd48:	79 1f       	adc	r23, r25
    fd4a:	8a 1f       	adc	r24, r26
    fd4c:	91 1d       	adc	r25, r1
    fd4e:	a1 1d       	adc	r26, r1
    fd50:	6a 0f       	add	r22, r26
    fd52:	71 1d       	adc	r23, r1
    fd54:	81 1d       	adc	r24, r1
    fd56:	91 1d       	adc	r25, r1
    fd58:	a1 1d       	adc	r26, r1
    fd5a:	20 d0       	rcall	.+64     	; 0xfd9c <__ultoa_invert+0x84>
    fd5c:	09 f4       	brne	.+2      	; 0xfd60 <__ultoa_invert+0x48>
    fd5e:	68 94       	set
    fd60:	3f 91       	pop	r19
    fd62:	2a e0       	ldi	r18, 0x0A	; 10
    fd64:	26 9f       	mul	r18, r22
    fd66:	11 24       	eor	r1, r1
    fd68:	30 19       	sub	r19, r0
    fd6a:	30 5d       	subi	r19, 0xD0	; 208
    fd6c:	31 93       	st	Z+, r19
    fd6e:	de f6       	brtc	.-74     	; 0xfd26 <__ultoa_invert+0xe>
    fd70:	cf 01       	movw	r24, r30
    fd72:	08 95       	ret
    fd74:	46 2f       	mov	r20, r22
    fd76:	47 70       	andi	r20, 0x07	; 7
    fd78:	40 5d       	subi	r20, 0xD0	; 208
    fd7a:	41 93       	st	Z+, r20
    fd7c:	b3 e0       	ldi	r27, 0x03	; 3
    fd7e:	0f d0       	rcall	.+30     	; 0xfd9e <__ultoa_invert+0x86>
    fd80:	c9 f7       	brne	.-14     	; 0xfd74 <__ultoa_invert+0x5c>
    fd82:	f6 cf       	rjmp	.-20     	; 0xfd70 <__ultoa_invert+0x58>
    fd84:	46 2f       	mov	r20, r22
    fd86:	4f 70       	andi	r20, 0x0F	; 15
    fd88:	40 5d       	subi	r20, 0xD0	; 208
    fd8a:	4a 33       	cpi	r20, 0x3A	; 58
    fd8c:	18 f0       	brcs	.+6      	; 0xfd94 <__ultoa_invert+0x7c>
    fd8e:	49 5d       	subi	r20, 0xD9	; 217
    fd90:	31 fd       	sbrc	r19, 1
    fd92:	40 52       	subi	r20, 0x20	; 32
    fd94:	41 93       	st	Z+, r20
    fd96:	02 d0       	rcall	.+4      	; 0xfd9c <__ultoa_invert+0x84>
    fd98:	a9 f7       	brne	.-22     	; 0xfd84 <__ultoa_invert+0x6c>
    fd9a:	ea cf       	rjmp	.-44     	; 0xfd70 <__ultoa_invert+0x58>
    fd9c:	b4 e0       	ldi	r27, 0x04	; 4
    fd9e:	a6 95       	lsr	r26
    fda0:	97 95       	ror	r25
    fda2:	87 95       	ror	r24
    fda4:	77 95       	ror	r23
    fda6:	67 95       	ror	r22
    fda8:	ba 95       	dec	r27
    fdaa:	c9 f7       	brne	.-14     	; 0xfd9e <__ultoa_invert+0x86>
    fdac:	00 97       	sbiw	r24, 0x00	; 0
    fdae:	61 05       	cpc	r22, r1
    fdb0:	71 05       	cpc	r23, r1
    fdb2:	08 95       	ret
    fdb4:	9b 01       	movw	r18, r22
    fdb6:	ac 01       	movw	r20, r24
    fdb8:	0a 2e       	mov	r0, r26
    fdba:	06 94       	lsr	r0
    fdbc:	57 95       	ror	r21
    fdbe:	47 95       	ror	r20
    fdc0:	37 95       	ror	r19
    fdc2:	27 95       	ror	r18
    fdc4:	ba 95       	dec	r27
    fdc6:	c9 f7       	brne	.-14     	; 0xfdba <__ultoa_invert+0xa2>
    fdc8:	62 0f       	add	r22, r18
    fdca:	73 1f       	adc	r23, r19
    fdcc:	84 1f       	adc	r24, r20
    fdce:	95 1f       	adc	r25, r21
    fdd0:	a0 1d       	adc	r26, r0
    fdd2:	08 95       	ret

0000fdd4 <__ctype_isfalse>:
    fdd4:	99 27       	eor	r25, r25
    fdd6:	88 27       	eor	r24, r24

0000fdd8 <__ctype_istrue>:
    fdd8:	08 95       	ret

0000fdda <__mulsi3>:
    fdda:	db 01       	movw	r26, r22
    fddc:	8f 93       	push	r24
    fdde:	9f 93       	push	r25
    fde0:	0e 94 7c 77 	call	0xeef8	; 0xeef8 <__muluhisi3>
    fde4:	bf 91       	pop	r27
    fde6:	af 91       	pop	r26
    fde8:	a2 9f       	mul	r26, r18
    fdea:	80 0d       	add	r24, r0
    fdec:	91 1d       	adc	r25, r1
    fdee:	a3 9f       	mul	r26, r19
    fdf0:	90 0d       	add	r25, r0
    fdf2:	b2 9f       	mul	r27, r18
    fdf4:	90 0d       	add	r25, r0
    fdf6:	11 24       	eor	r1, r1
    fdf8:	08 95       	ret

0000fdfa <_exit>:
    fdfa:	f8 94       	cli

0000fdfc <__stop_program>:
    fdfc:	ff cf       	rjmp	.-2      	; 0xfdfc <__stop_program>
