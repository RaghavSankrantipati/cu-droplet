   1               		.file	"pong.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	__floatsisf
  13               	.global	__ltsf2
  14               	.global	__gtsf2
  15               		.section	.text.nearBotsBearingCmp,"ax",@progbits
  17               	nearBotsBearingCmp:
  18               	.LFB72:
  19               		.file 1 "../pong.h"
   1:../pong.h     **** #pragma once
   2:../pong.h     **** 
   3:../pong.h     **** #include "droplet_init.h"
   4:../pong.h     **** 
   5:../pong.h     **** //#define RNB_DEBUG_MODE
   6:../pong.h     **** //#define BALL_DEBUG_MODE
   7:../pong.h     **** //#define PADDLE_DEBUG_MODE
   8:../pong.h     **** 
   9:../pong.h     **** #ifdef RNB_DEBUG_MODE
  10:../pong.h     **** #define RNB_DEBUG_PRINT(format, ...) printf_P(PSTR(format), ##__VA_ARGS__)
  11:../pong.h     **** #else
  12:../pong.h     **** #define RNB_DEBUG_PRINT(format, ...)
  13:../pong.h     **** #endif
  14:../pong.h     **** 
  15:../pong.h     **** #ifdef BALL_DEBUG_MODE
  16:../pong.h     **** #define BALL_DEBUG_PRINT(format, ...) printf_P(PSTR(format), ##__VA_ARGS__)
  17:../pong.h     **** #else
  18:../pong.h     **** #define BALL_DEBUG_PRINT(format, ...)
  19:../pong.h     **** #endif
  20:../pong.h     **** 
  21:../pong.h     **** #ifdef PADDLE_DEBUG_MODE
  22:../pong.h     **** #define PADDLE_DEBUG_PRINT(format, ...) printf_P(PSTR(format), ##__VA_ARGS__)
  23:../pong.h     **** #else
  24:../pong.h     **** #define PADDLE_DEBUG_PRINT(format, ...)
  25:../pong.h     **** #endif
  26:../pong.h     **** 
  27:../pong.h     **** #define DROPLET_DIAMETER_MM		44.4
  28:../pong.h     **** #define BALL_MSG_FLAG			'B'
  29:../pong.h     **** #define BOT_POS_MSG_FLAG		'P'
  30:../pong.h     **** #define N_PADDLE_MSG_FLAG		'N'
  31:../pong.h     **** #define S_PADDLE_MSG_FLAG		'S'
  32:../pong.h     **** 
  33:../pong.h     **** #define SLOT_LENGTH_MS			397
  34:../pong.h     **** #define SLOTS_PER_FRAME			38
  35:../pong.h     **** #define FRAME_LENGTH_MS			(((uint32_t)SLOT_LENGTH_MS)*((uint32_t)SLOTS_PER_FRAME))
  36:../pong.h     **** #define LOOP_DELAY_MS			17
  37:../pong.h     **** 
  38:../pong.h     **** #define NUM_TRACKED_BOTS 12
  39:../pong.h     **** 
  40:../pong.h     **** #define PADDLE_VEL				0.1
  41:../pong.h     **** #define PADDLE_WIDTH			10
  42:../pong.h     **** 
  43:../pong.h     **** #define STATE_PIXEL		0x01
  44:../pong.h     **** #define STATE_CTRL		0x02
  45:../pong.h     **** #define STATE_NORTH		0x11
  46:../pong.h     **** #define STATE_SOUTH		0x12
  47:../pong.h     **** #define STATE_EAST		0x14
  48:../pong.h     **** #define STATE_WEST		0x18
  49:../pong.h     **** #define NORTH_PIXEL_Q(state)		((state&STATE_PIXEL)&&(state&STATE_NORTH))
  50:../pong.h     **** #define SOUTH_PIXEL_Q(state)		((state&STATE_PIXEL)&&(state&STATE_SOUTH))
  51:../pong.h     **** #define CTRL_Q(state)				(state&STATE_CTRL)
  52:../pong.h     **** #define NE_Q(state)					((state&STATE_NORTH)&&(state&STATE_EAST))
  53:../pong.h     **** #define NW_Q(state)					((state&STATE_NORTH)&&(state&STATE_WEST))
  54:../pong.h     **** #define SE_Q(state)					((state&STATE_SOUTH)&&(state&STATE_EAST))
  55:../pong.h     **** #define SW_Q(state)					((state&STATE_SOUTH)&&(state&STATE_WEST))
  56:../pong.h     **** #define NS_PIXEL_Q(state)			((state&STATE_PIXEL)&&((state&STATE_NORTH) || (state&STATE_SOUTH)))
  57:../pong.h     **** #define EW_PIXEL_Q(state)			((state&STATE_PIXEL)&&((state&STATE_EAST) || (state&STATE_WEST)))
  58:../pong.h     **** 
  59:../pong.h     **** typedef enum {
  60:../pong.h     **** 	POS,
  61:../pong.h     **** 	GAME
  62:../pong.h     **** } ColorMode;
  63:../pong.h     **** ColorMode	colorMode;
  64:../pong.h     **** 
  65:../pong.h     **** typedef enum {
  66:../pong.h     **** 	PONG,
  67:../pong.h     **** 	BOUNCE
  68:../pong.h     **** } GameMode;
  69:../pong.h     **** GameMode gameMode;
  70:../pong.h     **** 
  71:../pong.h     **** typedef struct ball_msg_struct{
  72:../pong.h     **** 	char flag;
  73:../pong.h     **** 	uint8_t xPos;
  74:../pong.h     **** 	uint8_t yPos;
  75:../pong.h     **** 	uint8_t extraBits; //bits 7-5 are three high bits for xPos; bits 4-2 are three high bits for yPos;
  76:../pong.h     **** 	int8_t xVel;
  77:../pong.h     **** 	int8_t yVel;
  78:../pong.h     **** 	uint8_t radius; //bits 0-1 are two high bits for id. rest is radius (which must be divisible by 4)
  79:../pong.h     **** }BallMsg;
  80:../pong.h     **** 
  81:../pong.h     **** typedef struct ball_dat_struct{
  82:../pong.h     **** 	uint32_t lastUpdate;
  83:../pong.h     **** 	int16_t xPos;
  84:../pong.h     **** 	int16_t yPos;
  85:../pong.h     **** 	int8_t xVel;
  86:../pong.h     **** 	int8_t yVel;
  87:../pong.h     **** 	uint8_t id;
  88:../pong.h     **** 	uint8_t radius;
  89:../pong.h     **** }BallDat;
  90:../pong.h     **** BallDat theBall;
  91:../pong.h     **** 
  92:../pong.h     **** typedef struct bot_pos_msg_struct{
  93:../pong.h     **** 	BotPos pos; //6 bytes
  94:../pong.h     **** 	char flag;
  95:../pong.h     **** }BotPosMsg;
  96:../pong.h     **** 
  97:../pong.h     **** typedef struct paddle_msg_struct{
  98:../pong.h     **** 	char flag;
  99:../pong.h     **** 	int16_t deltaPos;
 100:../pong.h     **** }PaddleMsg;
 101:../pong.h     **** 
 102:../pong.h     **** typedef struct other_bot_rnb_struct{
 103:../pong.h     **** 	BotPos pos;
 104:../pong.h     **** 	id_t id;
 105:../pong.h     **** 	//uint8_t hasNewInfo;
 106:../pong.h     **** } OtherBot;
 107:../pong.h     **** OtherBot nearBots[NUM_TRACKED_BOTS+1];
 108:../pong.h     **** 
 109:../pong.h     **** typedef struct hard_bot_struct{
 110:../pong.h     **** 	id_t id;
 111:../pong.h     **** 	struct hard_bot_struct* next;
 112:../pong.h     **** } HardBot;
 113:../pong.h     **** HardBot* hardBotsList;
 114:../pong.h     **** 
 115:../pong.h     **** uint8_t		lastBallID;
 116:../pong.h     **** uint8_t		myState;
 117:../pong.h     **** uint32_t	lastBallMsg;
 118:../pong.h     **** uint32_t	lastPaddleMsg;
 119:../pong.h     **** uint32_t	lastLightCheck;
 120:../pong.h     **** float		paddleChange;
 121:../pong.h     **** int16_t		paddleStart;
 122:../pong.h     **** int16_t		paddleEnd;
 123:../pong.h     **** uint8_t		isCovered;
 124:../pong.h     **** uint16_t    myDist;
 125:../pong.h     **** uint16_t    otherDist;
 126:../pong.h     **** 
 127:../pong.h     **** uint32_t	frameCount;
 128:../pong.h     **** uint32_t	frameStart;
 129:../pong.h     **** uint16_t	mySlot;
 130:../pong.h     **** uint16_t	loopID;
 131:../pong.h     **** 
 132:../pong.h     **** uint8_t		numNearBots;
 133:../pong.h     **** void		init(void);
 134:../pong.h     **** void		loop(void);
 135:../pong.h     **** void		handle_msg(ir_msg* msg_struct);
 136:../pong.h     **** float		getPaddleCoverage(void);
 137:../pong.h     **** void		checkLightLevel(void);
 138:../pong.h     **** void		sendBotPosMsg(void);
 139:../pong.h     **** void		handleBotPosMsg(BotPosMsg* msg, id_t senderID);
 140:../pong.h     **** 
 141:../pong.h     **** void		updateBall(void);
 142:../pong.h     **** void		updateColor(void);
 143:../pong.h     **** float		getBallCoverage(void);
 144:../pong.h     **** 
 145:../pong.h     **** void		updateHardBots(void);
 146:../pong.h     **** void		sendBallMsg(void);
 147:../pong.h     **** void		handleBallMsg(BallMsg* msg, uint32_t arrivalTime);
 148:../pong.h     **** void		sendPaddleMsg(void);
 149:../pong.h     **** void		handlePaddleMsg(char flag, int16_t delta);
 150:../pong.h     **** 
 151:../pong.h     **** OtherBot*	getOtherBot(id_t id);
 152:../pong.h     **** void		findAndRemoveOtherBot(id_t id);
 153:../pong.h     **** void		removeOtherBot(uint8_t idx);
 154:../pong.h     **** OtherBot*	addOtherBot(id_t id);
 155:../pong.h     **** void		cleanOtherBot(OtherBot* other);
 156:../pong.h     **** void		printNearBots(void);
 157:../pong.h     **** 
 158:../pong.h     **** void		addHardBot(id_t id);
 159:../pong.h     **** void		cleanHardBots(void);
 160:../pong.h     **** 
 161:../pong.h     **** inline static void copyBotPos(BotPos* src, BotPos* dest){
 162:../pong.h     **** 	dest->x = src->x;
 163:../pong.h     **** 	dest->y = src->y;
 164:../pong.h     **** 	dest->o = src->o;
 165:../pong.h     **** }
 166:../pong.h     **** 
 167:../pong.h     **** inline static float getCoverageRatioA(uint8_t rad, uint16_t dist){ //when ball radius less than bot
 168:../pong.h     **** 	const float intermediate = (((float)rad)/(2*DROPLET_RADIUS*DROPLET_RADIUS));
 169:../pong.h     **** 	return intermediate*(rad+DROPLET_RADIUS-dist);
 170:../pong.h     **** }
 171:../pong.h     **** 
 172:../pong.h     **** inline static float getCoverageRatioB(uint8_t rad, uint16_t dist){ //when bot radius less than ball
 173:../pong.h     **** 	const float intermediate = 1.0/(2.0*DROPLET_RADIUS);
 174:../pong.h     **** 	return intermediate*(rad+DROPLET_RADIUS-dist);
 175:../pong.h     **** }
 176:../pong.h     **** 
 177:../pong.h     **** inline static int8_t checkBallCrossedMe(void){
 178:../pong.h     **** 	return sgn(((theBall.yVel*(theBall.yPos-myPos.y-theBall.xVel) + theBall.xVel*(theBall.xPos-myPos.x
 179:../pong.h     **** }
 180:../pong.h     **** 
 181:../pong.h     **** inline static int8_t checkBounceHard(int16_t Bx, int16_t By, int32_t timePassed){
 182:../pong.h     **** 	int16_t Ax = myPos.x;
 183:../pong.h     **** 	int16_t Ay = myPos.y;
 184:../pong.h     **** 	int16_t x = theBall.xPos;
 185:../pong.h     **** 	int16_t y = theBall.yPos;
 186:../pong.h     **** 	int8_t signBefore = sgn((Bx-Ax)*(y-Ay) - (By-Ay)*(x-Ax));
 187:../pong.h     **** 	int16_t xAfter = x + (int16_t)((((int32_t)(theBall.xVel))*timePassed)/1000.0);
 188:../pong.h     **** 	int16_t yAfter = y + (int16_t)((((int32_t)(theBall.yVel))*timePassed)/1000.0);
 189:../pong.h     **** 	int8_t signAfter = sgn((Bx-Ax)*(yAfter-Ay) - (By-Ay)*(xAfter-Ax));
 190:../pong.h     **** 	BALL_DEBUG_PRINT("(%4d, %4d) [%hd] -> (%4d, %4d) [%hd]\r\n", x, y, signBefore, xAfter, yAfter, sig
 191:../pong.h     **** 	if(signBefore!=signAfter){
 192:../pong.h     **** 		return 1;
 193:../pong.h     **** 	}else{
 194:../pong.h     **** 		return 0;
 195:../pong.h     **** 	}
 196:../pong.h     **** }
 197:../pong.h     **** 
 198:../pong.h     **** /*Code below from http://stackoverflow.com/questions/573084/how-to-calculate-bounce-angle */
 199:../pong.h     **** inline static void calculateBounce(int16_t Bx, int16_t By){
 200:../pong.h     **** 	int16_t vX = theBall.xVel;
 201:../pong.h     **** 	int16_t vY = theBall.yVel;
 202:../pong.h     **** 	int16_t normX = -(By-myPos.y);
 203:../pong.h     **** 	int16_t normY = (Bx-myPos.x);
 204:../pong.h     **** 	int16_t nDotN = normX*normX + normY*normY;
 205:../pong.h     **** 	int16_t vDotN = vX*normX + vY*normY;
 206:../pong.h     **** 	int16_t uX = normX*vDotN/nDotN;
 207:../pong.h     **** 	int16_t uY = normY*vDotN/nDotN;
 208:../pong.h     **** 	theBall.xVel = vX - 2*uX;
 209:../pong.h     **** 	theBall.yVel = vY - 2*uY;
 210:../pong.h     **** }
 211:../pong.h     **** 
 212:../pong.h     **** static int nearBotsDistCmp(const void* a, const void* b){
 213:../pong.h     **** 	BotPos* aPos = &(((OtherBot*)a)->pos);
 214:../pong.h     **** 	BotPos* bPos = &(((OtherBot*)b)->pos);
 215:../pong.h     **** 	float aDist = hypot(aPos->y - myPos.y, aPos->x - myPos.x);
 216:../pong.h     **** 	float bDist = hypot(bPos->y - myPos.y, bPos->x - myPos.x);
 217:../pong.h     **** 	if(aDist < bDist){
 218:../pong.h     **** 		return -1;
 219:../pong.h     **** 	}else if(bDist < aDist){
 220:../pong.h     **** 		return 1;
 221:../pong.h     **** 	}else{
 222:../pong.h     **** 		return 0;
 223:../pong.h     **** 	}
 224:../pong.h     **** }
 225:../pong.h     **** 
 226:../pong.h     **** static int nearBotsBearingCmp(const void* a, const void* b){
  20               		.loc 1 226 0
  21               		.cfi_startproc
  22               	.LVL0:
  23 0000 4F92      		push r4
  24               	.LCFI0:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 4, -3
  27 0002 5F92      		push r5
  28               	.LCFI1:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 5, -4
  31 0004 6F92      		push r6
  32               	.LCFI2:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 6, -5
  35 0006 7F92      		push r7
  36               	.LCFI3:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 7, -6
  39 0008 8F92      		push r8
  40               	.LCFI4:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 8, -7
  43 000a 9F92      		push r9
  44               	.LCFI5:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 9, -8
  47 000c AF92      		push r10
  48               	.LCFI6:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 10, -9
  51 000e BF92      		push r11
  52               	.LCFI7:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 11, -10
  55 0010 CF92      		push r12
  56               	.LCFI8:
  57               		.cfi_def_cfa_offset 12
  58               		.cfi_offset 12, -11
  59 0012 DF92      		push r13
  60               	.LCFI9:
  61               		.cfi_def_cfa_offset 13
  62               		.cfi_offset 13, -12
  63 0014 EF92      		push r14
  64               	.LCFI10:
  65               		.cfi_def_cfa_offset 14
  66               		.cfi_offset 14, -13
  67 0016 FF92      		push r15
  68               	.LCFI11:
  69               		.cfi_def_cfa_offset 15
  70               		.cfi_offset 15, -14
  71 0018 0F93      		push r16
  72               	.LCFI12:
  73               		.cfi_def_cfa_offset 16
  74               		.cfi_offset 16, -15
  75 001a 1F93      		push r17
  76               	.LCFI13:
  77               		.cfi_def_cfa_offset 17
  78               		.cfi_offset 17, -16
  79 001c CF93      		push r28
  80               	.LCFI14:
  81               		.cfi_def_cfa_offset 18
  82               		.cfi_offset 28, -17
  83 001e DF93      		push r29
  84               	.LCFI15:
  85               		.cfi_def_cfa_offset 19
  86               		.cfi_offset 29, -18
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 16 */
  90               	.L__stack_usage = 16
  91 0020 7C01      		movw r14,r24
  92 0022 8B01      		movw r16,r22
  93               	.LVL1:
 227:../pong.h     **** 	BotPos* aPos = &(((OtherBot*)a)->pos);
 228:../pong.h     **** 	BotPos* bPos = &(((OtherBot*)b)->pos);
 229:../pong.h     **** 	float aBearing = atan2(aPos->y - myPos.y, aPos->x - myPos.x);
  94               		.loc 1 229 0
  95 0024 A090 0000 		lds r10,myPos
  96 0028 B090 0000 		lds r11,myPos+1
  97 002c C091 0000 		lds r28,myPos+2
  98 0030 D091 0000 		lds r29,myPos+2+1
  99 0034 FC01      		movw r30,r24
 100 0036 6081      		ld r22,Z
 101 0038 7181      		ldd r23,Z+1
 102               	.LVL2:
 103 003a 6A19      		sub r22,r10
 104 003c 7B09      		sbc r23,r11
 105 003e 072E      		mov __tmp_reg__,r23
 106 0040 000C      		lsl r0
 107 0042 880B      		sbc r24,r24
 108 0044 990B      		sbc r25,r25
 109 0046 0E94 0000 		call __floatsisf
 110               	.LVL3:
 111 004a 2B01      		movw r4,r22
 112 004c 3C01      		movw r6,r24
 113 004e F701      		movw r30,r14
 114 0050 6281      		ldd r22,Z+2
 115 0052 7381      		ldd r23,Z+3
 116 0054 6C1B      		sub r22,r28
 117 0056 7D0B      		sbc r23,r29
 118 0058 072E      		mov __tmp_reg__,r23
 119 005a 000C      		lsl r0
 120 005c 880B      		sbc r24,r24
 121 005e 990B      		sbc r25,r25
 122 0060 0E94 0000 		call __floatsisf
 123               	.LVL4:
 124 0064 A301      		movw r20,r6
 125 0066 9201      		movw r18,r4
 126 0068 0E94 0000 		call atan2
 127               	.LVL5:
 128 006c 6B01      		movw r12,r22
 129 006e 7C01      		movw r14,r24
 130               	.LVL6:
 230:../pong.h     **** 	float bBearing = atan2(bPos->y - myPos.y, bPos->x - myPos.x);
 131               		.loc 1 230 0
 132 0070 F801      		movw r30,r16
 133 0072 6081      		ld r22,Z
 134 0074 7181      		ldd r23,Z+1
 135 0076 6A19      		sub r22,r10
 136 0078 7B09      		sbc r23,r11
 137 007a 072E      		mov __tmp_reg__,r23
 138 007c 000C      		lsl r0
 139 007e 880B      		sbc r24,r24
 140 0080 990B      		sbc r25,r25
 141 0082 0E94 0000 		call __floatsisf
 142               	.LVL7:
 143 0086 4B01      		movw r8,r22
 144 0088 5C01      		movw r10,r24
 145 008a F801      		movw r30,r16
 146 008c 6281      		ldd r22,Z+2
 147 008e 7381      		ldd r23,Z+3
 148 0090 6C1B      		sub r22,r28
 149 0092 7D0B      		sbc r23,r29
 150 0094 072E      		mov __tmp_reg__,r23
 151 0096 000C      		lsl r0
 152 0098 880B      		sbc r24,r24
 153 009a 990B      		sbc r25,r25
 154 009c 0E94 0000 		call __floatsisf
 155               	.LVL8:
 156 00a0 A501      		movw r20,r10
 157 00a2 9401      		movw r18,r8
 158 00a4 0E94 0000 		call atan2
 159               	.LVL9:
 160 00a8 4B01      		movw r8,r22
 161 00aa 5C01      		movw r10,r24
 162               	.LVL10:
 231:../pong.h     **** 	if(aBearing < bBearing){
 163               		.loc 1 231 0
 164 00ac 9B01      		movw r18,r22
 165 00ae AC01      		movw r20,r24
 166 00b0 C701      		movw r24,r14
 167 00b2 B601      		movw r22,r12
 168 00b4 0E94 0000 		call __ltsf2
 169               	.LVL11:
 170 00b8 87FD      		sbrc r24,7
 171 00ba 00C0      		rjmp .L4
 232:../pong.h     **** 		return -1;
 172               		.loc 1 232 0
 173 00bc D1E0      		ldi r29,lo8(1)
 174 00be C0E0      		ldi r28,0
 175 00c0 A501      		movw r20,r10
 176 00c2 9401      		movw r18,r8
 177 00c4 C701      		movw r24,r14
 178 00c6 B601      		movw r22,r12
 179 00c8 0E94 0000 		call __gtsf2
 180               	.LVL12:
 181 00cc 1816      		cp __zero_reg__,r24
 182 00ce 04F4      		brge .L6
 183               	.L3:
 184 00d0 8D2F      		mov r24,r29
 185 00d2 9C2F      		mov r25,r28
 186               	.L2:
 187               	/* epilogue start */
 233:../pong.h     **** 	}else if(bBearing < aBearing){
 234:../pong.h     **** 		return 1;
 235:../pong.h     **** 	}else{
 236:../pong.h     **** 		return 0;
 237:../pong.h     **** 	}
 238:../pong.h     **** }
 188               		.loc 1 238 0
 189 00d4 DF91      		pop r29
 190 00d6 CF91      		pop r28
 191 00d8 1F91      		pop r17
 192 00da 0F91      		pop r16
 193               	.LVL13:
 194 00dc FF90      		pop r15
 195 00de EF90      		pop r14
 196               	.LVL14:
 197 00e0 DF90      		pop r13
 198 00e2 CF90      		pop r12
 199               	.LVL15:
 200 00e4 BF90      		pop r11
 201 00e6 AF90      		pop r10
 202 00e8 9F90      		pop r9
 203 00ea 8F90      		pop r8
 204               	.LVL16:
 205 00ec 7F90      		pop r7
 206 00ee 6F90      		pop r6
 207 00f0 5F90      		pop r5
 208 00f2 4F90      		pop r4
 209 00f4 0895      		ret
 210               	.LVL17:
 211               	.L6:
 232:../pong.h     **** 		return -1;
 212               		.loc 1 232 0
 213 00f6 D0E0      		ldi r29,0
 214 00f8 00C0      		rjmp .L3
 215               	.L4:
 216 00fa 8FEF      		ldi r24,lo8(-1)
 217 00fc 9FEF      		ldi r25,lo8(-1)
 218 00fe 00C0      		rjmp .L2
 219               		.cfi_endproc
 220               	.LFE72:
 222               		.section	.text.nearBotsDistCmp,"ax",@progbits
 224               	nearBotsDistCmp:
 225               	.LFB71:
 212:../pong.h     **** 	BotPos* aPos = &(((OtherBot*)a)->pos);
 226               		.loc 1 212 0
 227               		.cfi_startproc
 228               	.LVL18:
 229 0000 4F92      		push r4
 230               	.LCFI16:
 231               		.cfi_def_cfa_offset 4
 232               		.cfi_offset 4, -3
 233 0002 5F92      		push r5
 234               	.LCFI17:
 235               		.cfi_def_cfa_offset 5
 236               		.cfi_offset 5, -4
 237 0004 6F92      		push r6
 238               	.LCFI18:
 239               		.cfi_def_cfa_offset 6
 240               		.cfi_offset 6, -5
 241 0006 7F92      		push r7
 242               	.LCFI19:
 243               		.cfi_def_cfa_offset 7
 244               		.cfi_offset 7, -6
 245 0008 8F92      		push r8
 246               	.LCFI20:
 247               		.cfi_def_cfa_offset 8
 248               		.cfi_offset 8, -7
 249 000a 9F92      		push r9
 250               	.LCFI21:
 251               		.cfi_def_cfa_offset 9
 252               		.cfi_offset 9, -8
 253 000c AF92      		push r10
 254               	.LCFI22:
 255               		.cfi_def_cfa_offset 10
 256               		.cfi_offset 10, -9
 257 000e BF92      		push r11
 258               	.LCFI23:
 259               		.cfi_def_cfa_offset 11
 260               		.cfi_offset 11, -10
 261 0010 CF92      		push r12
 262               	.LCFI24:
 263               		.cfi_def_cfa_offset 12
 264               		.cfi_offset 12, -11
 265 0012 DF92      		push r13
 266               	.LCFI25:
 267               		.cfi_def_cfa_offset 13
 268               		.cfi_offset 13, -12
 269 0014 EF92      		push r14
 270               	.LCFI26:
 271               		.cfi_def_cfa_offset 14
 272               		.cfi_offset 14, -13
 273 0016 FF92      		push r15
 274               	.LCFI27:
 275               		.cfi_def_cfa_offset 15
 276               		.cfi_offset 15, -14
 277 0018 0F93      		push r16
 278               	.LCFI28:
 279               		.cfi_def_cfa_offset 16
 280               		.cfi_offset 16, -15
 281 001a 1F93      		push r17
 282               	.LCFI29:
 283               		.cfi_def_cfa_offset 17
 284               		.cfi_offset 17, -16
 285 001c CF93      		push r28
 286               	.LCFI30:
 287               		.cfi_def_cfa_offset 18
 288               		.cfi_offset 28, -17
 289 001e DF93      		push r29
 290               	.LCFI31:
 291               		.cfi_def_cfa_offset 19
 292               		.cfi_offset 29, -18
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 16 */
 296               	.L__stack_usage = 16
 297 0020 7C01      		movw r14,r24
 298 0022 8B01      		movw r16,r22
 299               	.LVL19:
 215:../pong.h     **** 	float bDist = hypot(bPos->y - myPos.y, bPos->x - myPos.x);
 300               		.loc 1 215 0
 301 0024 A090 0000 		lds r10,myPos
 302 0028 B090 0000 		lds r11,myPos+1
 303 002c C091 0000 		lds r28,myPos+2
 304 0030 D091 0000 		lds r29,myPos+2+1
 305 0034 FC01      		movw r30,r24
 306 0036 6081      		ld r22,Z
 307 0038 7181      		ldd r23,Z+1
 308               	.LVL20:
 309 003a 6A19      		sub r22,r10
 310 003c 7B09      		sbc r23,r11
 311 003e 072E      		mov __tmp_reg__,r23
 312 0040 000C      		lsl r0
 313 0042 880B      		sbc r24,r24
 314 0044 990B      		sbc r25,r25
 315 0046 0E94 0000 		call __floatsisf
 316               	.LVL21:
 317 004a 2B01      		movw r4,r22
 318 004c 3C01      		movw r6,r24
 319 004e F701      		movw r30,r14
 320 0050 6281      		ldd r22,Z+2
 321 0052 7381      		ldd r23,Z+3
 322 0054 6C1B      		sub r22,r28
 323 0056 7D0B      		sbc r23,r29
 324 0058 072E      		mov __tmp_reg__,r23
 325 005a 000C      		lsl r0
 326 005c 880B      		sbc r24,r24
 327 005e 990B      		sbc r25,r25
 328 0060 0E94 0000 		call __floatsisf
 329               	.LVL22:
 330 0064 A301      		movw r20,r6
 331 0066 9201      		movw r18,r4
 332 0068 0E94 0000 		call hypot
 333               	.LVL23:
 334 006c 6B01      		movw r12,r22
 335 006e 7C01      		movw r14,r24
 336               	.LVL24:
 216:../pong.h     **** 	if(aDist < bDist){
 337               		.loc 1 216 0
 338 0070 F801      		movw r30,r16
 339 0072 6081      		ld r22,Z
 340 0074 7181      		ldd r23,Z+1
 341 0076 6A19      		sub r22,r10
 342 0078 7B09      		sbc r23,r11
 343 007a 072E      		mov __tmp_reg__,r23
 344 007c 000C      		lsl r0
 345 007e 880B      		sbc r24,r24
 346 0080 990B      		sbc r25,r25
 347 0082 0E94 0000 		call __floatsisf
 348               	.LVL25:
 349 0086 4B01      		movw r8,r22
 350 0088 5C01      		movw r10,r24
 351 008a F801      		movw r30,r16
 352 008c 6281      		ldd r22,Z+2
 353 008e 7381      		ldd r23,Z+3
 354 0090 6C1B      		sub r22,r28
 355 0092 7D0B      		sbc r23,r29
 356 0094 072E      		mov __tmp_reg__,r23
 357 0096 000C      		lsl r0
 358 0098 880B      		sbc r24,r24
 359 009a 990B      		sbc r25,r25
 360 009c 0E94 0000 		call __floatsisf
 361               	.LVL26:
 362 00a0 A501      		movw r20,r10
 363 00a2 9401      		movw r18,r8
 364 00a4 0E94 0000 		call hypot
 365               	.LVL27:
 366 00a8 4B01      		movw r8,r22
 367 00aa 5C01      		movw r10,r24
 368               	.LVL28:
 217:../pong.h     **** 		return -1;
 369               		.loc 1 217 0
 370 00ac 9B01      		movw r18,r22
 371 00ae AC01      		movw r20,r24
 372 00b0 C701      		movw r24,r14
 373 00b2 B601      		movw r22,r12
 374 00b4 0E94 0000 		call __ltsf2
 375               	.LVL29:
 376 00b8 87FD      		sbrc r24,7
 377 00ba 00C0      		rjmp .L10
 218:../pong.h     **** 	}else if(bDist < aDist){
 378               		.loc 1 218 0
 379 00bc D1E0      		ldi r29,lo8(1)
 380 00be C0E0      		ldi r28,0
 381 00c0 A501      		movw r20,r10
 382 00c2 9401      		movw r18,r8
 383 00c4 C701      		movw r24,r14
 384 00c6 B601      		movw r22,r12
 385 00c8 0E94 0000 		call __gtsf2
 386               	.LVL30:
 387 00cc 1816      		cp __zero_reg__,r24
 388 00ce 04F4      		brge .L11
 389               	.L9:
 390 00d0 8D2F      		mov r24,r29
 391 00d2 9C2F      		mov r25,r28
 392               	.L8:
 393               	/* epilogue start */
 224:../pong.h     **** 
 394               		.loc 1 224 0
 395 00d4 DF91      		pop r29
 396 00d6 CF91      		pop r28
 397 00d8 1F91      		pop r17
 398 00da 0F91      		pop r16
 399               	.LVL31:
 400 00dc FF90      		pop r15
 401 00de EF90      		pop r14
 402               	.LVL32:
 403 00e0 DF90      		pop r13
 404 00e2 CF90      		pop r12
 405               	.LVL33:
 406 00e4 BF90      		pop r11
 407 00e6 AF90      		pop r10
 408 00e8 9F90      		pop r9
 409 00ea 8F90      		pop r8
 410               	.LVL34:
 411 00ec 7F90      		pop r7
 412 00ee 6F90      		pop r6
 413 00f0 5F90      		pop r5
 414 00f2 4F90      		pop r4
 415 00f4 0895      		ret
 416               	.LVL35:
 417               	.L11:
 218:../pong.h     **** 	}else if(bDist < aDist){
 418               		.loc 1 218 0
 419 00f6 D0E0      		ldi r29,0
 420 00f8 00C0      		rjmp .L9
 421               	.L10:
 422 00fa 8FEF      		ldi r24,lo8(-1)
 423 00fc 9FEF      		ldi r25,lo8(-1)
 424 00fe 00C0      		rjmp .L8
 425               		.cfi_endproc
 426               	.LFE71:
 428               		.section	.text.sendBotPosMsg,"ax",@progbits
 429               	.global	sendBotPosMsg
 431               	sendBotPosMsg:
 432               	.LFB85:
 433               		.file 2 "../pong.c"
   1:../pong.c     **** #include "pong.h"
   2:../pong.c     **** 
   3:../pong.c     **** /*
   4:../pong.c     ****  *
   5:../pong.c     ****  * TODO, AMONG OTHER THINGS->
   6:../pong.c     ****  *    Figure out when I should update my state!
   7:../pong.c     ****  *
   8:../pong.c     ****  */
   9:../pong.c     **** 
  10:../pong.c     ****  #define MIN_X -150
  11:../pong.c     ****  #define MIN_Y -150
  12:../pong.c     ****  #define MAX_X 150
  13:../pong.c     ****  #define MAX_Y 150
  14:../pong.c     **** 
  15:../pong.c     **** void init(){
  16:../pong.c     **** 	if((LOCALIZATION_DUR)>=SLOT_LENGTH_MS){
  17:../pong.c     **** 		printf_P(PSTR("Error! Localization requires SLOT_LENGTH_MS to be greater than LOCALIZATION_DUR!\r
  18:../pong.c     **** 	}
  19:../pong.c     **** 	loopID = 0xFFFF;
  20:../pong.c     **** 	frameCount = 0;
  21:../pong.c     **** 	frameStart=get_time();
  22:../pong.c     **** 	mySlot = getSlot(get_droplet_id());
  23:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS+1;i++){
  24:../pong.c     **** 		cleanOtherBot(&nearBots[i]);
  25:../pong.c     **** 	}
  26:../pong.c     **** 	myState = STATE_PIXEL;
  27:../pong.c     **** 	colorMode = POS;
  28:../pong.c     **** 	gameMode = BOUNCE;
  29:../pong.c     **** 	lastBallID = 0;
  30:../pong.c     **** 	lastBallMsg = 0;
  31:../pong.c     **** 	lastPaddleMsg = 0;
  32:../pong.c     **** 	hardBotsList = NULL;
  33:../pong.c     **** 	theBall.lastUpdate = 0;
  34:../pong.c     **** 	theBall.xPos = UNDF;
  35:../pong.c     **** 	theBall.yPos = UNDF;
  36:../pong.c     **** 	theBall.xVel = 0;
  37:../pong.c     **** 	theBall.yVel = 0;
  38:../pong.c     **** 	theBall.id = 0;
  39:../pong.c     **** 	theBall.radius = 0;
  40:../pong.c     **** 	printf("mySlot: %u, frame_length: %lu\r\n\r\n", mySlot, FRAME_LENGTH_MS);
  41:../pong.c     **** 	set_all_ir_powers(200);
  42:../pong.c     **** }
  43:../pong.c     **** 
  44:../pong.c     **** void loop(){
  45:../pong.c     **** 	uint32_t frameTime = get_time()-frameStart;
  46:../pong.c     **** 	if(frameTime>FRAME_LENGTH_MS){
  47:../pong.c     **** 		frameTime = frameTime - FRAME_LENGTH_MS;
  48:../pong.c     **** 		frameStart += FRAME_LENGTH_MS;
  49:../pong.c     **** 		frameCount++;
  50:../pong.c     **** 	}
  51:../pong.c     **** 	if(loopID!=(frameTime/SLOT_LENGTH_MS)){
  52:../pong.c     **** 		loopID = frameTime/SLOT_LENGTH_MS;
  53:../pong.c     **** 		if(loopID==mySlot){
  54:../pong.c     **** 			broadcast_rnb_data();
  55:../pong.c     **** 			schedule_task(RNB_DUR+20, sendBotPosMsg, NULL);
  56:../pong.c     **** 		}else if(loopID==SLOTS_PER_FRAME-1){
  57:../pong.c     **** 			qsort(nearBots, NUM_TRACKED_BOTS+1, sizeof(OtherBot), nearBotsBearingCmp);
  58:../pong.c     **** 			printf_P(PSTR("\nID: %04X T: %lu [ "), get_droplet_id(), get_time());
  59:../pong.c     **** 			switch(myState){
  60:../pong.c     **** 				case STATE_PIXEL:					printf("Pixel");		break;
  61:../pong.c     **** 				case (STATE_PIXEL|STATE_NORTH):		printf("North Pixel");	break;
  62:../pong.c     **** 				case (STATE_PIXEL|STATE_SOUTH):		printf("South Pixel");	break;
  63:../pong.c     **** 				default:							printf("???");			break;
  64:../pong.c     **** 			}
  65:../pong.c     **** 			printf_P(PSTR(" ]"));
  66:../pong.c     **** 			if(POS_DEFINED(&myPos)){
  67:../pong.c     **** 				printf_P(PSTR("\tMy Pos: {%d, %d, %d}\r\n"), myPos.x, myPos.y, myPos.o);
  68:../pong.c     **** 				printPosCovar(&myPosCovar);
  69:../pong.c     **** 				printf("\r\n");
  70:../pong.c     **** 			}else{
  71:../pong.c     **** 				printf("\r\n\r\n");
  72:../pong.c     **** 			}
  73:../pong.c     **** 			if((theBall.xPos != UNDF) && (theBall.yPos != UNDF)){
  74:../pong.c     **** 				printf_P(PSTR("\tBall ID: %hu; radius: %hu; Pos: (%d, %d) @ vel (%hd, %hd)\r\n"), theBall.id, t
  75:../pong.c     **** 			}
  76:../pong.c     **** 		}
  77:../pong.c     **** 		updateBall();
  78:../pong.c     **** 		updateColor();
  79:../pong.c     **** 	}
  80:../pong.c     **** 	if(NS_PIXEL_Q(myState)){
  81:../pong.c     **** 		checkLightLevel();
  82:../pong.c     **** 	}
  83:../pong.c     **** 	if(rnb_updated){
  84:../pong.c     **** 		RNB_DEBUG_PRINT("\t(RNB) ID: %04X | R: %4u B: %4d H: %4d\r\n", id, range, bearing, heading);
  85:../pong.c     **** 		useRNBmeas(last_good_rnb.id, last_good_rnb.range, last_good_rnb.bearing, last_good_rnb.heading);
  86:../pong.c     **** 		rnb_updated=0;
  87:../pong.c     **** 	}
  88:../pong.c     **** 	delay_ms(LOOP_DELAY_MS);
  89:../pong.c     **** }
  90:../pong.c     **** 
  91:../pong.c     **** void updateColor(){
  92:../pong.c     **** 	uint8_t newR = 0, newG = 0, newB = 0;
  93:../pong.c     **** 	if(colorMode==POS){
  94:../pong.c     **** 		getPosColor(&newR, &newG, &newB);
  95:../pong.c     **** 	}else if(colorMode==GAME){
  96:../pong.c     **** 		float coverage = getBallCoverage() + getPaddleCoverage();
  97:../pong.c     **** 		coverage = (coverage > 1.0) ? 1.0 : coverage;
  98:../pong.c     **** 		uint8_t intensityIncrease = 0;
  99:../pong.c     **** 		if(coverage>0.01){
 100:../pong.c     **** 			intensityIncrease = (uint16_t)(5.0*pow(51.0,coverage));
 101:../pong.c     **** 		}
 102:../pong.c     **** 		uint16_t newRed		= newR + intensityIncrease;
 103:../pong.c     **** 		uint16_t newGreen	= newG + intensityIncrease;
 104:../pong.c     **** 		uint16_t newBlue	= newB + intensityIncrease;
 105:../pong.c     **** 		newR = newRed>255 ? 255 :  newRed;
 106:../pong.c     **** 		newG = newGreen>255 ? 255 : newGreen;
 107:../pong.c     **** 		newB = newBlue>255 ? 255 : newBlue;
 108:../pong.c     **** 	}
 109:../pong.c     **** 	set_rgb(newR, newG, newB);
 110:../pong.c     **** }
 111:../pong.c     **** 
 112:../pong.c     **** float getBallCoverage(){
 113:../pong.c     **** 	float ballCoveredRatio = 0.0;
 114:../pong.c     **** 	if((((int16_t)myDist)!=UNDF) && (myDist<(DROPLET_RADIUS+theBall.radius)) && (theBall.id!=0x0F)){
 115:../pong.c     **** 		if(theBall.radius<DROPLET_RADIUS){
 116:../pong.c     **** 			if(myDist>=(DROPLET_RADIUS-theBall.radius)){
 117:../pong.c     **** 				ballCoveredRatio = getCoverageRatioA(theBall.radius, myDist);
 118:../pong.c     **** 				}else{
 119:../pong.c     **** 				ballCoveredRatio = 1.0;
 120:../pong.c     **** 			}
 121:../pong.c     **** 			}else{
 122:../pong.c     **** 			if(myDist>=(theBall.radius-DROPLET_RADIUS)){
 123:../pong.c     **** 				ballCoveredRatio = getCoverageRatioB(theBall.radius, myDist);
 124:../pong.c     **** 				}else{
 125:../pong.c     **** 				ballCoveredRatio = 1.0;
 126:../pong.c     **** 			}
 127:../pong.c     **** 		}
 128:../pong.c     **** 	}
 129:../pong.c     **** 	return ballCoveredRatio;
 130:../pong.c     **** 	//printf("Ball Coverage:\t%f | me: (%5.1f, %5.1f) ball: (%5.1f, %5.1f)->%hu\r\n", ballCoveredRatio
 131:../pong.c     **** }
 132:../pong.c     **** 
 133:../pong.c     **** float getPaddleCoverage(){
 134:../pong.c     **** 	float paddleCoveredRatio = 0.0;
 135:../pong.c     **** 	if(gameMode==PONG && NS_PIXEL_Q(myState)){
 136:../pong.c     **** 		int16_t myStart = myPos.x-DROPLET_RADIUS;
 137:../pong.c     **** 		int16_t myEnd   = myPos.x+DROPLET_RADIUS;
 138:../pong.c     **** 		if(myEnd>paddleStart && paddleEnd>myStart){ //otherwise, no intersection
 139:../pong.c     **** 			if(myEnd>paddleEnd){
 140:../pong.c     **** 				if(myStart>paddleStart){
 141:../pong.c     **** 					paddleCoveredRatio = (1.0*(paddleEnd-myStart))/(1.0*(myEnd-myStart));
 142:../pong.c     **** 				}else{
 143:../pong.c     **** 					paddleCoveredRatio = (1.0*(paddleEnd-paddleStart))/(1.0*(myEnd-myStart));
 144:../pong.c     **** 				}
 145:../pong.c     **** 			}else{
 146:../pong.c     **** 				if(myStart>paddleStart){
 147:../pong.c     **** 					paddleCoveredRatio = 1.0; //my end-myStart
 148:../pong.c     **** 				}else{
 149:../pong.c     **** 					paddleCoveredRatio = (1.0*(myEnd-paddleStart))/(1.0*(myEnd-myStart));
 150:../pong.c     **** 				}
 151:../pong.c     **** 			}
 152:../pong.c     **** 		}
 153:../pong.c     **** 	}
 154:../pong.c     **** 	return paddleCoveredRatio;
 155:../pong.c     **** 	
 156:../pong.c     **** }
 157:../pong.c     **** 
 158:../pong.c     **** void updateBall(){
 159:../pong.c     **** 	if(theBall.lastUpdate){
 160:../pong.c     **** 		uint32_t now = get_time();
 161:../pong.c     **** 		int32_t timePassed = now-theBall.lastUpdate;
 162:../pong.c     **** 		if(POS_DEFINED(&myPos) && ((theBall.xPos!=UNDF) && (theBall.yPos!=UNDF))){
 163:../pong.c     **** 			theBall.xPos += (int16_t)((((int32_t)(theBall.xVel))*timePassed)/1000.0);
 164:../pong.c     **** 			theBall.yPos += (int16_t)((((int32_t)(theBall.yVel))*timePassed)/1000.0);
 165:../pong.c     **** 			theBall.lastUpdate = now;
 166:../pong.c     **** 			BALL_DEBUG_PRINT("B[%hu]: %d, %d\r\n", theBall.id, theBall.xPos, theBall.yPos);
 167:../pong.c     **** 			uint8_t bounced = 0;
 168:../pong.c     **** 			HardBot* tmp = hardBotsList;
 169:../pong.c     **** 			myDist = (uint16_t)hypotf(myPos.x-theBall.xPos, myPos.y-theBall.yPos);
 170:../pong.c     **** 			while(tmp!=NULL){
 171:../pong.c     **** 				OtherBot* bot = getOtherBot(tmp->id);
 172:../pong.c     **** 				otherDist = (uint16_t)hypotf(bot->pos.x - theBall.xPos, bot->pos.y - theBall.yPos);
 173:../pong.c     **** 				if(myDist < otherDist){
 174:../pong.c     **** 					BALL_DEBUG_PRINT("\t%04X | ", tmp->id);
 175:../pong.c     **** 					if(checkBounceHard(bot->pos.x, bot->pos.y, timePassed)){
 176:../pong.c     **** 						if(gameMode==PONG && ((SOUTH_PIXEL_Q(myState) && theBall.yVel<=0) || (NORTH_PIXEL_Q(myState) 
 177:../pong.c     **** 							if(!isCovered){
 178:../pong.c     **** 								//Other Side scores a point!
 179:../pong.c     **** 								killBall();
 180:../pong.c     **** 								set_rgb(255,0,0);
 181:../pong.c     **** 							}
 182:../pong.c     **** 						}
 183:../pong.c     **** 						calculateBounce(bot->pos.x, bot->pos.y);
 184:../pong.c     **** 						BALL_DEBUG_PRINT("Ball bounced off boundary between me and %04X!\r\n", tmp->id);
 185:../pong.c     **** 						bounced = 1;
 186:../pong.c     **** 						break;
 187:../pong.c     **** 					}
 188:../pong.c     **** 				}
 189:../pong.c     **** 				tmp = tmp->next;
 190:../pong.c     **** 			}
 191:../pong.c     **** 			if(theBall.xPos<MIN_X || theBall.xPos>MAX_X || theBall.yPos<MIN_Y || theBall.yPos>MAX_Y){
 192:../pong.c     **** 				BALL_DEBUG_PRINT("Ball hit boundary, so we must have lost track.\r\n");
 193:../pong.c     **** 				theBall.xPos = UNDF;
 194:../pong.c     **** 				theBall.yPos = UNDF;
 195:../pong.c     **** 				myDist = UNDF;
 196:../pong.c     **** 				otherDist = UNDF;
 197:../pong.c     **** 			}
 198:../pong.c     **** 			}else{
 199:../pong.c     **** 			myDist = UNDF;
 200:../pong.c     **** 			otherDist = UNDF;
 201:../pong.c     **** 		}
 202:../pong.c     **** 	}
 203:../pong.c     **** }
 204:../pong.c     **** 
 205:../pong.c     **** void checkLightLevel(){
 206:../pong.c     **** 	int16_t r, g, b;
 207:../pong.c     **** 	get_rgb(&r,&g,&b);
 208:../pong.c     **** 	int16_t sum = r+g+b;
 209:../pong.c     **** 	uint32_t now = get_time();
 210:../pong.c     **** 	if(sum<=25){
 211:../pong.c     **** 		paddleChange += ((now-lastLightCheck)*(3*PADDLE_VEL));
 212:../pong.c     **** 		//printf("Paddle ChangeX5: %f\r\n", paddleChange);
 213:../pong.c     **** 	}else if(sum<=40){
 214:../pong.c     **** 		paddleChange += ((now-lastLightCheck)*(2*PADDLE_VEL));
 215:../pong.c     **** 		//printf("Paddle ChangeX3: %f\r\n", paddleChange);
 216:../pong.c     **** 	}else if(sum<=60){
 217:../pong.c     **** 		paddleChange += ((now-lastLightCheck)*(PADDLE_VEL));
 218:../pong.c     **** 		//printf("Paddle ChangeX5: %f\r\n", paddleChange);
 219:../pong.c     **** 	}
 220:../pong.c     **** 	if(sum<=60){
 221:../pong.c     **** 		isCovered=1;
 222:../pong.c     **** 	}else{
 223:../pong.c     **** 		isCovered=0;
 224:../pong.c     **** 	}
 225:../pong.c     **** 	lastLightCheck = now;
 226:../pong.c     **** 	//printf("Light: %5d (%4d, %4d, %4d)\r\n",sum,r,g,b);
 227:../pong.c     **** }
 228:../pong.c     **** 
 229:../pong.c     **** void updateHardBots(){
 230:../pong.c     **** 	//First, making a copy of nearBots so we can sort it by a weird metric.
 231:../pong.c     **** 	OtherBot nearBotsCopy[NUM_TRACKED_BOTS];
 232:../pong.c     **** 	memcpy(nearBotsCopy, nearBots, sizeof(BotPos)*NUM_TRACKED_BOTS);
 233:../pong.c     **** 	uint8_t numNearBots = 0;
 234:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 235:../pong.c     **** 		if(nearBots[i].id==0) continue;
 236:../pong.c     **** 		nearBotsCopy[i].id   = nearBots[i].id;
 237:../pong.c     **** 		nearBotsCopy[i].pos.x    = nearBots[i].pos.x;
 238:../pong.c     **** 		nearBotsCopy[i].pos.y    = nearBots[i].pos.y;
 239:../pong.c     **** 		nearBotsCopy[i].pos.o    = nearBots[i].pos.o;
 240:../pong.c     **** 		numNearBots++;
 241:../pong.c     **** 	}
 242:../pong.c     **** 	cleanHardBots(); //clean out the previous hardBots list -- we start fresh each farme.
 243:../pong.c     **** 	//sort nearBots according to their bearing.
 244:../pong.c     **** 	//TODO:
 245:../pong.c     **** 	//	nearBotsCmpFunc sorts by RANGE! Need to change to one that sorts by bearing!
 246:../pong.c     **** 	//
 247:../pong.c     **** 	qsort(nearBotsCopy, numNearBots, sizeof(BotMeas), nearBotsDistCmp);
 248:../pong.c     **** 	//go through each near bot by bearing and add it to hardBots if the gap in bearings is above 120 d
 249:../pong.c     **** 	for(uint8_t i=0;i<numNearBots;i++){
 250:../pong.c     **** 		if(nearBotsCopy[i].id==0) continue;
 251:../pong.c     **** 		uint8_t nextI = (i+1)%numNearBots;
 252:../pong.c     **** 		int16_t iBearing =  rad_to_deg(atan2(nearBotsCopy[i].pos.y - myPos.y, nearBotsCopy[i].pos.x - myP
 253:../pong.c     **** 		int16_t iNextBearing = rad_to_deg(atan2(nearBotsCopy[nextI].pos.y - myPos.y, nearBotsCopy[nextI].
 254:../pong.c     **** 		uint8_t difference = abs((iBearing-iNextBearing + 540)%360 - 180) ;
 255:../pong.c     **** 		if(difference>120){
 256:../pong.c     **** 			addHardBot(nearBotsCopy[i].id);
 257:../pong.c     **** 			addHardBot(nearBotsCopy[nextI].id);
 258:../pong.c     **** 		}
 259:../pong.c     **** 	}
 260:../pong.c     **** 	//print out hard bots list.
 261:../pong.c     **** 	if(hardBotsList!=NULL){
 262:../pong.c     **** 		BALL_DEBUG_PRINT("Edges:");
 263:../pong.c     **** 		HardBot* tmp = hardBotsList;
 264:../pong.c     **** 		while(tmp!=NULL){
 265:../pong.c     **** 			BALL_DEBUG_PRINT("\t%04X", tmp->id);
 266:../pong.c     **** 			tmp = tmp->next;
 267:../pong.c     **** 		}
 268:../pong.c     **** 		BALL_DEBUG_PRINT("\r\n");
 269:../pong.c     **** 	}
 270:../pong.c     **** }
 271:../pong.c     **** 
 272:../pong.c     **** void sendBallMsg(){
 273:../pong.c     **** 	if((((int16_t)myDist)==UNDF) || (myDist>=30)){
 274:../pong.c     **** 		return;
 275:../pong.c     **** 	}
 276:../pong.c     **** 	BallMsg msg;
 277:../pong.c     **** 	msg.flag = BALL_MSG_FLAG;
 278:../pong.c     **** 	int16_t tempX = theBall.xPos;
 279:../pong.c     **** 	int16_t tempY = theBall.yPos;
 280:../pong.c     **** 	msg.xPos		= tempX&0xFF;
 281:../pong.c     **** 	msg.extraBits	= ((tempX & 0x0700)>>3)&0xE0;
 282:../pong.c     **** 	msg.yPos		= tempY&0xFF;
 283:../pong.c     **** 	msg.extraBits |= ((tempY & 0x0700)>>6)&0x1C;
 284:../pong.c     **** 	msg.extraBits |= theBall.id&0x03;
 285:../pong.c     **** 	msg.xVel = theBall.xVel;
 286:../pong.c     **** 	msg.yVel = theBall.yVel;
 287:../pong.c     **** 	msg.radius = (theBall.radius&0xFC) | ((theBall.id&0x0C)>>2);
 288:../pong.c     **** 	ir_send(ALL_DIRS, (char*)(&msg), sizeof(BallMsg));
 289:../pong.c     **** 	lastBallMsg=get_time();
 290:../pong.c     **** }
 291:../pong.c     **** 
 292:../pong.c     **** void handleBallMsg(BallMsg* msg, uint32_t arrivalTime){
 293:../pong.c     **** 	BALL_DEBUG_PRINT("Got Ball! T: %lu\r\n\tPos: (%5.1f, %5.1f)   Vel: (%hd, %hd) | lastUpdate: %lu\r\
 294:../pong.c     **** 	int16_t highX = (int16_t)(((int8_t)(msg->extraBits))>>5);
 295:../pong.c     **** 	int16_t highY = (int16_t)((((int8_t)(msg->extraBits))<<3)>>5);
 296:../pong.c     **** 	int16_t tempX = (int16_t)((highX<<8) | ((uint16_t)(msg->xPos)));
 297:../pong.c     **** 	int16_t tempY = (int16_t)((highY<<8) | ((uint16_t)(msg->yPos)));
 298:../pong.c     **** 	uint8_t id = ((msg->extraBits)&0x03) | (((msg->radius)&0x03)<<2);
 299:../pong.c     **** 	if(id == 0x0F && theBall.id!=0x0F){
 300:../pong.c     **** 		lastBallID = theBall.id;
 301:../pong.c     **** 		set_rgb(255,0,0);
 302:../pong.c     **** 		}else if(id == lastBallID && theBall.id==0x0F){
 303:../pong.c     **** 		return; //this is from someone who hasn't realized the ball is dead, yet.
 304:../pong.c     **** 	}
 305:../pong.c     **** 	theBall.xPos = tempX;
 306:../pong.c     **** 	theBall.yPos = tempY;
 307:../pong.c     **** 	theBall.id = id;
 308:../pong.c     **** 	theBall.xVel = msg->xVel;
 309:../pong.c     **** 	theBall.yVel = msg->yVel;
 310:../pong.c     **** 	theBall.radius = ((msg->radius)&0xFC);
 311:../pong.c     **** 	theBall.lastUpdate = arrivalTime-4;
 312:../pong.c     **** 	BALL_DEBUG_PRINT("\tPos: (%5.1f, %5.1f)   Vel: (%hd, %hd) | lastUpdate: %lu\r\n", theBall.xPos, th
 313:../pong.c     **** }
 314:../pong.c     **** 
 315:../pong.c     **** void sendBotPosMsg(){
 434               		.loc 2 315 0
 435               		.cfi_startproc
 436 0000 CF93      		push r28
 437               	.LCFI32:
 438               		.cfi_def_cfa_offset 4
 439               		.cfi_offset 28, -3
 440 0002 DF93      		push r29
 441               	.LCFI33:
 442               		.cfi_def_cfa_offset 5
 443               		.cfi_offset 29, -4
 444 0004 CDB7      		in r28,__SP_L__
 445 0006 DEB7      		in r29,__SP_H__
 446               	.LCFI34:
 447               		.cfi_def_cfa_register 28
 448 0008 2797      		sbiw r28,7
 449               	.LCFI35:
 450               		.cfi_def_cfa_offset 12
 451 000a CDBF      		out __SP_L__,r28
 452 000c DEBF      		out __SP_H__,r29
 453               	/* prologue: function */
 454               	/* frame size = 7 */
 455               	/* stack size = 9 */
 456               	.L__stack_usage = 9
 457               	.LVL36:
 458               	.LBB122:
 459               	.LBB123:
 162:../pong.h     **** 	dest->y = src->y;
 460               		.loc 1 162 0
 461 000e E0E0      		ldi r30,lo8(myPos)
 462 0010 F0E0      		ldi r31,hi8(myPos)
 463 0012 8081      		ld r24,Z
 464 0014 9181      		ldd r25,Z+1
 465 0016 8983      		std Y+1,r24
 466 0018 9A83      		std Y+2,r25
 163:../pong.h     **** 	dest->o = src->o;
 467               		.loc 1 163 0
 468 001a 8281      		ldd r24,Z+2
 469 001c 9381      		ldd r25,Z+3
 470 001e 8B83      		std Y+3,r24
 471 0020 9C83      		std Y+4,r25
 164:../pong.h     **** }
 472               		.loc 1 164 0
 473 0022 8481      		ldd r24,Z+4
 474 0024 9581      		ldd r25,Z+5
 475 0026 8D83      		std Y+5,r24
 476 0028 9E83      		std Y+6,r25
 477               	.LVL37:
 478               	.LBE123:
 479               	.LBE122:
 316:../pong.c     **** 	BotPosMsg msg;
 317:../pong.c     **** 	copyBotPos(&myPos, &(msg.pos));
 318:../pong.c     **** 	msg.flag = BOT_POS_MSG_FLAG;
 480               		.loc 2 318 0
 481 002a 80E5      		ldi r24,lo8(80)
 482 002c 8F83      		std Y+7,r24
 319:../pong.c     **** 	ir_send(ALL_DIRS, (char*)(&msg), sizeof(BotPosMsg));
 483               		.loc 2 319 0
 484 002e 47E0      		ldi r20,lo8(7)
 485 0030 BE01      		movw r22,r28
 486 0032 6F5F      		subi r22,-1
 487 0034 7F4F      		sbci r23,-1
 488 0036 8FE3      		ldi r24,lo8(63)
 489 0038 0E94 0000 		call ir_send
 490               	.LVL38:
 491               	/* epilogue start */
 320:../pong.c     **** }
 492               		.loc 2 320 0
 493 003c 2796      		adiw r28,7
 494 003e CDBF      		out __SP_L__,r28
 495 0040 DEBF      		out __SP_H__,r29
 496 0042 DF91      		pop r29
 497 0044 CF91      		pop r28
 498 0046 0895      		ret
 499               		.cfi_endproc
 500               	.LFE85:
 502               	.global	__divsf3
 503               	.global	__fixsfsi
 504               	.global	__fixunssfsi
 505               		.section	.text.updateBall.part.1,"ax",@progbits
 507               	updateBall.part.1:
 508               	.LFB97:
 158:../pong.c     **** 	if(theBall.lastUpdate){
 509               		.loc 2 158 0
 510               		.cfi_startproc
 511 0000 2F92      		push r2
 512               	.LCFI36:
 513               		.cfi_def_cfa_offset 4
 514               		.cfi_offset 2, -3
 515 0002 3F92      		push r3
 516               	.LCFI37:
 517               		.cfi_def_cfa_offset 5
 518               		.cfi_offset 3, -4
 519 0004 4F92      		push r4
 520               	.LCFI38:
 521               		.cfi_def_cfa_offset 6
 522               		.cfi_offset 4, -5
 523 0006 5F92      		push r5
 524               	.LCFI39:
 525               		.cfi_def_cfa_offset 7
 526               		.cfi_offset 5, -6
 527 0008 6F92      		push r6
 528               	.LCFI40:
 529               		.cfi_def_cfa_offset 8
 530               		.cfi_offset 6, -7
 531 000a 7F92      		push r7
 532               	.LCFI41:
 533               		.cfi_def_cfa_offset 9
 534               		.cfi_offset 7, -8
 535 000c 8F92      		push r8
 536               	.LCFI42:
 537               		.cfi_def_cfa_offset 10
 538               		.cfi_offset 8, -9
 539 000e 9F92      		push r9
 540               	.LCFI43:
 541               		.cfi_def_cfa_offset 11
 542               		.cfi_offset 9, -10
 543 0010 AF92      		push r10
 544               	.LCFI44:
 545               		.cfi_def_cfa_offset 12
 546               		.cfi_offset 10, -11
 547 0012 BF92      		push r11
 548               	.LCFI45:
 549               		.cfi_def_cfa_offset 13
 550               		.cfi_offset 11, -12
 551 0014 CF92      		push r12
 552               	.LCFI46:
 553               		.cfi_def_cfa_offset 14
 554               		.cfi_offset 12, -13
 555 0016 DF92      		push r13
 556               	.LCFI47:
 557               		.cfi_def_cfa_offset 15
 558               		.cfi_offset 13, -14
 559 0018 EF92      		push r14
 560               	.LCFI48:
 561               		.cfi_def_cfa_offset 16
 562               		.cfi_offset 14, -15
 563 001a FF92      		push r15
 564               	.LCFI49:
 565               		.cfi_def_cfa_offset 17
 566               		.cfi_offset 15, -16
 567 001c 0F93      		push r16
 568               	.LCFI50:
 569               		.cfi_def_cfa_offset 18
 570               		.cfi_offset 16, -17
 571 001e 1F93      		push r17
 572               	.LCFI51:
 573               		.cfi_def_cfa_offset 19
 574               		.cfi_offset 17, -18
 575 0020 CF93      		push r28
 576               	.LCFI52:
 577               		.cfi_def_cfa_offset 20
 578               		.cfi_offset 28, -19
 579 0022 DF93      		push r29
 580               	.LCFI53:
 581               		.cfi_def_cfa_offset 21
 582               		.cfi_offset 29, -20
 583 0024 CDB7      		in r28,__SP_L__
 584 0026 DEB7      		in r29,__SP_H__
 585               	.LCFI54:
 586               		.cfi_def_cfa_register 28
 587 0028 6797      		sbiw r28,23
 588               	.LCFI55:
 589               		.cfi_def_cfa_offset 44
 590 002a CDBF      		out __SP_L__,r28
 591 002c DEBF      		out __SP_H__,r29
 592               	/* prologue: function */
 593               	/* frame size = 23 */
 594               	/* stack size = 41 */
 595               	.L__stack_usage = 41
 596               	.LBB140:
 160:../pong.c     **** 		int32_t timePassed = now-theBall.lastUpdate;
 597               		.loc 2 160 0
 598 002e 0E94 0000 		call get_time
 599               	.LVL39:
 600 0032 6B01      		movw r12,r22
 601 0034 7C01      		movw r14,r24
 602               	.LVL40:
 162:../pong.c     **** 			theBall.xPos += (int16_t)((((int32_t)(theBall.xVel))*timePassed)/1000.0);
 603               		.loc 2 162 0
 604 0036 2091 0000 		lds r18,myPos
 605 003a 3091 0000 		lds r19,myPos+1
 606 003e 2A83      		std Y+2,r18
 607 0040 3B83      		std Y+3,r19
 608 0042 2115      		cp r18,__zero_reg__
 609 0044 3048      		sbci r19,-128
 610 0046 01F4      		brne .+2
 611 0048 00C0      		rjmp .L14
 612 004a 8091 0000 		lds r24,myPos+2
 613 004e 9091 0000 		lds r25,myPos+2+1
 614 0052 8887      		std Y+8,r24
 615 0054 9987      		std Y+9,r25
 616 0056 8115      		cp r24,__zero_reg__
 617 0058 9048      		sbci r25,-128
 618 005a 01F4      		brne .+2
 619 005c 00C0      		rjmp .L14
 620 005e 8091 0000 		lds r24,myPos+4
 621 0062 9091 0000 		lds r25,myPos+4+1
 622 0066 8115      		cp r24,__zero_reg__
 623 0068 9048      		sbci r25,-128
 624 006a 01F4      		brne .+2
 625 006c 00C0      		rjmp .L14
 626 006e 0091 0000 		lds r16,theBall+4
 627 0072 1091 0000 		lds r17,theBall+4+1
 628 0076 0115      		cp r16,__zero_reg__
 629 0078 20E8      		ldi r18,-128
 630 007a 1207      		cpc r17,r18
 631 007c 01F4      		brne .+2
 632 007e 00C0      		rjmp .L14
 633 0080 A090 0000 		lds r10,theBall+6
 634 0084 B090 0000 		lds r11,theBall+6+1
 635 0088 A114      		cp r10,__zero_reg__
 636 008a 30E8      		ldi r19,-128
 637 008c B306      		cpc r11,r19
 638 008e 01F4      		brne .+2
 639 0090 00C0      		rjmp .L14
 161:../pong.c     **** 		if(POS_DEFINED(&myPos) && ((theBall.xPos!=UNDF) && (theBall.yPos!=UNDF))){
 640               		.loc 2 161 0
 641 0092 8091 0000 		lds r24,theBall
 642 0096 9091 0000 		lds r25,theBall+1
 643 009a A091 0000 		lds r26,theBall+2
 644 009e B091 0000 		lds r27,theBall+3
 645 00a2 2601      		movw r4,r12
 646 00a4 3701      		movw r6,r14
 647 00a6 481A      		sub r4,r24
 648 00a8 590A      		sbc r5,r25
 649 00aa 6A0A      		sbc r6,r26
 650 00ac 7B0A      		sbc r7,r27
 651               	.LBB141:
 163:../pong.c     **** 			theBall.yPos += (int16_t)((((int32_t)(theBall.yVel))*timePassed)/1000.0);
 652               		.loc 2 163 0
 653 00ae 6091 0000 		lds r22,theBall+8
 654 00b2 6D8B      		std Y+21,r22
 655 00b4 A62F      		mov r26,r22
 656 00b6 660F      		lsl r22
 657 00b8 BB0B      		sbc r27,r27
 658 00ba A301      		movw r20,r6
 659 00bc 9201      		movw r18,r4
 660 00be 0E94 0000 		call __mulshisi3
 661 00c2 0E94 0000 		call __floatsisf
 662               	.LVL41:
 663 00c6 20E0      		ldi r18,0
 664 00c8 30E0      		ldi r19,0
 665 00ca 4AE7      		ldi r20,lo8(122)
 666 00cc 54E4      		ldi r21,lo8(68)
 667 00ce 0E94 0000 		call __divsf3
 668               	.LVL42:
 669 00d2 0E94 0000 		call __fixsfsi
 670               	.LVL43:
 671 00d6 6A8B      		std Y+18,r22
 672 00d8 7B8B      		std Y+19,r23
 673 00da F801      		movw r30,r16
 674 00dc E60F      		add r30,r22
 675 00de F71F      		adc r31,r23
 676 00e0 EC83      		std Y+4,r30
 677 00e2 FD83      		std Y+5,r31
 678 00e4 E093 0000 		sts theBall+4,r30
 679 00e8 F093 0000 		sts theBall+4+1,r31
 164:../pong.c     **** 			theBall.lastUpdate = now;
 680               		.loc 2 164 0
 681 00ec F091 0000 		lds r31,theBall+9
 682 00f0 FC8B      		std Y+20,r31
 683 00f2 AF2F      		mov r26,r31
 684 00f4 FF0F      		lsl r31
 685 00f6 BB0B      		sbc r27,r27
 686 00f8 A301      		movw r20,r6
 687 00fa 9201      		movw r18,r4
 688 00fc 0E94 0000 		call __mulshisi3
 689 0100 0E94 0000 		call __floatsisf
 690               	.LVL44:
 691 0104 20E0      		ldi r18,0
 692 0106 30E0      		ldi r19,0
 693 0108 4AE7      		ldi r20,lo8(122)
 694 010a 54E4      		ldi r21,lo8(68)
 695 010c 0E94 0000 		call __divsf3
 696               	.LVL45:
 697 0110 0E94 0000 		call __fixsfsi
 698               	.LVL46:
 699 0114 8B01      		movw r16,r22
 700 0116 9501      		movw r18,r10
 701 0118 260F      		add r18,r22
 702 011a 371F      		adc r19,r23
 703 011c 2E83      		std Y+6,r18
 704 011e 3F83      		std Y+7,r19
 705 0120 2093 0000 		sts theBall+6,r18
 706 0124 3093 0000 		sts theBall+6+1,r19
 165:../pong.c     **** 			BALL_DEBUG_PRINT("B[%hu]: %d, %d\r\n", theBall.id, theBall.xPos, theBall.yPos);
 707               		.loc 2 165 0
 708 0128 C092 0000 		sts theBall,r12
 709 012c D092 0000 		sts theBall+1,r13
 710 0130 E092 0000 		sts theBall+2,r14
 711 0134 F092 0000 		sts theBall+3,r15
 712               	.LVL47:
 168:../pong.c     **** 			myDist = (uint16_t)hypotf(myPos.x-theBall.xPos, myPos.y-theBall.yPos);
 713               		.loc 2 168 0
 714 0138 E090 0000 		lds r14,hardBotsList
 715 013c F090 0000 		lds r15,hardBotsList+1
 716               	.LVL48:
 169:../pong.c     **** 			while(tmp!=NULL){
 717               		.loc 2 169 0
 718 0140 6885      		ldd r22,Y+8
 719 0142 7985      		ldd r23,Y+9
 720 0144 621B      		sub r22,r18
 721 0146 730B      		sbc r23,r19
 722 0148 072E      		mov __tmp_reg__,r23
 723 014a 000C      		lsl r0
 724 014c 880B      		sbc r24,r24
 725 014e 990B      		sbc r25,r25
 726 0150 0E94 0000 		call __floatsisf
 727               	.LVL49:
 728 0154 4B01      		movw r8,r22
 729 0156 5C01      		movw r10,r24
 730 0158 6A81      		ldd r22,Y+2
 731 015a 7B81      		ldd r23,Y+3
 732 015c 8C81      		ldd r24,Y+4
 733 015e 9D81      		ldd r25,Y+5
 734 0160 681B      		sub r22,r24
 735 0162 790B      		sbc r23,r25
 736 0164 072E      		mov __tmp_reg__,r23
 737 0166 000C      		lsl r0
 738 0168 880B      		sbc r24,r24
 739 016a 990B      		sbc r25,r25
 740 016c 0E94 0000 		call __floatsisf
 741               	.LVL50:
 742 0170 A501      		movw r20,r10
 743 0172 9401      		movw r18,r8
 744 0174 0E94 0000 		call hypot
 745               	.LVL51:
 746 0178 0E94 0000 		call __fixunssfsi
 747               	.LVL52:
 748 017c 6A87      		std Y+10,r22
 749 017e 7B87      		std Y+11,r23
 750 0180 6093 0000 		sts myDist,r22
 751 0184 7093 0000 		sts myDist+1,r23
 170:../pong.c     **** 				OtherBot* bot = getOtherBot(tmp->id);
 752               		.loc 2 170 0
 753 0188 E114      		cp r14,__zero_reg__
 754 018a F104      		cpc r15,__zero_reg__
 755 018c 01F4      		brne .+2
 756 018e 00C0      		rjmp .L15
 757               	.LBB142:
 758               	.LBB143:
 759               	.LBB144:
 186:../pong.h     **** 	int16_t xAfter = x + (int16_t)((((int32_t)(theBall.xVel))*timePassed)/1000.0);
 760               		.loc 1 186 0
 761 0190 EE81      		ldd r30,Y+6
 762 0192 FF81      		ldd r31,Y+7
 763 0194 2885      		ldd r18,Y+8
 764 0196 3985      		ldd r19,Y+9
 765 0198 E21B      		sub r30,r18
 766 019a F30B      		sbc r31,r19
 767 019c EC87      		std Y+12,r30
 768 019e FD87      		std Y+13,r31
 769 01a0 8C81      		ldd r24,Y+4
 770 01a2 9D81      		ldd r25,Y+5
 771 01a4 EA81      		ldd r30,Y+2
 772 01a6 FB81      		ldd r31,Y+3
 773 01a8 8E1B      		sub r24,r30
 774 01aa 9F0B      		sbc r25,r31
 775 01ac 8E87      		std Y+14,r24
 776 01ae 9F87      		std Y+15,r25
 189:../pong.h     **** 	BALL_DEBUG_PRINT("(%4d, %4d) [%hd] -> (%4d, %4d) [%hd]\r\n", x, y, signBefore, xAfter, yAfter, sig
 777               		.loc 1 189 0
 778 01b0 2E81      		ldd r18,Y+6
 779 01b2 3F81      		ldd r19,Y+7
 780 01b4 020F      		add r16,r18
 781 01b6 131F      		adc r17,r19
 782 01b8 C801      		movw r24,r16
 783 01ba E885      		ldd r30,Y+8
 784 01bc F985      		ldd r31,Y+9
 785 01be 8E1B      		sub r24,r30
 786 01c0 9F0B      		sbc r25,r31
 787 01c2 888B      		std Y+16,r24
 788 01c4 998B      		std Y+17,r25
 789 01c6 2A89      		ldd r18,Y+18
 790 01c8 3B89      		ldd r19,Y+19
 791 01ca 8C81      		ldd r24,Y+4
 792 01cc 9D81      		ldd r25,Y+5
 793 01ce 280F      		add r18,r24
 794 01d0 391F      		adc r19,r25
 795 01d2 EA81      		ldd r30,Y+2
 796 01d4 FB81      		ldd r31,Y+3
 797 01d6 2E1B      		sub r18,r30
 798 01d8 3F0B      		sbc r19,r31
 799 01da 2A8B      		std Y+18,r18
 800 01dc 3B8B      		std Y+19,r19
 801               	.LVL53:
 802               	.L29:
 803               	.LBE144:
 804               	.LBE143:
 171:../pong.c     **** 				otherDist = (uint16_t)hypotf(bot->pos.x - theBall.xPos, bot->pos.y - theBall.yPos);
 805               		.loc 2 171 0
 806 01de F701      		movw r30,r14
 807 01e0 2081      		ld r18,Z
 808 01e2 3181      		ldd r19,Z+1
 809               	.LVL54:
 810 01e4 E0E0      		ldi r30,lo8(nearBots+6)
 811 01e6 F0E0      		ldi r31,hi8(nearBots+6)
 812 01e8 1E8A      		std Y+22,__zero_reg__
 813 01ea 1F8A      		std Y+23,__zero_reg__
 814               	.LVL55:
 815               	.L18:
 816               	.LBB147:
 817               	.LBB148:
 818               	.LBB149:
 321:../pong.c     **** 
 322:../pong.c     **** void handleBotPosMsg(BotPosMsg* msg, id_t senderID){
 323:../pong.c     **** 	printf("%04X @ {%4d, %4d, % 4d}\r\n", senderID, (msg->pos).x, (msg->pos).y, (msg->pos).o);
 324:../pong.c     **** }
 325:../pong.c     **** 
 326:../pong.c     **** void sendPaddleMsg(){
 327:../pong.c     **** 	if(!CTRL_Q(myState)){
 328:../pong.c     **** 		return;
 329:../pong.c     **** 	}
 330:../pong.c     **** 	PaddleMsg msg;
 331:../pong.c     **** 	if(NE_Q(myState)){
 332:../pong.c     **** 		msg.flag = 'P';
 333:../pong.c     **** 		msg.deltaPos = ((int16_t)paddleChange);
 334:../pong.c     **** 	}else if(NW_Q(myState)){
 335:../pong.c     **** 		msg.flag = 'P';
 336:../pong.c     **** 		msg.deltaPos = -1*((int16_t)paddleChange);
 337:../pong.c     **** 	}else if(SE_Q(myState)){
 338:../pong.c     **** 		msg.flag = 'S';
 339:../pong.c     **** 		msg.deltaPos = ((int16_t)paddleChange);
 340:../pong.c     **** 	}else if(SW_Q(myState)){
 341:../pong.c     **** 		msg.flag = 'S';
 342:../pong.c     **** 		msg.deltaPos = -1*((int16_t)paddleChange);
 343:../pong.c     **** 	}else{
 344:../pong.c     **** 		paddleChange = 0.0;
 345:../pong.c     **** 		return;
 346:../pong.c     **** 	}
 347:../pong.c     **** 	paddleChange = 0.0;
 348:../pong.c     **** 	ir_send(ALL_DIRS, (char*)(&msg), sizeof(PaddleMsg));
 349:../pong.c     **** }
 350:../pong.c     **** 
 351:../pong.c     **** void handlePaddleMsg(char flag, int16_t delta){
 352:../pong.c     **** 	if((NORTH_PIXEL_Q(myState) && flag=='P') || (SOUTH_PIXEL_Q(myState) && flag=='S')){
 353:../pong.c     **** 		paddleStart += delta;
 354:../pong.c     **** 		paddleEnd += delta;
 355:../pong.c     **** 		//if(paddleStart<MIN_DIM){
 356:../pong.c     **** 			//paddleStart = MIN_DIM;
 357:../pong.c     **** 			//paddleEnd = MIN_DIM+ PADDLE_WIDTH;
 358:../pong.c     **** 		//}
 359:../pong.c     **** 		//if(paddleEnd>MAX_X_DIM){
 360:../pong.c     **** 			//paddleEnd = MAX_X_DIM;
 361:../pong.c     **** 			//paddleStart = MAX_X_DIM-PADDLE_WIDTH;
 362:../pong.c     **** 		//}
 363:../pong.c     **** 	}
 364:../pong.c     **** }
 365:../pong.c     **** 
 366:../pong.c     **** void handle_msg(ir_msg* msg_struct){
 367:../pong.c     **** 	if(((BallMsg*)(msg_struct->msg))->flag==BALL_MSG_FLAG && msg_struct->length==sizeof(BallMsg)){
 368:../pong.c     **** 		handleBallMsg((BallMsg*)(msg_struct->msg), msg_struct->arrival_time);
 369:../pong.c     **** 	}else if(((BotMeasMsg*)(msg_struct->msg))->flag==BOT_MEAS_MSG_FLAG && msg_struct->length==sizeof(B
 370:../pong.c     **** 		handleBotMeasMsg((BotMeasMsg*)(msg_struct->msg), msg_struct->sender_ID);
 371:../pong.c     **** 	}else if(((BotPosMsg*)(msg_struct->msg))->flag==BOT_POS_MSG_FLAG && msg_struct->length==sizeof(Bot
 372:../pong.c     **** 		handleBotPosMsg((BotPosMsg*)(msg_struct->msg), msg_struct->sender_ID);
 373:../pong.c     **** 	}else{
 374:../pong.c     **** 		printf_P(PSTR("%hu byte msg from %04X:\r\n\t"), msg_struct->length, msg_struct->sender_ID);
 375:../pong.c     **** 		for(uint8_t i=0;i<msg_struct->length;i++){
 376:../pong.c     **** 			printf("%02hX ", msg_struct->msg[i]);
 377:../pong.c     **** 		}
 378:../pong.c     **** 		printf("\r\n");
 379:../pong.c     **** 	}
 380:../pong.c     **** }
 381:../pong.c     **** 
 382:../pong.c     **** OtherBot* getOtherBot(id_t id){
 383:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 384:../pong.c     **** 		if(nearBots[i].id==id){
 819               		.loc 2 384 0
 820 01ec 8081      		ld r24,Z
 821 01ee 9181      		ldd r25,Z+1
 822 01f0 2817      		cp r18,r24
 823 01f2 3907      		cpc r19,r25
 824 01f4 01F4      		brne .+2
 825 01f6 00C0      		rjmp .L60
 826               	.LVL56:
 827 01f8 8E89      		ldd r24,Y+22
 828 01fa 9F89      		ldd r25,Y+23
 829 01fc 0196      		adiw r24,1
 830 01fe 8E8B      		std Y+22,r24
 831 0200 9F8B      		std Y+23,r25
 832               	.LVL57:
 833 0202 3896      		adiw r30,8
 383:../pong.c     **** 		if(nearBots[i].id==id){
 834               		.loc 2 383 0
 835 0204 0C97      		sbiw r24,12
 836 0206 01F4      		brne .L18
 837               	.LBE149:
 385:../pong.c     **** 			return &(nearBots[i]);
 386:../pong.c     **** 		}
 387:../pong.c     **** 	}
 388:../pong.c     **** 	return NULL;
 838               		.loc 2 388 0
 839 0208 1E8A      		std Y+22,__zero_reg__
 840 020a 1F8A      		std Y+23,__zero_reg__
 841               	.LVL58:
 842               	.L17:
 843               	.LBE148:
 844               	.LBE147:
 172:../pong.c     **** 				if(myDist < otherDist){
 845               		.loc 2 172 0
 846 020c EE89      		ldd r30,Y+22
 847 020e FF89      		ldd r31,Y+23
 848 0210 2280      		ldd r2,Z+2
 849 0212 3380      		ldd r3,Z+3
 850 0214 0081      		ld r16,Z
 851 0216 1181      		ldd r17,Z+1
 852 0218 B101      		movw r22,r2
 853 021a 2E81      		ldd r18,Y+6
 854 021c 3F81      		ldd r19,Y+7
 855 021e 621B      		sub r22,r18
 856 0220 730B      		sbc r23,r19
 857 0222 072E      		mov __tmp_reg__,r23
 858 0224 000C      		lsl r0
 859 0226 880B      		sbc r24,r24
 860 0228 990B      		sbc r25,r25
 861 022a 0E94 0000 		call __floatsisf
 862               	.LVL59:
 863 022e 4B01      		movw r8,r22
 864 0230 5C01      		movw r10,r24
 865 0232 B801      		movw r22,r16
 866 0234 8C81      		ldd r24,Y+4
 867 0236 9D81      		ldd r25,Y+5
 868 0238 681B      		sub r22,r24
 869 023a 790B      		sbc r23,r25
 870 023c 072E      		mov __tmp_reg__,r23
 871 023e 000C      		lsl r0
 872 0240 880B      		sbc r24,r24
 873 0242 990B      		sbc r25,r25
 874 0244 0E94 0000 		call __floatsisf
 875               	.LVL60:
 876 0248 A501      		movw r20,r10
 877 024a 9401      		movw r18,r8
 878 024c 0E94 0000 		call hypot
 879               	.LVL61:
 880 0250 0E94 0000 		call __fixunssfsi
 881               	.LVL62:
 882 0254 6B01      		movw r12,r22
 173:../pong.c     **** 					BALL_DEBUG_PRINT("\t%04X | ", tmp->id);
 883               		.loc 2 173 0
 884 0256 EA85      		ldd r30,Y+10
 885 0258 FB85      		ldd r31,Y+11
 886 025a E617      		cp r30,r22
 887 025c F707      		cpc r31,r23
 888 025e 00F0      		brlo .+2
 889 0260 00C0      		rjmp .L19
 890               	.LVL63:
 891               	.LBB152:
 892               	.LBB145:
 186:../pong.h     **** 	int16_t xAfter = x + (int16_t)((((int32_t)(theBall.xVel))*timePassed)/1000.0);
 893               		.loc 1 186 0
 894 0262 4801      		movw r8,r16
 895 0264 2A81      		ldd r18,Y+2
 896 0266 3B81      		ldd r19,Y+3
 897 0268 821A      		sub r8,r18
 898 026a 930A      		sbc r9,r19
 899 026c 8C85      		ldd r24,Y+12
 900 026e 9D85      		ldd r25,Y+13
 901 0270 889D      		mul r24,r8
 902 0272 B001      		movw r22,r0
 903 0274 899D      		mul r24,r9
 904 0276 700D      		add r23,r0
 905 0278 989D      		mul r25,r8
 906 027a 700D      		add r23,r0
 907 027c 1124      		clr r1
 908 027e 5101      		movw r10,r2
 909 0280 E885      		ldd r30,Y+8
 910 0282 F985      		ldd r31,Y+9
 911 0284 AE1A      		sub r10,r30
 912 0286 BF0A      		sbc r11,r31
 913 0288 2E85      		ldd r18,Y+14
 914 028a 3F85      		ldd r19,Y+15
 915 028c 2A9D      		mul r18,r10
 916 028e C001      		movw r24,r0
 917 0290 2B9D      		mul r18,r11
 918 0292 900D      		add r25,r0
 919 0294 3A9D      		mul r19,r10
 920 0296 900D      		add r25,r0
 921 0298 1124      		clr r1
 922 029a 681B      		sub r22,r24
 923 029c 790B      		sbc r23,r25
 924 029e 072E      		mov __tmp_reg__,r23
 925 02a0 000C      		lsl r0
 926 02a2 880B      		sbc r24,r24
 927 02a4 990B      		sbc r25,r25
 928 02a6 0E94 0000 		call __floatsisf
 929               	.LVL64:
 930 02aa 2B01      		movw r4,r22
 931 02ac 3C01      		movw r6,r24
 932               	.LVL65:
 189:../pong.h     **** 	BALL_DEBUG_PRINT("(%4d, %4d) [%hd] -> (%4d, %4d) [%hd]\r\n", x, y, signBefore, xAfter, yAfter, sig
 933               		.loc 1 189 0
 934 02ae 8889      		ldd r24,Y+16
 935 02b0 9989      		ldd r25,Y+17
 936 02b2 889D      		mul r24,r8
 937 02b4 B001      		movw r22,r0
 938 02b6 899D      		mul r24,r9
 939 02b8 700D      		add r23,r0
 940 02ba 989D      		mul r25,r8
 941 02bc 700D      		add r23,r0
 942 02be 1124      		clr r1
 943 02c0 EA89      		ldd r30,Y+18
 944 02c2 FB89      		ldd r31,Y+19
 945 02c4 EA9D      		mul r30,r10
 946 02c6 C001      		movw r24,r0
 947 02c8 EB9D      		mul r30,r11
 948 02ca 900D      		add r25,r0
 949 02cc FA9D      		mul r31,r10
 950 02ce 900D      		add r25,r0
 951 02d0 1124      		clr r1
 952 02d2 681B      		sub r22,r24
 953 02d4 790B      		sbc r23,r25
 954 02d6 072E      		mov __tmp_reg__,r23
 955 02d8 000C      		lsl r0
 956 02da 880B      		sbc r24,r24
 957 02dc 990B      		sbc r25,r25
 958 02de 0E94 0000 		call __floatsisf
 959               	.LVL66:
 960 02e2 4B01      		movw r8,r22
 961 02e4 5C01      		movw r10,r24
 191:../pong.h     **** 		return 1;
 962               		.loc 1 191 0
 963 02e6 F1E0      		ldi r31,lo8(1)
 964 02e8 F983      		std Y+1,r31
 965 02ea 20E0      		ldi r18,0
 966 02ec 30E0      		ldi r19,0
 967 02ee A901      		movw r20,r18
 968 02f0 C301      		movw r24,r6
 969 02f2 B201      		movw r22,r4
 970 02f4 0E94 0000 		call __gtsf2
 971               	.LVL67:
 972 02f8 1816      		cp __zero_reg__,r24
 973 02fa 04F0      		brlt .+2
 974 02fc 00C0      		rjmp .L61
 975               	.L21:
 976 02fe 20E0      		ldi r18,0
 977 0300 30E0      		ldi r19,0
 978 0302 A901      		movw r20,r18
 979 0304 C301      		movw r24,r6
 980 0306 B201      		movw r22,r4
 981 0308 0E94 0000 		call __ltsf2
 982               	.LVL68:
 983 030c 881F      		rol r24
 984 030e 8827      		clr r24
 985 0310 881F      		rol r24
 986 0312 6980      		ldd r6,Y+1
 987 0314 681A      		sub r6,r24
 988 0316 7724      		clr r7
 989 0318 7394      		inc r7
 990 031a 20E0      		ldi r18,0
 991 031c 30E0      		ldi r19,0
 992 031e A901      		movw r20,r18
 993 0320 C501      		movw r24,r10
 994 0322 B401      		movw r22,r8
 995 0324 0E94 0000 		call __gtsf2
 996               	.LVL69:
 997 0328 1816      		cp __zero_reg__,r24
 998 032a 04F0      		brlt .+2
 999 032c 00C0      		rjmp .L62
 1000               	.L23:
 1001 032e 20E0      		ldi r18,0
 1002 0330 30E0      		ldi r19,0
 1003 0332 A901      		movw r20,r18
 1004 0334 C501      		movw r24,r10
 1005 0336 B401      		movw r22,r8
 1006 0338 0E94 0000 		call __ltsf2
 1007               	.LVL70:
 1008 033c 881F      		rol r24
 1009 033e 8827      		clr r24
 1010 0340 881F      		rol r24
 1011 0342 781A      		sub r7,r24
 1012 0344 6714      		cp r6,r7
 1013 0346 01F4      		brne .+2
 1014 0348 00C0      		rjmp .L19
 1015 034a 8E89      		ldd r24,Y+22
 1016 034c 9F89      		ldd r25,Y+23
 1017 034e 8E83      		std Y+6,r24
 1018 0350 9F83      		std Y+7,r25
 1019               	.LVL71:
 1020 0352 C092 0000 		sts otherDist,r12
 1021 0356 D092 0000 		sts otherDist+1,r13
 1022               	.LVL72:
 1023               	.LBE145:
 1024               	.LBE152:
 176:../pong.c     **** 							if(!isCovered){
 1025               		.loc 2 176 0
 1026 035a 8091 0000 		lds r24,gameMode
 1027 035e 8111      		cpse r24,__zero_reg__
 1028 0360 00C0      		rjmp .L25
 1029 0362 8091 0000 		lds r24,myState
 1030 0366 80FF      		sbrs r24,0
 1031 0368 00C0      		rjmp .L25
 1032 036a 982F      		mov r25,r24
 1033 036c 9271      		andi r25,lo8(18)
 1034 036e 01F4      		brne .+2
 1035 0370 00C0      		rjmp .L26
 1036 0372 2C89      		ldd r18,Y+20
 1037 0374 1216      		cp __zero_reg__,r18
 1038 0376 04F4      		brge .L27
 1039 0378 8171      		andi r24,lo8(17)
 1040 037a 01F0      		breq .L25
 1041               	.L27:
 177:../pong.c     **** 								//Other Side scores a point!
 1042               		.loc 2 177 0
 1043 037c 8091 0000 		lds r24,isCovered
 1044 0380 8111      		cpse r24,__zero_reg__
 1045 0382 00C0      		rjmp .L25
 1046               	.LBB153:
 1047               	.LBB154:
 239:../pong.h     **** 
 240:../pong.h     **** inline static void killBall(void){
 241:../pong.h     **** 	set_rgb(255,0,0);
 1048               		.loc 1 241 0
 1049 0384 40E0      		ldi r20,0
 1050 0386 60E0      		ldi r22,0
 1051 0388 8FEF      		ldi r24,lo8(-1)
 1052 038a 0E94 0000 		call set_rgb
 1053               	.LVL73:
 242:../pong.h     **** 	theBall.id = 0x0F;
 1054               		.loc 1 242 0
 1055 038e 8FE0      		ldi r24,lo8(15)
 1056 0390 8093 0000 		sts theBall+10,r24
 1057               	.LBE154:
 1058               	.LBE153:
 180:../pong.c     **** 							}
 1059               		.loc 2 180 0
 1060 0394 40E0      		ldi r20,0
 1061 0396 60E0      		ldi r22,0
 1062 0398 8FEF      		ldi r24,lo8(-1)
 1063 039a 0E94 0000 		call set_rgb
 1064               	.LVL74:
 1065 039e 6091 0000 		lds r22,theBall+8
 1066 03a2 6D8B      		std Y+21,r22
 1067 03a4 8091 0000 		lds r24,theBall+9
 1068 03a8 8C8B      		std Y+20,r24
 1069 03aa E091 0000 		lds r30,myPos+2
 1070 03ae F091 0000 		lds r31,myPos+2+1
 1071 03b2 E887      		std Y+8,r30
 1072 03b4 F987      		std Y+9,r31
 1073 03b6 2091 0000 		lds r18,myPos
 1074 03ba 3091 0000 		lds r19,myPos+1
 1075 03be 2A83      		std Y+2,r18
 1076 03c0 3B83      		std Y+3,r19
 1077 03c2 8091 0000 		lds r24,theBall+4
 1078 03c6 9091 0000 		lds r25,theBall+4+1
 1079 03ca 8C83      		std Y+4,r24
 1080 03cc 9D83      		std Y+5,r25
 1081 03ce EE81      		ldd r30,Y+6
 1082 03d0 FF81      		ldd r31,Y+7
 1083 03d2 2280      		ldd r2,Z+2
 1084 03d4 3380      		ldd r3,Z+3
 1085 03d6 0081      		ld r16,Z
 1086 03d8 1181      		ldd r17,Z+1
 1087               	.L25:
 1088               	.LVL75:
 1089               	.LBB155:
 1090               	.LBB156:
 202:../pong.h     **** 	int16_t normY = (Bx-myPos.x);
 1091               		.loc 1 202 0
 1092 03da 4885      		ldd r20,Y+8
 1093 03dc 5985      		ldd r21,Y+9
 1094 03de 4219      		sub r20,r2
 1095 03e0 5309      		sbc r21,r3
 1096               	.LVL76:
 203:../pong.h     **** 	int16_t nDotN = normX*normX + normY*normY;
 1097               		.loc 1 203 0
 1098 03e2 2A81      		ldd r18,Y+2
 1099 03e4 3B81      		ldd r19,Y+3
 1100 03e6 021B      		sub r16,r18
 1101 03e8 130B      		sbc r17,r19
 1102               	.LVL77:
 204:../pong.h     **** 	int16_t vDotN = vX*normX + vY*normY;
 1103               		.loc 1 204 0
 1104 03ea 449F      		mul r20,r20
 1105 03ec 9001      		movw r18,r0
 1106 03ee 459F      		mul r20,r21
 1107 03f0 300D      		add r19,r0
 1108 03f2 300D      		add r19,r0
 1109 03f4 1124      		clr r1
 1110 03f6 009F      		mul r16,r16
 1111 03f8 C001      		movw r24,r0
 1112 03fa 019F      		mul r16,r17
 1113 03fc 900D      		add r25,r0
 1114 03fe 900D      		add r25,r0
 1115 0400 1124      		clr r1
 1116 0402 280F      		add r18,r24
 1117 0404 391F      		adc r19,r25
 1118               	.LVL78:
 205:../pong.h     **** 	int16_t uX = normX*vDotN/nDotN;
 1119               		.loc 1 205 0
 1120 0406 6D89      		ldd r22,Y+21
 1121 0408 6403      		mulsu r22,r20
 1122 040a F001      		movw r30,r0
 1123 040c 659F      		mul r22,r21
 1124 040e F00D      		add r31,r0
 1125 0410 1124      		clr __zero_reg__
 1126 0412 6C89      		ldd r22,Y+20
 1127 0414 6003      		mulsu r22,r16
 1128 0416 C001      		movw r24,r0
 1129 0418 619F      		mul r22,r17
 1130 041a 900D      		add r25,r0
 1131 041c 1124      		clr __zero_reg__
 1132 041e E80F      		add r30,r24
 1133 0420 F91F      		adc r31,r25
 1134               	.LVL79:
 208:../pong.h     **** 	theBall.yVel = vY - 2*uY;
 1135               		.loc 1 208 0
 1136 0422 4E9F      		mul r20,r30
 1137 0424 C001      		movw r24,r0
 1138 0426 4F9F      		mul r20,r31
 1139 0428 900D      		add r25,r0
 1140 042a 5E9F      		mul r21,r30
 1141 042c 900D      		add r25,r0
 1142 042e 1124      		clr r1
 1143 0430 B901      		movw r22,r18
 1144 0432 0E94 0000 		call __divmodhi4
 1145               	.LVL80:
 1146 0436 660F      		lsl r22
 1147               	.LVL81:
 1148 0438 8D89      		ldd r24,Y+21
 1149 043a 861B      		sub r24,r22
 1150 043c 8093 0000 		sts theBall+8,r24
 209:../pong.h     **** }
 1151               		.loc 1 209 0
 1152 0440 0E9F      		mul r16,r30
 1153 0442 C001      		movw r24,r0
 1154 0444 0F9F      		mul r16,r31
 1155 0446 900D      		add r25,r0
 1156 0448 1E9F      		mul r17,r30
 1157 044a 900D      		add r25,r0
 1158 044c 1124      		clr r1
 1159 044e B901      		movw r22,r18
 1160 0450 0E94 0000 		call __divmodhi4
 1161               	.LVL82:
 1162 0454 660F      		lsl r22
 1163               	.LVL83:
 1164 0456 8C89      		ldd r24,Y+20
 1165 0458 861B      		sub r24,r22
 1166 045a 8093 0000 		sts theBall+9,r24
 1167               	.LVL84:
 1168               	.L15:
 1169               	.LBE156:
 1170               	.LBE155:
 1171               	.LBE142:
 191:../pong.c     **** 				BALL_DEBUG_PRINT("Ball hit boundary, so we must have lost track.\r\n");
 1172               		.loc 2 191 0
 1173 045e 0C81      		ldd r16,Y+4
 1174 0460 1D81      		ldd r17,Y+5
 1175 0462 0A56      		subi r16,106
 1176 0464 1F4F      		sbci r17,-1
 1177 0466 0D32      		cpi r16,45
 1178 0468 1140      		sbci r17,1
 1179 046a 00F4      		brsh .L30
 1180 046c 8091 0000 		lds r24,theBall+6
 1181 0470 9091 0000 		lds r25,theBall+6+1
 1182 0474 8A56      		subi r24,106
 1183 0476 9F4F      		sbci r25,-1
 1184 0478 8D32      		cpi r24,45
 1185 047a 9140      		sbci r25,1
 1186 047c 00F0      		brlo .L13
 1187               	.L30:
 193:../pong.c     **** 				theBall.yPos = UNDF;
 1188               		.loc 2 193 0
 1189 047e 80E0      		ldi r24,0
 1190 0480 90E8      		ldi r25,lo8(-128)
 1191 0482 8093 0000 		sts theBall+4,r24
 1192 0486 9093 0000 		sts theBall+4+1,r25
 194:../pong.c     **** 				myDist = UNDF;
 1193               		.loc 2 194 0
 1194 048a 8093 0000 		sts theBall+6,r24
 1195 048e 9093 0000 		sts theBall+6+1,r25
 195:../pong.c     **** 				otherDist = UNDF;
 1196               		.loc 2 195 0
 1197 0492 8093 0000 		sts myDist,r24
 1198 0496 9093 0000 		sts myDist+1,r25
 196:../pong.c     **** 			}
 1199               		.loc 2 196 0
 1200 049a 8093 0000 		sts otherDist,r24
 1201 049e 9093 0000 		sts otherDist+1,r25
 1202 04a2 00C0      		rjmp .L13
 1203               	.LVL85:
 1204               	.L14:
 1205               	.LBE141:
 199:../pong.c     **** 			otherDist = UNDF;
 1206               		.loc 2 199 0
 1207 04a4 80E0      		ldi r24,0
 1208 04a6 90E8      		ldi r25,lo8(-128)
 1209 04a8 8093 0000 		sts myDist,r24
 1210 04ac 9093 0000 		sts myDist+1,r25
 200:../pong.c     **** 		}
 1211               		.loc 2 200 0
 1212 04b0 8093 0000 		sts otherDist,r24
 1213 04b4 9093 0000 		sts otherDist+1,r25
 1214               	.LVL86:
 1215               	.L13:
 1216               	/* epilogue start */
 1217               	.LBE140:
 203:../pong.c     **** 
 1218               		.loc 2 203 0
 1219 04b8 6796      		adiw r28,23
 1220 04ba CDBF      		out __SP_L__,r28
 1221 04bc DEBF      		out __SP_H__,r29
 1222 04be DF91      		pop r29
 1223 04c0 CF91      		pop r28
 1224 04c2 1F91      		pop r17
 1225 04c4 0F91      		pop r16
 1226 04c6 FF90      		pop r15
 1227 04c8 EF90      		pop r14
 1228 04ca DF90      		pop r13
 1229 04cc CF90      		pop r12
 1230 04ce BF90      		pop r11
 1231 04d0 AF90      		pop r10
 1232 04d2 9F90      		pop r9
 1233 04d4 8F90      		pop r8
 1234 04d6 7F90      		pop r7
 1235 04d8 6F90      		pop r6
 1236 04da 5F90      		pop r5
 1237 04dc 4F90      		pop r4
 1238 04de 3F90      		pop r3
 1239 04e0 2F90      		pop r2
 1240 04e2 0895      		ret
 1241               	.LVL87:
 1242               	.L19:
 1243               	.LBB162:
 1244               	.LBB161:
 1245               	.LBB159:
 189:../pong.c     **** 			}
 1246               		.loc 2 189 0
 1247 04e4 F701      		movw r30,r14
 1248 04e6 E280      		ldd r14,Z+2
 1249 04e8 F380      		ldd r15,Z+3
 1250               	.LVL88:
 1251               	.LBE159:
 170:../pong.c     **** 				OtherBot* bot = getOtherBot(tmp->id);
 1252               		.loc 2 170 0
 1253 04ea E114      		cp r14,__zero_reg__
 1254 04ec F104      		cpc r15,__zero_reg__
 1255 04ee 01F0      		breq .+2
 1256 04f0 00C0      		rjmp .L29
 1257 04f2 C092 0000 		sts otherDist,r12
 1258 04f6 D092 0000 		sts otherDist+1,r13
 1259 04fa 00C0      		rjmp .L15
 1260               	.LVL89:
 1261               	.L60:
 1262               	.LBB160:
 1263               	.LBB157:
 1264               	.LBB151:
 1265               	.LBB150:
 385:../pong.c     **** 		}
 1266               		.loc 2 385 0
 1267 04fc 2E89      		ldd r18,Y+22
 1268 04fe 3F89      		ldd r19,Y+23
 1269               	.LVL90:
 1270 0500 220F      		lsl r18
 1271 0502 331F      		rol r19
 1272 0504 220F      		lsl r18
 1273 0506 331F      		rol r19
 1274 0508 220F      		lsl r18
 1275 050a 331F      		rol r19
 1276 050c 2050      		subi r18,lo8(-(nearBots))
 1277 050e 3040      		sbci r19,hi8(-(nearBots))
 1278 0510 2E8B      		std Y+22,r18
 1279 0512 3F8B      		std Y+23,r19
 1280               	.LVL91:
 1281 0514 00C0      		rjmp .L17
 1282               	.LVL92:
 1283               	.L62:
 1284               	.LBE150:
 1285               	.LBE151:
 1286               	.LBE157:
 1287               	.LBB158:
 1288               	.LBB146:
 191:../pong.h     **** 		return 1;
 1289               		.loc 1 191 0
 1290 0516 712C      		mov r7,__zero_reg__
 1291 0518 00C0      		rjmp .L23
 1292               	.L61:
 1293 051a 1982      		std Y+1,__zero_reg__
 1294 051c 00C0      		rjmp .L21
 1295               	.LVL93:
 1296               	.L26:
 1297               	.LBE146:
 1298               	.LBE158:
 176:../pong.c     **** 							if(!isCovered){
 1299               		.loc 2 176 0
 1300 051e 8171      		andi r24,lo8(17)
 1301 0520 01F4      		brne .+2
 1302 0522 00C0      		rjmp .L25
 1303 0524 3C89      		ldd r19,Y+20
 1304 0526 37FD      		sbrc r19,7
 1305 0528 00C0      		rjmp .L25
 1306 052a 00C0      		rjmp .L27
 1307               	.LBE160:
 1308               	.LBE161:
 1309               	.LBE162:
 1310               		.cfi_endproc
 1311               	.LFE97:
 1313               		.section	.rodata.str1.1,"aMS",@progbits,1
 1314               	.LC0:
 1315 0000 6D79 536C 		.string	"mySlot: %u, frame_length: %lu\r\n\r\n"
 1315      6F74 3A20 
 1315      2575 2C20 
 1315      6672 616D 
 1315      655F 6C65 
 1316               		.section	.text.init,"ax",@progbits
 1317               	.global	init
 1319               	init:
 1320               	.LFB75:
  15:../pong.c     **** 	if((LOCALIZATION_DUR)>=SLOT_LENGTH_MS){
 1321               		.loc 2 15 0
 1322               		.cfi_startproc
 1323               	/* prologue: function */
 1324               	/* frame size = 0 */
 1325               	/* stack size = 0 */
 1326               	.L__stack_usage = 0
  19:../pong.c     **** 	frameCount = 0;
 1327               		.loc 2 19 0
 1328 0000 8FEF      		ldi r24,lo8(-1)
 1329 0002 9FEF      		ldi r25,lo8(-1)
 1330 0004 8093 0000 		sts loopID,r24
 1331 0008 9093 0000 		sts loopID+1,r25
  20:../pong.c     **** 	frameStart=get_time();
 1332               		.loc 2 20 0
 1333 000c 1092 0000 		sts frameCount,__zero_reg__
 1334 0010 1092 0000 		sts frameCount+1,__zero_reg__
 1335 0014 1092 0000 		sts frameCount+2,__zero_reg__
 1336 0018 1092 0000 		sts frameCount+3,__zero_reg__
  21:../pong.c     **** 	mySlot = getSlot(get_droplet_id());
 1337               		.loc 2 21 0
 1338 001c 0E94 0000 		call get_time
 1339               	.LVL94:
 1340 0020 6093 0000 		sts frameStart,r22
 1341 0024 7093 0000 		sts frameStart+1,r23
 1342 0028 8093 0000 		sts frameStart+2,r24
 1343 002c 9093 0000 		sts frameStart+3,r25
 1344               	.LVL95:
 1345               	.LBB163:
 1346               	.LBB164:
 243:../pong.h     **** }
 244:../pong.h     **** 
 245:../pong.h     **** static inline uint16_t getSlot(id_t id){
 246:../pong.h     **** 	return (id%(SLOTS_PER_FRAME-1));
 1347               		.loc 1 246 0
 1348 0030 4091 0000 		lds r20,droplet_ID
 1349 0034 5091 0000 		lds r21,droplet_ID+1
 1350 0038 9A01      		movw r18,r20
 1351 003a ADEA      		ldi r26,lo8(-83)
 1352 003c BBE1      		ldi r27,lo8(27)
 1353 003e 0E94 0000 		call __umulhisi3
 1354 0042 9695      		lsr r25
 1355 0044 8795      		ror r24
 1356 0046 9695      		lsr r25
 1357 0048 8795      		ror r24
 1358 004a 65E2      		ldi r22,lo8(37)
 1359 004c 689F      		mul r22,r24
 1360 004e 9001      		movw r18,r0
 1361 0050 699F      		mul r22,r25
 1362 0052 300D      		add r19,r0
 1363 0054 1124      		clr __zero_reg__
 1364 0056 CA01      		movw r24,r20
 1365 0058 821B      		sub r24,r18
 1366 005a 930B      		sbc r25,r19
 1367               	.LVL96:
 1368               	.LBE164:
 1369               	.LBE163:
  22:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS+1;i++){
 1370               		.loc 2 22 0
 1371 005c 8093 0000 		sts mySlot,r24
 1372 0060 9093 0000 		sts mySlot+1,r25
 1373               	.LVL97:
 1374 0064 E0E0      		ldi r30,lo8(nearBots)
 1375 0066 F0E0      		ldi r31,hi8(nearBots)
 1376               	.LBB165:
 1377               	.LBB166:
 1378               	.LBB167:
 389:../pong.c     **** }
 390:../pong.c     **** 
 391:../pong.c     **** void findAndRemoveOtherBot(id_t id){
 392:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 393:../pong.c     **** 		if(nearBots[i].id==id){
 394:../pong.c     **** 			cleanOtherBot(&nearBots[i]);
 395:../pong.c     **** 			break;
 396:../pong.c     **** 		}
 397:../pong.c     **** 	}
 398:../pong.c     **** }
 399:../pong.c     **** 
 400:../pong.c     **** void removeOtherBot(uint8_t idx){
 401:../pong.c     **** 	cleanOtherBot(&nearBots[idx]);
 402:../pong.c     **** }
 403:../pong.c     **** 
 404:../pong.c     **** OtherBot* addOtherBot(id_t id){
 405:../pong.c     **** 	uint8_t emptyIdx=0xFF;
 406:../pong.c     **** 	qsort(nearBots, NUM_TRACKED_BOTS+1, sizeof(OtherBot), nearBotsDistCmp);
 407:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 408:../pong.c     **** 		if(nearBots[i].id==id){
 409:../pong.c     **** 			return &(nearBots[i]);
 410:../pong.c     **** 		}
 411:../pong.c     **** 		if(emptyIdx==0xFF && nearBots[i].id==0){
 412:../pong.c     **** 			emptyIdx=i;
 413:../pong.c     **** 		}
 414:../pong.c     **** 	}
 415:../pong.c     **** 	//The ID we're adding wasn't in our neighbors list.
 416:../pong.c     **** 	if(emptyIdx!=0xFF){ //An empty spot was available.
 417:../pong.c     **** 		return &(nearBots[emptyIdx]);
 418:../pong.c     **** 	}
 419:../pong.c     **** 
 420:../pong.c     **** 	//BotPos* pos = &(nearBots[NUM_TRACKED_BOTS-1].pos);
 421:../pong.c     **** 	cleanOtherBot(&nearBots[NUM_TRACKED_BOTS]);
 422:../pong.c     **** 	return &(nearBots[NUM_TRACKED_BOTS]);
 423:../pong.c     **** }
 424:../pong.c     **** 
 425:../pong.c     **** void cleanOtherBot(OtherBot* other){
 426:../pong.c     **** 	if(other==NULL) return;
 427:../pong.c     **** 	other->pos.x = UNDF;
 1379               		.loc 2 427 0
 1380 0068 20E0      		ldi r18,0
 1381 006a 30E8      		ldi r19,lo8(-128)
 1382               	.LVL98:
 1383               	.L64:
 1384               		.loc 2 427 0 is_stmt 0 discriminator 3
 1385 006c 40E0      		ldi r20,0
 1386 006e 50E8      		ldi r21,lo8(-128)
 1387 0070 2083      		st Z,r18
 1388 0072 3183      		std Z+1,r19
 428:../pong.c     **** 	other->pos.y = UNDF;
 1389               		.loc 2 428 0 is_stmt 1 discriminator 3
 1390 0074 2283      		std Z+2,r18
 1391 0076 3383      		std Z+3,r19
 429:../pong.c     **** 	other->pos.o = UNDF;
 1392               		.loc 2 429 0 discriminator 3
 1393 0078 2483      		std Z+4,r18
 1394 007a 3583      		std Z+5,r19
 430:../pong.c     **** 	other->id = 0;
 1395               		.loc 2 430 0 discriminator 3
 1396 007c 1682      		std Z+6,__zero_reg__
 1397 007e 1782      		std Z+7,__zero_reg__
 1398 0080 3896      		adiw r30,8
 1399               	.LBE167:
 1400               	.LBE166:
  23:../pong.c     **** 		cleanOtherBot(&nearBots[i]);
 1401               		.loc 2 23 0 discriminator 3
 1402 0082 60E0      		ldi r22,hi8(nearBots+104)
 1403 0084 E030      		cpi r30,lo8(nearBots+104)
 1404 0086 F607      		cpc r31,r22
 1405 0088 01F4      		brne .L64
 1406               	.LBE165:
  26:../pong.c     **** 	colorMode = POS;
 1407               		.loc 2 26 0
 1408 008a 21E0      		ldi r18,lo8(1)
 1409 008c 2093 0000 		sts myState,r18
  27:../pong.c     **** 	gameMode = BOUNCE;
 1410               		.loc 2 27 0
 1411 0090 1092 0000 		sts colorMode,__zero_reg__
  28:../pong.c     **** 	lastBallID = 0;
 1412               		.loc 2 28 0
 1413 0094 2093 0000 		sts gameMode,r18
  29:../pong.c     **** 	lastBallMsg = 0;
 1414               		.loc 2 29 0
 1415 0098 1092 0000 		sts lastBallID,__zero_reg__
  30:../pong.c     **** 	lastPaddleMsg = 0;
 1416               		.loc 2 30 0
 1417 009c 1092 0000 		sts lastBallMsg,__zero_reg__
 1418 00a0 1092 0000 		sts lastBallMsg+1,__zero_reg__
 1419 00a4 1092 0000 		sts lastBallMsg+2,__zero_reg__
 1420 00a8 1092 0000 		sts lastBallMsg+3,__zero_reg__
  31:../pong.c     **** 	hardBotsList = NULL;
 1421               		.loc 2 31 0
 1422 00ac 1092 0000 		sts lastPaddleMsg,__zero_reg__
 1423 00b0 1092 0000 		sts lastPaddleMsg+1,__zero_reg__
 1424 00b4 1092 0000 		sts lastPaddleMsg+2,__zero_reg__
 1425 00b8 1092 0000 		sts lastPaddleMsg+3,__zero_reg__
  32:../pong.c     **** 	theBall.lastUpdate = 0;
 1426               		.loc 2 32 0
 1427 00bc 1092 0000 		sts hardBotsList,__zero_reg__
 1428 00c0 1092 0000 		sts hardBotsList+1,__zero_reg__
  33:../pong.c     **** 	theBall.xPos = UNDF;
 1429               		.loc 2 33 0
 1430 00c4 1092 0000 		sts theBall,__zero_reg__
 1431 00c8 1092 0000 		sts theBall+1,__zero_reg__
 1432 00cc 1092 0000 		sts theBall+2,__zero_reg__
 1433 00d0 1092 0000 		sts theBall+3,__zero_reg__
  34:../pong.c     **** 	theBall.yPos = UNDF;
 1434               		.loc 2 34 0
 1435 00d4 4093 0000 		sts theBall+4,r20
 1436 00d8 5093 0000 		sts theBall+4+1,r21
  35:../pong.c     **** 	theBall.xVel = 0;
 1437               		.loc 2 35 0
 1438 00dc 4093 0000 		sts theBall+6,r20
 1439 00e0 5093 0000 		sts theBall+6+1,r21
  36:../pong.c     **** 	theBall.yVel = 0;
 1440               		.loc 2 36 0
 1441 00e4 1092 0000 		sts theBall+8,__zero_reg__
  37:../pong.c     **** 	theBall.id = 0;
 1442               		.loc 2 37 0
 1443 00e8 1092 0000 		sts theBall+9,__zero_reg__
  38:../pong.c     **** 	theBall.radius = 0;
 1444               		.loc 2 38 0
 1445 00ec 1092 0000 		sts theBall+10,__zero_reg__
  39:../pong.c     **** 	printf("mySlot: %u, frame_length: %lu\r\n\r\n", mySlot, FRAME_LENGTH_MS);
 1446               		.loc 2 39 0
 1447 00f0 1092 0000 		sts theBall+11,__zero_reg__
  40:../pong.c     **** 	set_all_ir_powers(200);
 1448               		.loc 2 40 0
 1449 00f4 1F92      		push __zero_reg__
 1450               	.LCFI56:
 1451               		.cfi_def_cfa_offset 4
 1452 00f6 1F92      		push __zero_reg__
 1453               	.LCFI57:
 1454               		.cfi_def_cfa_offset 5
 1455 00f8 2AE3      		ldi r18,lo8(58)
 1456 00fa 2F93      		push r18
 1457               	.LCFI58:
 1458               		.cfi_def_cfa_offset 6
 1459 00fc 2EEE      		ldi r18,lo8(-18)
 1460 00fe 2F93      		push r18
 1461               	.LCFI59:
 1462               		.cfi_def_cfa_offset 7
 1463 0100 9F93      		push r25
 1464               	.LCFI60:
 1465               		.cfi_def_cfa_offset 8
 1466 0102 8F93      		push r24
 1467               	.LCFI61:
 1468               		.cfi_def_cfa_offset 9
 1469 0104 80E0      		ldi r24,lo8(.LC0)
 1470 0106 90E0      		ldi r25,hi8(.LC0)
 1471 0108 9F93      		push r25
 1472               	.LCFI62:
 1473               		.cfi_def_cfa_offset 10
 1474 010a 8F93      		push r24
 1475               	.LCFI63:
 1476               		.cfi_def_cfa_offset 11
 1477 010c 0E94 0000 		call printf
 1478               	.LVL99:
  41:../pong.c     **** }
 1479               		.loc 2 41 0
 1480 0110 8DB7      		in r24,__SP_L__
 1481 0112 9EB7      		in r25,__SP_H__
 1482 0114 0896      		adiw r24,8
 1483 0116 8DBF      		out __SP_L__,r24
 1484 0118 9EBF      		out __SP_H__,r25
 1485               	.LCFI64:
 1486               		.cfi_def_cfa_offset 3
 1487 011a 88EC      		ldi r24,lo8(-56)
 1488 011c 90E0      		ldi r25,0
 1489 011e 0C94 0000 		jmp set_all_ir_powers
 1490               	.LVL100:
 1491               		.cfi_endproc
 1492               	.LFE75:
 1494               	.global	__floatunsisf
 1495               	.global	__mulsf3
 1496               		.section	.text.getBallCoverage,"ax",@progbits
 1497               	.global	getBallCoverage
 1499               	getBallCoverage:
 1500               	.LFB78:
 112:../pong.c     **** 	float ballCoveredRatio = 0.0;
 1501               		.loc 2 112 0
 1502               		.cfi_startproc
 1503 0000 CF92      		push r12
 1504               	.LCFI65:
 1505               		.cfi_def_cfa_offset 4
 1506               		.cfi_offset 12, -3
 1507 0002 DF92      		push r13
 1508               	.LCFI66:
 1509               		.cfi_def_cfa_offset 5
 1510               		.cfi_offset 13, -4
 1511 0004 EF92      		push r14
 1512               	.LCFI67:
 1513               		.cfi_def_cfa_offset 6
 1514               		.cfi_offset 14, -5
 1515 0006 FF92      		push r15
 1516               	.LCFI68:
 1517               		.cfi_def_cfa_offset 7
 1518               		.cfi_offset 15, -6
 1519 0008 CF93      		push r28
 1520               	.LCFI69:
 1521               		.cfi_def_cfa_offset 8
 1522               		.cfi_offset 28, -7
 1523               	/* prologue: function */
 1524               	/* frame size = 0 */
 1525               	/* stack size = 5 */
 1526               	.L__stack_usage = 5
 1527               	.LVL101:
 114:../pong.c     **** 		if(theBall.radius<DROPLET_RADIUS){
 1528               		.loc 2 114 0
 1529 000a 2091 0000 		lds r18,myDist
 1530 000e 3091 0000 		lds r19,myDist+1
 1531 0012 2115      		cp r18,__zero_reg__
 1532 0014 80E8      		ldi r24,-128
 1533 0016 3807      		cpc r19,r24
 1534 0018 01F0      		breq .L71
 114:../pong.c     **** 		if(theBall.radius<DROPLET_RADIUS){
 1535               		.loc 2 114 0 is_stmt 0 discriminator 1
 1536 001a C091 0000 		lds r28,theBall+11
 1537 001e 8C2F      		mov r24,r28
 1538 0020 90E0      		ldi r25,0
 1539 0022 AC01      		movw r20,r24
 1540 0024 4A5E      		subi r20,-22
 1541 0026 5F4F      		sbci r21,-1
 1542 0028 2417      		cp r18,r20
 1543 002a 3507      		cpc r19,r21
 1544 002c 00F4      		brsh .L71
 114:../pong.c     **** 		if(theBall.radius<DROPLET_RADIUS){
 1545               		.loc 2 114 0 discriminator 2
 1546 002e 4091 0000 		lds r20,theBall+10
 1547 0032 4F30      		cpi r20,lo8(15)
 1548 0034 01F0      		breq .L71
 115:../pong.c     **** 			if(myDist>=(DROPLET_RADIUS-theBall.radius)){
 1549               		.loc 2 115 0 is_stmt 1
 1550 0036 C631      		cpi r28,lo8(22)
 1551 0038 00F4      		brsh .L68
 116:../pong.c     **** 				ballCoveredRatio = getCoverageRatioA(theBall.radius, myDist);
 1552               		.loc 2 116 0
 1553 003a 46E1      		ldi r20,lo8(22)
 1554 003c 50E0      		ldi r21,0
 1555 003e 481B      		sub r20,r24
 1556 0040 590B      		sbc r21,r25
 1557 0042 2417      		cp r18,r20
 1558 0044 3507      		cpc r19,r21
 1559 0046 00F4      		brsh .+2
 1560 0048 00C0      		rjmp .L73
 1561               	.LVL102:
 1562               	.LBB168:
 1563               	.LBB169:
 169:../pong.h     **** }
 1564               		.loc 1 169 0
 1565 004a BC01      		movw r22,r24
 1566 004c 621B      		sub r22,r18
 1567 004e 730B      		sbc r23,r19
 1568 0050 6A5E      		subi r22,-22
 1569 0052 7F4F      		sbci r23,-1
 1570 0054 80E0      		ldi r24,0
 1571 0056 90E0      		ldi r25,0
 1572               	.LVL103:
 1573 0058 0E94 0000 		call __floatunsisf
 1574               	.LVL104:
 1575 005c 6B01      		movw r12,r22
 1576 005e 7C01      		movw r14,r24
 1577 0060 6C2F      		mov r22,r28
 1578 0062 70E0      		ldi r23,0
 1579 0064 80E0      		ldi r24,0
 1580 0066 90E0      		ldi r25,0
 1581 0068 0E94 0000 		call __floatunsisf
 1582               	.LVL105:
 1583 006c 20E0      		ldi r18,0
 1584 006e 30E0      		ldi r19,0
 1585 0070 42E7      		ldi r20,lo8(114)
 1586 0072 54E4      		ldi r21,lo8(68)
 1587 0074 0E94 0000 		call __divsf3
 1588               	.LVL106:
 1589 0078 9B01      		movw r18,r22
 1590 007a AC01      		movw r20,r24
 1591 007c C701      		movw r24,r14
 1592 007e B601      		movw r22,r12
 1593 0080 0E94 0000 		call __mulsf3
 1594               	.LVL107:
 1595               	.LBE169:
 1596               	.LBE168:
 1597 0084 00C0      		rjmp .L67
 1598               	.LVL108:
 1599               	.L71:
 113:../pong.c     **** 	if((((int16_t)myDist)!=UNDF) && (myDist<(DROPLET_RADIUS+theBall.radius)) && (theBall.id!=0x0F)){
 1600               		.loc 2 113 0
 1601 0086 60E0      		ldi r22,0
 1602 0088 70E0      		ldi r23,0
 1603 008a CB01      		movw r24,r22
 1604               	.LVL109:
 1605               	.L67:
 1606               	/* epilogue start */
 131:../pong.c     **** 
 1607               		.loc 2 131 0
 1608 008c CF91      		pop r28
 1609 008e FF90      		pop r15
 1610 0090 EF90      		pop r14
 1611 0092 DF90      		pop r13
 1612 0094 CF90      		pop r12
 1613 0096 0895      		ret
 1614               	.LVL110:
 1615               	.L68:
 122:../pong.c     **** 				ballCoveredRatio = getCoverageRatioB(theBall.radius, myDist);
 1616               		.loc 2 122 0
 1617 0098 AC01      		movw r20,r24
 1618 009a 4651      		subi r20,22
 1619 009c 5109      		sbc r21,__zero_reg__
 1620 009e 2417      		cp r18,r20
 1621 00a0 3507      		cpc r19,r21
 1622 00a2 00F0      		brlo .L73
 1623               	.LVL111:
 1624               	.LBB170:
 1625               	.LBB171:
 174:../pong.h     **** }
 1626               		.loc 1 174 0
 1627 00a4 BC01      		movw r22,r24
 1628 00a6 621B      		sub r22,r18
 1629 00a8 730B      		sbc r23,r19
 1630 00aa 6A5E      		subi r22,-22
 1631 00ac 7F4F      		sbci r23,-1
 1632 00ae 80E0      		ldi r24,0
 1633 00b0 90E0      		ldi r25,0
 1634               	.LVL112:
 1635 00b2 0E94 0000 		call __floatunsisf
 1636               	.LVL113:
 1637 00b6 2CE8      		ldi r18,lo8(-116)
 1638 00b8 3EE2      		ldi r19,lo8(46)
 1639 00ba 4AEB      		ldi r20,lo8(-70)
 1640 00bc 5CE3      		ldi r21,lo8(60)
 1641 00be 0E94 0000 		call __mulsf3
 1642               	.LVL114:
 1643               	/* epilogue start */
 1644               	.LBE171:
 1645               	.LBE170:
 131:../pong.c     **** 
 1646               		.loc 2 131 0
 1647 00c2 CF91      		pop r28
 1648 00c4 FF90      		pop r15
 1649 00c6 EF90      		pop r14
 1650 00c8 DF90      		pop r13
 1651 00ca CF90      		pop r12
 1652 00cc 0895      		ret
 1653               	.LVL115:
 1654               	.L73:
 119:../pong.c     **** 			}
 1655               		.loc 2 119 0
 1656 00ce 60E0      		ldi r22,0
 1657 00d0 70E0      		ldi r23,0
 1658 00d2 80E8      		ldi r24,lo8(-128)
 1659 00d4 9FE3      		ldi r25,lo8(63)
 1660               	.LVL116:
 1661               	/* epilogue start */
 131:../pong.c     **** 
 1662               		.loc 2 131 0
 1663 00d6 CF91      		pop r28
 1664 00d8 FF90      		pop r15
 1665 00da EF90      		pop r14
 1666 00dc DF90      		pop r13
 1667 00de CF90      		pop r12
 1668 00e0 0895      		ret
 1669               		.cfi_endproc
 1670               	.LFE78:
 1672               		.section	.text.getPaddleCoverage,"ax",@progbits
 1673               	.global	getPaddleCoverage
 1675               	getPaddleCoverage:
 1676               	.LFB79:
 133:../pong.c     **** 	float paddleCoveredRatio = 0.0;
 1677               		.loc 2 133 0
 1678               		.cfi_startproc
 1679 0000 CF92      		push r12
 1680               	.LCFI70:
 1681               		.cfi_def_cfa_offset 4
 1682               		.cfi_offset 12, -3
 1683 0002 DF92      		push r13
 1684               	.LCFI71:
 1685               		.cfi_def_cfa_offset 5
 1686               		.cfi_offset 13, -4
 1687 0004 EF92      		push r14
 1688               	.LCFI72:
 1689               		.cfi_def_cfa_offset 6
 1690               		.cfi_offset 14, -5
 1691 0006 FF92      		push r15
 1692               	.LCFI73:
 1693               		.cfi_def_cfa_offset 7
 1694               		.cfi_offset 15, -6
 1695 0008 0F93      		push r16
 1696               	.LCFI74:
 1697               		.cfi_def_cfa_offset 8
 1698               		.cfi_offset 16, -7
 1699 000a 1F93      		push r17
 1700               	.LCFI75:
 1701               		.cfi_def_cfa_offset 9
 1702               		.cfi_offset 17, -8
 1703 000c CF93      		push r28
 1704               	.LCFI76:
 1705               		.cfi_def_cfa_offset 10
 1706               		.cfi_offset 28, -9
 1707 000e DF93      		push r29
 1708               	.LCFI77:
 1709               		.cfi_def_cfa_offset 11
 1710               		.cfi_offset 29, -10
 1711               	/* prologue: function */
 1712               	/* frame size = 0 */
 1713               	/* stack size = 8 */
 1714               	.L__stack_usage = 8
 1715               	.LVL117:
 135:../pong.c     **** 		int16_t myStart = myPos.x-DROPLET_RADIUS;
 1716               		.loc 2 135 0
 1717 0010 8091 0000 		lds r24,gameMode
 1718 0014 8111      		cpse r24,__zero_reg__
 1719 0016 00C0      		rjmp .L82
 135:../pong.c     **** 		int16_t myStart = myPos.x-DROPLET_RADIUS;
 1720               		.loc 2 135 0 is_stmt 0 discriminator 1
 1721 0018 8091 0000 		lds r24,myState
 1722 001c 80FF      		sbrs r24,0
 1723 001e 00C0      		rjmp .L82
 135:../pong.c     **** 		int16_t myStart = myPos.x-DROPLET_RADIUS;
 1724               		.loc 2 135 0 discriminator 2
 1725 0020 8371      		andi r24,lo8(19)
 1726 0022 01F0      		breq .L82
 1727               	.LBB176:
 1728               	.LBB177:
 1729               	.LBB178:
 136:../pong.c     **** 		int16_t myEnd   = myPos.x+DROPLET_RADIUS;
 1730               		.loc 2 136 0 is_stmt 1
 1731 0024 8091 0000 		lds r24,myPos
 1732 0028 9091 0000 		lds r25,myPos+1
 1733               	.LVL118:
 137:../pong.c     **** 		if(myEnd>paddleStart && paddleEnd>myStart){ //otherwise, no intersection
 1734               		.loc 2 137 0
 1735 002c 8C01      		movw r16,r24
 1736 002e 0A5E      		subi r16,-22
 1737 0030 1F4F      		sbci r17,-1
 1738               	.LVL119:
 138:../pong.c     **** 			if(myEnd>paddleEnd){
 1739               		.loc 2 138 0
 1740 0032 2091 0000 		lds r18,paddleStart
 1741 0036 3091 0000 		lds r19,paddleStart+1
 1742 003a 2017      		cp r18,r16
 1743 003c 3107      		cpc r19,r17
 1744 003e 04F4      		brge .L82
 136:../pong.c     **** 		int16_t myEnd   = myPos.x+DROPLET_RADIUS;
 1745               		.loc 2 136 0
 1746 0040 EC01      		movw r28,r24
 1747 0042 6697      		sbiw r28,22
 1748               	.LVL120:
 138:../pong.c     **** 			if(myEnd>paddleEnd){
 1749               		.loc 2 138 0
 1750 0044 6091 0000 		lds r22,paddleEnd
 1751 0048 7091 0000 		lds r23,paddleEnd+1
 1752 004c C617      		cp r28,r22
 1753 004e D707      		cpc r29,r23
 1754 0050 04F4      		brge .L82
 139:../pong.c     **** 				if(myStart>paddleStart){
 1755               		.loc 2 139 0
 1756 0052 6017      		cp r22,r16
 1757 0054 7107      		cpc r23,r17
 1758 0056 04F4      		brge .L76
 140:../pong.c     **** 					paddleCoveredRatio = (1.0*(paddleEnd-myStart))/(1.0*(myEnd-myStart));
 1759               		.loc 2 140 0
 1760 0058 2C17      		cp r18,r28
 1761 005a 3D07      		cpc r19,r29
 1762 005c 04F0      		brlt .L86
 1763               	.L85:
 149:../pong.c     **** 				}
 1764               		.loc 2 149 0
 1765 005e 621B      		sub r22,r18
 1766 0060 730B      		sbc r23,r19
 1767               	.L84:
 1768 0062 072E      		mov __tmp_reg__,r23
 1769 0064 000C      		lsl r0
 1770 0066 880B      		sbc r24,r24
 1771 0068 990B      		sbc r25,r25
 1772 006a 0E94 0000 		call __floatsisf
 1773               	.LVL121:
 1774 006e 6B01      		movw r12,r22
 1775 0070 7C01      		movw r14,r24
 1776 0072 B801      		movw r22,r16
 1777 0074 6C1B      		sub r22,r28
 1778 0076 7D0B      		sbc r23,r29
 1779 0078 072E      		mov __tmp_reg__,r23
 1780 007a 000C      		lsl r0
 1781 007c 880B      		sbc r24,r24
 1782 007e 990B      		sbc r25,r25
 1783 0080 0E94 0000 		call __floatsisf
 1784               	.LVL122:
 1785 0084 9B01      		movw r18,r22
 1786 0086 AC01      		movw r20,r24
 1787 0088 C701      		movw r24,r14
 1788 008a B601      		movw r22,r12
 1789 008c 0E94 0000 		call __divsf3
 1790               	.LVL123:
 1791 0090 00C0      		rjmp .L75
 1792               	.LVL124:
 1793               	.L82:
 1794               	.LBE178:
 1795               	.LBE177:
 1796               	.LBE176:
 134:../pong.c     **** 	if(gameMode==PONG && NS_PIXEL_Q(myState)){
 1797               		.loc 2 134 0
 1798 0092 60E0      		ldi r22,0
 1799 0094 70E0      		ldi r23,0
 1800 0096 CB01      		movw r24,r22
 1801               	.L75:
 1802               	.LVL125:
 1803               	/* epilogue start */
 156:../pong.c     **** 
 1804               		.loc 2 156 0
 1805 0098 DF91      		pop r29
 1806 009a CF91      		pop r28
 1807 009c 1F91      		pop r17
 1808 009e 0F91      		pop r16
 1809 00a0 FF90      		pop r15
 1810 00a2 EF90      		pop r14
 1811 00a4 DF90      		pop r13
 1812 00a6 CF90      		pop r12
 1813 00a8 0895      		ret
 1814               	.LVL126:
 1815               	.L76:
 1816               	.LBB181:
 1817               	.LBB180:
 1818               	.LBB179:
 146:../pong.c     **** 					paddleCoveredRatio = 1.0; //my end-myStart
 1819               		.loc 2 146 0
 1820 00aa 2C17      		cp r18,r28
 1821 00ac 3D07      		cpc r19,r29
 1822 00ae 04F0      		brlt .L83
 149:../pong.c     **** 				}
 1823               		.loc 2 149 0
 1824 00b0 B801      		movw r22,r16
 1825 00b2 00C0      		rjmp .L85
 1826               	.L86:
 141:../pong.c     **** 				}else{
 1827               		.loc 2 141 0
 1828 00b4 6C1B      		sub r22,r28
 1829 00b6 7D0B      		sbc r23,r29
 1830 00b8 00C0      		rjmp .L84
 1831               	.L83:
 147:../pong.c     **** 				}else{
 1832               		.loc 2 147 0
 1833 00ba 60E0      		ldi r22,0
 1834 00bc 70E0      		ldi r23,0
 1835 00be 80E8      		ldi r24,lo8(-128)
 1836 00c0 9FE3      		ldi r25,lo8(63)
 1837 00c2 00C0      		rjmp .L75
 1838               	.LBE179:
 1839               	.LBE180:
 1840               	.LBE181:
 1841               		.cfi_endproc
 1842               	.LFE79:
 1844               	.global	__addsf3
 1845               		.section	.text.updateColor,"ax",@progbits
 1846               	.global	updateColor
 1848               	updateColor:
 1849               	.LFB77:
  91:../pong.c     **** 	uint8_t newR = 0, newG = 0, newB = 0;
 1850               		.loc 2 91 0
 1851               		.cfi_startproc
 1852 0000 CF92      		push r12
 1853               	.LCFI78:
 1854               		.cfi_def_cfa_offset 4
 1855               		.cfi_offset 12, -3
 1856 0002 DF92      		push r13
 1857               	.LCFI79:
 1858               		.cfi_def_cfa_offset 5
 1859               		.cfi_offset 13, -4
 1860 0004 EF92      		push r14
 1861               	.LCFI80:
 1862               		.cfi_def_cfa_offset 6
 1863               		.cfi_offset 14, -5
 1864 0006 FF92      		push r15
 1865               	.LCFI81:
 1866               		.cfi_def_cfa_offset 7
 1867               		.cfi_offset 15, -6
 1868 0008 CF93      		push r28
 1869               	.LCFI82:
 1870               		.cfi_def_cfa_offset 8
 1871               		.cfi_offset 28, -7
 1872 000a DF93      		push r29
 1873               	.LCFI83:
 1874               		.cfi_def_cfa_offset 9
 1875               		.cfi_offset 29, -8
 1876 000c 00D0      		rcall .
 1877               	.LCFI84:
 1878               		.cfi_def_cfa_offset 12
 1879 000e CDB7      		in r28,__SP_L__
 1880 0010 DEB7      		in r29,__SP_H__
 1881               	.LCFI85:
 1882               		.cfi_def_cfa_register 28
 1883               	/* prologue: function */
 1884               	/* frame size = 3 */
 1885               	/* stack size = 9 */
 1886               	.L__stack_usage = 9
  92:../pong.c     **** 	if(colorMode==POS){
 1887               		.loc 2 92 0
 1888 0012 1B82      		std Y+3,__zero_reg__
 1889 0014 1A82      		std Y+2,__zero_reg__
 1890 0016 1982      		std Y+1,__zero_reg__
  93:../pong.c     **** 		getPosColor(&newR, &newG, &newB);
 1891               		.loc 2 93 0
 1892 0018 8091 0000 		lds r24,colorMode
 1893 001c 8823      		tst r24
 1894 001e 01F0      		breq .L99
  95:../pong.c     **** 		float coverage = getBallCoverage() + getPaddleCoverage();
 1895               		.loc 2 95 0
 1896 0020 8130      		cpi r24,lo8(1)
 1897 0022 01F0      		breq .L100
 1898 0024 80E0      		ldi r24,0
 1899 0026 60E0      		ldi r22,0
 1900 0028 40E0      		ldi r20,0
 1901               	.L89:
 109:../pong.c     **** }
 1902               		.loc 2 109 0
 1903 002a 0E94 0000 		call set_rgb
 1904               	.LVL127:
 1905               	/* epilogue start */
 110:../pong.c     **** 
 1906               		.loc 2 110 0
 1907 002e 2396      		adiw r28,3
 1908 0030 CDBF      		out __SP_L__,r28
 1909 0032 DEBF      		out __SP_H__,r29
 1910 0034 DF91      		pop r29
 1911 0036 CF91      		pop r28
 1912 0038 FF90      		pop r15
 1913 003a EF90      		pop r14
 1914 003c DF90      		pop r13
 1915 003e CF90      		pop r12
 1916 0040 0895      		ret
 1917               	.L100:
 1918               	.LBB182:
  96:../pong.c     **** 		coverage = (coverage > 1.0) ? 1.0 : coverage;
 1919               		.loc 2 96 0
 1920 0042 0E94 0000 		call getBallCoverage
 1921               	.LVL128:
 1922 0046 6B01      		movw r12,r22
 1923 0048 7C01      		movw r14,r24
 1924 004a 0E94 0000 		call getPaddleCoverage
 1925               	.LVL129:
 1926 004e 9B01      		movw r18,r22
 1927 0050 AC01      		movw r20,r24
 1928 0052 C701      		movw r24,r14
 1929 0054 B601      		movw r22,r12
 1930 0056 0E94 0000 		call __addsf3
 1931               	.LVL130:
 1932 005a 6B01      		movw r12,r22
 1933 005c 7C01      		movw r14,r24
 1934               	.LVL131:
  97:../pong.c     **** 		uint8_t intensityIncrease = 0;
 1935               		.loc 2 97 0
 1936 005e 20E0      		ldi r18,0
 1937 0060 30E0      		ldi r19,0
 1938 0062 40E8      		ldi r20,lo8(-128)
 1939 0064 5FE3      		ldi r21,lo8(63)
 1940 0066 0E94 0000 		call __gtsf2
 1941               	.LVL132:
 1942 006a 1816      		cp __zero_reg__,r24
 1943 006c 04F4      		brge .L101
 1944 006e 4FEF      		ldi r20,lo8(-1)
 1945               	.LVL133:
 1946               	.L91:
 105:../pong.c     **** 		newG = newGreen>255 ? 255 : newGreen;
 1947               		.loc 2 105 0
 1948 0070 4B83      		std Y+3,r20
 106:../pong.c     **** 		newB = newBlue>255 ? 255 : newBlue;
 1949               		.loc 2 106 0
 1950 0072 4A83      		std Y+2,r20
 107:../pong.c     **** 	}
 1951               		.loc 2 107 0
 1952 0074 4983      		std Y+1,r20
 1953 0076 842F      		mov r24,r20
 1954 0078 642F      		mov r22,r20
 1955 007a 00C0      		rjmp .L89
 1956               	.L99:
 1957               	.LBE182:
  94:../pong.c     **** 	}else if(colorMode==GAME){
 1958               		.loc 2 94 0
 1959 007c AE01      		movw r20,r28
 1960 007e 4F5F      		subi r20,-1
 1961 0080 5F4F      		sbci r21,-1
 1962 0082 BE01      		movw r22,r28
 1963 0084 6E5F      		subi r22,-2
 1964 0086 7F4F      		sbci r23,-1
 1965 0088 CE01      		movw r24,r28
 1966 008a 0396      		adiw r24,3
 1967 008c 0E94 0000 		call getPosColor
 1968               	.LVL134:
 1969 0090 4981      		ldd r20,Y+1
 1970 0092 6A81      		ldd r22,Y+2
 1971 0094 8B81      		ldd r24,Y+3
 1972 0096 00C0      		rjmp .L89
 1973               	.LVL135:
 1974               	.L101:
 1975               	.LBB183:
  99:../pong.c     **** 			intensityIncrease = (uint16_t)(5.0*pow(51.0,coverage));
 1976               		.loc 2 99 0 discriminator 4
 1977 0098 2AE0      		ldi r18,lo8(10)
 1978 009a 37ED      		ldi r19,lo8(-41)
 1979 009c 43E2      		ldi r20,lo8(35)
 1980 009e 5CE3      		ldi r21,lo8(60)
 1981 00a0 C701      		movw r24,r14
 1982 00a2 B601      		movw r22,r12
 1983 00a4 0E94 0000 		call __gtsf2
 1984               	.LVL136:
 1985 00a8 1816      		cp __zero_reg__,r24
 1986 00aa 04F0      		brlt .L102
 1987 00ac 40E0      		ldi r20,0
 1988 00ae 00C0      		rjmp .L91
 1989               	.L102:
 1990 00b0 A701      		movw r20,r14
 1991 00b2 9601      		movw r18,r12
 1992 00b4 60E0      		ldi r22,0
 1993 00b6 70E0      		ldi r23,0
 1994 00b8 8CE4      		ldi r24,lo8(76)
 1995 00ba 92E4      		ldi r25,lo8(66)
 1996 00bc 0E94 0000 		call pow
 1997               	.LVL137:
 1998 00c0 20E0      		ldi r18,0
 1999 00c2 30E0      		ldi r19,0
 2000 00c4 40EA      		ldi r20,lo8(-96)
 2001 00c6 50E4      		ldi r21,lo8(64)
 2002 00c8 0E94 0000 		call __mulsf3
 2003               	.LVL138:
 2004 00cc 0E94 0000 		call __fixunssfsi
 2005               	.LVL139:
 2006 00d0 7727      		clr r23
 2007 00d2 462F      		mov r20,r22
 2008 00d4 00C0      		rjmp .L91
 2009               	.LBE183:
 2010               		.cfi_endproc
 2011               	.LFE77:
 2013               		.section	.text.updateBall,"ax",@progbits
 2014               	.global	updateBall
 2016               	updateBall:
 2017               	.LFB80:
 158:../pong.c     **** 	if(theBall.lastUpdate){
 2018               		.loc 2 158 0
 2019               		.cfi_startproc
 2020               	/* prologue: function */
 2021               	/* frame size = 0 */
 2022               	/* stack size = 0 */
 2023               	.L__stack_usage = 0
 159:../pong.c     **** 		uint32_t now = get_time();
 2024               		.loc 2 159 0
 2025 0000 8091 0000 		lds r24,theBall
 2026 0004 9091 0000 		lds r25,theBall+1
 2027 0008 A091 0000 		lds r26,theBall+2
 2028 000c B091 0000 		lds r27,theBall+3
 2029 0010 892B      		or r24,r25
 2030 0012 8A2B      		or r24,r26
 2031 0014 8B2B      		or r24,r27
 2032 0016 01F4      		brne .L105
 2033 0018 0895      		ret
 2034               	.L105:
 2035 001a 0C94 0000 		jmp updateBall.part.1
 2036               	.LVL140:
 2037               		.cfi_endproc
 2038               	.LFE80:
 2040               		.section	.text.checkLightLevel,"ax",@progbits
 2041               	.global	checkLightLevel
 2043               	checkLightLevel:
 2044               	.LFB81:
 205:../pong.c     **** 	int16_t r, g, b;
 2045               		.loc 2 205 0
 2046               		.cfi_startproc
 2047 0000 CF92      		push r12
 2048               	.LCFI86:
 2049               		.cfi_def_cfa_offset 4
 2050               		.cfi_offset 12, -3
 2051 0002 DF92      		push r13
 2052               	.LCFI87:
 2053               		.cfi_def_cfa_offset 5
 2054               		.cfi_offset 13, -4
 2055 0004 EF92      		push r14
 2056               	.LCFI88:
 2057               		.cfi_def_cfa_offset 6
 2058               		.cfi_offset 14, -5
 2059 0006 FF92      		push r15
 2060               	.LCFI89:
 2061               		.cfi_def_cfa_offset 7
 2062               		.cfi_offset 15, -6
 2063 0008 0F93      		push r16
 2064               	.LCFI90:
 2065               		.cfi_def_cfa_offset 8
 2066               		.cfi_offset 16, -7
 2067 000a 1F93      		push r17
 2068               	.LCFI91:
 2069               		.cfi_def_cfa_offset 9
 2070               		.cfi_offset 17, -8
 2071 000c CF93      		push r28
 2072               	.LCFI92:
 2073               		.cfi_def_cfa_offset 10
 2074               		.cfi_offset 28, -9
 2075 000e DF93      		push r29
 2076               	.LCFI93:
 2077               		.cfi_def_cfa_offset 11
 2078               		.cfi_offset 29, -10
 2079 0010 00D0      		rcall .
 2080 0012 00D0      		rcall .
 2081               	.LCFI94:
 2082               		.cfi_def_cfa_offset 17
 2083 0014 CDB7      		in r28,__SP_L__
 2084 0016 DEB7      		in r29,__SP_H__
 2085               	.LCFI95:
 2086               		.cfi_def_cfa_register 28
 2087               	/* prologue: function */
 2088               	/* frame size = 6 */
 2089               	/* stack size = 14 */
 2090               	.L__stack_usage = 14
 207:../pong.c     **** 	int16_t sum = r+g+b;
 2091               		.loc 2 207 0
 2092 0018 AE01      		movw r20,r28
 2093 001a 4F5F      		subi r20,-1
 2094 001c 5F4F      		sbci r21,-1
 2095 001e BE01      		movw r22,r28
 2096 0020 6D5F      		subi r22,-3
 2097 0022 7F4F      		sbci r23,-1
 2098 0024 CE01      		movw r24,r28
 2099 0026 0596      		adiw r24,5
 2100 0028 0E94 0000 		call get_rgb
 2101               	.LVL141:
 208:../pong.c     **** 	uint32_t now = get_time();
 2102               		.loc 2 208 0
 2103 002c 0D81      		ldd r16,Y+5
 2104 002e 1E81      		ldd r17,Y+6
 2105 0030 8B81      		ldd r24,Y+3
 2106 0032 9C81      		ldd r25,Y+4
 2107 0034 080F      		add r16,r24
 2108 0036 191F      		adc r17,r25
 2109 0038 8981      		ldd r24,Y+1
 2110 003a 9A81      		ldd r25,Y+2
 2111 003c 080F      		add r16,r24
 2112 003e 191F      		adc r17,r25
 2113               	.LVL142:
 209:../pong.c     **** 	if(sum<=25){
 2114               		.loc 2 209 0
 2115 0040 0E94 0000 		call get_time
 2116               	.LVL143:
 2117 0044 6B01      		movw r12,r22
 2118 0046 7C01      		movw r14,r24
 2119               	.LVL144:
 210:../pong.c     **** 		paddleChange += ((now-lastLightCheck)*(3*PADDLE_VEL));
 2120               		.loc 2 210 0
 2121 0048 0A31      		cpi r16,26
 2122 004a 1105      		cpc r17,__zero_reg__
 2123 004c 04F0      		brlt .+2
 2124 004e 00C0      		rjmp .L107
 211:../pong.c     **** 		//printf("Paddle ChangeX5: %f\r\n", paddleChange);
 2125               		.loc 2 211 0
 2126 0050 8091 0000 		lds r24,lastLightCheck
 2127 0054 9091 0000 		lds r25,lastLightCheck+1
 2128 0058 A091 0000 		lds r26,lastLightCheck+2
 2129 005c B091 0000 		lds r27,lastLightCheck+3
 2130 0060 A701      		movw r20,r14
 2131 0062 9601      		movw r18,r12
 2132 0064 281B      		sub r18,r24
 2133 0066 390B      		sbc r19,r25
 2134 0068 4A0B      		sbc r20,r26
 2135 006a 5B0B      		sbc r21,r27
 2136 006c CA01      		movw r24,r20
 2137 006e B901      		movw r22,r18
 2138 0070 0E94 0000 		call __floatunsisf
 2139               	.LVL145:
 2140 0074 2AE9      		ldi r18,lo8(-102)
 2141 0076 39E9      		ldi r19,lo8(-103)
 2142 0078 49E9      		ldi r20,lo8(-103)
 2143 007a 5EE3      		ldi r21,lo8(62)
 2144               	.L112:
 217:../pong.c     **** 		//printf("Paddle ChangeX5: %f\r\n", paddleChange);
 2145               		.loc 2 217 0
 2146 007c 0E94 0000 		call __mulsf3
 2147               	.LVL146:
 2148 0080 9B01      		movw r18,r22
 2149 0082 AC01      		movw r20,r24
 2150 0084 6091 0000 		lds r22,paddleChange
 2151 0088 7091 0000 		lds r23,paddleChange+1
 2152 008c 8091 0000 		lds r24,paddleChange+2
 2153 0090 9091 0000 		lds r25,paddleChange+3
 2154 0094 0E94 0000 		call __addsf3
 2155               	.LVL147:
 2156 0098 6093 0000 		sts paddleChange,r22
 2157 009c 7093 0000 		sts paddleChange+1,r23
 2158 00a0 8093 0000 		sts paddleChange+2,r24
 2159 00a4 9093 0000 		sts paddleChange+3,r25
 221:../pong.c     **** 	}else{
 2160               		.loc 2 221 0
 2161 00a8 81E0      		ldi r24,lo8(1)
 2162 00aa 8093 0000 		sts isCovered,r24
 2163               	.L111:
 225:../pong.c     **** 	//printf("Light: %5d (%4d, %4d, %4d)\r\n",sum,r,g,b);
 2164               		.loc 2 225 0
 2165 00ae C092 0000 		sts lastLightCheck,r12
 2166 00b2 D092 0000 		sts lastLightCheck+1,r13
 2167 00b6 E092 0000 		sts lastLightCheck+2,r14
 2168 00ba F092 0000 		sts lastLightCheck+3,r15
 2169               	/* epilogue start */
 227:../pong.c     **** 
 2170               		.loc 2 227 0
 2171 00be 2696      		adiw r28,6
 2172 00c0 CDBF      		out __SP_L__,r28
 2173 00c2 DEBF      		out __SP_H__,r29
 2174 00c4 DF91      		pop r29
 2175 00c6 CF91      		pop r28
 2176 00c8 1F91      		pop r17
 2177 00ca 0F91      		pop r16
 2178               	.LVL148:
 2179 00cc FF90      		pop r15
 2180 00ce EF90      		pop r14
 2181 00d0 DF90      		pop r13
 2182 00d2 CF90      		pop r12
 2183               	.LVL149:
 2184 00d4 0895      		ret
 2185               	.LVL150:
 2186               	.L107:
 213:../pong.c     **** 		paddleChange += ((now-lastLightCheck)*(2*PADDLE_VEL));
 2187               		.loc 2 213 0
 2188 00d6 0932      		cpi r16,41
 2189 00d8 1105      		cpc r17,__zero_reg__
 2190 00da 04F4      		brge .L109
 214:../pong.c     **** 		//printf("Paddle ChangeX3: %f\r\n", paddleChange);
 2191               		.loc 2 214 0
 2192 00dc 8091 0000 		lds r24,lastLightCheck
 2193 00e0 9091 0000 		lds r25,lastLightCheck+1
 2194 00e4 A091 0000 		lds r26,lastLightCheck+2
 2195 00e8 B091 0000 		lds r27,lastLightCheck+3
 2196 00ec A701      		movw r20,r14
 2197 00ee 9601      		movw r18,r12
 2198 00f0 281B      		sub r18,r24
 2199 00f2 390B      		sbc r19,r25
 2200 00f4 4A0B      		sbc r20,r26
 2201 00f6 5B0B      		sbc r21,r27
 2202 00f8 CA01      		movw r24,r20
 2203 00fa B901      		movw r22,r18
 2204 00fc 0E94 0000 		call __floatunsisf
 2205               	.LVL151:
 2206 0100 2DEC      		ldi r18,lo8(-51)
 2207 0102 3CEC      		ldi r19,lo8(-52)
 2208 0104 4CE4      		ldi r20,lo8(76)
 2209 0106 5EE3      		ldi r21,lo8(62)
 2210 0108 00C0      		rjmp .L112
 2211               	.L109:
 216:../pong.c     **** 		paddleChange += ((now-lastLightCheck)*(PADDLE_VEL));
 2212               		.loc 2 216 0
 2213 010a 0D33      		cpi r16,61
 2214 010c 1105      		cpc r17,__zero_reg__
 2215 010e 04F4      		brge .L110
 217:../pong.c     **** 		//printf("Paddle ChangeX5: %f\r\n", paddleChange);
 2216               		.loc 2 217 0
 2217 0110 8091 0000 		lds r24,lastLightCheck
 2218 0114 9091 0000 		lds r25,lastLightCheck+1
 2219 0118 A091 0000 		lds r26,lastLightCheck+2
 2220 011c B091 0000 		lds r27,lastLightCheck+3
 2221 0120 A701      		movw r20,r14
 2222 0122 9601      		movw r18,r12
 2223 0124 281B      		sub r18,r24
 2224 0126 390B      		sbc r19,r25
 2225 0128 4A0B      		sbc r20,r26
 2226 012a 5B0B      		sbc r21,r27
 2227 012c CA01      		movw r24,r20
 2228 012e B901      		movw r22,r18
 2229 0130 0E94 0000 		call __floatunsisf
 2230               	.LVL152:
 2231 0134 2DEC      		ldi r18,lo8(-51)
 2232 0136 3CEC      		ldi r19,lo8(-52)
 2233 0138 4CEC      		ldi r20,lo8(-52)
 2234 013a 5DE3      		ldi r21,lo8(61)
 2235 013c 00C0      		rjmp .L112
 2236               	.L110:
 223:../pong.c     **** 	}
 2237               		.loc 2 223 0
 2238 013e 1092 0000 		sts isCovered,__zero_reg__
 2239 0142 00C0      		rjmp .L111
 2240               		.cfi_endproc
 2241               	.LFE81:
 2243               		.section	.rodata.str1.1
 2244               	.LC1:
 2245 0022 5069 7865 		.string	"Pixel"
 2245      6C00 
 2246               	.LC2:
 2247 0028 4E6F 7274 		.string	"North Pixel"
 2247      6820 5069 
 2247      7865 6C00 
 2248               	.LC3:
 2249 0034 536F 7574 		.string	"South Pixel"
 2249      6820 5069 
 2249      7865 6C00 
 2250               	.LC4:
 2251 0040 3F3F 3F00 		.string	"???"
 2252               	.LC5:
 2253 0044 0D00      		.string	"\r"
 2254               	.LC6:
 2255 0046 0D0A 0D00 		.string	"\r\n\r"
 2256               		.section	.text.loop,"ax",@progbits
 2257               	.global	loop
 2259               	loop:
 2260               	.LFB76:
  44:../pong.c     **** 	uint32_t frameTime = get_time()-frameStart;
 2261               		.loc 2 44 0
 2262               		.cfi_startproc
 2263 0000 0F93      		push r16
 2264               	.LCFI96:
 2265               		.cfi_def_cfa_offset 4
 2266               		.cfi_offset 16, -3
 2267 0002 1F93      		push r17
 2268               	.LCFI97:
 2269               		.cfi_def_cfa_offset 5
 2270               		.cfi_offset 17, -4
 2271               	/* prologue: function */
 2272               	/* frame size = 0 */
 2273               	/* stack size = 2 */
 2274               	.L__stack_usage = 2
  45:../pong.c     **** 	if(frameTime>FRAME_LENGTH_MS){
 2275               		.loc 2 45 0
 2276 0004 0E94 0000 		call get_time
 2277 0008 0091 0000 		lds r16,frameStart
 2278 000c 1091 0000 		lds r17,frameStart+1
 2279 0010 2091 0000 		lds r18,frameStart+2
 2280 0014 3091 0000 		lds r19,frameStart+3
 2281 0018 601B      		sub r22,r16
 2282 001a 710B      		sbc r23,r17
 2283 001c 820B      		sbc r24,r18
 2284 001e 930B      		sbc r25,r19
  46:../pong.c     **** 		frameTime = frameTime - FRAME_LENGTH_MS;
 2285               		.loc 2 46 0
 2286 0020 6F3E      		cpi r22,-17
 2287 0022 4AE3      		ldi r20,58
 2288 0024 7407      		cpc r23,r20
 2289 0026 8105      		cpc r24,__zero_reg__
 2290 0028 9105      		cpc r25,__zero_reg__
 2291 002a 00F0      		brlo .L114
  47:../pong.c     **** 		frameStart += FRAME_LENGTH_MS;
 2292               		.loc 2 47 0
 2293 002c 6E5E      		subi r22,-18
 2294 002e 7A43      		sbci r23,58
 2295 0030 8109      		sbc r24,__zero_reg__
 2296 0032 9109      		sbc r25,__zero_reg__
  48:../pong.c     **** 		frameCount++;
 2297               		.loc 2 48 0
 2298 0034 0251      		subi r16,18
 2299 0036 154C      		sbci r17,-59
 2300 0038 2F4F      		sbci r18,-1
 2301 003a 3F4F      		sbci r19,-1
 2302 003c 0093 0000 		sts frameStart,r16
 2303 0040 1093 0000 		sts frameStart+1,r17
 2304 0044 2093 0000 		sts frameStart+2,r18
 2305 0048 3093 0000 		sts frameStart+3,r19
  49:../pong.c     **** 	}
 2306               		.loc 2 49 0
 2307 004c 0091 0000 		lds r16,frameCount
 2308 0050 1091 0000 		lds r17,frameCount+1
 2309 0054 2091 0000 		lds r18,frameCount+2
 2310 0058 3091 0000 		lds r19,frameCount+3
 2311 005c 0F5F      		subi r16,-1
 2312 005e 1F4F      		sbci r17,-1
 2313 0060 2F4F      		sbci r18,-1
 2314 0062 3F4F      		sbci r19,-1
 2315 0064 0093 0000 		sts frameCount,r16
 2316 0068 1093 0000 		sts frameCount+1,r17
 2317 006c 2093 0000 		sts frameCount+2,r18
 2318 0070 3093 0000 		sts frameCount+3,r19
 2319               	.L114:
  51:../pong.c     **** 		loopID = frameTime/SLOT_LENGTH_MS;
 2320               		.loc 2 51 0
 2321 0074 2DE8      		ldi r18,lo8(-115)
 2322 0076 31E0      		ldi r19,lo8(1)
 2323 0078 40E0      		ldi r20,0
 2324 007a 50E0      		ldi r21,0
 2325 007c 0E94 0000 		call __udivmodsi4
 2326 0080 8091 0000 		lds r24,loopID
 2327 0084 9091 0000 		lds r25,loopID+1
 2328 0088 A0E0      		ldi r26,0
 2329 008a B0E0      		ldi r27,0
 2330 008c 8217      		cp r24,r18
 2331 008e 9307      		cpc r25,r19
 2332 0090 A407      		cpc r26,r20
 2333 0092 B507      		cpc r27,r21
 2334 0094 01F0      		breq .L115
  52:../pong.c     **** 		if(loopID==mySlot){
 2335               		.loc 2 52 0
 2336 0096 C901      		movw r24,r18
 2337 0098 2093 0000 		sts loopID,r18
 2338 009c 3093 0000 		sts loopID+1,r19
  53:../pong.c     **** 			broadcast_rnb_data();
 2339               		.loc 2 53 0
 2340 00a0 2091 0000 		lds r18,mySlot
 2341 00a4 3091 0000 		lds r19,mySlot+1
 2342 00a8 8217      		cp r24,r18
 2343 00aa 9307      		cpc r25,r19
 2344 00ac 01F0      		breq .L158
  56:../pong.c     **** 			qsort(nearBots, NUM_TRACKED_BOTS+1, sizeof(OtherBot), nearBotsBearingCmp);
 2345               		.loc 2 56 0
 2346 00ae 8597      		sbiw r24,37
 2347 00b0 01F4      		brne .+2
 2348 00b2 00C0      		rjmp .L159
 2349               	.L117:
 2350               	.LBB184:
 2351               	.LBB185:
 159:../pong.c     **** 		uint32_t now = get_time();
 2352               		.loc 2 159 0
 2353 00b4 8091 0000 		lds r24,theBall
 2354 00b8 9091 0000 		lds r25,theBall+1
 2355 00bc A091 0000 		lds r26,theBall+2
 2356 00c0 B091 0000 		lds r27,theBall+3
 2357 00c4 892B      		or r24,r25
 2358 00c6 8A2B      		or r24,r26
 2359 00c8 8B2B      		or r24,r27
 2360 00ca 01F4      		brne .L160
 2361               	.L127:
 2362               	.LBE185:
 2363               	.LBE184:
  78:../pong.c     **** 	}
 2364               		.loc 2 78 0
 2365 00cc 0E94 0000 		call updateColor
 2366               	.L115:
  80:../pong.c     **** 		checkLightLevel();
 2367               		.loc 2 80 0
 2368 00d0 8091 0000 		lds r24,myState
 2369 00d4 80FF      		sbrs r24,0
 2370 00d6 00C0      		rjmp .L128
  80:../pong.c     **** 		checkLightLevel();
 2371               		.loc 2 80 0 is_stmt 0 discriminator 1
 2372 00d8 8371      		andi r24,lo8(19)
 2373 00da 01F4      		brne .L161
 2374               	.L128:
  83:../pong.c     **** 		RNB_DEBUG_PRINT("\t(RNB) ID: %04X | R: %4u B: %4d H: %4d\r\n", id, range, bearing, heading);
 2375               		.loc 2 83 0 is_stmt 1
 2376 00dc 8091 0000 		lds r24,rnb_updated
 2377 00e0 8823      		tst r24
 2378 00e2 01F0      		breq .L129
  85:../pong.c     **** 		rnb_updated=0;
 2379               		.loc 2 85 0
 2380 00e4 2091 0000 		lds r18,last_good_rnb+4
 2381 00e8 3091 0000 		lds r19,last_good_rnb+4+1
 2382 00ec 4091 0000 		lds r20,last_good_rnb+2
 2383 00f0 5091 0000 		lds r21,last_good_rnb+2+1
 2384 00f4 6091 0000 		lds r22,last_good_rnb
 2385 00f8 7091 0000 		lds r23,last_good_rnb+1
 2386 00fc 8091 0000 		lds r24,last_good_rnb+6
 2387 0100 9091 0000 		lds r25,last_good_rnb+6+1
 2388 0104 0E94 0000 		call useRNBmeas
  86:../pong.c     **** 	}
 2389               		.loc 2 86 0
 2390 0108 1092 0000 		sts rnb_updated,__zero_reg__
 2391               	.L129:
  88:../pong.c     **** }
 2392               		.loc 2 88 0
 2393 010c 81E1      		ldi r24,lo8(17)
 2394 010e 90E0      		ldi r25,0
 2395               	/* epilogue start */
  89:../pong.c     **** 
 2396               		.loc 2 89 0
 2397 0110 1F91      		pop r17
 2398 0112 0F91      		pop r16
  88:../pong.c     **** }
 2399               		.loc 2 88 0
 2400 0114 0C94 0000 		jmp delay_ms
 2401               	.L161:
  81:../pong.c     **** 	}
 2402               		.loc 2 81 0
 2403 0118 0E94 0000 		call checkLightLevel
 2404 011c 00C0      		rjmp .L128
 2405               	.L160:
 2406               	.LBB187:
 2407               	.LBB186:
 2408 011e 0E94 0000 		call updateBall.part.1
 2409 0122 00C0      		rjmp .L127
 2410               	.L158:
 2411               	.LBE186:
 2412               	.LBE187:
  54:../pong.c     **** 			schedule_task(RNB_DUR+20, sendBotPosMsg, NULL);
 2413               		.loc 2 54 0
 2414 0124 0E94 0000 		call broadcast_rnb_data
  55:../pong.c     **** 		}else if(loopID==SLOTS_PER_FRAME-1){
 2415               		.loc 2 55 0
 2416 0128 20E0      		ldi r18,0
 2417 012a 30E0      		ldi r19,0
 2418 012c 40E0      		ldi r20,lo8(gs(sendBotPosMsg))
 2419 012e 50E0      		ldi r21,hi8(gs(sendBotPosMsg))
 2420 0130 60EF      		ldi r22,lo8(-16)
 2421 0132 70E0      		ldi r23,0
 2422 0134 80E0      		ldi r24,0
 2423 0136 90E0      		ldi r25,0
 2424 0138 0E94 0000 		call schedule_task
 2425 013c 00C0      		rjmp .L117
 2426               	.L159:
  57:../pong.c     **** 			printf_P(PSTR("\nID: %04X T: %lu [ "), get_droplet_id(), get_time());
 2427               		.loc 2 57 0
 2428 013e 20E0      		ldi r18,lo8(gs(nearBotsBearingCmp))
 2429 0140 30E0      		ldi r19,hi8(gs(nearBotsBearingCmp))
 2430 0142 48E0      		ldi r20,lo8(8)
 2431 0144 50E0      		ldi r21,0
 2432 0146 6DE0      		ldi r22,lo8(13)
 2433 0148 70E0      		ldi r23,0
 2434 014a 80E0      		ldi r24,lo8(nearBots)
 2435 014c 90E0      		ldi r25,hi8(nearBots)
 2436 014e 0E94 0000 		call qsort
  58:../pong.c     **** 			switch(myState){
 2437               		.loc 2 58 0
 2438 0152 0E94 0000 		call get_time
 2439 0156 9F93      		push r25
 2440               	.LCFI98:
 2441               		.cfi_def_cfa_offset 6
 2442 0158 8F93      		push r24
 2443               	.LCFI99:
 2444               		.cfi_def_cfa_offset 7
 2445 015a 7F93      		push r23
 2446               	.LCFI100:
 2447               		.cfi_def_cfa_offset 8
 2448 015c 6F93      		push r22
 2449               	.LCFI101:
 2450               		.cfi_def_cfa_offset 9
 2451 015e 8091 0000 		lds r24,droplet_ID+1
 2452 0162 8F93      		push r24
 2453               	.LCFI102:
 2454               		.cfi_def_cfa_offset 10
 2455 0164 8091 0000 		lds r24,droplet_ID
 2456 0168 8F93      		push r24
 2457               	.LCFI103:
 2458               		.cfi_def_cfa_offset 11
 2459 016a 80E0      		ldi r24,lo8(__c.5603)
 2460 016c 90E0      		ldi r25,hi8(__c.5603)
 2461 016e 9F93      		push r25
 2462               	.LCFI104:
 2463               		.cfi_def_cfa_offset 12
 2464 0170 8F93      		push r24
 2465               	.LCFI105:
 2466               		.cfi_def_cfa_offset 13
 2467 0172 0E94 0000 		call printf_P
  59:../pong.c     **** 				case STATE_PIXEL:					printf("Pixel");		break;
 2468               		.loc 2 59 0
 2469 0176 8DB7      		in r24,__SP_L__
 2470 0178 9EB7      		in r25,__SP_H__
 2471 017a 0896      		adiw r24,8
 2472 017c 8DBF      		out __SP_L__,r24
 2473 017e 9EBF      		out __SP_H__,r25
 2474               	.LCFI106:
 2475               		.cfi_def_cfa_offset 5
 2476 0180 8091 0000 		lds r24,myState
 2477 0184 8131      		cpi r24,lo8(17)
 2478 0186 01F4      		brne .+2
 2479 0188 00C0      		rjmp .L120
 2480 018a 8331      		cpi r24,lo8(19)
 2481 018c 01F4      		brne .+2
 2482 018e 00C0      		rjmp .L121
 2483 0190 8130      		cpi r24,lo8(1)
 2484 0192 01F4      		brne .+2
 2485 0194 00C0      		rjmp .L162
  63:../pong.c     **** 			}
 2486               		.loc 2 63 0
 2487 0196 80E0      		ldi r24,lo8(.LC4)
 2488 0198 90E0      		ldi r25,hi8(.LC4)
 2489 019a 9F93      		push r25
 2490               	.LCFI107:
 2491               		.cfi_def_cfa_offset 6
 2492 019c 8F93      		push r24
 2493               	.LCFI108:
 2494               		.cfi_def_cfa_offset 7
 2495 019e 0E94 0000 		call printf
 2496 01a2 0F90      		pop __tmp_reg__
 2497 01a4 0F90      		pop __tmp_reg__
 2498               	.LCFI109:
 2499               		.cfi_def_cfa_offset 5
 2500               	.L123:
  65:../pong.c     **** 			if(POS_DEFINED(&myPos)){
 2501               		.loc 2 65 0
 2502 01a6 80E0      		ldi r24,lo8(__c.5610)
 2503 01a8 90E0      		ldi r25,hi8(__c.5610)
 2504 01aa 9F93      		push r25
 2505               	.LCFI110:
 2506               		.cfi_def_cfa_offset 6
 2507 01ac 8F93      		push r24
 2508               	.LCFI111:
 2509               		.cfi_def_cfa_offset 7
 2510 01ae 0E94 0000 		call printf_P
  66:../pong.c     **** 				printf_P(PSTR("\tMy Pos: {%d, %d, %d}\r\n"), myPos.x, myPos.y, myPos.o);
 2511               		.loc 2 66 0
 2512 01b2 8091 0000 		lds r24,myPos
 2513 01b6 9091 0000 		lds r25,myPos+1
 2514 01ba 0F90      		pop __tmp_reg__
 2515 01bc 0F90      		pop __tmp_reg__
 2516               	.LCFI112:
 2517               		.cfi_def_cfa_offset 5
 2518 01be 8115      		cp r24,__zero_reg__
 2519 01c0 20E8      		ldi r18,-128
 2520 01c2 9207      		cpc r25,r18
 2521 01c4 01F4      		brne .+2
 2522 01c6 00C0      		rjmp .L124
  66:../pong.c     **** 				printf_P(PSTR("\tMy Pos: {%d, %d, %d}\r\n"), myPos.x, myPos.y, myPos.o);
 2523               		.loc 2 66 0 is_stmt 0 discriminator 1
 2524 01c8 2091 0000 		lds r18,myPos+2
 2525 01cc 3091 0000 		lds r19,myPos+2+1
 2526 01d0 2115      		cp r18,__zero_reg__
 2527 01d2 40E8      		ldi r20,-128
 2528 01d4 3407      		cpc r19,r20
 2529 01d6 01F4      		brne .+2
 2530 01d8 00C0      		rjmp .L124
  66:../pong.c     **** 				printf_P(PSTR("\tMy Pos: {%d, %d, %d}\r\n"), myPos.x, myPos.y, myPos.o);
 2531               		.loc 2 66 0 discriminator 2
 2532 01da 4091 0000 		lds r20,myPos+4
 2533 01de 5091 0000 		lds r21,myPos+4+1
 2534 01e2 4115      		cp r20,__zero_reg__
 2535 01e4 60E8      		ldi r22,-128
 2536 01e6 5607      		cpc r21,r22
 2537 01e8 01F4      		brne .+2
 2538 01ea 00C0      		rjmp .L124
  67:../pong.c     **** 				printPosCovar(&myPosCovar);
 2539               		.loc 2 67 0 is_stmt 1
 2540 01ec 5F93      		push r21
 2541               	.LCFI113:
 2542               		.cfi_def_cfa_offset 6
 2543 01ee 4F93      		push r20
 2544               	.LCFI114:
 2545               		.cfi_def_cfa_offset 7
 2546 01f0 3F93      		push r19
 2547               	.LCFI115:
 2548               		.cfi_def_cfa_offset 8
 2549 01f2 2F93      		push r18
 2550               	.LCFI116:
 2551               		.cfi_def_cfa_offset 9
 2552 01f4 9F93      		push r25
 2553               	.LCFI117:
 2554               		.cfi_def_cfa_offset 10
 2555 01f6 8F93      		push r24
 2556               	.LCFI118:
 2557               		.cfi_def_cfa_offset 11
 2558 01f8 80E0      		ldi r24,lo8(__c.5612)
 2559 01fa 90E0      		ldi r25,hi8(__c.5612)
 2560 01fc 9F93      		push r25
 2561               	.LCFI119:
 2562               		.cfi_def_cfa_offset 12
 2563 01fe 8F93      		push r24
 2564               	.LCFI120:
 2565               		.cfi_def_cfa_offset 13
 2566 0200 0E94 0000 		call printf_P
  68:../pong.c     **** 				printf("\r\n");
 2567               		.loc 2 68 0
 2568 0204 80E0      		ldi r24,lo8(myPosCovar)
 2569 0206 90E0      		ldi r25,hi8(myPosCovar)
 2570 0208 0E94 0000 		call printPosCovar
  69:../pong.c     **** 			}else{
 2571               		.loc 2 69 0
 2572 020c 80E0      		ldi r24,lo8(.LC5)
 2573 020e 90E0      		ldi r25,hi8(.LC5)
 2574 0210 0E94 0000 		call puts
 2575 0214 8DB7      		in r24,__SP_L__
 2576 0216 9EB7      		in r25,__SP_H__
 2577 0218 0896      		adiw r24,8
 2578 021a 8DBF      		out __SP_L__,r24
 2579 021c 9EBF      		out __SP_H__,r25
 2580               	.LCFI121:
 2581               		.cfi_def_cfa_offset 5
 2582               	.L125:
  73:../pong.c     **** 				printf_P(PSTR("\tBall ID: %hu; radius: %hu; Pos: (%d, %d) @ vel (%hd, %hd)\r\n"), theBall.id, t
 2583               		.loc 2 73 0
 2584 021e 8091 0000 		lds r24,theBall+4
 2585 0222 9091 0000 		lds r25,theBall+4+1
 2586 0226 8115      		cp r24,__zero_reg__
 2587 0228 20E8      		ldi r18,-128
 2588 022a 9207      		cpc r25,r18
 2589 022c 01F4      		brne .+2
 2590 022e 00C0      		rjmp .L117
  73:../pong.c     **** 				printf_P(PSTR("\tBall ID: %hu; radius: %hu; Pos: (%d, %d) @ vel (%hd, %hd)\r\n"), theBall.id, t
 2591               		.loc 2 73 0 is_stmt 0 discriminator 1
 2592 0230 2091 0000 		lds r18,theBall+6
 2593 0234 3091 0000 		lds r19,theBall+6+1
 2594 0238 2115      		cp r18,__zero_reg__
 2595 023a 40E8      		ldi r20,-128
 2596 023c 3407      		cpc r19,r20
 2597 023e 01F4      		brne .+2
 2598 0240 00C0      		rjmp .L117
  74:../pong.c     **** 			}
 2599               		.loc 2 74 0 is_stmt 1
 2600 0242 4091 0000 		lds r20,theBall+9
 2601 0246 642F      		mov r22,r20
 2602 0248 042E      		mov __tmp_reg__,r20
 2603 024a 000C      		lsl r0
 2604 024c 770B      		sbc r23,r23
 2605 024e 7F93      		push r23
 2606               	.LCFI122:
 2607               		.cfi_def_cfa_offset 6
 2608 0250 4F93      		push r20
 2609               	.LCFI123:
 2610               		.cfi_def_cfa_offset 7
 2611 0252 4091 0000 		lds r20,theBall+8
 2612 0256 642F      		mov r22,r20
 2613 0258 042E      		mov __tmp_reg__,r20
 2614 025a 000C      		lsl r0
 2615 025c 770B      		sbc r23,r23
 2616 025e 7F93      		push r23
 2617               	.LCFI124:
 2618               		.cfi_def_cfa_offset 8
 2619 0260 4F93      		push r20
 2620               	.LCFI125:
 2621               		.cfi_def_cfa_offset 9
 2622 0262 3F93      		push r19
 2623               	.LCFI126:
 2624               		.cfi_def_cfa_offset 10
 2625 0264 2F93      		push r18
 2626               	.LCFI127:
 2627               		.cfi_def_cfa_offset 11
 2628 0266 9F93      		push r25
 2629               	.LCFI128:
 2630               		.cfi_def_cfa_offset 12
 2631 0268 8F93      		push r24
 2632               	.LCFI129:
 2633               		.cfi_def_cfa_offset 13
 2634 026a 8091 0000 		lds r24,theBall+11
 2635 026e 1F92      		push __zero_reg__
 2636               	.LCFI130:
 2637               		.cfi_def_cfa_offset 14
 2638 0270 8F93      		push r24
 2639               	.LCFI131:
 2640               		.cfi_def_cfa_offset 15
 2641 0272 8091 0000 		lds r24,theBall+10
 2642 0276 1F92      		push __zero_reg__
 2643               	.LCFI132:
 2644               		.cfi_def_cfa_offset 16
 2645 0278 8F93      		push r24
 2646               	.LCFI133:
 2647               		.cfi_def_cfa_offset 17
 2648 027a 80E0      		ldi r24,lo8(__c.5614)
 2649 027c 90E0      		ldi r25,hi8(__c.5614)
 2650 027e 9F93      		push r25
 2651               	.LCFI134:
 2652               		.cfi_def_cfa_offset 18
 2653 0280 8F93      		push r24
 2654               	.LCFI135:
 2655               		.cfi_def_cfa_offset 19
 2656 0282 0E94 0000 		call printf_P
 2657 0286 8DB7      		in r24,__SP_L__
 2658 0288 9EB7      		in r25,__SP_H__
 2659 028a 0E96      		adiw r24,14
 2660 028c 8DBF      		out __SP_L__,r24
 2661 028e 9EBF      		out __SP_H__,r25
 2662               	.LCFI136:
 2663               		.cfi_def_cfa_offset 5
 2664 0290 00C0      		rjmp .L117
 2665               	.L121:
  62:../pong.c     **** 				default:							printf("???");			break;
 2666               		.loc 2 62 0
 2667 0292 80E0      		ldi r24,lo8(.LC3)
 2668 0294 90E0      		ldi r25,hi8(.LC3)
 2669 0296 9F93      		push r25
 2670               	.LCFI137:
 2671               		.cfi_def_cfa_offset 6
 2672 0298 8F93      		push r24
 2673               	.LCFI138:
 2674               		.cfi_def_cfa_offset 7
 2675 029a 0E94 0000 		call printf
 2676 029e 0F90      		pop __tmp_reg__
 2677 02a0 0F90      		pop __tmp_reg__
 2678               	.LCFI139:
 2679               		.cfi_def_cfa_offset 5
 2680 02a2 00C0      		rjmp .L123
 2681               	.L124:
  71:../pong.c     **** 			}
 2682               		.loc 2 71 0
 2683 02a4 80E0      		ldi r24,lo8(.LC6)
 2684 02a6 90E0      		ldi r25,hi8(.LC6)
 2685 02a8 0E94 0000 		call puts
 2686 02ac 00C0      		rjmp .L125
 2687               	.L120:
  61:../pong.c     **** 				case (STATE_PIXEL|STATE_SOUTH):		printf("South Pixel");	break;
 2688               		.loc 2 61 0
 2689 02ae 80E0      		ldi r24,lo8(.LC2)
 2690 02b0 90E0      		ldi r25,hi8(.LC2)
 2691 02b2 9F93      		push r25
 2692               	.LCFI140:
 2693               		.cfi_def_cfa_offset 6
 2694 02b4 8F93      		push r24
 2695               	.LCFI141:
 2696               		.cfi_def_cfa_offset 7
 2697 02b6 0E94 0000 		call printf
 2698 02ba 0F90      		pop __tmp_reg__
 2699 02bc 0F90      		pop __tmp_reg__
 2700               	.LCFI142:
 2701               		.cfi_def_cfa_offset 5
 2702 02be 00C0      		rjmp .L123
 2703               	.L162:
  60:../pong.c     **** 				case (STATE_PIXEL|STATE_NORTH):		printf("North Pixel");	break;
 2704               		.loc 2 60 0
 2705 02c0 80E0      		ldi r24,lo8(.LC1)
 2706 02c2 90E0      		ldi r25,hi8(.LC1)
 2707 02c4 9F93      		push r25
 2708               	.LCFI143:
 2709               		.cfi_def_cfa_offset 6
 2710 02c6 8F93      		push r24
 2711               	.LCFI144:
 2712               		.cfi_def_cfa_offset 7
 2713 02c8 0E94 0000 		call printf
 2714 02cc 0F90      		pop __tmp_reg__
 2715 02ce 0F90      		pop __tmp_reg__
 2716               	.LCFI145:
 2717               		.cfi_def_cfa_offset 5
 2718 02d0 00C0      		rjmp .L123
 2719               		.cfi_endproc
 2720               	.LFE76:
 2722               	.global	__gesf2
 2723               	.global	__subsf3
 2724               		.section	.text.updateHardBots,"ax",@progbits
 2725               	.global	updateHardBots
 2727               	updateHardBots:
 2728               	.LFB82:
 229:../pong.c     **** 	//First, making a copy of nearBots so we can sort it by a weird metric.
 2729               		.loc 2 229 0
 2730               		.cfi_startproc
 2731 0000 2F92      		push r2
 2732               	.LCFI146:
 2733               		.cfi_def_cfa_offset 4
 2734               		.cfi_offset 2, -3
 2735 0002 3F92      		push r3
 2736               	.LCFI147:
 2737               		.cfi_def_cfa_offset 5
 2738               		.cfi_offset 3, -4
 2739 0004 4F92      		push r4
 2740               	.LCFI148:
 2741               		.cfi_def_cfa_offset 6
 2742               		.cfi_offset 4, -5
 2743 0006 5F92      		push r5
 2744               	.LCFI149:
 2745               		.cfi_def_cfa_offset 7
 2746               		.cfi_offset 5, -6
 2747 0008 6F92      		push r6
 2748               	.LCFI150:
 2749               		.cfi_def_cfa_offset 8
 2750               		.cfi_offset 6, -7
 2751 000a 7F92      		push r7
 2752               	.LCFI151:
 2753               		.cfi_def_cfa_offset 9
 2754               		.cfi_offset 7, -8
 2755 000c 8F92      		push r8
 2756               	.LCFI152:
 2757               		.cfi_def_cfa_offset 10
 2758               		.cfi_offset 8, -9
 2759 000e 9F92      		push r9
 2760               	.LCFI153:
 2761               		.cfi_def_cfa_offset 11
 2762               		.cfi_offset 9, -10
 2763 0010 AF92      		push r10
 2764               	.LCFI154:
 2765               		.cfi_def_cfa_offset 12
 2766               		.cfi_offset 10, -11
 2767 0012 BF92      		push r11
 2768               	.LCFI155:
 2769               		.cfi_def_cfa_offset 13
 2770               		.cfi_offset 11, -12
 2771 0014 CF92      		push r12
 2772               	.LCFI156:
 2773               		.cfi_def_cfa_offset 14
 2774               		.cfi_offset 12, -13
 2775 0016 DF92      		push r13
 2776               	.LCFI157:
 2777               		.cfi_def_cfa_offset 15
 2778               		.cfi_offset 13, -14
 2779 0018 EF92      		push r14
 2780               	.LCFI158:
 2781               		.cfi_def_cfa_offset 16
 2782               		.cfi_offset 14, -15
 2783 001a FF92      		push r15
 2784               	.LCFI159:
 2785               		.cfi_def_cfa_offset 17
 2786               		.cfi_offset 15, -16
 2787 001c 0F93      		push r16
 2788               	.LCFI160:
 2789               		.cfi_def_cfa_offset 18
 2790               		.cfi_offset 16, -17
 2791 001e 1F93      		push r17
 2792               	.LCFI161:
 2793               		.cfi_def_cfa_offset 19
 2794               		.cfi_offset 17, -18
 2795 0020 CF93      		push r28
 2796               	.LCFI162:
 2797               		.cfi_def_cfa_offset 20
 2798               		.cfi_offset 28, -19
 2799 0022 DF93      		push r29
 2800               	.LCFI163:
 2801               		.cfi_def_cfa_offset 21
 2802               		.cfi_offset 29, -20
 2803 0024 CDB7      		in r28,__SP_L__
 2804 0026 DEB7      		in r29,__SP_H__
 2805               	.LCFI164:
 2806               		.cfi_def_cfa_register 28
 2807 0028 C856      		subi r28,104
 2808 002a D109      		sbc r29,__zero_reg__
 2809               	.LCFI165:
 2810               		.cfi_def_cfa_offset 125
 2811 002c CDBF      		out __SP_L__,r28
 2812 002e DEBF      		out __SP_H__,r29
 2813               	/* prologue: function */
 2814               	/* frame size = 104 */
 2815               	/* stack size = 122 */
 2816               	.L__stack_usage = 122
 232:../pong.c     **** 	uint8_t numNearBots = 0;
 2817               		.loc 2 232 0
 2818 0030 88E4      		ldi r24,lo8(72)
 2819 0032 E0E0      		ldi r30,lo8(nearBots)
 2820 0034 F0E0      		ldi r31,hi8(nearBots)
 2821 0036 DE01      		movw r26,r28
 2822 0038 1196      		adiw r26,1
 2823               		0:
 2824 003a 0190      		ld r0,Z+
 2825 003c 0D92      		st X+,r0
 2826 003e 8A95      		dec r24
 2827 0040 01F4      		brne 0b
 2828               	.LVL153:
 2829 0042 A0E0      		ldi r26,lo8(nearBots)
 2830 0044 B0E0      		ldi r27,hi8(nearBots)
 2831 0046 8E01      		movw r16,r28
 2832 0048 0F5F      		subi r16,-1
 2833 004a 1F4F      		sbci r17,-1
 2834 004c 9E01      		movw r18,r28
 2835 004e 2F59      		subi r18,-97
 2836 0050 3F4F      		sbci r19,-1
 2837 0052 F801      		movw r30,r16
 233:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 2838               		.loc 2 233 0
 2839 0054 F12C      		mov r15,__zero_reg__
 2840               	.LVL154:
 2841               	.L165:
 2842               	.LBB188:
 235:../pong.c     **** 		nearBotsCopy[i].id   = nearBots[i].id;
 2843               		.loc 2 235 0
 2844 0056 1696      		adiw r26,6
 2845 0058 8D91      		ld r24,X+
 2846 005a 9C91      		ld r25,X
 2847 005c 1797      		sbiw r26,6+1
 2848 005e 0097      		sbiw r24,0
 2849 0060 01F0      		breq .L164
 236:../pong.c     **** 		nearBotsCopy[i].pos.x    = nearBots[i].pos.x;
 2850               		.loc 2 236 0
 2851 0062 8683      		std Z+6,r24
 2852 0064 9783      		std Z+7,r25
 237:../pong.c     **** 		nearBotsCopy[i].pos.y    = nearBots[i].pos.y;
 2853               		.loc 2 237 0
 2854 0066 8D91      		ld r24,X+
 2855 0068 9C91      		ld r25,X
 2856 006a 1197      		sbiw r26,1
 2857 006c 8083      		st Z,r24
 2858 006e 9183      		std Z+1,r25
 238:../pong.c     **** 		nearBotsCopy[i].pos.o    = nearBots[i].pos.o;
 2859               		.loc 2 238 0
 2860 0070 1296      		adiw r26,2
 2861 0072 8D91      		ld r24,X+
 2862 0074 9C91      		ld r25,X
 2863 0076 1397      		sbiw r26,2+1
 2864 0078 8283      		std Z+2,r24
 2865 007a 9383      		std Z+3,r25
 239:../pong.c     **** 		numNearBots++;
 2866               		.loc 2 239 0
 2867 007c 1496      		adiw r26,4
 2868 007e 8D91      		ld r24,X+
 2869 0080 9C91      		ld r25,X
 2870 0082 1597      		sbiw r26,4+1
 2871 0084 8483      		std Z+4,r24
 2872 0086 9583      		std Z+5,r25
 240:../pong.c     **** 	}
 2873               		.loc 2 240 0
 2874 0088 F394      		inc r15
 2875               	.LVL155:
 2876               	.L164:
 2877 008a 1896      		adiw r26,8
 2878 008c 3896      		adiw r30,8
 234:../pong.c     **** 		if(nearBots[i].id==0) continue;
 2879               		.loc 2 234 0 discriminator 2
 2880 008e 2E17      		cp r18,r30
 2881 0090 3F07      		cpc r19,r31
 2882 0092 01F4      		brne .L165
 2883               	.LBE188:
 242:../pong.c     **** 	//sort nearBots according to their bearing.
 2884               		.loc 2 242 0
 2885 0094 0E94 0000 		call cleanHardBots
 2886               	.LVL156:
 247:../pong.c     **** 	//go through each near bot by bearing and add it to hardBots if the gap in bearings is above 120 d
 2887               		.loc 2 247 0
 2888 0098 2F2D      		mov r18,r15
 2889 009a 30E0      		ldi r19,0
 2890 009c A996      		adiw r28,103-62
 2891 009e 2EAF      		std Y+62,r18
 2892 00a0 3FAF      		std Y+63,r19
 2893 00a2 A997      		sbiw r28,103-62
 2894 00a4 20E0      		ldi r18,lo8(gs(nearBotsDistCmp))
 2895 00a6 30E0      		ldi r19,hi8(gs(nearBotsDistCmp))
 2896 00a8 48E0      		ldi r20,lo8(8)
 2897 00aa 50E0      		ldi r21,0
 2898 00ac A996      		adiw r28,103-62
 2899 00ae 6EAD      		ldd r22,Y+62
 2900 00b0 7FAD      		ldd r23,Y+63
 2901 00b2 A997      		sbiw r28,103-62
 2902 00b4 CE01      		movw r24,r28
 2903 00b6 0196      		adiw r24,1
 2904 00b8 0E94 0000 		call qsort
 2905               	.LVL157:
 2906               	.LBB189:
 249:../pong.c     **** 		if(nearBotsCopy[i].id==0) continue;
 2907               		.loc 2 249 0
 2908 00bc FF20      		tst r15
 2909 00be 01F4      		brne .+2
 2910 00c0 00C0      		rjmp .L178
 2911 00c2 FA94      		dec r15
 2912               	.LVL158:
 2913 00c4 8F2D      		mov r24,r15
 2914 00c6 90E0      		ldi r25,0
 2915 00c8 FC01      		movw r30,r24
 2916 00ca 3296      		adiw r30,2
 2917 00cc A796      		adiw r28,101-62
 2918 00ce EEAF      		std Y+62,r30
 2919 00d0 FFAF      		std Y+63,r31
 2920 00d2 A797      		sbiw r28,101-62
 2921 00d4 EE24      		clr r14
 2922 00d6 E394      		inc r14
 2923 00d8 F12C      		mov r15,__zero_reg__
 2924 00da 00C0      		rjmp .L177
 2925               	.LVL159:
 2926               	.L169:
 2927 00dc 085F      		subi r16,-8
 2928 00de 1F4F      		sbci r17,-1
 2929 00e0 3FEF      		ldi r19,-1
 2930 00e2 E31A      		sub r14,r19
 2931 00e4 F30A      		sbc r15,r19
 2932               	.LVL160:
 249:../pong.c     **** 		if(nearBotsCopy[i].id==0) continue;
 2933               		.loc 2 249 0 is_stmt 0 discriminator 2
 2934 00e6 A796      		adiw r28,101-62
 2935 00e8 8EAD      		ldd r24,Y+62
 2936 00ea 9FAD      		ldd r25,Y+63
 2937 00ec A797      		sbiw r28,101-62
 2938 00ee 8E15      		cp r24,r14
 2939 00f0 9F05      		cpc r25,r15
 2940 00f2 01F4      		brne .+2
 2941 00f4 00C0      		rjmp .L178
 2942               	.LVL161:
 2943               	.L177:
 2944               	.LBB190:
 250:../pong.c     **** 		uint8_t nextI = (i+1)%numNearBots;
 2945               		.loc 2 250 0 is_stmt 1
 2946 00f6 F801      		movw r30,r16
 2947 00f8 C680      		ldd r12,Z+6
 2948 00fa D780      		ldd r13,Z+7
 2949 00fc C114      		cp r12,__zero_reg__
 2950 00fe D104      		cpc r13,__zero_reg__
 2951 0100 01F0      		breq .L169
 251:../pong.c     **** 		int16_t iBearing =  rad_to_deg(atan2(nearBotsCopy[i].pos.y - myPos.y, nearBotsCopy[i].pos.x - myP
 2952               		.loc 2 251 0
 2953 0102 C701      		movw r24,r14
 2954 0104 A996      		adiw r28,103-62
 2955 0106 6EAD      		ldd r22,Y+62
 2956 0108 7FAD      		ldd r23,Y+63
 2957 010a A997      		sbiw r28,103-62
 2958 010c 0E94 0000 		call __divmodhi4
 2959 0110 5C01      		movw r10,r24
 2960               	.LVL162:
 252:../pong.c     **** 		int16_t iNextBearing = rad_to_deg(atan2(nearBotsCopy[nextI].pos.y - myPos.y, nearBotsCopy[nextI].
 2961               		.loc 2 252 0
 2962 0112 8090 0000 		lds r8,myPos
 2963 0116 9090 0000 		lds r9,myPos+1
 2964 011a 2090 0000 		lds r2,myPos+2
 2965 011e 3090 0000 		lds r3,myPos+2+1
 2966 0122 6081      		ld r22,Z
 2967 0124 7181      		ldd r23,Z+1
 2968 0126 6819      		sub r22,r8
 2969 0128 7909      		sbc r23,r9
 2970 012a 072E      		mov __tmp_reg__,r23
 2971 012c 000C      		lsl r0
 2972 012e 880B      		sbc r24,r24
 2973 0130 990B      		sbc r25,r25
 2974 0132 0E94 0000 		call __floatsisf
 2975               	.LVL163:
 2976 0136 2B01      		movw r4,r22
 2977 0138 3C01      		movw r6,r24
 2978 013a F801      		movw r30,r16
 2979 013c 6281      		ldd r22,Z+2
 2980 013e 7381      		ldd r23,Z+3
 2981 0140 6219      		sub r22,r2
 2982 0142 7309      		sbc r23,r3
 2983 0144 072E      		mov __tmp_reg__,r23
 2984 0146 000C      		lsl r0
 2985 0148 880B      		sbc r24,r24
 2986 014a 990B      		sbc r25,r25
 2987 014c 0E94 0000 		call __floatsisf
 2988               	.LVL164:
 2989 0150 A301      		movw r20,r6
 2990 0152 9201      		movw r18,r4
 2991 0154 0E94 0000 		call atan2
 2992               	.LVL165:
 2993 0158 2B01      		movw r4,r22
 2994 015a 3C01      		movw r6,r24
 2995               	.LVL166:
 2996               	.LBB191:
 2997               	.LBB192:
 2998               	.LBB193:
 2999               	.LBB194:
 3000               		.file 3 "../include/range_algs.h"
   1:../include/range_algs.h **** #pragma once
   2:../include/range_algs.h **** 
   3:../include/range_algs.h **** #include <avr/io.h>
   4:../include/range_algs.h **** #include <math.h>
   5:../include/range_algs.h **** #include <avr/pgmspace.h>
   6:../include/range_algs.h **** 
   7:../include/range_algs.h **** //#include "droplet_init.h"
   8:../include/range_algs.h **** #include "scheduler.h"
   9:../include/range_algs.h **** #include "ir_sensor.h"
  10:../include/range_algs.h **** #include "rgb_led.h"
  11:../include/range_algs.h **** #include "ir_comm.h"
  12:../include/range_algs.h **** #include "i2c.h"
  13:../include/range_algs.h **** #include "delay_x.h"
  14:../include/range_algs.h **** 
  15:../include/range_algs.h **** #define DROPLET_RADIUS 22U  //mm
  16:../include/range_algs.h **** #define DROPLET_RADIUS_SQ 484U //mm
  17:../include/range_algs.h **** #define DROPLET_DIAMETER 44 //mm
  18:../include/range_algs.h **** 
  19:../include/range_algs.h **** //Synchronization Timing Constants:
  20:../include/range_algs.h **** #define POST_BROADCAST_DELAY			30U
  21:../include/range_algs.h **** #define TIME_FOR_SET_IR_POWERS			2U
  22:../include/range_algs.h **** #define TIME_FOR_IR_MEAS				12U
  23:../include/range_algs.h **** #define TIME_FOR_GET_IR_VALS			16U
  24:../include/range_algs.h **** #define DELAY_BETWEEN_RB_TRANSMISSIONS	10U
  25:../include/range_algs.h **** 
  26:../include/range_algs.h **** //Constants for rnb processing:
  27:../include/range_algs.h **** #define MIN_MATRIX_SUM_THRESH	115
  28:../include/range_algs.h **** #define ELEVEN_SQRT3		   19.0525588833f
  29:../include/range_algs.h **** #define SQRT3_OVER2				0.8660254038f
  30:../include/range_algs.h **** #define RNB_DUR					220
  31:../include/range_algs.h **** 
  32:../include/range_algs.h **** typedef struct list_el {
  33:../include/range_algs.h **** 	float Rx;
  34:../include/range_algs.h **** 	float Ry;
  35:../include/range_algs.h **** 	float rijMag;
  36:../include/range_algs.h **** 	uint8_t e;
  37:../include/range_algs.h **** 	uint8_t s;
  38:../include/range_algs.h **** 	struct list_el *next;
  39:../include/range_algs.h **** } rVectorNode;
  40:../include/range_algs.h **** 
  41:../include/range_algs.h **** typedef struct rnb_data {
  42:../include/range_algs.h **** 	uint16_t range;
  43:../include/range_algs.h **** 	int16_t bearing;
  44:../include/range_algs.h **** 	int16_t heading;
  45:../include/range_algs.h **** 	id_t id;
  46:../include/range_algs.h **** } rnb;
  47:../include/range_algs.h **** 
  48:../include/range_algs.h **** 
  49:../include/range_algs.h **** rnb last_good_rnb;
  50:../include/range_algs.h **** volatile uint8_t rnb_updated;
  51:../include/range_algs.h **** volatile id_t rnbCmdID;
  52:../include/range_algs.h **** volatile uint32_t rnbCmdSentTime;
  53:../include/range_algs.h **** volatile uint8_t rnbProcessingFlag;
  54:../include/range_algs.h **** 
  55:../include/range_algs.h **** void range_algs_init(void);
  56:../include/range_algs.h **** 
  57:../include/range_algs.h **** void broadcast_rnb_data(void); //takes about 142ms.
  58:../include/range_algs.h **** //void receive_rnb_data(void);
  59:../include/range_algs.h **** void use_rnb_data(void);
  60:../include/range_algs.h **** 
  61:../include/range_algs.h **** 
  62:../include/range_algs.h **** void ir_range_meas(void);
  63:../include/range_algs.h **** void ir_range_blast(uint8_t power);
  64:../include/range_algs.h **** 
  65:../include/range_algs.h **** inline int8_t sgn(float x){
  66:../include/range_algs.h **** 	return (0<x)-(x<0);
  67:../include/range_algs.h **** }
  68:../include/range_algs.h **** 
  69:../include/range_algs.h **** inline int16_t pretty_angle_deg(int16_t angle){
  70:../include/range_algs.h **** 	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
  71:../include/range_algs.h **** }
  72:../include/range_algs.h **** 
  73:../include/range_algs.h **** inline float pretty_angle(float angle){
  74:../include/range_algs.h **** 	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) +
 3001               		.loc 3 74 0
 3002 015c 20E0      		ldi r18,0
 3003 015e 30E0      		ldi r19,0
 3004 0160 A901      		movw r20,r18
 3005 0162 0E94 0000 		call __gesf2
 3006               	.LVL167:
 3007 0166 2BED      		ldi r18,lo8(-37)
 3008 0168 3FE0      		ldi r19,lo8(15)
 3009 016a 49E4      		ldi r20,lo8(73)
 3010 016c 50E4      		ldi r21,lo8(64)
 3011 016e 87FD      		sbrc r24,7
 3012 0170 00C0      		rjmp .L192
 3013 0172 C301      		movw r24,r6
 3014 0174 B201      		movw r22,r4
 3015 0176 0E94 0000 		call __addsf3
 3016               	.LVL168:
 3017 017a 2BED      		ldi r18,lo8(-37)
 3018 017c 3FE0      		ldi r19,lo8(15)
 3019 017e 49EC      		ldi r20,lo8(-55)
 3020 0180 50E4      		ldi r21,lo8(64)
 3021 0182 0E94 0000 		call fmod
 3022               	.LVL169:
 3023 0186 2BED      		ldi r18,lo8(-37)
 3024 0188 3FE0      		ldi r19,lo8(15)
 3025 018a 49E4      		ldi r20,lo8(73)
 3026 018c 50E4      		ldi r21,lo8(64)
 3027 018e 0E94 0000 		call __subsf3
 3028               	.LVL170:
 3029               	.L172:
 3030               	.LBE194:
 3031               	.LBE193:
 3032               	.LBE192:
 3033               	.LBE191:
 252:../pong.c     **** 		int16_t iNextBearing = rad_to_deg(atan2(nearBotsCopy[nextI].pos.y - myPos.y, nearBotsCopy[nextI].
 3034               		.loc 2 252 0
 3035 0192 2BED      		ldi r18,lo8(-37)
 3036 0194 3FE0      		ldi r19,lo8(15)
 3037 0196 49E4      		ldi r20,lo8(73)
 3038 0198 50E4      		ldi r21,lo8(64)
 3039 019a 0E94 0000 		call __divsf3
 3040               	.LVL171:
 3041 019e 20E0      		ldi r18,0
 3042 01a0 30E0      		ldi r19,0
 3043 01a2 44E3      		ldi r20,lo8(52)
 3044 01a4 53E4      		ldi r21,lo8(67)
 3045 01a6 0E94 0000 		call __mulsf3
 3046               	.LVL172:
 3047 01aa 0E94 0000 		call __fixsfsi
 3048               	.LVL173:
 3049 01ae 2B01      		movw r4,r22
 3050 01b0 3C01      		movw r6,r24
 3051               	.LVL174:
 253:../pong.c     **** 		uint8_t difference = abs((iBearing-iNextBearing + 540)%360 - 180) ;
 3052               		.loc 2 253 0
 3053 01b2 9501      		movw r18,r10
 3054 01b4 220F      		lsl r18
 3055 01b6 331F      		rol r19
 3056 01b8 220F      		lsl r18
 3057 01ba 331F      		rol r19
 3058 01bc 220F      		lsl r18
 3059 01be 331F      		rol r19
 3060 01c0 A596      		adiw r28,99-62
 3061 01c2 2EAF      		std Y+62,r18
 3062 01c4 3FAF      		std Y+63,r19
 3063 01c6 A597      		sbiw r28,99-62
 3064 01c8 81E0      		ldi r24,lo8(1)
 3065 01ca 90E0      		ldi r25,0
 3066 01cc 8C0F      		add r24,r28
 3067 01ce 9D1F      		adc r25,r29
 3068 01d0 820F      		add r24,r18
 3069 01d2 931F      		adc r25,r19
 3070 01d4 A396      		adiw r28,97-62
 3071 01d6 8EAF      		std Y+62,r24
 3072 01d8 9FAF      		std Y+63,r25
 3073 01da A397      		sbiw r28,97-62
 3074 01dc FC01      		movw r30,r24
 3075 01de 6081      		ld r22,Z
 3076 01e0 7181      		ldd r23,Z+1
 3077 01e2 6819      		sub r22,r8
 3078 01e4 7909      		sbc r23,r9
 3079 01e6 072E      		mov __tmp_reg__,r23
 3080 01e8 000C      		lsl r0
 3081 01ea 880B      		sbc r24,r24
 3082 01ec 990B      		sbc r25,r25
 3083 01ee 0E94 0000 		call __floatsisf
 3084               	.LVL175:
 3085 01f2 4B01      		movw r8,r22
 3086 01f4 5C01      		movw r10,r24
 3087 01f6 A396      		adiw r28,97-62
 3088 01f8 EEAD      		ldd r30,Y+62
 3089 01fa FFAD      		ldd r31,Y+63
 3090 01fc A397      		sbiw r28,97-62
 3091 01fe 6281      		ldd r22,Z+2
 3092 0200 7381      		ldd r23,Z+3
 3093 0202 6219      		sub r22,r2
 3094 0204 7309      		sbc r23,r3
 3095 0206 072E      		mov __tmp_reg__,r23
 3096 0208 000C      		lsl r0
 3097 020a 880B      		sbc r24,r24
 3098 020c 990B      		sbc r25,r25
 3099 020e 0E94 0000 		call __floatsisf
 3100               	.LVL176:
 3101 0212 A501      		movw r20,r10
 3102 0214 9401      		movw r18,r8
 3103 0216 0E94 0000 		call atan2
 3104               	.LVL177:
 3105 021a 4B01      		movw r8,r22
 3106 021c 5C01      		movw r10,r24
 3107               	.LVL178:
 3108               	.LBB198:
 3109               	.LBB199:
 3110               	.LBB200:
 3111               	.LBB201:
 3112               		.loc 3 74 0
 3113 021e 20E0      		ldi r18,0
 3114 0220 30E0      		ldi r19,0
 3115 0222 A901      		movw r20,r18
 3116 0224 0E94 0000 		call __gesf2
 3117               	.LVL179:
 3118 0228 2BED      		ldi r18,lo8(-37)
 3119 022a 3FE0      		ldi r19,lo8(15)
 3120 022c 49E4      		ldi r20,lo8(73)
 3121 022e 50E4      		ldi r21,lo8(64)
 3122 0230 87FD      		sbrc r24,7
 3123 0232 00C0      		rjmp .L193
 3124 0234 C501      		movw r24,r10
 3125 0236 B401      		movw r22,r8
 3126 0238 0E94 0000 		call __addsf3
 3127               	.LVL180:
 3128 023c 2BED      		ldi r18,lo8(-37)
 3129 023e 3FE0      		ldi r19,lo8(15)
 3130 0240 49EC      		ldi r20,lo8(-55)
 3131 0242 50E4      		ldi r21,lo8(64)
 3132 0244 0E94 0000 		call fmod
 3133               	.LVL181:
 3134 0248 2BED      		ldi r18,lo8(-37)
 3135 024a 3FE0      		ldi r19,lo8(15)
 3136 024c 49E4      		ldi r20,lo8(73)
 3137 024e 50E4      		ldi r21,lo8(64)
 3138 0250 0E94 0000 		call __subsf3
 3139               	.LVL182:
 3140               	.L175:
 3141               	.LBE201:
 3142               	.LBE200:
 3143               	.LBE199:
 3144               	.LBE198:
 255:../pong.c     **** 			addHardBot(nearBotsCopy[i].id);
 3145               		.loc 2 255 0
 3146 0254 2BED      		ldi r18,lo8(-37)
 3147 0256 3FE0      		ldi r19,lo8(15)
 3148 0258 49E4      		ldi r20,lo8(73)
 3149 025a 50E4      		ldi r21,lo8(64)
 3150 025c 0E94 0000 		call __divsf3
 3151               	.LVL183:
 3152 0260 20E0      		ldi r18,0
 3153 0262 30E0      		ldi r19,0
 3154 0264 44E3      		ldi r20,lo8(52)
 3155 0266 53E4      		ldi r21,lo8(67)
 3156 0268 0E94 0000 		call __mulsf3
 3157               	.LVL184:
 3158 026c 0E94 0000 		call __fixsfsi
 3159               	.LVL185:
 3160 0270 461A      		sub r4,r22
 3161 0272 570A      		sbc r5,r23
 3162               	.LVL186:
 3163 0274 C201      		movw r24,r4
 3164 0276 845E      		subi r24,-28
 3165 0278 9D4F      		sbci r25,-3
 3166 027a 68E6      		ldi r22,lo8(104)
 3167 027c 71E0      		ldi r23,lo8(1)
 3168 027e 0E94 0000 		call __divmodhi4
 3169 0282 845B      		subi r24,-76
 3170 0284 9109      		sbc r25,__zero_reg__
 3171 0286 97FD      		sbrc r25,7
 3172 0288 00C0      		rjmp .L194
 3173               	.L176:
 3174 028a 8937      		cpi r24,lo8(121)
 3175 028c 00F4      		brsh .+2
 3176 028e 00C0      		rjmp .L169
 256:../pong.c     **** 			addHardBot(nearBotsCopy[nextI].id);
 3177               		.loc 2 256 0
 3178 0290 C601      		movw r24,r12
 3179 0292 0E94 0000 		call addHardBot
 3180               	.LVL187:
 257:../pong.c     **** 		}
 3181               		.loc 2 257 0
 3182 0296 E1E0      		ldi r30,lo8(1)
 3183 0298 F0E0      		ldi r31,0
 3184 029a EC0F      		add r30,r28
 3185 029c FD1F      		adc r31,r29
 3186 029e A596      		adiw r28,99-62
 3187 02a0 2EAD      		ldd r18,Y+62
 3188 02a2 3FAD      		ldd r19,Y+63
 3189 02a4 A597      		sbiw r28,99-62
 3190 02a6 E20F      		add r30,r18
 3191 02a8 F31F      		adc r31,r19
 3192 02aa 8681      		ldd r24,Z+6
 3193 02ac 9781      		ldd r25,Z+7
 3194 02ae 0E94 0000 		call addHardBot
 3195               	.LVL188:
 3196 02b2 00C0      		rjmp .L169
 3197               	.LVL189:
 3198               	.L193:
 3199               	.LBB205:
 3200               	.LBB204:
 3201               	.LBB203:
 3202               	.LBB202:
 3203               		.loc 3 74 0
 3204 02b4 C501      		movw r24,r10
 3205 02b6 B401      		movw r22,r8
 3206 02b8 0E94 0000 		call __subsf3
 3207               	.LVL190:
 3208 02bc 2BED      		ldi r18,lo8(-37)
 3209 02be 3FE0      		ldi r19,lo8(15)
 3210 02c0 49EC      		ldi r20,lo8(-55)
 3211 02c2 50E4      		ldi r21,lo8(64)
 3212 02c4 0E94 0000 		call fmod
 3213               	.LVL191:
 3214 02c8 2BED      		ldi r18,lo8(-37)
 3215 02ca 3FE0      		ldi r19,lo8(15)
 3216 02cc 49E4      		ldi r20,lo8(73)
 3217 02ce 50E4      		ldi r21,lo8(64)
 3218 02d0 0E94 0000 		call __addsf3
 3219               	.LVL192:
 3220 02d4 00C0      		rjmp .L175
 3221               	.LVL193:
 3222               	.L192:
 3223               	.LBE202:
 3224               	.LBE203:
 3225               	.LBE204:
 3226               	.LBE205:
 3227               	.LBB206:
 3228               	.LBB197:
 3229               	.LBB196:
 3230               	.LBB195:
 3231 02d6 C301      		movw r24,r6
 3232 02d8 B201      		movw r22,r4
 3233 02da 0E94 0000 		call __subsf3
 3234               	.LVL194:
 3235 02de 2BED      		ldi r18,lo8(-37)
 3236 02e0 3FE0      		ldi r19,lo8(15)
 3237 02e2 49EC      		ldi r20,lo8(-55)
 3238 02e4 50E4      		ldi r21,lo8(64)
 3239 02e6 0E94 0000 		call fmod
 3240               	.LVL195:
 3241 02ea 2BED      		ldi r18,lo8(-37)
 3242 02ec 3FE0      		ldi r19,lo8(15)
 3243 02ee 49E4      		ldi r20,lo8(73)
 3244 02f0 50E4      		ldi r21,lo8(64)
 3245 02f2 0E94 0000 		call __addsf3
 3246               	.LVL196:
 3247 02f6 00C0      		rjmp .L172
 3248               	.LVL197:
 3249               	.L194:
 3250               	.LBE195:
 3251               	.LBE196:
 3252               	.LBE197:
 3253               	.LBE206:
 255:../pong.c     **** 			addHardBot(nearBotsCopy[i].id);
 3254               		.loc 2 255 0
 3255 02f8 9195      		neg r25
 3256 02fa 8195      		neg r24
 3257 02fc 9109      		sbc r25,__zero_reg__
 3258 02fe 00C0      		rjmp .L176
 3259               	.LVL198:
 3260               	.L178:
 3261               	.LBE190:
 3262               	.LBE189:
 261:../pong.c     **** 		BALL_DEBUG_PRINT("Edges:");
 3263               		.loc 2 261 0
 3264 0300 E091 0000 		lds r30,hardBotsList
 3265 0304 F091 0000 		lds r31,hardBotsList+1
 3266 0308 3097      		sbiw r30,0
 3267 030a 01F0      		breq .L163
 3268               	.L186:
 3269               	.LVL199:
 3270               	.LBB207:
 266:../pong.c     **** 		}
 3271               		.loc 2 266 0
 3272 030c 0280      		ldd __tmp_reg__,Z+2
 3273 030e F381      		ldd r31,Z+3
 3274 0310 E02D      		mov r30,__tmp_reg__
 3275               	.LVL200:
 264:../pong.c     **** 			BALL_DEBUG_PRINT("\t%04X", tmp->id);
 3276               		.loc 2 264 0
 3277 0312 3097      		sbiw r30,0
 3278 0314 01F4      		brne .L186
 3279               	.LVL201:
 3280               	.L163:
 3281               	/* epilogue start */
 3282               	.LBE207:
 270:../pong.c     **** 
 3283               		.loc 2 270 0
 3284 0316 C859      		subi r28,-104
 3285 0318 DF4F      		sbci r29,-1
 3286 031a CDBF      		out __SP_L__,r28
 3287 031c DEBF      		out __SP_H__,r29
 3288 031e DF91      		pop r29
 3289 0320 CF91      		pop r28
 3290 0322 1F91      		pop r17
 3291 0324 0F91      		pop r16
 3292 0326 FF90      		pop r15
 3293 0328 EF90      		pop r14
 3294 032a DF90      		pop r13
 3295 032c CF90      		pop r12
 3296 032e BF90      		pop r11
 3297 0330 AF90      		pop r10
 3298 0332 9F90      		pop r9
 3299 0334 8F90      		pop r8
 3300 0336 7F90      		pop r7
 3301 0338 6F90      		pop r6
 3302 033a 5F90      		pop r5
 3303 033c 4F90      		pop r4
 3304 033e 3F90      		pop r3
 3305 0340 2F90      		pop r2
 3306 0342 0895      		ret
 3307               		.cfi_endproc
 3308               	.LFE82:
 3310               		.section	.text.sendBallMsg,"ax",@progbits
 3311               	.global	sendBallMsg
 3313               	sendBallMsg:
 3314               	.LFB83:
 272:../pong.c     **** 	if((((int16_t)myDist)==UNDF) || (myDist>=30)){
 3315               		.loc 2 272 0
 3316               		.cfi_startproc
 3317 0000 CF93      		push r28
 3318               	.LCFI166:
 3319               		.cfi_def_cfa_offset 4
 3320               		.cfi_offset 28, -3
 3321 0002 DF93      		push r29
 3322               	.LCFI167:
 3323               		.cfi_def_cfa_offset 5
 3324               		.cfi_offset 29, -4
 3325 0004 CDB7      		in r28,__SP_L__
 3326 0006 DEB7      		in r29,__SP_H__
 3327               	.LCFI168:
 3328               		.cfi_def_cfa_register 28
 3329 0008 2797      		sbiw r28,7
 3330               	.LCFI169:
 3331               		.cfi_def_cfa_offset 12
 3332 000a CDBF      		out __SP_L__,r28
 3333 000c DEBF      		out __SP_H__,r29
 3334               	/* prologue: function */
 3335               	/* frame size = 7 */
 3336               	/* stack size = 9 */
 3337               	.L__stack_usage = 9
 273:../pong.c     **** 		return;
 3338               		.loc 2 273 0
 3339 000e 8091 0000 		lds r24,myDist
 3340 0012 9091 0000 		lds r25,myDist+1
 3341 0016 4E97      		sbiw r24,30
 3342 0018 00F0      		brlo .L198
 3343               	/* epilogue start */
 290:../pong.c     **** 
 3344               		.loc 2 290 0
 3345 001a 2796      		adiw r28,7
 3346 001c CDBF      		out __SP_L__,r28
 3347 001e DEBF      		out __SP_H__,r29
 3348 0020 DF91      		pop r29
 3349 0022 CF91      		pop r28
 3350 0024 0895      		ret
 3351               	.L198:
 277:../pong.c     **** 	int16_t tempX = theBall.xPos;
 3352               		.loc 2 277 0
 3353 0026 82E4      		ldi r24,lo8(66)
 3354 0028 8983      		std Y+1,r24
 278:../pong.c     **** 	int16_t tempY = theBall.yPos;
 3355               		.loc 2 278 0
 3356 002a 8091 0000 		lds r24,theBall+4
 3357 002e 9091 0000 		lds r25,theBall+4+1
 3358               	.LVL202:
 279:../pong.c     **** 	msg.xPos		= tempX&0xFF;
 3359               		.loc 2 279 0
 3360 0032 4091 0000 		lds r20,theBall+6
 3361 0036 5091 0000 		lds r21,theBall+6+1
 3362               	.LVL203:
 280:../pong.c     **** 	msg.extraBits	= ((tempX & 0x0700)>>3)&0xE0;
 3363               		.loc 2 280 0
 3364 003a 8A83      		std Y+2,r24
 282:../pong.c     **** 	msg.extraBits |= ((tempY & 0x0700)>>6)&0x1C;
 3365               		.loc 2 282 0
 3366 003c 4B83      		std Y+3,r20
 284:../pong.c     **** 	msg.xVel = theBall.xVel;
 3367               		.loc 2 284 0
 3368 003e 2091 0000 		lds r18,theBall+10
 3369 0042 0024      		clr __tmp_reg__
 3370 0044 440F      		lsl r20
 3371 0046 551F      		rol r21
 3372 0048 001C      		rol __tmp_reg__
 3373 004a 440F      		lsl r20
 3374 004c 551F      		rol r21
 3375 004e 001C      		rol __tmp_reg__
 3376 0050 452F      		mov r20,r21
 3377 0052 502D      		mov r21,__tmp_reg__
 3378               	.LVL204:
 3379 0054 4C71      		andi r20,lo8(28)
 3380 0056 322F      		mov r19,r18
 3381 0058 3370      		andi r19,lo8(3)
 3382 005a 432B      		or r20,r19
 3383 005c 9695      		lsr r25
 3384 005e 8795      		ror r24
 3385 0060 9695      		lsr r25
 3386 0062 8795      		ror r24
 3387 0064 9695      		lsr r25
 3388 0066 8795      		ror r24
 3389               	.LVL205:
 3390 0068 807E      		andi r24,lo8(-32)
 3391 006a 842B      		or r24,r20
 3392 006c 8C83      		std Y+4,r24
 285:../pong.c     **** 	msg.yVel = theBall.yVel;
 3393               		.loc 2 285 0
 3394 006e 8091 0000 		lds r24,theBall+8
 3395 0072 8D83      		std Y+5,r24
 286:../pong.c     **** 	msg.radius = (theBall.radius&0xFC) | ((theBall.id&0x0C)>>2);
 3396               		.loc 2 286 0
 3397 0074 8091 0000 		lds r24,theBall+9
 3398 0078 8E83      		std Y+6,r24
 287:../pong.c     **** 	ir_send(ALL_DIRS, (char*)(&msg), sizeof(BallMsg));
 3399               		.loc 2 287 0
 3400 007a 8091 0000 		lds r24,theBall+11
 3401 007e 8C7F      		andi r24,lo8(-4)
 3402 0080 2C70      		andi r18,lo8(12)
 3403 0082 2695      		lsr r18
 3404 0084 2695      		lsr r18
 3405 0086 282B      		or r18,r24
 3406 0088 2F83      		std Y+7,r18
 288:../pong.c     **** 	lastBallMsg=get_time();
 3407               		.loc 2 288 0
 3408 008a 47E0      		ldi r20,lo8(7)
 3409 008c BE01      		movw r22,r28
 3410 008e 6F5F      		subi r22,-1
 3411 0090 7F4F      		sbci r23,-1
 3412 0092 8FE3      		ldi r24,lo8(63)
 3413 0094 0E94 0000 		call ir_send
 3414               	.LVL206:
 289:../pong.c     **** }
 3415               		.loc 2 289 0
 3416 0098 0E94 0000 		call get_time
 3417               	.LVL207:
 3418 009c 6093 0000 		sts lastBallMsg,r22
 3419 00a0 7093 0000 		sts lastBallMsg+1,r23
 3420 00a4 8093 0000 		sts lastBallMsg+2,r24
 3421 00a8 9093 0000 		sts lastBallMsg+3,r25
 3422               	/* epilogue start */
 290:../pong.c     **** 
 3423               		.loc 2 290 0
 3424 00ac 2796      		adiw r28,7
 3425 00ae CDBF      		out __SP_L__,r28
 3426 00b0 DEBF      		out __SP_H__,r29
 3427 00b2 DF91      		pop r29
 3428 00b4 CF91      		pop r28
 3429 00b6 0895      		ret
 3430               		.cfi_endproc
 3431               	.LFE83:
 3433               		.section	.text.handleBallMsg,"ax",@progbits
 3434               	.global	handleBallMsg
 3436               	handleBallMsg:
 3437               	.LFB84:
 292:../pong.c     **** 	BALL_DEBUG_PRINT("Got Ball! T: %lu\r\n\tPos: (%5.1f, %5.1f)   Vel: (%hd, %hd) | lastUpdate: %lu\r\
 3438               		.loc 2 292 0
 3439               		.cfi_startproc
 3440               	.LVL208:
 3441 0000 8F92      		push r8
 3442               	.LCFI170:
 3443               		.cfi_def_cfa_offset 4
 3444               		.cfi_offset 8, -3
 3445 0002 9F92      		push r9
 3446               	.LCFI171:
 3447               		.cfi_def_cfa_offset 5
 3448               		.cfi_offset 9, -4
 3449 0004 AF92      		push r10
 3450               	.LCFI172:
 3451               		.cfi_def_cfa_offset 6
 3452               		.cfi_offset 10, -5
 3453 0006 BF92      		push r11
 3454               	.LCFI173:
 3455               		.cfi_def_cfa_offset 7
 3456               		.cfi_offset 11, -6
 3457 0008 CF92      		push r12
 3458               	.LCFI174:
 3459               		.cfi_def_cfa_offset 8
 3460               		.cfi_offset 12, -7
 3461 000a DF92      		push r13
 3462               	.LCFI175:
 3463               		.cfi_def_cfa_offset 9
 3464               		.cfi_offset 13, -8
 3465 000c EF92      		push r14
 3466               	.LCFI176:
 3467               		.cfi_def_cfa_offset 10
 3468               		.cfi_offset 14, -9
 3469 000e FF92      		push r15
 3470               	.LCFI177:
 3471               		.cfi_def_cfa_offset 11
 3472               		.cfi_offset 15, -10
 3473 0010 0F93      		push r16
 3474               	.LCFI178:
 3475               		.cfi_def_cfa_offset 12
 3476               		.cfi_offset 16, -11
 3477 0012 1F93      		push r17
 3478               	.LCFI179:
 3479               		.cfi_def_cfa_offset 13
 3480               		.cfi_offset 17, -12
 3481 0014 CF93      		push r28
 3482               	.LCFI180:
 3483               		.cfi_def_cfa_offset 14
 3484               		.cfi_offset 28, -13
 3485               	/* prologue: function */
 3486               	/* frame size = 0 */
 3487               	/* stack size = 11 */
 3488               	.L__stack_usage = 11
 3489 0016 6C01      		movw r12,r24
 3490 0018 4A01      		movw r8,r20
 3491 001a 5B01      		movw r10,r22
 294:../pong.c     **** 	int16_t highY = (int16_t)((((int8_t)(msg->extraBits))<<3)>>5);
 3492               		.loc 2 294 0
 3493 001c FC01      		movw r30,r24
 3494 001e 8381      		ldd r24,Z+3
 3495               	.LVL209:
 296:../pong.c     **** 	int16_t tempY = (int16_t)((highY<<8) | ((uint16_t)(msg->yPos)));
 3496               		.loc 2 296 0
 3497 0020 082F      		mov r16,r24
 3498 0022 0595      		asr r16
 3499 0024 0595      		asr r16
 3500 0026 0595      		asr r16
 3501 0028 0595      		asr r16
 3502 002a 0595      		asr r16
 3503 002c 002E      		mov __tmp_reg__,r16
 3504 002e 000C      		lsl r0
 3505 0030 110B      		sbc r17,r17
 3506               	.LVL210:
 3507 0032 102F      		mov r17,r16
 3508 0034 0027      		clr r16
 3509               	.LVL211:
 3510 0036 9181      		ldd r25,Z+1
 3511 0038 092B      		or r16,r25
 3512               	.LVL212:
 297:../pong.c     **** 	uint8_t id = ((msg->extraBits)&0x03) | (((msg->radius)&0x03)<<2);
 3513               		.loc 2 297 0
 3514 003a F8E0      		ldi r31,lo8(8)
 3515 003c 8F02      		muls r24,r31
 3516 003e 7001      		movw r14,r0
 3517 0040 1124      		clr __zero_reg__
 3518 0042 F594      		asr r15
 3519 0044 E794      		ror r14
 3520 0046 F594      		asr r15
 3521 0048 E794      		ror r14
 3522 004a F594      		asr r15
 3523 004c E794      		ror r14
 3524 004e F594      		asr r15
 3525 0050 E794      		ror r14
 3526 0052 F594      		asr r15
 3527 0054 E794      		ror r14
 3528 0056 FE2C      		mov r15,r14
 3529 0058 EE24      		clr r14
 3530 005a F601      		movw r30,r12
 3531 005c 9281      		ldd r25,Z+2
 3532 005e E92A      		or r14,r25
 3533               	.LVL213:
 298:../pong.c     **** 	if(id == 0x0F && theBall.id!=0x0F){
 3534               		.loc 2 298 0
 3535 0060 C681      		ldd r28,Z+6
 3536 0062 C370      		andi r28,lo8(3)
 3537 0064 CC0F      		lsl r28
 3538 0066 CC0F      		lsl r28
 3539 0068 8370      		andi r24,lo8(3)
 3540               	.LVL214:
 3541 006a C82B      		or r28,r24
 3542               	.LVL215:
 299:../pong.c     **** 		lastBallID = theBall.id;
 3543               		.loc 2 299 0
 3544 006c CF30      		cpi r28,lo8(15)
 3545 006e 01F0      		breq .L207
 302:../pong.c     **** 		return; //this is from someone who hasn't realized the ball is dead, yet.
 3546               		.loc 2 302 0
 3547 0070 8091 0000 		lds r24,lastBallID
 3548 0074 C817      		cp r28,r24
 3549 0076 01F0      		breq .L208
 3550               	.LVL216:
 3551               	.L202:
 305:../pong.c     **** 	theBall.yPos = tempY;
 3552               		.loc 2 305 0
 3553 0078 0093 0000 		sts theBall+4,r16
 3554 007c 1093 0000 		sts theBall+4+1,r17
 306:../pong.c     **** 	theBall.id = id;
 3555               		.loc 2 306 0
 3556 0080 E092 0000 		sts theBall+6,r14
 3557 0084 F092 0000 		sts theBall+6+1,r15
 307:../pong.c     **** 	theBall.xVel = msg->xVel;
 3558               		.loc 2 307 0
 3559 0088 C093 0000 		sts theBall+10,r28
 308:../pong.c     **** 	theBall.yVel = msg->yVel;
 3560               		.loc 2 308 0
 3561 008c F601      		movw r30,r12
 3562 008e 8481      		ldd r24,Z+4
 3563 0090 8093 0000 		sts theBall+8,r24
 309:../pong.c     **** 	theBall.radius = ((msg->radius)&0xFC);
 3564               		.loc 2 309 0
 3565 0094 8581      		ldd r24,Z+5
 3566 0096 8093 0000 		sts theBall+9,r24
 310:../pong.c     **** 	theBall.lastUpdate = arrivalTime-4;
 3567               		.loc 2 310 0
 3568 009a 8681      		ldd r24,Z+6
 3569 009c 8C7F      		andi r24,lo8(-4)
 3570 009e 8093 0000 		sts theBall+11,r24
 311:../pong.c     **** 	BALL_DEBUG_PRINT("\tPos: (%5.1f, %5.1f)   Vel: (%hd, %hd) | lastUpdate: %lu\r\n", theBall.xPos, th
 3571               		.loc 2 311 0
 3572 00a2 F4E0      		ldi r31,4
 3573 00a4 8F1A      		sub r8,r31
 3574 00a6 9108      		sbc r9,__zero_reg__
 3575 00a8 A108      		sbc r10,__zero_reg__
 3576 00aa B108      		sbc r11,__zero_reg__
 3577               	.LVL217:
 3578 00ac 8092 0000 		sts theBall,r8
 3579 00b0 9092 0000 		sts theBall+1,r9
 3580 00b4 A092 0000 		sts theBall+2,r10
 3581 00b8 B092 0000 		sts theBall+3,r11
 3582               	.LVL218:
 3583               	.L199:
 3584               	/* epilogue start */
 313:../pong.c     **** 
 3585               		.loc 2 313 0
 3586 00bc CF91      		pop r28
 3587               	.LVL219:
 3588 00be 1F91      		pop r17
 3589 00c0 0F91      		pop r16
 3590               	.LVL220:
 3591 00c2 FF90      		pop r15
 3592 00c4 EF90      		pop r14
 3593               	.LVL221:
 3594 00c6 DF90      		pop r13
 3595 00c8 CF90      		pop r12
 3596               	.LVL222:
 3597 00ca BF90      		pop r11
 3598 00cc AF90      		pop r10
 3599 00ce 9F90      		pop r9
 3600 00d0 8F90      		pop r8
 3601 00d2 0895      		ret
 3602               	.LVL223:
 3603               	.L207:
 299:../pong.c     **** 		lastBallID = theBall.id;
 3604               		.loc 2 299 0 discriminator 1
 3605 00d4 8091 0000 		lds r24,theBall+10
 3606 00d8 8F30      		cpi r24,lo8(15)
 3607 00da 01F0      		breq .L201
 300:../pong.c     **** 		set_rgb(255,0,0);
 3608               		.loc 2 300 0
 3609 00dc 8093 0000 		sts lastBallID,r24
 301:../pong.c     **** 		}else if(id == lastBallID && theBall.id==0x0F){
 3610               		.loc 2 301 0
 3611 00e0 40E0      		ldi r20,0
 3612 00e2 60E0      		ldi r22,0
 3613 00e4 8FEF      		ldi r24,lo8(-1)
 3614 00e6 0E94 0000 		call set_rgb
 3615               	.LVL224:
 3616 00ea 00C0      		rjmp .L202
 3617               	.LVL225:
 3618               	.L208:
 302:../pong.c     **** 		return; //this is from someone who hasn't realized the ball is dead, yet.
 3619               		.loc 2 302 0 discriminator 1
 3620 00ec 8091 0000 		lds r24,theBall+10
 3621 00f0 8F30      		cpi r24,lo8(15)
 3622 00f2 01F4      		brne .L202
 3623 00f4 00C0      		rjmp .L199
 3624               	.L201:
 302:../pong.c     **** 		return; //this is from someone who hasn't realized the ball is dead, yet.
 3625               		.loc 2 302 0 is_stmt 0
 3626 00f6 8091 0000 		lds r24,lastBallID
 3627 00fa C813      		cpse r28,r24
 3628 00fc 00C0      		rjmp .L202
 3629 00fe 00C0      		rjmp .L199
 3630               		.cfi_endproc
 3631               	.LFE84:
 3633               		.section	.rodata.str1.1
 3634               	.LC7:
 3635 004a 2530 3458 		.string	"%04X @ {%4d, %4d, % 4d}\r\n"
 3635      2040 207B 
 3635      2534 642C 
 3635      2025 3464 
 3635      2C20 2520 
 3636               		.section	.text.handleBotPosMsg,"ax",@progbits
 3637               	.global	handleBotPosMsg
 3639               	handleBotPosMsg:
 3640               	.LFB86:
 322:../pong.c     **** 	printf("%04X @ {%4d, %4d, % 4d}\r\n", senderID, (msg->pos).x, (msg->pos).y, (msg->pos).o);
 3641               		.loc 2 322 0 is_stmt 1
 3642               		.cfi_startproc
 3643               	.LVL226:
 3644               	/* prologue: function */
 3645               	/* frame size = 0 */
 3646               	/* stack size = 0 */
 3647               	.L__stack_usage = 0
 3648 0000 FC01      		movw r30,r24
 323:../pong.c     **** }
 3649               		.loc 2 323 0
 3650 0002 8581      		ldd r24,Z+5
 3651               	.LVL227:
 3652 0004 8F93      		push r24
 3653               	.LCFI181:
 3654               		.cfi_def_cfa_offset 4
 3655 0006 8481      		ldd r24,Z+4
 3656 0008 8F93      		push r24
 3657               	.LCFI182:
 3658               		.cfi_def_cfa_offset 5
 3659 000a 8381      		ldd r24,Z+3
 3660 000c 8F93      		push r24
 3661               	.LCFI183:
 3662               		.cfi_def_cfa_offset 6
 3663 000e 8281      		ldd r24,Z+2
 3664 0010 8F93      		push r24
 3665               	.LCFI184:
 3666               		.cfi_def_cfa_offset 7
 3667 0012 8181      		ldd r24,Z+1
 3668 0014 8F93      		push r24
 3669               	.LCFI185:
 3670               		.cfi_def_cfa_offset 8
 3671 0016 8081      		ld r24,Z
 3672 0018 8F93      		push r24
 3673               	.LCFI186:
 3674               		.cfi_def_cfa_offset 9
 3675 001a 7F93      		push r23
 3676               	.LCFI187:
 3677               		.cfi_def_cfa_offset 10
 3678 001c 6F93      		push r22
 3679               	.LCFI188:
 3680               		.cfi_def_cfa_offset 11
 3681 001e 80E0      		ldi r24,lo8(.LC7)
 3682 0020 90E0      		ldi r25,hi8(.LC7)
 3683 0022 9F93      		push r25
 3684               	.LCFI189:
 3685               		.cfi_def_cfa_offset 12
 3686 0024 8F93      		push r24
 3687               	.LCFI190:
 3688               		.cfi_def_cfa_offset 13
 3689 0026 0E94 0000 		call printf
 3690               	.LVL228:
 324:../pong.c     **** 
 3691               		.loc 2 324 0
 3692 002a 8DB7      		in r24,__SP_L__
 3693 002c 9EB7      		in r25,__SP_H__
 3694 002e 0A96      		adiw r24,10
 3695 0030 8DBF      		out __SP_L__,r24
 3696 0032 9EBF      		out __SP_H__,r25
 3697               	.LCFI191:
 3698               		.cfi_def_cfa_offset 3
 3699 0034 0895      		ret
 3700               		.cfi_endproc
 3701               	.LFE86:
 3703               		.section	.text.sendPaddleMsg,"ax",@progbits
 3704               	.global	sendPaddleMsg
 3706               	sendPaddleMsg:
 3707               	.LFB87:
 326:../pong.c     **** 	if(!CTRL_Q(myState)){
 3708               		.loc 2 326 0
 3709               		.cfi_startproc
 3710 0000 CF93      		push r28
 3711               	.LCFI192:
 3712               		.cfi_def_cfa_offset 4
 3713               		.cfi_offset 28, -3
 3714 0002 DF93      		push r29
 3715               	.LCFI193:
 3716               		.cfi_def_cfa_offset 5
 3717               		.cfi_offset 29, -4
 3718 0004 00D0      		rcall .
 3719               	.LCFI194:
 3720               		.cfi_def_cfa_offset 8
 3721 0006 CDB7      		in r28,__SP_L__
 3722 0008 DEB7      		in r29,__SP_H__
 3723               	.LCFI195:
 3724               		.cfi_def_cfa_register 28
 3725               	/* prologue: function */
 3726               	/* frame size = 3 */
 3727               	/* stack size = 5 */
 3728               	.L__stack_usage = 5
 327:../pong.c     **** 		return;
 3729               		.loc 2 327 0
 3730 000a 8091 0000 		lds r24,myState
 3731 000e 81FF      		sbrs r24,1
 3732 0010 00C0      		rjmp .L210
 331:../pong.c     **** 		msg.flag = 'P';
 3733               		.loc 2 331 0
 3734 0012 982F      		mov r25,r24
 3735 0014 9171      		andi r25,lo8(17)
 3736 0016 01F4      		brne .L231
 337:../pong.c     **** 		msg.flag = 'S';
 3737               		.loc 2 337 0
 3738 0018 982F      		mov r25,r24
 3739 001a 9271      		andi r25,lo8(18)
 3740 001c 01F4      		brne .+2
 3741 001e 00C0      		rjmp .L215
 337:../pong.c     **** 		msg.flag = 'S';
 3742               		.loc 2 337 0 is_stmt 0 discriminator 1
 3743 0020 982F      		mov r25,r24
 3744 0022 9471      		andi r25,lo8(20)
 3745 0024 01F4      		brne .+2
 3746 0026 00C0      		rjmp .L216
 338:../pong.c     **** 		msg.deltaPos = ((int16_t)paddleChange);
 3747               		.loc 2 338 0 is_stmt 1
 3748 0028 83E5      		ldi r24,lo8(83)
 3749 002a 8983      		std Y+1,r24
 339:../pong.c     **** 	}else if(SW_Q(myState)){
 3750               		.loc 2 339 0
 3751 002c 6091 0000 		lds r22,paddleChange
 3752 0030 7091 0000 		lds r23,paddleChange+1
 3753 0034 8091 0000 		lds r24,paddleChange+2
 3754 0038 9091 0000 		lds r25,paddleChange+3
 3755 003c 0E94 0000 		call __fixsfsi
 3756               	.LVL229:
 3757 0040 6A83      		std Y+2,r22
 3758 0042 7B83      		std Y+3,r23
 3759               	.L214:
 347:../pong.c     **** 	ir_send(ALL_DIRS, (char*)(&msg), sizeof(PaddleMsg));
 3760               		.loc 2 347 0
 3761 0044 1092 0000 		sts paddleChange,__zero_reg__
 3762 0048 1092 0000 		sts paddleChange+1,__zero_reg__
 3763 004c 1092 0000 		sts paddleChange+2,__zero_reg__
 3764 0050 1092 0000 		sts paddleChange+3,__zero_reg__
 348:../pong.c     **** }
 3765               		.loc 2 348 0
 3766 0054 43E0      		ldi r20,lo8(3)
 3767 0056 BE01      		movw r22,r28
 3768 0058 6F5F      		subi r22,-1
 3769 005a 7F4F      		sbci r23,-1
 3770 005c 8FE3      		ldi r24,lo8(63)
 3771 005e 0E94 0000 		call ir_send
 3772               	.LVL230:
 3773               	.L210:
 3774               	/* epilogue start */
 349:../pong.c     **** 
 3775               		.loc 2 349 0
 3776 0062 2396      		adiw r28,3
 3777 0064 CDBF      		out __SP_L__,r28
 3778 0066 DEBF      		out __SP_H__,r29
 3779 0068 DF91      		pop r29
 3780 006a CF91      		pop r28
 3781 006c 0895      		ret
 3782               	.L231:
 331:../pong.c     **** 		msg.flag = 'P';
 3783               		.loc 2 331 0 discriminator 1
 3784 006e 982F      		mov r25,r24
 3785 0070 9471      		andi r25,lo8(20)
 3786 0072 01F4      		brne .L232
 334:../pong.c     **** 		msg.flag = 'P';
 3787               		.loc 2 334 0 discriminator 1
 3788 0074 8871      		andi r24,lo8(24)
 3789 0076 01F0      		breq .L215
 335:../pong.c     **** 		msg.deltaPos = -1*((int16_t)paddleChange);
 3790               		.loc 2 335 0
 3791 0078 80E5      		ldi r24,lo8(80)
 3792               	.L230:
 341:../pong.c     **** 		msg.deltaPos = -1*((int16_t)paddleChange);
 3793               		.loc 2 341 0
 3794 007a 8983      		std Y+1,r24
 342:../pong.c     **** 	}else{
 3795               		.loc 2 342 0
 3796 007c 6091 0000 		lds r22,paddleChange
 3797 0080 7091 0000 		lds r23,paddleChange+1
 3798 0084 8091 0000 		lds r24,paddleChange+2
 3799 0088 9091 0000 		lds r25,paddleChange+3
 3800 008c 0E94 0000 		call __fixsfsi
 3801               	.LVL231:
 3802 0090 7195      		neg r23
 3803 0092 6195      		neg r22
 3804 0094 7109      		sbc r23,__zero_reg__
 3805 0096 6A83      		std Y+2,r22
 3806 0098 7B83      		std Y+3,r23
 3807 009a 00C0      		rjmp .L214
 3808               	.L232:
 332:../pong.c     **** 		msg.deltaPos = ((int16_t)paddleChange);
 3809               		.loc 2 332 0
 3810 009c 80E5      		ldi r24,lo8(80)
 3811 009e 8983      		std Y+1,r24
 333:../pong.c     **** 	}else if(NW_Q(myState)){
 3812               		.loc 2 333 0
 3813 00a0 6091 0000 		lds r22,paddleChange
 3814 00a4 7091 0000 		lds r23,paddleChange+1
 3815 00a8 8091 0000 		lds r24,paddleChange+2
 3816 00ac 9091 0000 		lds r25,paddleChange+3
 3817 00b0 0E94 0000 		call __fixsfsi
 3818               	.LVL232:
 3819 00b4 6A83      		std Y+2,r22
 3820 00b6 7B83      		std Y+3,r23
 3821 00b8 00C0      		rjmp .L214
 3822               	.L215:
 344:../pong.c     **** 		return;
 3823               		.loc 2 344 0
 3824 00ba 1092 0000 		sts paddleChange,__zero_reg__
 3825 00be 1092 0000 		sts paddleChange+1,__zero_reg__
 3826 00c2 1092 0000 		sts paddleChange+2,__zero_reg__
 3827 00c6 1092 0000 		sts paddleChange+3,__zero_reg__
 3828               	/* epilogue start */
 349:../pong.c     **** 
 3829               		.loc 2 349 0
 3830 00ca 2396      		adiw r28,3
 3831 00cc CDBF      		out __SP_L__,r28
 3832 00ce DEBF      		out __SP_H__,r29
 3833 00d0 DF91      		pop r29
 3834 00d2 CF91      		pop r28
 3835 00d4 0895      		ret
 3836               	.L216:
 340:../pong.c     **** 		msg.flag = 'S';
 3837               		.loc 2 340 0
 3838 00d6 8871      		andi r24,lo8(24)
 3839 00d8 01F0      		breq .L215
 341:../pong.c     **** 		msg.deltaPos = -1*((int16_t)paddleChange);
 3840               		.loc 2 341 0
 3841 00da 83E5      		ldi r24,lo8(83)
 3842 00dc 00C0      		rjmp .L230
 3843               		.cfi_endproc
 3844               	.LFE87:
 3846               		.section	.text.handlePaddleMsg,"ax",@progbits
 3847               	.global	handlePaddleMsg
 3849               	handlePaddleMsg:
 3850               	.LFB88:
 351:../pong.c     **** 	if((NORTH_PIXEL_Q(myState) && flag=='P') || (SOUTH_PIXEL_Q(myState) && flag=='S')){
 3851               		.loc 2 351 0
 3852               		.cfi_startproc
 3853               	.LVL233:
 3854               	/* prologue: function */
 3855               	/* frame size = 0 */
 3856               	/* stack size = 0 */
 3857               	.L__stack_usage = 0
 352:../pong.c     **** 		paddleStart += delta;
 3858               		.loc 2 352 0
 3859 0000 9091 0000 		lds r25,myState
 3860 0004 90FF      		sbrs r25,0
 3861 0006 00C0      		rjmp .L233
 352:../pong.c     **** 		paddleStart += delta;
 3862               		.loc 2 352 0 is_stmt 0 discriminator 1
 3863 0008 292F      		mov r18,r25
 3864 000a 2171      		andi r18,lo8(17)
 3865 000c 01F0      		breq .L235
 352:../pong.c     **** 		paddleStart += delta;
 3866               		.loc 2 352 0 discriminator 3
 3867 000e 8035      		cpi r24,lo8(80)
 3868 0010 01F0      		breq .L236
 3869               	.L235:
 352:../pong.c     **** 		paddleStart += delta;
 3870               		.loc 2 352 0 discriminator 6
 3871 0012 9271      		andi r25,lo8(18)
 3872 0014 01F0      		breq .L233
 352:../pong.c     **** 		paddleStart += delta;
 3873               		.loc 2 352 0 discriminator 7
 3874 0016 8335      		cpi r24,lo8(83)
 3875 0018 01F0      		breq .L236
 3876               	.L233:
 3877 001a 0895      		ret
 3878               	.L236:
 353:../pong.c     **** 		paddleEnd += delta;
 3879               		.loc 2 353 0 is_stmt 1
 3880 001c 8091 0000 		lds r24,paddleStart
 3881 0020 9091 0000 		lds r25,paddleStart+1
 3882               	.LVL234:
 3883 0024 860F      		add r24,r22
 3884 0026 971F      		adc r25,r23
 3885 0028 8093 0000 		sts paddleStart,r24
 3886 002c 9093 0000 		sts paddleStart+1,r25
 354:../pong.c     **** 		//if(paddleStart<MIN_DIM){
 3887               		.loc 2 354 0
 3888 0030 8091 0000 		lds r24,paddleEnd
 3889 0034 9091 0000 		lds r25,paddleEnd+1
 3890 0038 680F      		add r22,r24
 3891 003a 791F      		adc r23,r25
 3892               	.LVL235:
 3893 003c 6093 0000 		sts paddleEnd,r22
 3894 0040 7093 0000 		sts paddleEnd+1,r23
 3895 0044 0895      		ret
 3896               		.cfi_endproc
 3897               	.LFE88:
 3899               		.section	.rodata.str1.1
 3900               	.LC8:
 3901 0064 2530 3268 		.string	"%02hX "
 3901      5820 00
 3902               		.section	.text.handle_msg,"ax",@progbits
 3903               	.global	handle_msg
 3905               	handle_msg:
 3906               	.LFB89:
 366:../pong.c     **** 	if(((BallMsg*)(msg_struct->msg))->flag==BALL_MSG_FLAG && msg_struct->length==sizeof(BallMsg)){
 3907               		.loc 2 366 0
 3908               		.cfi_startproc
 3909               	.LVL236:
 3910 0000 EF92      		push r14
 3911               	.LCFI196:
 3912               		.cfi_def_cfa_offset 4
 3913               		.cfi_offset 14, -3
 3914 0002 FF92      		push r15
 3915               	.LCFI197:
 3916               		.cfi_def_cfa_offset 5
 3917               		.cfi_offset 15, -4
 3918 0004 0F93      		push r16
 3919               	.LCFI198:
 3920               		.cfi_def_cfa_offset 6
 3921               		.cfi_offset 16, -5
 3922 0006 1F93      		push r17
 3923               	.LCFI199:
 3924               		.cfi_def_cfa_offset 7
 3925               		.cfi_offset 17, -6
 3926 0008 CF93      		push r28
 3927               	.LCFI200:
 3928               		.cfi_def_cfa_offset 8
 3929               		.cfi_offset 28, -7
 3930               	/* prologue: function */
 3931               	/* frame size = 0 */
 3932               	/* stack size = 5 */
 3933               	.L__stack_usage = 5
 3934 000a DC01      		movw r26,r24
 367:../pong.c     **** 		handleBallMsg((BallMsg*)(msg_struct->msg), msg_struct->arrival_time);
 3935               		.loc 2 367 0
 3936 000c 1696      		adiw r26,6
 3937 000e ED91      		ld r30,X+
 3938 0010 FC91      		ld r31,X
 3939 0012 1797      		sbiw r26,6+1
 3940 0014 2081      		ld r18,Z
 3941 0016 2234      		cpi r18,lo8(66)
 3942 0018 01F4      		brne .+2
 3943 001a 00C0      		rjmp .L260
 3944 001c 1996      		adiw r26,9
 3945 001e 2C91      		ld r18,X
 3946 0020 1997      		sbiw r26,9
 3947               	.L251:
 369:../pong.c     **** 		handleBotMeasMsg((BotMeasMsg*)(msg_struct->msg), msg_struct->sender_ID);
 3948               		.loc 2 369 0
 3949 0022 3289      		ldd r19,Z+18
 3950 0024 3835      		cpi r19,lo8(88)
 3951 0026 01F4      		brne .+2
 3952 0028 00C0      		rjmp .L261
 3953               	.L252:
 3954 002a 8D01      		movw r16,r26
 371:../pong.c     **** 		handleBotPosMsg((BotPosMsg*)(msg_struct->msg), msg_struct->sender_ID);
 3955               		.loc 2 371 0
 3956 002c 8681      		ldd r24,Z+6
 3957               	.LVL237:
 3958 002e 8035      		cpi r24,lo8(80)
 3959 0030 01F4      		brne .+2
 3960 0032 00C0      		rjmp .L262
 3961               	.LVL238:
 3962               	.L253:
 374:../pong.c     **** 		for(uint8_t i=0;i<msg_struct->length;i++){
 3963               		.loc 2 374 0
 3964 0034 D801      		movw r26,r16
 3965 0036 1596      		adiw r26,5
 3966 0038 8C91      		ld r24,X
 3967 003a 1597      		sbiw r26,5
 3968 003c 8F93      		push r24
 3969               	.LCFI201:
 3970               		.cfi_def_cfa_offset 9
 3971 003e 1496      		adiw r26,4
 3972 0040 8C91      		ld r24,X
 3973 0042 8F93      		push r24
 3974               	.LCFI202:
 3975               		.cfi_def_cfa_offset 10
 3976 0044 1F92      		push __zero_reg__
 3977               	.LCFI203:
 3978               		.cfi_def_cfa_offset 11
 3979 0046 2F93      		push r18
 3980               	.LCFI204:
 3981               		.cfi_def_cfa_offset 12
 3982 0048 80E0      		ldi r24,lo8(__c.5704)
 3983 004a 90E0      		ldi r25,hi8(__c.5704)
 3984 004c 9F93      		push r25
 3985               	.LCFI205:
 3986               		.cfi_def_cfa_offset 13
 3987 004e 8F93      		push r24
 3988               	.LCFI206:
 3989               		.cfi_def_cfa_offset 14
 3990 0050 0E94 0000 		call printf_P
 3991               	.LVL239:
 3992               	.LBB208:
 375:../pong.c     **** 			printf("%02hX ", msg_struct->msg[i]);
 3993               		.loc 2 375 0
 3994 0054 0F90      		pop __tmp_reg__
 3995 0056 0F90      		pop __tmp_reg__
 3996 0058 0F90      		pop __tmp_reg__
 3997 005a 0F90      		pop __tmp_reg__
 3998 005c 0F90      		pop __tmp_reg__
 3999 005e 0F90      		pop __tmp_reg__
 4000               	.LCFI207:
 4001               		.cfi_def_cfa_offset 8
 4002 0060 F801      		movw r30,r16
 4003 0062 8185      		ldd r24,Z+9
 4004 0064 8823      		tst r24
 4005 0066 01F0      		breq .L257
 375:../pong.c     **** 			printf("%02hX ", msg_struct->msg[i]);
 4006               		.loc 2 375 0 is_stmt 0 discriminator 3
 4007 0068 C0E0      		ldi r28,0
 376:../pong.c     **** 		}
 4008               		.loc 2 376 0 is_stmt 1 discriminator 3
 4009 006a 80E0      		ldi r24,lo8(.LC8)
 4010 006c E82E      		mov r14,r24
 4011 006e 80E0      		ldi r24,hi8(.LC8)
 4012 0070 F82E      		mov r15,r24
 4013               	.LVL240:
 4014               	.L256:
 4015 0072 D801      		movw r26,r16
 4016 0074 1696      		adiw r26,6
 4017 0076 ED91      		ld r30,X+
 4018 0078 FC91      		ld r31,X
 4019 007a 1797      		sbiw r26,6+1
 4020 007c EC0F      		add r30,r28
 4021 007e F11D      		adc r31,__zero_reg__
 4022 0080 9081      		ld r25,Z
 4023 0082 292F      		mov r18,r25
 4024 0084 092E      		mov __tmp_reg__,r25
 4025 0086 000C      		lsl r0
 4026 0088 330B      		sbc r19,r19
 4027 008a 3F93      		push r19
 4028               	.LCFI208:
 4029               		.cfi_def_cfa_offset 9
 4030 008c 9F93      		push r25
 4031               	.LCFI209:
 4032               		.cfi_def_cfa_offset 10
 4033 008e FF92      		push r15
 4034               	.LCFI210:
 4035               		.cfi_def_cfa_offset 11
 4036 0090 EF92      		push r14
 4037               	.LCFI211:
 4038               		.cfi_def_cfa_offset 12
 4039 0092 0E94 0000 		call printf
 4040               	.LVL241:
 375:../pong.c     **** 			printf("%02hX ", msg_struct->msg[i]);
 4041               		.loc 2 375 0 discriminator 3
 4042 0096 CF5F      		subi r28,lo8(-(1))
 4043               	.LVL242:
 4044 0098 0F90      		pop __tmp_reg__
 4045 009a 0F90      		pop __tmp_reg__
 4046 009c 0F90      		pop __tmp_reg__
 4047 009e 0F90      		pop __tmp_reg__
 4048               	.LCFI212:
 4049               		.cfi_def_cfa_offset 8
 4050 00a0 F801      		movw r30,r16
 4051 00a2 8185      		ldd r24,Z+9
 4052 00a4 C817      		cp r28,r24
 4053 00a6 00F0      		brlo .L256
 4054               	.LVL243:
 4055               	.L257:
 4056               	.LBE208:
 378:../pong.c     **** 	}
 4057               		.loc 2 378 0
 4058 00a8 80E0      		ldi r24,lo8(.LC5)
 4059 00aa 90E0      		ldi r25,hi8(.LC5)
 4060               	/* epilogue start */
 380:../pong.c     **** 
 4061               		.loc 2 380 0
 4062 00ac CF91      		pop r28
 4063 00ae 1F91      		pop r17
 4064 00b0 0F91      		pop r16
 4065               	.LVL244:
 4066 00b2 FF90      		pop r15
 4067 00b4 EF90      		pop r14
 378:../pong.c     **** 	}
 4068               		.loc 2 378 0
 4069 00b6 0C94 0000 		jmp puts
 4070               	.LVL245:
 4071               	.L262:
 371:../pong.c     **** 		handleBotPosMsg((BotPosMsg*)(msg_struct->msg), msg_struct->sender_ID);
 4072               		.loc 2 371 0 discriminator 1
 4073 00ba 2730      		cpi r18,lo8(7)
 4074 00bc 01F0      		breq .+2
 4075 00be 00C0      		rjmp .L253
 4076               	.LVL246:
 4077               	.LBB209:
 4078               	.LBB210:
 323:../pong.c     **** }
 4079               		.loc 2 323 0
 4080 00c0 8581      		ldd r24,Z+5
 4081 00c2 8F93      		push r24
 4082               	.LCFI213:
 4083               		.cfi_def_cfa_offset 9
 4084 00c4 8481      		ldd r24,Z+4
 4085 00c6 8F93      		push r24
 4086               	.LCFI214:
 4087               		.cfi_def_cfa_offset 10
 4088 00c8 8381      		ldd r24,Z+3
 4089 00ca 8F93      		push r24
 4090               	.LCFI215:
 4091               		.cfi_def_cfa_offset 11
 4092 00cc 8281      		ldd r24,Z+2
 4093 00ce 8F93      		push r24
 4094               	.LCFI216:
 4095               		.cfi_def_cfa_offset 12
 4096 00d0 8181      		ldd r24,Z+1
 4097 00d2 8F93      		push r24
 4098               	.LCFI217:
 4099               		.cfi_def_cfa_offset 13
 4100 00d4 8081      		ld r24,Z
 4101 00d6 8F93      		push r24
 4102               	.LCFI218:
 4103               		.cfi_def_cfa_offset 14
 4104 00d8 1596      		adiw r26,5
 4105 00da 8C91      		ld r24,X
 4106 00dc 1597      		sbiw r26,5
 4107 00de 8F93      		push r24
 4108               	.LCFI219:
 4109               		.cfi_def_cfa_offset 15
 4110 00e0 1496      		adiw r26,4
 4111 00e2 8C91      		ld r24,X
 4112 00e4 8F93      		push r24
 4113               	.LCFI220:
 4114               		.cfi_def_cfa_offset 16
 4115 00e6 80E0      		ldi r24,lo8(.LC7)
 4116 00e8 90E0      		ldi r25,hi8(.LC7)
 4117 00ea 9F93      		push r25
 4118               	.LCFI221:
 4119               		.cfi_def_cfa_offset 17
 4120 00ec 8F93      		push r24
 4121               	.LCFI222:
 4122               		.cfi_def_cfa_offset 18
 4123 00ee 0E94 0000 		call printf
 4124               	.LVL247:
 4125 00f2 8DB7      		in r24,__SP_L__
 4126 00f4 9EB7      		in r25,__SP_H__
 4127 00f6 0A96      		adiw r24,10
 4128 00f8 8DBF      		out __SP_L__,r24
 4129 00fa 9EBF      		out __SP_H__,r25
 4130               	.LCFI223:
 4131               		.cfi_def_cfa_offset 8
 4132               	/* epilogue start */
 4133               	.LBE210:
 4134               	.LBE209:
 380:../pong.c     **** 
 4135               		.loc 2 380 0
 4136 00fc CF91      		pop r28
 4137 00fe 1F91      		pop r17
 4138 0100 0F91      		pop r16
 4139               	.LVL248:
 4140 0102 FF90      		pop r15
 4141 0104 EF90      		pop r14
 4142 0106 0895      		ret
 4143               	.LVL249:
 4144               	.L260:
 367:../pong.c     **** 		handleBallMsg((BallMsg*)(msg_struct->msg), msg_struct->arrival_time);
 4145               		.loc 2 367 0 discriminator 1
 4146 0108 1996      		adiw r26,9
 4147 010a 2C91      		ld r18,X
 4148 010c 1997      		sbiw r26,9
 4149 010e 2730      		cpi r18,lo8(7)
 4150 0110 01F0      		breq .+2
 4151 0112 00C0      		rjmp .L251
 368:../pong.c     **** 	}else if(((BotMeasMsg*)(msg_struct->msg))->flag==BOT_MEAS_MSG_FLAG && msg_struct->length==sizeof(B
 4152               		.loc 2 368 0
 4153 0114 4D91      		ld r20,X+
 4154 0116 5D91      		ld r21,X+
 4155 0118 6D91      		ld r22,X+
 4156 011a 7C91      		ld r23,X
 4157 011c CF01      		movw r24,r30
 4158               	.LVL250:
 4159               	/* epilogue start */
 380:../pong.c     **** 
 4160               		.loc 2 380 0
 4161 011e CF91      		pop r28
 4162 0120 1F91      		pop r17
 4163 0122 0F91      		pop r16
 4164 0124 FF90      		pop r15
 4165 0126 EF90      		pop r14
 368:../pong.c     **** 	}else if(((BotMeasMsg*)(msg_struct->msg))->flag==BOT_MEAS_MSG_FLAG && msg_struct->length==sizeof(B
 4166               		.loc 2 368 0
 4167 0128 0C94 0000 		jmp handleBallMsg
 4168               	.LVL251:
 4169               	.L261:
 369:../pong.c     **** 		handleBotMeasMsg((BotMeasMsg*)(msg_struct->msg), msg_struct->sender_ID);
 4170               		.loc 2 369 0 discriminator 1
 4171 012c 2331      		cpi r18,lo8(19)
 4172 012e 01F0      		breq .+2
 4173 0130 00C0      		rjmp .L252
 370:../pong.c     **** 	}else if(((BotPosMsg*)(msg_struct->msg))->flag==BOT_POS_MSG_FLAG && msg_struct->length==sizeof(Bot
 4174               		.loc 2 370 0
 4175 0132 1496      		adiw r26,4
 4176 0134 6D91      		ld r22,X+
 4177 0136 7C91      		ld r23,X
 4178 0138 1597      		sbiw r26,4+1
 4179 013a CF01      		movw r24,r30
 4180               	.LVL252:
 4181               	/* epilogue start */
 380:../pong.c     **** 
 4182               		.loc 2 380 0
 4183 013c CF91      		pop r28
 4184 013e 1F91      		pop r17
 4185 0140 0F91      		pop r16
 4186 0142 FF90      		pop r15
 4187 0144 EF90      		pop r14
 370:../pong.c     **** 	}else if(((BotPosMsg*)(msg_struct->msg))->flag==BOT_POS_MSG_FLAG && msg_struct->length==sizeof(Bot
 4188               		.loc 2 370 0
 4189 0146 0C94 0000 		jmp handleBotMeasMsg
 4190               	.LVL253:
 4191               		.cfi_endproc
 4192               	.LFE89:
 4194               		.section	.text.getOtherBot,"ax",@progbits
 4195               	.global	getOtherBot
 4197               	getOtherBot:
 4198               	.LFB90:
 382:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 4199               		.loc 2 382 0
 4200               		.cfi_startproc
 4201               	.LVL254:
 4202               	/* prologue: function */
 4203               	/* frame size = 0 */
 4204               	/* stack size = 0 */
 4205               	.L__stack_usage = 0
 4206 0000 E0E0      		ldi r30,lo8(nearBots+6)
 4207 0002 F0E0      		ldi r31,hi8(nearBots+6)
 382:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 4208               		.loc 2 382 0
 4209 0004 20E0      		ldi r18,0
 4210 0006 30E0      		ldi r19,0
 4211               	.LVL255:
 4212               	.L266:
 4213               	.LBB211:
 384:../pong.c     **** 			return &(nearBots[i]);
 4214               		.loc 2 384 0
 4215 0008 4081      		ld r20,Z
 4216 000a 5181      		ldd r21,Z+1
 4217 000c 4817      		cp r20,r24
 4218 000e 5907      		cpc r21,r25
 4219 0010 01F0      		breq .L268
 4220               	.LVL256:
 4221 0012 2F5F      		subi r18,-1
 4222 0014 3F4F      		sbci r19,-1
 4223               	.LVL257:
 4224 0016 3896      		adiw r30,8
 383:../pong.c     **** 		if(nearBots[i].id==id){
 4225               		.loc 2 383 0 discriminator 2
 4226 0018 2C30      		cpi r18,12
 4227 001a 3105      		cpc r19,__zero_reg__
 4228 001c 01F4      		brne .L266
 4229               	.LBE211:
 388:../pong.c     **** }
 4230               		.loc 2 388 0
 4231 001e 80E0      		ldi r24,0
 4232 0020 90E0      		ldi r25,0
 4233               	.LVL258:
 389:../pong.c     **** 
 4234               		.loc 2 389 0
 4235 0022 0895      		ret
 4236               	.LVL259:
 4237               	.L268:
 4238               	.LBB212:
 385:../pong.c     **** 		}
 4239               		.loc 2 385 0
 4240 0024 C901      		movw r24,r18
 4241               	.LVL260:
 4242 0026 880F      		lsl r24
 4243 0028 991F      		rol r25
 4244 002a 880F      		lsl r24
 4245 002c 991F      		rol r25
 4246 002e 880F      		lsl r24
 4247 0030 991F      		rol r25
 4248               	.LVL261:
 4249 0032 8050      		subi r24,lo8(-(nearBots))
 4250 0034 9040      		sbci r25,hi8(-(nearBots))
 4251 0036 0895      		ret
 4252               	.LBE212:
 4253               		.cfi_endproc
 4254               	.LFE90:
 4256               		.section	.text.findAndRemoveOtherBot,"ax",@progbits
 4257               	.global	findAndRemoveOtherBot
 4259               	findAndRemoveOtherBot:
 4260               	.LFB91:
 391:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 4261               		.loc 2 391 0
 4262               		.cfi_startproc
 4263               	.LVL262:
 4264               	/* prologue: function */
 4265               	/* frame size = 0 */
 4266               	/* stack size = 0 */
 4267               	.L__stack_usage = 0
 4268 0000 E0E0      		ldi r30,lo8(nearBots+6)
 4269 0002 F0E0      		ldi r31,hi8(nearBots+6)
 391:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 4270               		.loc 2 391 0
 4271 0004 20E0      		ldi r18,0
 4272 0006 30E0      		ldi r19,0
 4273               	.LVL263:
 4274               	.L272:
 4275               	.LBB213:
 393:../pong.c     **** 			cleanOtherBot(&nearBots[i]);
 4276               		.loc 2 393 0
 4277 0008 4081      		ld r20,Z
 4278 000a 5181      		ldd r21,Z+1
 4279 000c 4817      		cp r20,r24
 4280 000e 5907      		cpc r21,r25
 4281 0010 01F0      		breq .L274
 4282               	.LVL264:
 4283 0012 2F5F      		subi r18,-1
 4284 0014 3F4F      		sbci r19,-1
 4285               	.LVL265:
 4286 0016 3896      		adiw r30,8
 392:../pong.c     **** 		if(nearBots[i].id==id){
 4287               		.loc 2 392 0 discriminator 2
 4288 0018 2C30      		cpi r18,12
 4289 001a 3105      		cpc r19,__zero_reg__
 4290 001c 01F4      		brne .L272
 4291 001e 0895      		ret
 4292               	.L274:
 4293               	.LVL266:
 4294               	.LBB214:
 4295               	.LBB215:
 427:../pong.c     **** 	other->pos.y = UNDF;
 4296               		.loc 2 427 0
 4297 0020 220F      		lsl r18
 4298 0022 331F      		rol r19
 4299 0024 220F      		lsl r18
 4300 0026 331F      		rol r19
 4301 0028 220F      		lsl r18
 4302 002a 331F      		rol r19
 4303               	.LVL267:
 4304 002c F901      		movw r30,r18
 4305 002e E050      		subi r30,lo8(-(nearBots))
 4306 0030 F040      		sbci r31,hi8(-(nearBots))
 4307               	.LVL268:
 4308 0032 80E0      		ldi r24,0
 4309 0034 90E8      		ldi r25,lo8(-128)
 4310 0036 8083      		st Z,r24
 4311 0038 9183      		std Z+1,r25
 428:../pong.c     **** 	other->pos.o = UNDF;
 4312               		.loc 2 428 0
 4313 003a 8283      		std Z+2,r24
 4314 003c 9383      		std Z+3,r25
 429:../pong.c     **** 	other->id = 0;
 4315               		.loc 2 429 0
 4316 003e 8483      		std Z+4,r24
 4317 0040 9583      		std Z+5,r25
 4318               		.loc 2 430 0
 4319 0042 1682      		std Z+6,__zero_reg__
 4320 0044 1782      		std Z+7,__zero_reg__
 4321 0046 0895      		ret
 4322               	.LBE215:
 4323               	.LBE214:
 4324               	.LBE213:
 4325               		.cfi_endproc
 4326               	.LFE91:
 4328               		.section	.text.removeOtherBot,"ax",@progbits
 4329               	.global	removeOtherBot
 4331               	removeOtherBot:
 4332               	.LFB92:
 400:../pong.c     **** 	cleanOtherBot(&nearBots[idx]);
 4333               		.loc 2 400 0
 4334               		.cfi_startproc
 4335               	.LVL269:
 4336               	/* prologue: function */
 4337               	/* frame size = 0 */
 4338               	/* stack size = 0 */
 4339               	.L__stack_usage = 0
 4340               	.LBB216:
 4341               	.LBB217:
 427:../pong.c     **** 	other->pos.y = UNDF;
 4342               		.loc 2 427 0
 4343 0000 28E0      		ldi r18,lo8(8)
 4344 0002 829F      		mul r24,r18
 4345 0004 C001      		movw r24,r0
 4346 0006 1124      		clr __zero_reg__
 4347               	.LVL270:
 4348 0008 FC01      		movw r30,r24
 4349 000a E050      		subi r30,lo8(-(nearBots))
 4350 000c F040      		sbci r31,hi8(-(nearBots))
 4351 000e 80E0      		ldi r24,0
 4352 0010 90E8      		ldi r25,lo8(-128)
 4353 0012 8083      		st Z,r24
 4354 0014 9183      		std Z+1,r25
 428:../pong.c     **** 	other->pos.o = UNDF;
 4355               		.loc 2 428 0
 4356 0016 8283      		std Z+2,r24
 4357 0018 9383      		std Z+3,r25
 429:../pong.c     **** 	other->id = 0;
 4358               		.loc 2 429 0
 4359 001a 8483      		std Z+4,r24
 4360 001c 9583      		std Z+5,r25
 4361               		.loc 2 430 0
 4362 001e 1682      		std Z+6,__zero_reg__
 4363 0020 1782      		std Z+7,__zero_reg__
 4364               	.LVL271:
 4365 0022 0895      		ret
 4366               	.LBE217:
 4367               	.LBE216:
 4368               		.cfi_endproc
 4369               	.LFE92:
 4371               		.section	.text.addOtherBot,"ax",@progbits
 4372               	.global	addOtherBot
 4374               	addOtherBot:
 4375               	.LFB93:
 404:../pong.c     **** 	uint8_t emptyIdx=0xFF;
 4376               		.loc 2 404 0
 4377               		.cfi_startproc
 4378               	.LVL272:
 4379 0000 CF93      		push r28
 4380               	.LCFI224:
 4381               		.cfi_def_cfa_offset 4
 4382               		.cfi_offset 28, -3
 4383 0002 DF93      		push r29
 4384               	.LCFI225:
 4385               		.cfi_def_cfa_offset 5
 4386               		.cfi_offset 29, -4
 4387               	/* prologue: function */
 4388               	/* frame size = 0 */
 4389               	/* stack size = 2 */
 4390               	.L__stack_usage = 2
 4391 0004 EC01      		movw r28,r24
 4392               	.LVL273:
 406:../pong.c     **** 	for(uint8_t i=0;i<NUM_TRACKED_BOTS;i++){
 4393               		.loc 2 406 0
 4394 0006 20E0      		ldi r18,lo8(gs(nearBotsDistCmp))
 4395 0008 30E0      		ldi r19,hi8(gs(nearBotsDistCmp))
 4396 000a 48E0      		ldi r20,lo8(8)
 4397 000c 50E0      		ldi r21,0
 4398 000e 6DE0      		ldi r22,lo8(13)
 4399 0010 70E0      		ldi r23,0
 4400 0012 80E0      		ldi r24,lo8(nearBots)
 4401 0014 90E0      		ldi r25,hi8(nearBots)
 4402               	.LVL274:
 4403 0016 0E94 0000 		call qsort
 4404               	.LVL275:
 4405 001a E0E0      		ldi r30,lo8(nearBots+6)
 4406 001c F0E0      		ldi r31,hi8(nearBots+6)
 4407 001e 80E0      		ldi r24,0
 4408 0020 90E0      		ldi r25,0
 405:../pong.c     **** 	qsort(nearBots, NUM_TRACKED_BOTS+1, sizeof(OtherBot), nearBotsDistCmp);
 4409               		.loc 2 405 0
 4410 0022 4FEF      		ldi r20,lo8(-1)
 4411 0024 00C0      		rjmp .L280
 4412               	.LVL276:
 4413               	.L279:
 4414 0026 0196      		adiw r24,1
 4415               	.LVL277:
 4416 0028 3896      		adiw r30,8
 4417               	.LBB218:
 407:../pong.c     **** 		if(nearBots[i].id==id){
 4418               		.loc 2 407 0 discriminator 2
 4419 002a 8C30      		cpi r24,12
 4420 002c 9105      		cpc r25,__zero_reg__
 4421 002e 01F0      		breq .L284
 4422               	.LVL278:
 4423               	.L280:
 408:../pong.c     **** 			return &(nearBots[i]);
 4424               		.loc 2 408 0
 4425 0030 2081      		ld r18,Z
 4426 0032 3181      		ldd r19,Z+1
 4427 0034 2C17      		cp r18,r28
 4428 0036 3D07      		cpc r19,r29
 4429 0038 01F0      		breq .L283
 411:../pong.c     **** 			emptyIdx=i;
 4430               		.loc 2 411 0
 4431 003a 4F3F      		cpi r20,lo8(-1)
 4432 003c 01F4      		brne .L279
 411:../pong.c     **** 			emptyIdx=i;
 4433               		.loc 2 411 0 is_stmt 0 discriminator 1
 4434 003e 232B      		or r18,r19
 4435 0040 01F4      		brne .L279
 411:../pong.c     **** 			emptyIdx=i;
 4436               		.loc 2 411 0
 4437 0042 482F      		mov r20,r24
 4438               	.LVL279:
 4439 0044 0196      		adiw r24,1
 4440               	.LVL280:
 4441 0046 3896      		adiw r30,8
 407:../pong.c     **** 		if(nearBots[i].id==id){
 4442               		.loc 2 407 0 is_stmt 1
 4443 0048 8C30      		cpi r24,12
 4444 004a 9105      		cpc r25,__zero_reg__
 4445 004c 01F4      		brne .L280
 4446               	.LVL281:
 4447               	.L284:
 4448               	.LBE218:
 416:../pong.c     **** 		return &(nearBots[emptyIdx]);
 4449               		.loc 2 416 0
 4450 004e 4F3F      		cpi r20,lo8(-1)
 4451 0050 01F0      		breq .L281
 417:../pong.c     **** 	}
 4452               		.loc 2 417 0
 4453 0052 842F      		mov r24,r20
 4454 0054 90E0      		ldi r25,0
 4455               	.L283:
 4456 0056 880F      		lsl r24
 4457 0058 991F      		rol r25
 4458 005a 880F      		lsl r24
 4459 005c 991F      		rol r25
 4460 005e 880F      		lsl r24
 4461 0060 991F      		rol r25
 4462 0062 8050      		subi r24,lo8(-(nearBots))
 4463 0064 9040      		sbci r25,hi8(-(nearBots))
 4464               	/* epilogue start */
 423:../pong.c     **** 
 4465               		.loc 2 423 0
 4466 0066 DF91      		pop r29
 4467 0068 CF91      		pop r28
 4468               	.LVL282:
 4469 006a 0895      		ret
 4470               	.LVL283:
 4471               	.L281:
 4472               	.LBB219:
 4473               	.LBB220:
 427:../pong.c     **** 	other->pos.y = UNDF;
 4474               		.loc 2 427 0
 4475 006c 80E0      		ldi r24,0
 4476 006e 90E8      		ldi r25,lo8(-128)
 4477 0070 8093 0000 		sts nearBots+96,r24
 4478 0074 9093 0000 		sts nearBots+96+1,r25
 428:../pong.c     **** 	other->pos.o = UNDF;
 4479               		.loc 2 428 0
 4480 0078 8093 0000 		sts nearBots+98,r24
 4481 007c 9093 0000 		sts nearBots+98+1,r25
 429:../pong.c     **** 	other->id = 0;
 4482               		.loc 2 429 0
 4483 0080 8093 0000 		sts nearBots+100,r24
 4484 0084 9093 0000 		sts nearBots+100+1,r25
 4485               		.loc 2 430 0
 4486 0088 1092 0000 		sts nearBots+102,__zero_reg__
 4487 008c 1092 0000 		sts nearBots+102+1,__zero_reg__
 4488               	.LVL284:
 4489               	.LBE220:
 4490               	.LBE219:
 422:../pong.c     **** }
 4491               		.loc 2 422 0
 4492 0090 80E0      		ldi r24,lo8(nearBots+96)
 4493 0092 90E0      		ldi r25,hi8(nearBots+96)
 4494               	/* epilogue start */
 423:../pong.c     **** 
 4495               		.loc 2 423 0
 4496 0094 DF91      		pop r29
 4497 0096 CF91      		pop r28
 4498               	.LVL285:
 4499 0098 0895      		ret
 4500               		.cfi_endproc
 4501               	.LFE93:
 4503               		.section	.text.cleanOtherBot,"ax",@progbits
 4504               	.global	cleanOtherBot
 4506               	cleanOtherBot:
 4507               	.LFB94:
 425:../pong.c     **** 	if(other==NULL) return;
 4508               		.loc 2 425 0
 4509               		.cfi_startproc
 4510               	.LVL286:
 4511               	/* prologue: function */
 4512               	/* frame size = 0 */
 4513               	/* stack size = 0 */
 4514               	.L__stack_usage = 0
 4515 0000 FC01      		movw r30,r24
 426:../pong.c     **** 	other->pos.x = UNDF;
 4516               		.loc 2 426 0
 4517 0002 892B      		or r24,r25
 4518 0004 01F0      		breq .L285
 427:../pong.c     **** 	other->pos.y = UNDF;
 4519               		.loc 2 427 0
 4520 0006 80E0      		ldi r24,0
 4521 0008 90E8      		ldi r25,lo8(-128)
 4522               	.LVL287:
 4523 000a 8083      		st Z,r24
 4524 000c 9183      		std Z+1,r25
 428:../pong.c     **** 	other->pos.o = UNDF;
 4525               		.loc 2 428 0
 4526 000e 8283      		std Z+2,r24
 4527 0010 9383      		std Z+3,r25
 429:../pong.c     **** 	other->id = 0;
 4528               		.loc 2 429 0
 4529 0012 8483      		std Z+4,r24
 4530 0014 9583      		std Z+5,r25
 4531               		.loc 2 430 0
 4532 0016 1682      		std Z+6,__zero_reg__
 4533 0018 1782      		std Z+7,__zero_reg__
 4534               	.L285:
 4535 001a 0895      		ret
 4536               		.cfi_endproc
 4537               	.LFE94:
 4539               		.section	.rodata.str1.1
 4540               	.LC9:
 4541 006b 676F 7420 		.string	"got ball command. velocity: %hd\r\n"
 4541      6261 6C6C 
 4541      2063 6F6D 
 4541      6D61 6E64 
 4541      2E20 7665 
 4542               	.LC10:
 4543 008d 676F 7420 		.string	"got ball command, but i don't know where i am yet.\r"
 4543      6261 6C6C 
 4543      2063 6F6D 
 4543      6D61 6E64 
 4543      2C20 6275 
 4544               		.section	.text.user_handle_command,"ax",@progbits
 4545               	.global	user_handle_command
 4547               	user_handle_command:
 4548               	.LFB95:
 431:../pong.c     **** }
 432:../pong.c     **** 
 433:../pong.c     **** /*
 434:../pong.c     ****  *	the function below is optional - commenting it in can be useful for debugging if you want to que
 435:../pong.c     ****  *	user variables over a serial connection.
 436:../pong.c     ****  */
 437:../pong.c     **** uint8_t user_handle_command(char* command_word, char* command_args){
 4549               		.loc 2 437 0
 4550               		.cfi_startproc
 4551               	.LVL288:
 4552 0000 4F92      		push r4
 4553               	.LCFI226:
 4554               		.cfi_def_cfa_offset 4
 4555               		.cfi_offset 4, -3
 4556 0002 5F92      		push r5
 4557               	.LCFI227:
 4558               		.cfi_def_cfa_offset 5
 4559               		.cfi_offset 5, -4
 4560 0004 6F92      		push r6
 4561               	.LCFI228:
 4562               		.cfi_def_cfa_offset 6
 4563               		.cfi_offset 6, -5
 4564 0006 7F92      		push r7
 4565               	.LCFI229:
 4566               		.cfi_def_cfa_offset 7
 4567               		.cfi_offset 7, -6
 4568 0008 8F92      		push r8
 4569               	.LCFI230:
 4570               		.cfi_def_cfa_offset 8
 4571               		.cfi_offset 8, -7
 4572 000a 9F92      		push r9
 4573               	.LCFI231:
 4574               		.cfi_def_cfa_offset 9
 4575               		.cfi_offset 9, -8
 4576 000c AF92      		push r10
 4577               	.LCFI232:
 4578               		.cfi_def_cfa_offset 10
 4579               		.cfi_offset 10, -9
 4580 000e BF92      		push r11
 4581               	.LCFI233:
 4582               		.cfi_def_cfa_offset 11
 4583               		.cfi_offset 11, -10
 4584 0010 CF92      		push r12
 4585               	.LCFI234:
 4586               		.cfi_def_cfa_offset 12
 4587               		.cfi_offset 12, -11
 4588 0012 DF92      		push r13
 4589               	.LCFI235:
 4590               		.cfi_def_cfa_offset 13
 4591               		.cfi_offset 13, -12
 4592 0014 EF92      		push r14
 4593               	.LCFI236:
 4594               		.cfi_def_cfa_offset 14
 4595               		.cfi_offset 14, -13
 4596 0016 FF92      		push r15
 4597               	.LCFI237:
 4598               		.cfi_def_cfa_offset 15
 4599               		.cfi_offset 15, -14
 4600 0018 0F93      		push r16
 4601               	.LCFI238:
 4602               		.cfi_def_cfa_offset 16
 4603               		.cfi_offset 16, -15
 4604 001a 1F93      		push r17
 4605               	.LCFI239:
 4606               		.cfi_def_cfa_offset 17
 4607               		.cfi_offset 17, -16
 4608 001c CF93      		push r28
 4609               	.LCFI240:
 4610               		.cfi_def_cfa_offset 18
 4611               		.cfi_offset 28, -17
 4612 001e DF93      		push r29
 4613               	.LCFI241:
 4614               		.cfi_def_cfa_offset 19
 4615               		.cfi_offset 29, -18
 4616 0020 1F92      		push __zero_reg__
 4617 0022 1F92      		push __zero_reg__
 4618               	.LCFI242:
 4619               		.cfi_def_cfa_offset 21
 4620 0024 CDB7      		in r28,__SP_L__
 4621 0026 DEB7      		in r29,__SP_H__
 4622               	.LCFI243:
 4623               		.cfi_def_cfa_register 28
 4624               	/* prologue: function */
 4625               	/* frame size = 2 */
 4626               	/* stack size = 18 */
 4627               	.L__stack_usage = 18
 4628 0028 8C01      		movw r16,r24
 4629 002a 7B01      		movw r14,r22
 438:../pong.c     **** 	if(strcmp_P(command_word,PSTR("ball"))==0){
 4630               		.loc 2 438 0
 4631 002c 60E0      		ldi r22,lo8(__c.5742)
 4632 002e 70E0      		ldi r23,hi8(__c.5742)
 4633               	.LVL289:
 4634 0030 0E94 0000 		call strcmp_P
 4635               	.LVL290:
 4636 0034 892B      		or r24,r25
 4637 0036 01F0      		breq .+2
 4638 0038 00C0      		rjmp .L291
 439:../pong.c     **** 		if(POS_DEFINED(&myPos)){
 4639               		.loc 2 439 0
 4640 003a 8091 0000 		lds r24,myPos
 4641 003e 9091 0000 		lds r25,myPos+1
 4642 0042 8115      		cp r24,__zero_reg__
 4643 0044 9048      		sbci r25,-128
 4644 0046 01F4      		brne .+2
 4645 0048 00C0      		rjmp .L292
 4646               		.loc 2 439 0 is_stmt 0 discriminator 1
 4647 004a 8091 0000 		lds r24,myPos+2
 4648 004e 9091 0000 		lds r25,myPos+2+1
 4649 0052 8115      		cp r24,__zero_reg__
 4650 0054 9048      		sbci r25,-128
 4651 0056 01F4      		brne .+2
 4652 0058 00C0      		rjmp .L292
 4653               		.loc 2 439 0 discriminator 2
 4654 005a 8091 0000 		lds r24,myPos+4
 4655 005e 9091 0000 		lds r25,myPos+4+1
 4656 0062 8115      		cp r24,__zero_reg__
 4657 0064 9048      		sbci r25,-128
 4658 0066 01F4      		brne .+2
 4659 0068 00C0      		rjmp .L292
 4660               	.LBB221:
 440:../pong.c     **** 			const char delim[2] = " ";
 4661               		.loc 2 440 0 is_stmt 1
 4662 006a 80E2      		ldi r24,lo8(32)
 4663 006c 90E0      		ldi r25,0
 4664 006e 8983      		std Y+1,r24
 4665 0070 9A83      		std Y+2,r25
 441:../pong.c     **** 			char* token = strtok(command_args, delim);
 4666               		.loc 2 441 0
 4667 0072 BE01      		movw r22,r28
 4668 0074 6F5F      		subi r22,-1
 4669 0076 7F4F      		sbci r23,-1
 4670 0078 C701      		movw r24,r14
 4671 007a 0E94 0000 		call strtok
 4672               	.LVL291:
 442:../pong.c     **** 			int8_t vel = (token!=NULL) ? (int8_t)atoi(token) : 10;
 4673               		.loc 2 442 0
 4674 007e 0097      		sbiw r24,0
 4675 0080 01F4      		brne .+2
 4676 0082 00C0      		rjmp .L309
 4677               		.loc 2 442 0 is_stmt 0 discriminator 1
 4678 0084 0E94 0000 		call atoi
 4679               	.LVL292:
 4680 0088 D82E      		mov r13,r24
 4681 008a E82E      		mov r14,r24
 4682 008c 880F      		lsl r24
 4683 008e FF08      		sbc r15,r15
 4684               	.LVL293:
 4685               	.L293:
 443:../pong.c     **** 			token = strtok(NULL, delim);
 4686               		.loc 2 443 0 is_stmt 1 discriminator 4
 4687 0090 BE01      		movw r22,r28
 4688 0092 6F5F      		subi r22,-1
 4689 0094 7F4F      		sbci r23,-1
 4690 0096 80E0      		ldi r24,0
 4691 0098 90E0      		ldi r25,0
 4692 009a 0E94 0000 		call strtok
 4693               	.LVL294:
 444:../pong.c     **** 			uint8_t size = (token!=NULL) ? (uint8_t)atoi(token) : 60;
 4694               		.loc 2 444 0 discriminator 4
 4695 009e 0097      		sbiw r24,0
 4696 00a0 01F4      		brne .+2
 4697 00a2 00C0      		rjmp .L310
 4698               		.loc 2 444 0 is_stmt 0 discriminator 1
 4699 00a4 0E94 0000 		call atoi
 4700               	.LVL295:
 4701 00a8 8C7F      		andi r24,lo8(-4)
 4702 00aa C82E      		mov r12,r24
 4703               	.L294:
 445:../pong.c     **** 			theBall.xPos = myPos.x;
 4704               		.loc 2 445 0 is_stmt 1 discriminator 4
 4705 00ac 8091 0000 		lds r24,myPos
 4706 00b0 9091 0000 		lds r25,myPos+1
 4707 00b4 8093 0000 		sts theBall+4,r24
 4708 00b8 9093 0000 		sts theBall+4+1,r25
 446:../pong.c     **** 			theBall.yPos = myPos.y;
 4709               		.loc 2 446 0 discriminator 4
 4710 00bc 8091 0000 		lds r24,myPos+2
 4711 00c0 9091 0000 		lds r25,myPos+2+1
 4712 00c4 8093 0000 		sts theBall+6,r24
 4713 00c8 9093 0000 		sts theBall+6+1,r25
 447:../pong.c     **** 			int16_t randomdir = rand_short()%360;
 4714               		.loc 2 447 0 discriminator 4
 4715 00cc 0E94 0000 		call rand_short
 4716               	.LVL296:
 4717 00d0 8C01      		movw r16,r24
 4718               	.LVL297:
 448:../pong.c     **** 			theBall.xVel = vel*cos(deg_to_rad(randomdir));
 4719               		.loc 2 448 0 discriminator 4
 4720 00d2 6D2D      		mov r22,r13
 4721 00d4 DD0C      		lsl r13
 4722 00d6 770B      		sbc r23,r23
 4723 00d8 880B      		sbc r24,r24
 4724 00da 990B      		sbc r25,r25
 4725 00dc 0E94 0000 		call __floatsisf
 4726               	.LVL298:
 4727 00e0 4B01      		movw r8,r22
 4728 00e2 5C01      		movw r10,r24
 4729               	.LVL299:
 4730               	.LBB222:
 4731               	.LBB223:
  75:../include/range_algs.h **** }
  76:../include/range_algs.h **** 
  77:../include/range_algs.h **** inline float rad_to_deg(float rad){
  78:../include/range_algs.h **** 	return (pretty_angle(rad) / M_PI) * 180;
  79:../include/range_algs.h **** }
  80:../include/range_algs.h **** 
  81:../include/range_algs.h **** inline float deg_to_rad(float deg){
  82:../include/range_algs.h **** 	return pretty_angle( (deg / 180) * M_PI );
 4732               		.loc 3 82 0 discriminator 4
 4733 00e4 9801      		movw r18,r16
 4734 00e6 A3E8      		ldi r26,lo8(-125)
 4735 00e8 BDE2      		ldi r27,lo8(45)
 4736 00ea 0E94 0000 		call __umulhisi3
 4737 00ee 0024      		clr __tmp_reg__
 4738 00f0 880F      		lsl r24
 4739 00f2 991F      		rol r25
 4740 00f4 001C      		rol __tmp_reg__
 4741 00f6 880F      		lsl r24
 4742 00f8 991F      		rol r25
 4743 00fa 001C      		rol __tmp_reg__
 4744 00fc 892F      		mov r24,r25
 4745 00fe 902D      		mov r25,__tmp_reg__
 4746 0100 48E6      		ldi r20,lo8(104)
 4747 0102 51E0      		ldi r21,lo8(1)
 4748 0104 849F      		mul r24,r20
 4749 0106 9001      		movw r18,r0
 4750 0108 859F      		mul r24,r21
 4751 010a 300D      		add r19,r0
 4752 010c 949F      		mul r25,r20
 4753 010e 300D      		add r19,r0
 4754 0110 1124      		clr r1
 4755 0112 B801      		movw r22,r16
 4756 0114 621B      		sub r22,r18
 4757 0116 730B      		sbc r23,r19
 4758 0118 072E      		mov __tmp_reg__,r23
 4759 011a 000C      		lsl r0
 4760 011c 880B      		sbc r24,r24
 4761 011e 990B      		sbc r25,r25
 4762 0120 0E94 0000 		call __floatsisf
 4763               	.LVL300:
 4764 0124 20E0      		ldi r18,0
 4765 0126 30E0      		ldi r19,0
 4766 0128 44E3      		ldi r20,lo8(52)
 4767 012a 53E4      		ldi r21,lo8(67)
 4768 012c 0E94 0000 		call __divsf3
 4769               	.LVL301:
 4770 0130 2BED      		ldi r18,lo8(-37)
 4771 0132 3FE0      		ldi r19,lo8(15)
 4772 0134 49E4      		ldi r20,lo8(73)
 4773 0136 50E4      		ldi r21,lo8(64)
 4774 0138 0E94 0000 		call __mulsf3
 4775               	.LVL302:
 4776 013c 2B01      		movw r4,r22
 4777 013e 3C01      		movw r6,r24
 4778               	.LVL303:
 4779               	.LBB224:
 4780               	.LBB225:
  74:../include/range_algs.h **** }
 4781               		.loc 3 74 0 discriminator 4
 4782 0140 20E0      		ldi r18,0
 4783 0142 30E0      		ldi r19,0
 4784 0144 A901      		movw r20,r18
 4785 0146 0E94 0000 		call __gesf2
 4786               	.LVL304:
 4787 014a 2BED      		ldi r18,lo8(-37)
 4788 014c 3FE0      		ldi r19,lo8(15)
 4789 014e 49E4      		ldi r20,lo8(73)
 4790 0150 50E4      		ldi r21,lo8(64)
 4791 0152 87FD      		sbrc r24,7
 4792 0154 00C0      		rjmp .L323
  74:../include/range_algs.h **** }
 4793               		.loc 3 74 0 is_stmt 0
 4794 0156 C301      		movw r24,r6
 4795 0158 B201      		movw r22,r4
 4796 015a 0E94 0000 		call __addsf3
 4797               	.LVL305:
 4798 015e 2BED      		ldi r18,lo8(-37)
 4799 0160 3FE0      		ldi r19,lo8(15)
 4800 0162 49EC      		ldi r20,lo8(-55)
 4801 0164 50E4      		ldi r21,lo8(64)
 4802 0166 0E94 0000 		call fmod
 4803               	.LVL306:
 4804 016a 2BED      		ldi r18,lo8(-37)
 4805 016c 3FE0      		ldi r19,lo8(15)
 4806 016e 49E4      		ldi r20,lo8(73)
 4807 0170 50E4      		ldi r21,lo8(64)
 4808 0172 0E94 0000 		call __subsf3
 4809               	.LVL307:
 4810               	.L326:
 4811 0176 2B01      		movw r4,r22
 4812 0178 3C01      		movw r6,r24
 4813               	.LVL308:
 4814               	.LBE225:
 4815               	.LBE224:
 4816               	.LBE223:
 4817               	.LBE222:
 4818               		.loc 2 448 0 is_stmt 1
 4819 017a 0E94 0000 		call cos
 4820               	.LVL309:
 4821 017e 9B01      		movw r18,r22
 4822 0180 AC01      		movw r20,r24
 4823 0182 C501      		movw r24,r10
 4824 0184 B401      		movw r22,r8
 4825 0186 0E94 0000 		call __mulsf3
 4826               	.LVL310:
 4827 018a 0E94 0000 		call __fixsfsi
 4828               	.LVL311:
 4829 018e 6093 0000 		sts theBall+8,r22
 4830               	.LVL312:
 449:../pong.c     **** 			theBall.yVel = vel*sin(deg_to_rad(randomdir));
 4831               		.loc 2 449 0
 4832 0192 C301      		movw r24,r6
 4833 0194 B201      		movw r22,r4
 4834 0196 0E94 0000 		call sin
 4835               	.LVL313:
 4836 019a 9B01      		movw r18,r22
 4837 019c AC01      		movw r20,r24
 4838 019e C501      		movw r24,r10
 4839 01a0 B401      		movw r22,r8
 4840 01a2 0E94 0000 		call __mulsf3
 4841               	.LVL314:
 4842 01a6 0E94 0000 		call __fixsfsi
 4843               	.LVL315:
 4844 01aa 6093 0000 		sts theBall+9,r22
 450:../pong.c     **** 			theBall.id = 1;
 4845               		.loc 2 450 0
 4846 01ae 81E0      		ldi r24,lo8(1)
 4847 01b0 8093 0000 		sts theBall+10,r24
 451:../pong.c     **** 			theBall.radius = size&0xfc;
 4848               		.loc 2 451 0
 4849 01b4 C092 0000 		sts theBall+11,r12
 452:../pong.c     **** 			theBall.lastUpdate = get_time();
 4850               		.loc 2 452 0
 4851 01b8 0E94 0000 		call get_time
 4852               	.LVL316:
 4853 01bc 6093 0000 		sts theBall,r22
 4854 01c0 7093 0000 		sts theBall+1,r23
 4855 01c4 8093 0000 		sts theBall+2,r24
 4856 01c8 9093 0000 		sts theBall+3,r25
 453:../pong.c     **** 			printf("got ball command. velocity: %hd\r\n", vel);
 4857               		.loc 2 453 0
 4858 01cc FF92      		push r15
 4859 01ce EF92      		push r14
 4860 01d0 80E0      		ldi r24,lo8(.LC9)
 4861 01d2 90E0      		ldi r25,hi8(.LC9)
 4862 01d4 9F93      		push r25
 4863 01d6 8F93      		push r24
 4864 01d8 0E94 0000 		call printf
 4865               	.LVL317:
 4866               	.LBE221:
 439:../pong.c     **** 			const char delim[2] = " ";
 4867               		.loc 2 439 0
 4868 01dc 0F90      		pop __tmp_reg__
 4869 01de 0F90      		pop __tmp_reg__
 4870 01e0 0F90      		pop __tmp_reg__
 4871 01e2 0F90      		pop __tmp_reg__
 454:../pong.c     **** 		}else{
 455:../pong.c     **** 			uint8_t r = get_red_led();
 456:../pong.c     **** 			set_red_led(255);
 457:../pong.c     **** 			printf("got ball command, but i don't know where i am yet.\r\n");
 458:../pong.c     **** 			set_red_led(r);
 459:../pong.c     **** 		}
 460:../pong.c     **** 		return 1;
 4872               		.loc 2 460 0
 4873 01e4 81E0      		ldi r24,lo8(1)
 439:../pong.c     **** 			const char delim[2] = " ";
 4874               		.loc 2 439 0
 4875 01e6 00C0      		rjmp .L300
 4876               	.LVL318:
 4877               	.L291:
 461:../pong.c     **** 	}else if(strcmp_P(command_word,PSTR("mode"))==0){
 4878               		.loc 2 461 0
 4879 01e8 60E0      		ldi r22,lo8(__c.5750)
 4880 01ea 70E0      		ldi r23,hi8(__c.5750)
 4881 01ec C801      		movw r24,r16
 4882 01ee 0E94 0000 		call strcmp_P
 4883               	.LVL319:
 4884 01f2 892B      		or r24,r25
 4885 01f4 01F4      		brne .L301
 462:../pong.c     **** 		switch(command_args[0]){
 4886               		.loc 2 462 0
 4887 01f6 F701      		movw r30,r14
 4888 01f8 8081      		ld r24,Z
 4889 01fa 8736      		cpi r24,lo8(103)
 4890 01fc 01F4      		brne .+2
 4891 01fe 00C0      		rjmp .L324
 4892 0200 8037      		cpi r24,lo8(112)
 4893 0202 01F0      		breq .+2
 4894 0204 00C0      		rjmp .L324
 463:../pong.c     **** 			case 'p': colorMode = POS;		break;
 4895               		.loc 2 463 0
 4896 0206 1092 0000 		sts colorMode,__zero_reg__
 4897               	.L305:
 464:../pong.c     **** 			case 'g': colorMode = GAME;		break;
 465:../pong.c     **** 			default:  colorMode = GAME;		break;
 466:../pong.c     **** 		}
 467:../pong.c     **** 		switch(command_args[1]){
 4898               		.loc 2 467 0
 4899 020a F701      		movw r30,r14
 4900 020c 8181      		ldd r24,Z+1
 4901 020e 8236      		cpi r24,lo8(98)
 4902 0210 01F4      		brne .+2
 4903 0212 00C0      		rjmp .L325
 4904 0214 8037      		cpi r24,lo8(112)
 4905 0216 01F0      		breq .+2
 4906 0218 00C0      		rjmp .L325
 468:../pong.c     **** 			case 'p': gameMode = PONG;		break;
 4907               		.loc 2 468 0
 4908 021a 1092 0000 		sts gameMode,__zero_reg__
 469:../pong.c     **** 			case 'b': gameMode = BOUNCE;	break;
 470:../pong.c     **** 			default:  gameMode = BOUNCE;	break;
 471:../pong.c     **** 		}
 472:../pong.c     **** 		return 1;
 4909               		.loc 2 472 0
 4910 021e 81E0      		ldi r24,lo8(1)
 468:../pong.c     **** 			case 'p': gameMode = PONG;		break;
 4911               		.loc 2 468 0
 4912 0220 00C0      		rjmp .L300
 4913               	.L301:
 473:../pong.c     **** 	}else if(strcmp_P(command_word, PSTR("ball_kill"))==0){
 4914               		.loc 2 473 0
 4915 0222 60E0      		ldi r22,lo8(__c.5760)
 4916 0224 70E0      		ldi r23,hi8(__c.5760)
 4917 0226 C801      		movw r24,r16
 4918 0228 0E94 0000 		call strcmp_P
 4919               	.LVL320:
 4920 022c 892B      		or r24,r25
 4921 022e 01F0      		breq .L327
 474:../pong.c     **** 		killBall();
 475:../pong.c     **** 		return 1;
 476:../pong.c     **** 	}
 477:../pong.c     **** 	return 0;
 4922               		.loc 2 477 0
 4923 0230 80E0      		ldi r24,0
 4924 0232 00C0      		rjmp .L300
 4925               	.L292:
 4926               	.LBB230:
 4927               	.LBB231:
 4928               	.LBB232:
 4929               		.file 4 "../include/rgb_led.h"
   1:../include/rgb_led.h **** #pragma once
   2:../include/rgb_led.h **** #include "droplet_base.h"
   3:../include/rgb_led.h **** #include <math.h>
   4:../include/rgb_led.h **** 
   5:../include/rgb_led.h **** #define LED_R_PIN_bm			PIN5_bm
   6:../include/rgb_led.h **** #define LED_G_PIN_bm			PIN4_bm
   7:../include/rgb_led.h **** #define LED_B_PIN_bm			PIN4_bm
   8:../include/rgb_led.h **** 
   9:../include/rgb_led.h **** void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM
  10:../include/rgb_led.h **** 
  11:../include/rgb_led.h **** // Get and set intensity for red LED
  12:../include/rgb_led.h **** inline uint8_t get_red_led(void){ return TCE1.CCBBUF; }
 4930               		.loc 4 12 0
 4931 0234 0091 7A0A 		lds r16,2682
 4932 0238 1091 7B0A 		lds r17,2682+1
 4933               	.LVL321:
 4934               	.LBE232:
 4935               	.LBE231:
 4936               	.LBB233:
 4937               	.LBB234:
  13:../include/rgb_led.h **** inline void set_red_led(uint8_t saturation) { TCE1.CCBBUF = saturation; }
 4938               		.loc 4 13 0
 4939 023c 8FEF      		ldi r24,lo8(-1)
 4940 023e 90E0      		ldi r25,0
 4941 0240 8093 7A0A 		sts 2682,r24
 4942 0244 9093 7B0A 		sts 2682+1,r25
 4943               	.LVL322:
 4944               	.LBE234:
 4945               	.LBE233:
 457:../pong.c     **** 			set_red_led(r);
 4946               		.loc 2 457 0
 4947 0248 80E0      		ldi r24,lo8(.LC10)
 4948 024a 90E0      		ldi r25,hi8(.LC10)
 4949 024c 0E94 0000 		call puts
 4950               	.LVL323:
 4951 0250 1127      		clr r17
 4952               	.LBB235:
 4953               	.LBB236:
 4954               		.loc 4 13 0
 4955 0252 0093 7A0A 		sts 2682,r16
 4956 0256 1093 7B0A 		sts 2682+1,r17
 4957               	.LBE236:
 4958               	.LBE235:
 4959               	.LBE230:
 460:../pong.c     **** 	}else if(strcmp_P(command_word,PSTR("mode"))==0){
 4960               		.loc 2 460 0
 4961 025a 81E0      		ldi r24,lo8(1)
 4962               	.LVL324:
 4963               	.L300:
 4964               	/* epilogue start */
 478:../pong.c     **** }...
 4965               		.loc 2 478 0
 4966 025c 0F90      		pop __tmp_reg__
 4967 025e 0F90      		pop __tmp_reg__
 4968 0260 DF91      		pop r29
 4969 0262 CF91      		pop r28
 4970 0264 1F91      		pop r17
 4971 0266 0F91      		pop r16
 4972 0268 FF90      		pop r15
 4973 026a EF90      		pop r14
 4974 026c DF90      		pop r13
 4975 026e CF90      		pop r12
 4976 0270 BF90      		pop r11
 4977 0272 AF90      		pop r10
 4978 0274 9F90      		pop r9
 4979 0276 8F90      		pop r8
 4980 0278 7F90      		pop r7
 4981 027a 6F90      		pop r6
 4982 027c 5F90      		pop r5
 4983 027e 4F90      		pop r4
 4984 0280 0895      		ret
 4985               	.LVL325:
 4986               	.L327:
 4987               	.LBB237:
 4988               	.LBB238:
 241:../pong.h     **** 	theBall.id = 0x0F;
 4989               		.loc 1 241 0
 4990 0282 40E0      		ldi r20,0
 4991 0284 60E0      		ldi r22,0
 4992 0286 8FEF      		ldi r24,lo8(-1)
 4993 0288 0E94 0000 		call set_rgb
 4994               	.LVL326:
 242:../pong.h     **** }
 4995               		.loc 1 242 0
 4996 028c 8FE0      		ldi r24,lo8(15)
 4997 028e 8093 0000 		sts theBall+10,r24
 4998               	.LBE238:
 4999               	.LBE237:
 475:../pong.c     **** 		return 1;
 5000               		.loc 2 475 0
 5001 0292 81E0      		ldi r24,lo8(1)
 5002 0294 00C0      		rjmp .L300
 5003               	.L324:
 465:../pong.c     **** 			default:  colorMode = GAME;		break;
 5004               		.loc 2 465 0
 5005 0296 81E0      		ldi r24,lo8(1)
 5006 0298 8093 0000 		sts colorMode,r24
 5007 029c 00C0      		rjmp .L305
 5008               	.L325:
 470:../pong.c     **** 			default:  gameMode = BOUNCE;	break;
 5009               		.loc 2 470 0
 5010 029e 81E0      		ldi r24,lo8(1)
 5011 02a0 8093 0000 		sts gameMode,r24
 5012 02a4 00C0      		rjmp .L300
 5013               	.LVL327:
 5014               	.L323:
 5015               	.LBB239:
 5016               	.LBB229:
 5017               	.LBB228:
 5018               	.LBB227:
 5019               	.LBB226:
  74:../include/range_algs.h **** }
 5020               		.loc 3 74 0
 5021 02a6 C301      		movw r24,r6
 5022 02a8 B201      		movw r22,r4
 5023 02aa 0E94 0000 		call __subsf3
 5024               	.LVL328:
 5025 02ae 2BED      		ldi r18,lo8(-37)
 5026 02b0 3FE0      		ldi r19,lo8(15)
 5027 02b2 49EC      		ldi r20,lo8(-55)
 5028 02b4 50E4      		ldi r21,lo8(64)
 5029 02b6 0E94 0000 		call fmod
 5030               	.LVL329:
 5031 02ba 2BED      		ldi r18,lo8(-37)
 5032 02bc 3FE0      		ldi r19,lo8(15)
 5033 02be 49E4      		ldi r20,lo8(73)
 5034 02c0 50E4      		ldi r21,lo8(64)
 5035 02c2 0E94 0000 		call __addsf3
 5036               	.LVL330:
 5037 02c6 00C0      		rjmp .L326
 5038               	.LVL331:
 5039               	.L309:
 5040               	.LBE226:
 5041               	.LBE227:
 5042               	.LBE228:
 5043               	.LBE229:
 5044 02c8 4AE0      		ldi r20,lo8(10)
 5045 02ca E42E      		mov r14,r20
 5046 02cc F12C      		mov r15,__zero_reg__
 5047               	.LVL332:
 442:../pong.c     **** 			int8_t vel = (token!=NULL) ? (int8_t)atoi(token) : 10;
 5048               		.loc 2 442 0
 5049 02ce 5AE0      		ldi r21,lo8(10)
 5050 02d0 D52E      		mov r13,r21
 5051 02d2 00C0      		rjmp .L293
 5052               	.LVL333:
 5053               	.L310:
 5054 02d4 3CE3      		ldi r19,lo8(60)
 5055 02d6 C32E      		mov r12,r19
 5056 02d8 00C0      		rjmp .L294
 5057               	.LBE239:
 5058               		.cfi_endproc
 5059               	.LFE95:
 5061               		.section	.progmem.data.__c.5760,"a",@progbits
 5064               	__c.5760:
 5065 0000 6261 6C6C 		.string	"ball_kill"
 5065      5F6B 696C 
 5065      6C00 
 5066               		.section	.progmem.data.__c.5750,"a",@progbits
 5069               	__c.5750:
 5070 0000 6D6F 6465 		.string	"mode"
 5070      00
 5071               		.section	.progmem.data.__c.5742,"a",@progbits
 5074               	__c.5742:
 5075 0000 6261 6C6C 		.string	"ball"
 5075      00
 5076               		.section	.progmem.data.__c.5704,"a",@progbits
 5079               	__c.5704:
 5080 0000 2568 7520 		.string	"%hu byte msg from %04X:\r\n\t"
 5080      6279 7465 
 5080      206D 7367 
 5080      2066 726F 
 5080      6D20 2530 
 5081               		.section	.progmem.data.__c.5614,"a",@progbits
 5084               	__c.5614:
 5085 0000 0942 616C 		.string	"\tBall ID: %hu; radius: %hu; Pos: (%d, %d) @ vel (%hd, %hd)\r\n"
 5085      6C20 4944 
 5085      3A20 2568 
 5085      753B 2072 
 5085      6164 6975 
 5086               		.section	.progmem.data.__c.5612,"a",@progbits
 5089               	__c.5612:
 5090 0000 094D 7920 		.string	"\tMy Pos: {%d, %d, %d}\r\n"
 5090      506F 733A 
 5090      207B 2564 
 5090      2C20 2564 
 5090      2C20 2564 
 5091               		.section	.progmem.data.__c.5610,"a",@progbits
 5094               	__c.5610:
 5095 0000 205D 00   		.string	" ]"
 5096               		.section	.progmem.data.__c.5603,"a",@progbits
 5099               	__c.5603:
 5100 0000 0A49 443A 		.string	"\nID: %04X T: %lu [ "
 5100      2025 3034 
 5100      5820 543A 
 5100      2025 6C75 
 5100      205B 2000 
 5101               		.comm	numNearBots,1,1
 5102               		.comm	loopID,2,1
 5103               		.comm	mySlot,2,1
 5104               		.comm	frameStart,4,1
 5105               		.comm	frameCount,4,1
 5106               		.comm	otherDist,2,1
 5107               		.comm	myDist,2,1
 5108               		.comm	isCovered,1,1
 5109               		.comm	paddleEnd,2,1
 5110               		.comm	paddleStart,2,1
 5111               		.comm	paddleChange,4,1
 5112               		.comm	lastLightCheck,4,1
 5113               		.comm	lastPaddleMsg,4,1
 5114               		.comm	lastBallMsg,4,1
 5115               		.comm	myState,1,1
 5116               		.comm	lastBallID,1,1
 5117               		.comm	hardBotsList,2,1
 5118               		.comm	nearBots,104,1
 5119               		.comm	theBall,12,1
 5120               		.comm	gameMode,1,1
 5121               		.comm	colorMode,1,1
 5122               		.comm	seedFlag,1,1
 5123               		.comm	myPosCovar,12,1
 5124               		.comm	myPos,6,1
 5125               		.comm	mm_per_kilostep,16,1
 5126               		.comm	motor_adjusts,48,1
 5127               		.comm	rnbProcessingFlag,1,1
 5128               		.comm	rnbCmdSentTime,4,1
 5129               		.comm	rnbCmdID,2,1
 5130               		.comm	rnb_updated,1,1
 5131               		.comm	last_good_rnb,8,1
 5132               		.comm	cmd_sender_dir,1,1
 5133               		.comm	cmd_arrival_dir,1,1
 5134               		.comm	cmd_sender_id,2,1
 5135               		.comm	cmd_arrival_time,4,1
 5136               		.comm	user_facing_messages_ovf,1,1
 5137               		.comm	num_waiting_msgs,1,1
 5138               		.comm	hp_ir_block_bm,1,1
 5139               		.comm	msg_node,294,1
 5140               		.comm	ir_rxtx,342,1
 5141               		.comm	obsStart,2,1
 5142               		.comm	curr_ir_power,2,1
 5143               		.comm	twi,2,1
 5144               		.comm	twiMaster,25,1
 5145               		.section	.bss.task_storage_arr,"aw",@nobits
 5148               	task_storage_arr:
 5149 0000 0000 0000 		.zero	140
 5149      0000 0000 
 5149      0000 0000 
 5149      0000 0000 
 5149      0000 0000 
 5150               		.comm	task_executing,1,1
 5151               		.comm	num_tasks,1,1
 5152               		.comm	task_list,2,1
 5153               		.comm	rtc_epoch,2,1
 5154               		.comm	droplet_ID,2,1
 5155               		.text
 5156               	.Letext0:
 5157               		.file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 5158               		.file 6 "C:/Program Files (x86)/Atmel/Studio/7.0/Packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 5159               		.file 7 "../include/droplet_base.h"
 5160               		.file 8 "../include/scheduler.h"
 5161               		.file 9 "../include/i2c.h"
 5162               		.file 10 "../include/firefly_sync.h"
 5163               		.file 11 "../include/ir_comm.h"
 5164               		.file 12 "../include/localization.h"
 5165               		.file 13 "../include/droplet_init.h"
 5166               		.file 14 "../include/ir_led.h"
 5167               		.file 15 "../include/motor.h"
 5168               		.file 16 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5169               		.file 17 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5170               		.file 18 "../include/rgb_sensor.h"
 5171               		.file 19 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5172               		.file 20 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5173               		.file 21 "../include/random.h"
 5174               		.file 22 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5175               		.file 23 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 pong.c
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:2      *ABS*:0000003e __SP_H__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3      *ABS*:0000003d __SP_L__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4      *ABS*:0000003f __SREG__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:6      *ABS*:00000034 __CCP__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:8      *ABS*:00000001 __zero_reg__
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:17     .text.nearBotsBearingCmp:00000000 nearBotsBearingCmp
                            *COM*:00000006 myPos
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:224    .text.nearBotsDistCmp:00000000 nearBotsDistCmp
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:431    .text.sendBotPosMsg:00000000 sendBotPosMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:507    .text.updateBall.part.1:00000000 updateBall.part.1
                            *COM*:0000000c theBall
                            *COM*:00000002 hardBotsList
                            *COM*:00000002 myDist
                            *COM*:00000068 nearBots
                            *COM*:00000002 otherDist
                            *COM*:00000001 gameMode
                            *COM*:00000001 myState
                            *COM*:00000001 isCovered
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:1319   .text.init:00000000 init
                            *COM*:00000002 loopID
                            *COM*:00000004 frameCount
                            *COM*:00000004 frameStart
                            *COM*:00000002 droplet_ID
                            *COM*:00000002 mySlot
                            *COM*:00000001 colorMode
                            *COM*:00000001 lastBallID
                            *COM*:00000004 lastBallMsg
                            *COM*:00000004 lastPaddleMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:1499   .text.getBallCoverage:00000000 getBallCoverage
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:1675   .text.getPaddleCoverage:00000000 getPaddleCoverage
                            *COM*:00000002 paddleStart
                            *COM*:00000002 paddleEnd
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:1848   .text.updateColor:00000000 updateColor
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:2016   .text.updateBall:00000000 updateBall
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:2043   .text.checkLightLevel:00000000 checkLightLevel
                            *COM*:00000004 lastLightCheck
                            *COM*:00000004 paddleChange
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:2259   .text.loop:00000000 loop
                            *COM*:00000001 rnb_updated
                            *COM*:00000008 last_good_rnb
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5099   .progmem.data.__c.5603:00000000 __c.5603
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5094   .progmem.data.__c.5610:00000000 __c.5610
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5089   .progmem.data.__c.5612:00000000 __c.5612
                            *COM*:0000000c myPosCovar
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5084   .progmem.data.__c.5614:00000000 __c.5614
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:2727   .text.updateHardBots:00000000 updateHardBots
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3313   .text.sendBallMsg:00000000 sendBallMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3436   .text.handleBallMsg:00000000 handleBallMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3639   .text.handleBotPosMsg:00000000 handleBotPosMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3706   .text.sendPaddleMsg:00000000 sendPaddleMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3849   .text.handlePaddleMsg:00000000 handlePaddleMsg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:3905   .text.handle_msg:00000000 handle_msg
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5079   .progmem.data.__c.5704:00000000 __c.5704
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4197   .text.getOtherBot:00000000 getOtherBot
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4259   .text.findAndRemoveOtherBot:00000000 findAndRemoveOtherBot
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4331   .text.removeOtherBot:00000000 removeOtherBot
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4374   .text.addOtherBot:00000000 addOtherBot
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4506   .text.cleanOtherBot:00000000 cleanOtherBot
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:4547   .text.user_handle_command:00000000 user_handle_command
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5074   .progmem.data.__c.5742:00000000 __c.5742
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5069   .progmem.data.__c.5750:00000000 __c.5750
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5064   .progmem.data.__c.5760:00000000 __c.5760
                            *COM*:00000001 numNearBots
                            *COM*:00000001 seedFlag
                            *COM*:00000010 mm_per_kilostep
                            *COM*:00000030 motor_adjusts
                            *COM*:00000001 rnbProcessingFlag
                            *COM*:00000004 rnbCmdSentTime
                            *COM*:00000002 rnbCmdID
                            *COM*:00000001 cmd_sender_dir
                            *COM*:00000001 cmd_arrival_dir
                            *COM*:00000002 cmd_sender_id
                            *COM*:00000004 cmd_arrival_time
                            *COM*:00000001 user_facing_messages_ovf
                            *COM*:00000001 num_waiting_msgs
                            *COM*:00000001 hp_ir_block_bm
                            *COM*:00000126 msg_node
                            *COM*:00000156 ir_rxtx
                            *COM*:00000002 obsStart
                            *COM*:00000002 curr_ir_power
                            *COM*:00000002 twi
                            *COM*:00000019 twiMaster
C:\Users\JOHNK~1\AppData\Local\Temp\ccMKHtoh.s:5148   .bss.task_storage_arr:00000000 task_storage_arr
                            *COM*:00000001 task_executing
                            *COM*:00000001 num_tasks
                            *COM*:00000002 task_list
                            *COM*:00000002 rtc_epoch

UNDEFINED SYMBOLS
__floatsisf
__ltsf2
__gtsf2
atan2
hypot
ir_send
__divsf3
__fixsfsi
__fixunssfsi
get_time
__mulshisi3
set_rgb
__divmodhi4
__umulhisi3
printf
set_all_ir_powers
__floatunsisf
__mulsf3
__addsf3
getPosColor
pow
get_rgb
__udivmodsi4
useRNBmeas
delay_ms
broadcast_rnb_data
schedule_task
qsort
printf_P
printPosCovar
puts
__gesf2
__subsf3
cleanHardBots
fmod
addHardBot
handleBotMeasMsg
strcmp_P
strtok
atoi
rand_short
cos
sin
__do_copy_data
__do_clear_bss
